[{"category": "", "categoryclass": "", "imagename": "ba976bbd2ca0580929c377ced3f9e666.jpg", "infoid": 1068683, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8ba9\u60a8\u5fd9\u788c\u7684\u65e5\u5b50\u4e0eAxios Am / PM\u66f4\u7b80\u5355\u3002 \u8d76\u4e0a\u4ec0\u4e48\uff06\uff0339;\u65b0\u7684\uff0c\u4e3a\u4ec0\u4e48\u5b83\u53ea\u662f\u57285\u5206\u949f\u5185\u91cd\u8981\u3002  \u8ba2\u9605AXIOS\u66f4\u63a5\u8fd1\u7684\u6d1e\u5bdf\u6d1e\u5bdf\u65e5\u7684\u5546\u4e1a\u65b0\u95fb\u548c\u8d8b\u52bf\u4ee5\u53ca\u4e3a\u4f55\u91cd\u8981  \u8ba2\u9605Axios Markets\uff0c\u4e86\u89e3\u6700\u65b0\u7684\u5e02\u573a\u8d8b\u52bf\u548c\u7ecf\u6d4e\u6d1e\u5bdf\u529b\u3002 \u514d\u8d39\u6ce8\u518c\u3002  \u8ba8\u8bba\u7edf\u8ba1\u6570\u636e\u548c\u6545\u4e8b\uff0c\u8ba9\u8fd0\u52a8\u4e16\u754c\u4e0eAxios Sports\u3002 \u514d\u8d39\u6ce8\u518c\u3002  \u4ece\u5c71\u8c37\u548cD.C.\u4f7f\u7528Axios\u767b\u5f55\u6765\u5b9e\u73b0\u6211\u4eec\u7684\u667a\u80fd\u6280\u672f\u3002 \u514d\u8d39\u6ce8\u518c\u3002  \u901a\u8fc7Axios Sneak Peek\u83b7\u53d6\u5185\u90e8\u5185\u5e55\u548c\u7b2c39\u9875\u7684\u65b0\u767d\u5bab\u6307\u5357\u3002 \u514d\u8d39\u6ce8\u518c\u3002  \u6bcf\u5929\u6458\u8981\u6700\u91cd\u8981\u7684\u6545\u4e8b\uff0c\u5f71\u54cd\u4f60\u7684\u5bb6\u4e61\u7684\u65a7\u5934\u4e39\u4f5b \n\u83b7\u5f97\u5f71\u54cd\u60a8\u5bb6\u4e61\u7684\u6700\u91cd\u8981\u6545\u4e8b\u7684\u65e5\u5e38\u6458\u8981  \u83b7\u5f97\u6bcf\u5929\u6d88\u5316\u6700\u91cd\u8981\u7684\u6545\u4e8b\uff0c\u5f71\u54cd\u60a8\u7684\u5bb6\u4e61\u7684Axios Twin City  \u83b7\u5f97\u5f71\u54cd\u60a8\u5bb6\u4e61\u7684\u6700\u91cd\u8981\u7684\u6545\u4e8b\u7684\u65e5\u5e38\u6458\u8981\uff0cAxios Tampa Bay  \u6bcf\u5929\u6458\u8981\u6700\u91cd\u8981\u7684\u6545\u4e8b\uff0c\u5f71\u54cd\u60a8\u7684\u5bb6\u4e61\u7684\u590f\u6d1b\u590f\u6d1b\u7279  \u4fdd\u6301\u6700\u65b0\u7684\u6700\u91cd\u8981\u548c\u6700\u6709\u8da3\u7684\u6545\u4e8b\uff0c\u5f71\u54cdNW Arkansas\uff0c\u7531\u5f53\u5730\u8bb0\u8005\u64b0\u5199  \u5fae\u8f6f\u603b\u88c1Brad Smith\u544a\u8bc9Axios\uff0c\u5fae\u8f6f\u8ba1\u5212\u5728\u672a\u6765\u7684\u8d22\u653f\u5e74\u5ea6\u5c06\u5176\u6cd5\u5f8b\u548c\u4f01\u4e1a\u4e8b\u52a1\u5355\u4f4d\u589e\u52a020\uff05\u7684\u8d22\u653f\u5e74\u5ea6\u3002  \u5927\u5c40\uff1a\u53f2\u5bc6\u65af\u5355\u72ec\uff0c\u5fae\u8f6f\u4f5c\u4e3a\u4e00\u5bb6\u516c\u53f8\uff0c\u6709\u8db3\u591f\u7684\u79d1\u6280\u89c4\u5219\u7ecf\u9a8c - \u6700\u91cd\u8981\u7684\u662f\uff0c\u4ece\u5927\u897f\u6d0b\u4e24\u4fa7\u4e0e\u5927\u897f\u6d0b\u4e24\u4fa7\u7684\u76d1\u7ba1\u673a\u6784\u4e89\u593a\u5230\u540e\u671f\u7684\u53cd\u5784\u65ad\u95ee\u9898\uff0c\uff06\uff0339; 90\u5e74\u4ee3 \u3002 \n\u53f2\u5bc6\u65af\u8868\u793a\uff0c\u62db\u8058\u72c2\u6b22\u5c06\u7ee7\u7eed\u8d85\u8d8a\u5f53\u524d\u7684\u8d22\u653f\u5e74\u5ea6\uff0c\u8be5\u8d22\u653f\u5e74\u5ea6\u5f00\u59cb\u4e8e7\u67081\u65e5\u5f00\u59cb\uff0c\u800c\u662f\u5728\u4e00\u5e74\u5185\u9700\u8981\u66f4\u591a\u7684\u4eba\u3002\n \uff06\uff0334;\u8fd9\u53cd\u6620\u4e86\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u8fd9\u5341\u5e74\u5c06\u4e3a\u4e16\u754c\u5404\u5730\u63a8\u5e7f\u6269\u5927\u7684\u6280\u672f\u89c4\u5b9a\uff0c\uff06\uff0334;\u53f2\u5bc6\u65af\u5728\u63a5\u53d7\u91c7\u8bbf\u65f6\u8bf4\u3002 \uff06\uff0334;\u6b63\u5982\u6211\u6709\u65f6\u5c06\u5176\u653e\u5728\u516c\u53f8\u5185\uff0c2020\u5e74\u5c06\u5e26\u676520\u4e16\u7eaa30\u5e74\u4ee3\u4e3a\u91d1\u878d\u670d\u52a1\u63d0\u4f9b\u7684\u6280\u672f\u3002\uff06\uff0334;\n \u7531\u4e8e\u5fae\u8f6f\u5ba3\u5e03\u5185\u90e8\u91cd\u7ec4\uff0c\u4ed6\u7684\u8bc4\u8bba\u5f88\u8ba8\u8bba\uff0c\u8fd9\u5c06\u5728\u51e0\u4e2a\u9886\u5bfc\u4eba\u4e0a\u6d17\u724c\u3002\u603b\u6cd5\u5f8b\u987e\u95eeDev Stahlkopf\u6b63\u5728\u4e3a\u53e6\u4e00\u5bb6\u516c\u53f8\u63d0\u4f9b\u6700\u5927\u7684\u6cd5\u5f8b\u4f5c\u7528\uff0c\u9884\u8ba1\u5c06\u4e8e\u5468\u4e8c\u665a\u4e9b\u65f6\u5019\u5ba3\u5e03\u7684\u4e3e\u52a8\u3002\n  Microsoft\uff06\uff0339;\u5176\u4ed6\u9876\u7ea7\u5f8b\u5e08\u7684\u4e24\u4e2a\u5c06\u589e\u52a0\u4e00\u822c\u5f8b\u5e08\u7684\u6807\u9898\u3002 Lisa Tanzi\u5c06\u5f15\u9886\u4e00\u4e2a\u65b0\u7684\u56e2\u961f\uff0c\u76d1\u7763\u5168\u7403\u5de5\u7a0b\u548c\u9500\u552e\u56e2\u961f\u5982\u4f55\u5b9e\u65bd\u653f\u7b56\uff0c\u800c23\u5e74\u7684Microsoft Veteran Hossein Nowbar\u5c06\u8d1f\u8d23\u516c\u53f8\u6cd5\u56e2\u961f\uff0c\u5305\u62ec\u77e5\u8bc6\u4ea7\u6743\uff0c\u8bc9\u8bbc\uff0c\u5408\u89c4\u548c\u7ade\u4e89\u56e2\u961f\u3002\n \u524dFTC\u4e13\u5458\u548c\u5fae\u8f6f\u9996\u5e2d\u9690\u79c1\u5b98Julie Brill\u5c06\u589e\u52a0\u8be5\u516c\u53f8\u7684\u76d1\u7763\u548c\u7b2c39\u4f4d\u8d1f\u8d23\u4efb\u7684AI\uff0c\u6570\u5b57\u5b89\u5168\uff0c\u53ef\u8bbf\u95ee\u6027\u5408\u89c4\u6027\u548c\u76d1\u7ba1\u6cbb\u7406\u52aa\u529b\u3002\n \u5728\u7ebf\u4e4b\u95f4\uff1a\u867d\u7136\u5fae\u8f6f\u57282000\u5e74\u4ee3\u7684\u5927\u90e8\u5206\u4e0e\u76d1\u7ba1\u673a\u6784\u7684\u6218\u6597\u4e2d\uff0c\u4f46\u53f2\u5bc6\u65af\u8bf4\uff0c\u5728\u5fae\u8f6f\u5468\u56f4\u7684\u8fd9\u6bb5\u65f6\u95f4\u6b63\u81f4\u529b\u4e8e\u9884\u6d4b\u5e76\u62e5\u62b1\u65b0\u7684\u89c4\u5219\uff0c\u800c\u4e0d\u662f\u5f15\u9886\u4ed6\u4eec\u7684\u6307\u63a7\u3002\n \u867d\u7136\u5fae\u8f6f\u5c1a\u672a\u6210\u4e3a\u7acb\u6cd5\u8005\u5bfb\u6c42\u5b81\u9759\u7684\u516c\u53f8\u5217\u8868\uff0c\u4f46\u53f2\u5bc6\u65af\u8868\u793a\uff0c\u4ed6\u5e0c\u671b\u516c\u53f8\u5c06\u53d7\u5230\u7acb\u6cd5\u6d6a\u6f6e\u7684\u663e\u7740\u5f71\u54cd\u3002 \n\uff06\uff0334;\u867d\u7136\u6211\u8ba4\u4e3a\uff0c\u4eba\u4eec\u53ea\u5173\u6ce8\u53cd\u6258\u62c9\u65af\u6cd5\uff0c\u800c\u4e14\u53ea\u662f\u7f8e\u56fd\uff0c\u53d1\u751f\u7684\u4e8b\u60c5\u6bd4\u8fd9\u66f4\u5927\u66f4\u5927\uff0c\u800c\u4e14\uff0334; \u53f2\u5bc6\u65af\u8bf4\u3002  \u5728\u5ba3\u5e03\u91cd\u65b0\u7ec4\u7ec7\u7684\u5185\u90e8\u5907\u5fd8\u5f55\u4e2d\uff0c\u53f2\u5bc6\u65af\u5305\u62ec\u4e00\u4e2a\u5efa\u8bae\u65b0\u89c4\u5b9a\u6280\u672f\u884c\u4e1a\u7684\u56fd\u5bb6\u5730\u56fe\u3002 \u90a3\u5f20\u5730\u56fe\u5177\u6709\u5927\u90e8\u5206\u5730\u7403\u4eea\u7740\u8272\u3002  \u5927\u5c40\uff1a\u53f2\u5bc6\u65af\u8868\u793a\uff0c\u4ed6\u9884\u8ba1\u65b0\u89c4\u5219\u5c06\u5f71\u54cd\u4e0d\u4ec5\u5f71\u54cd\u5fae\u8f6f\u548c\u5176\u4ed6\u79d1\u6280\u516c\u53f8\uff0c\u800c\u4e14\u6700\u7ec8\u4e5f\u662f\u4ed6\u4eec\u7684\u4f01\u4e1a\u5ba2\u6237\uff0c\u4ed6\u4eec\u5c06\u53d7\u6cd5\u5f8b\u6db5\u76d6\u4ece\u9690\u79c1\u5230AI\u4f26\u7406\u7684\u95ee\u9898\u3002  \uff06\uff0334;\u8fd9\u662f\u4e00\u7ec4\u6e05\u626b\u7684\u53d8\u5316\uff0c\uff06\uff0334; \u4ed6\u8bf4\u3002 \uff06\uff0334;\u6211\u4eec\u8ba4\u4e3a\u660e\u667a\u7684\u8bfe\u7a0b\u662f\u5f00\u59cb\u51c6\u5907\u5b83\u9700\u8981\u7684\u4e1c\u897f\u3002\uff06\uff0334; ", "note_en": "Make your busy days simpler with Axios AM/PM. Catch up on what&#39;s new and why it matters in just 5 minutes.\n Subscribe to Axios Closer for insights into the day\u2019s business news and trends and why they matter\n Subscribe to Axios Markets for the latest market trends and economic insights. Sign up for free.\n Binge on the stats and stories that drive the sports world with Axios Sports. Sign up for free.\n Get our smart take on technology from the Valley and D.C. with Axios Login. Sign up for free.\n Get an insider&#39;s guide to the new White House with Axios Sneak Peek. Sign up for free.\n Get a daily digest of the most important stories affecting your hometown with Axios Denver\n Get a daily digest of the most important stories affecting your hometown with Axios Des Moines\n Get a daily digest of the most important stories affecting your hometown with Axios Twin Cities\n Get a daily digest of the most important stories affecting your hometown with Axios Tampa Bay\n Get a daily digest of the most important stories affecting your hometown with Axios Charlotte\n Stay up-to-date on the most important and interesting stories affecting NW Arkansas, authored by local reporters\n   Microsoft plans to increase its legal and corporate affairs unit by 20 percent in the coming fiscal year as it prepares for what it sees as a years-long wave of tech regulation across the globe, Microsoft president Brad Smith told Axios.\n The big picture: Smith individually, and Microsoft as a company, have plenty of experience with tech regulation \u2014 most notably, from a decade-long fight with regulators on both sides of the Atlantic over antitrust issues beginning in the late &#39;90s.\n The hiring spree will continue beyond the current fiscal year, which starts July 1, because the company will need more people than it can hire in a single year, Smith said.\n &#34;This reflects a conclusion that this decade will bring expanded tech regulation around the world,&#34; Smith said in an interview. &#34;As I sometimes put it inside the company, the 2020s will bring to tech what the 1930s brought to financial services.&#34;\n His comments come as Microsoft is announcing an internal reorganization that will shuffle around several leaders. General counsel Dev Stahlkopf is leaving for the top legal role at another company, a move expected to be announced later on Tuesday.\n  Two of Microsoft&#39;s other top lawyers will add the title of general counsel. Lisa Tanzi will lead a new team that oversees how policies are implemented by engineering and sales teams around the globe, while 23-year Microsoft veteran Hossein Nowbar will be in charge of the corporate legal team, including intellectual proprty,  litigation, compliance, and competition teams.\n Former FTC commissioner and Microsoft chief privacy officer Julie Brill will add oversight of the company&#39;s responsible AI, digital safety, accessibility compliance and regulatory governance efforts.\n Between the lines: While Microsoft spent much of the 2000s fighting with regulators, Smith says this time around Microsoft is working to anticipate and embrace new sets of rules, rather than lead the charge against them.\n Although Microsoft has not been at the top of the list of companies that legislators seek to rein in, Smith said he expects that the company will be significantly affected by the wave of legislation to come.\n &#34;While I think it is easy for people to focus just on antitrust law and just the U.S., what is happening is much bigger and broader than that,&#34; Smith said.\n In the internal memo announcing the reorganization, Smith included a map of countries where new regulation of the tech industry has been proposed. That map has most of the globe colored in.\n  The big picture: Smith said he anticipates the new rules will impact not just Microsoft and other tech companies, but ultimately also their corporate customers, who will be subject to laws covering issues ranging from privacy to AI ethics.\n &#34;This is a sweeping set of changes,&#34; he said. &#34;The wise course in our view is to start to prepare what it takes.&#34;", "posttime": "2021-06-30 01:41:49", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "microsoft,\u5fae\u8f6f,\u4eca\u5e74,grow,axios", "title": "\u5fae\u8f6f\u8868\u793a\uff0c\u4eca\u5e74\u5c06\u5728\u5168\u7403\u8303\u56f4\u5185\u589e\u52a0\u4e00\u7cfb\u5217\u591a\u5e74\u6d6a\u6f6e\uff0c\u5c06\u5176\u6cd5\u5f8b\u548c\u516c\u53f8\u4e8b\u52a1\u4eba\u5458\u8fbe\u523020\uff05 ", "title_en": "Microsoft says it will grow its legal and corporate affairs staff by 20% this year in anticipation of a multiyear wave of increased tech regulation globally", "transed": 1, "url": "https://www.axios.com/microsoft-legal-team-expands-regulation-6bc0d5b9-e4a7-4131-ad4d-8d3030d0d7ab.html", "via": "", "real_tags": ["microsoft", "\u5fae\u8f6f", "\u4eca\u5e74", "grow", "axios"]}, {"category": "", "categoryclass": "", "imagename": "92460ad72a85980b01b640c4549009f2.png", "infoid": 1068681, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eca\u5929\uff0c\u6211\u4eec\u5f88\u9ad8\u5174\u5730\u5ba3\u5e03\u5728\u7f8e\u56fd\u7684\u65e0\u5e7f\u544a\u79c1\u4eba\u8ba2\u9605\u641c\u7d22\u5f15\u64ce\u7684\u53ef\u7528\u6027\u3002\u6ce8\u518c\u5e76\u514d\u8d39\u83b7\u5f97\u4e09\u4e2a\u6708\uff0c\u7136\u540e\u6bcf\u6708\u53ea\u97004.95\u7f8e\u5143\u3002\n \u5f53\u524d\u641c\u7d22\u72b6\u6001\u88ab\u6253\u7834\u3002\u4e3b\u6d41\u641c\u7d22\u5f15\u64ce\u4e0d\u518d\u4e3b\u8981\u4e3a\u7528\u6237\u63d0\u4f9b\u670d\u52a1\u3002\u5b83\u4eec\u5177\u6709\u5e7f\u544a\uff0c\u5c06\u6709\u673a\u641c\u7d22\u7ed3\u679c\u63a9\u76d6\u8fdc\u4f4e\u4e8e\u6298\u53e0\u3002\u4ee5\u5584\u610f\u7684\u65b9\u5f0f\u7ec4\u7ec7\u4e16\u754c\u4fe1\u606f\u7684\u826f\u597d\u65b9\u5f0f\u5df2\u7ecf\u6210\u4e3a\u4e00\u9879\u4e13\u6ce8\u4e8e\u8d27\u5e01\u5316\u70b9\u51fb\u4ee5\u652f\u6301\u5e7f\u544a\u5546\u7684\u5927\u90e8\u5206\u8d44\u6e90\u7684\u4e1a\u52a1\u3002\n NEEVA\u662f\u641c\u7d22Reimagined  - \u514d\u8d39\u5e7f\u544a\uff0c\u79c1\u4eba\u548c\u53ef\u5b9a\u5236\u3002\u8fd9\u4e00\u5207\u90fd\u5f00\u59cb\u4ece\u5e7f\u544a\u4e2d\u7684\u4f20\u7edf\u5546\u4e1a\u6a21\u5f0f\u4ece\u57fa\u4e8e\u8ba2\u9605\u7684\u670d\u52a1\u7ffb\u8f6c\u5230\u57fa\u4e8e\u8ba2\u9605\u7684\u670d\u52a1\uff0c\u8fd9\u662f100\uff05\u7684\u91cd\u70b9\u662f\u4e3a\u7528\u6237\u63d0\u4f9b\u6700\u4f73\u641c\u7d22\u4f53\u9a8c\u3002\u6211\u4eec\u63d0\u4f9b\u66f4\u76f8\u5173\u7684\u7ed3\u679c\u548c\u66f4\u9ad8\u8d28\u91cf\u7684\u5185\u5bb9\u3002\u6211\u4eec\u963b\u6b62\u4e86\u7b2c\u4e09\u65b9\u8ddf\u8e2a\u5668\u3002\u5e76\u901a\u8fc7\u5c06NEEVA\u8fde\u63a5\u5230\u7535\u5b50\u90ae\u4ef6\u5e10\u6237\uff0c\u65e5\u5386\u548c\u4e91\u5b58\u50a8\u5e73\u53f0\uff0c\u7528\u6237\u53ef\u4ee5\u5728\u4e0d\u727a\u7272\u9690\u79c1\u7684\u60c5\u51b5\u4e0b\u5bf9\u5176\u8fdb\u884c\u6700\u6709\u4ef7\u503c\u7684\u8868\u9762\u4fe1\u606f\u3002\n \u6b64\u5916\uff0c\u6211\u4eec\u652f\u6301\u5185\u5bb9\u751f\u6001\u7cfb\u7edf\u3002\u6211\u4eec\u4e0d\u662f\u7f51\u7edc\u5185\u5bb9\u7684\u6536\u8d39\u8005\uff0c\u6211\u4eec\u662f\u5f3a\u70c8\u7684Pro-Publisher\uff0c\u5e76\u81f4\u529b\u4e8e\u4e3a\u5185\u5bb9\u521b\u5efa\u8005\u521b\u5efa\u6536\u5165\u673a\u4f1a\u3002\u5f53\u4ed6\u4eec\u7684\u5185\u5bb9\u7528\u4e8e\u76f4\u63a5\u56de\u7b54NEEVA\u7528\u6237\u67e5\u8be2\u65f6\uff0c\u6211\u4eec\u5c06\u5728\u5185\u5bb9\u521b\u5efa\u8005\u5408\u4f5c\u4f19\u4f34\u4e2d\u5206\u4eab\u81f3\u5c1120\uff05\u7684Topline\u6536\u5165\u3002\n \u201cNeeva\u5efa\u4e8e\u5bfb\u6c42\u641c\u7d22\u5e94\u8be5\u4e13\u6ce8\u4e8e\u6d88\u8d39\u8005\uff0c\u800c\u4e14\u53ea\u6709\u6d88\u8d39\u8005\uff0c\u800c\u4e0d\u662f\u5e7f\u544a\u5546\uff0c\u201dSridhar Ramaswamy\uff0cCEO\u548c\u8054\u5408\u521b\u59cb\u4ebaNeeva\u8868\u793a\u3002 \u201c\u641c\u7d22\u7ed3\u679c\u5e94\u59cb\u7ec8\u4f18\u5148\u8003\u8651\u627e\u5230\u6d88\u8d39\u8005\u67e5\u8be2\u7684\u6700\u4f73\u7b54\u6848 - \u800c\u4e0d\u662f\u5728\u7f51\u4e0a\u9500\u552e\u5e7f\u544a\u6216\u8ddf\u8e2a\u884c\u4e3a\u3002\u4eca\u5929\u63a8\u51fa\u4e86\u6211\u4eec\u7684\u8ba2\u9605\u7684\u6a21\u578b\u662f\u4e3a\u6d88\u8d39\u8005\u63d0\u4f9b\u53ef\u884c\u7684\u641c\u7d22\u66ff\u4ee3\u54c1\u7684\u7b2c\u4e00\u6b65\uff0c\u57fa\u4e8e\u4fe1\u4efb\u548c\u900f\u660e\u5ea6\u3002\n \u6211\u4eec\u628a\u7528\u6237\u653e\u5728\u4e00\u5207\u7684\u4e2d\u5fc3\u3002\u4ece\u7f51\u4e0a\u8d2d\u7269\u5230\u641c\u7d22\u65e7\u7535\u5b50\u90ae\u4ef6\uff0c\u6bcf\u4e2a\u529f\u80fd\u90fd\u4e0e\u7528\u6237\u8bbe\u8ba1\u3002\n \u65e0\u5e7f\u544a\uff1a\u4e3b\u8981\u641c\u7d22\u5f15\u64ce\u4e0a\u6700\u591a40\uff05\u7684\u641c\u7d22\u7ed3\u679c\u662f\u5e7f\u544a\u3002\u6211\u4eec\u63d0\u4f9b100\uff05\u7684\u5e7f\u544a\uff0c\u771f\u5b9e\u7684\u641c\u7d22\u7ed3\u679c\uff0c\u5141\u8bb8\u7528\u6237\u627e\u5230\u4ed6\u4eec\u60f3\u8981\u7684\u4e1c\u897f\uff0c\u6ca1\u6709\u5e7f\u544a\u59a8\u788d\u4e86\u3002 \n\u5b89\u5168\u79c1\u4e0b\u6d4f\u89c8\uff1a\u6211\u4eec\u7684\u6d4f\u89c8\u5668\u6269\u5c55\u540d\uff0c\u4e0e\u6240\u6709\u4e3b\u8981\u6d4f\u89c8\u5668\u517c\u5bb9\uff0c\u53ef\u9632\u6b62\u8ddf\u8e2a\u5668\u4ee5\u4e0b\u6d88\u8d39\u8005\u3002\u6211\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u5411\u4efb\u4f55\u4eba\u9500\u552e\u6216\u4e0e\u7528\u6237\u6570\u636e\u5206\u4eab\u3002\u8fd9\u662f\u6211\u4eec\u9690\u79c1\u627f\u8bfa\u7684\u4e00\u90e8\u5206\u3002\u7528\u6237\u53ef\u4ee5\u5728\u9690\u8eab\u6a21\u5f0f\u4e2d\u533f\u540d\u641c\u7d22\u3002\n  \u81ea\u5b9a\u4e49\u641c\u7d22\u7ed3\u679c\uff1a\u7528\u6237\u53ef\u4ee5\u9009\u62e9\u4ed6\u4eec\u559c\u6b22\u7684\u96f6\u552e\u5546\u548c\u4ed6\u4eec\u60f3\u8981\u67e5\u770b\u7ed3\u679c\u7684\u65b0\u95fb\u6765\u6e90\u3002 NEEVA\u7528\u6237\u53ef\u4ee5\u5728\u5176\u4e3b\u9875\u4e0a\u63d0\u4f9b\u80a1\u7968\u9009\u62e9\u7684\u6700\u65b0\u4fe1\u606f\uff0c\u4ee5\u4fbf\u5728\u5176\u4e3b\u9875\u4e0a\u4ea4\u4ed8\u7684\u5305\u88f9\u72b6\u6001\u3002\n  \u83b7\u53d6\u4e13\u5bb6\u63a8\u8350\u7684\u8d2d\u7269\u7ed3\u679c\uff1a\u6211\u4eec\u5141\u8bb8\u7528\u6237\u5728\u4e00\u4e2a\u5730\u65b9\u53d1\u73b0\u6c47\u603b\u7684\u6700\u4f73\u4ea7\u54c1\uff0c\u5e76\u901a\u8fc7\u4fe1\u8a89\u826f\u597d\u7684\u7f51\u7ad9\u548c\u9a8c\u8bc1\u5ba2\u6237\u8f7b\u677e\u9605\u8bfb\u8bc4\u8bba\u3002\n  \u641c\u7d22Web  - \u548c\u4e2a\u4eba\u5e10\u6237\uff1a\u4e3a\u4e86\u66f4\u65b9\u4fbf\u5730\u8fdb\u884c\u641c\u7d22\uff0cNEEVA\u7528\u6237\u53ef\u4ee5\u540c\u6b65\u4e2a\u4eba\u7535\u5b50\u90ae\u4ef6\uff0c\u65e5\u5386\u548c\u6587\u6863\uff0c\u4ee5\u4fbf\u4ed6\u4eec\u53ef\u4ee5\u4ece\u4e00\u4e2a\u641c\u7d22\u680f\u4e2d\u627e\u5230\u6240\u9700\u7684\u4e00\u5207\u3002\n  \u652f\u6301\u5177\u6709\u641c\u7d22\u67e5\u8be2\u7684\u5185\u5bb9\u521b\u5efa\u8005\uff1a\u5f53\u4ed6\u4eec\u7684\u5185\u5bb9\u7528\u4e8e\u76f4\u63a5\u56de\u7b54NEEVA\u7528\u6237\u7684\u67e5\u8be2\u65f6\uff0c\u6211\u4eec\u81f4\u529b\u4e8e\u4f7f\u7528\u5185\u5bb9\u521b\u5efa\u8005\u5408\u4f5c\u4f19\u4f34\u5171\u4eab\u81f3\u5c1120\uff05\u7684Copline\u6536\u5165\u3002\u6211\u4eec\u4e0d\u4ec5\u81f4\u529b\u4e8e\u652f\u4ed8\u5185\u5bb9\u521b\u5efa\u8005\u5408\u4f5c\u4f19\u4f34\uff0c\u4f46\u6211\u4eec\u8fd8\u5728\u7814\u7a76\u4e00\u7ec4\u529f\u80fd\uff0c\u4f7f\u5185\u5bb9\u521b\u5efa\u8005\u80fd\u591f\u5bb9\u6613\u5730\u4e0eNEEVA\u7528\u6237\u5efa\u7acb\u76f4\u63a5\u5173\u7cfb\u3002\u4f8b\u5982\uff0cNEEVA\u7528\u6237\u5c06\u80fd\u591f\u76f4\u63a5\u4ece\u641c\u7d22\u7ed3\u679c\u9875\u9762\u8ba2\u9605\u7535\u5b50\u90ae\u4ef6\u65b0\u95fb\u901a\u8baf\u3002\u6211\u4eec\u5df2\u7ecf\u5728\u4e2d\u7b49\u548cQuora\u5de5\u4f5c\uff0c\u5e76\u5728\u4ece\u65b0\u95fb\u4e2d\u5efa\u7acb\u4e86\u5f3a\u5927\u548c\u591a\u6837\u5316\u7684\u4f19\u4f34\u5173\u7cfb\uff0c\u4ee5\u4fbf\u4e3a\u98df\u7269\u5e26\u6765\u65c5\u884c\u548c\u8d85\u8d8a\u3002\n  \u6211\u4eec\u63d0\u4f9b\u57fa\u4e8e\u6d4f\u89c8\u5668\u7684\u6269\u5c55\uff0c\u4e0e\u6240\u6709\u4e3b\u8981\u6d4f\u89c8\u5668\uff0cChrome\uff0cFirefox\uff0c\u52c7\u6562\uff0cEdge\u548cSafari\u517c\u5bb9\u3002\u5b83\u904d\u5386\u6240\u6709\u8bbe\u5907\uff0c\u53ef\u901a\u8fc7iOS\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u3002\n  NEEVA\u662f\u4e16\u754c\u4e0a\u7b2c\u4e00\u4e2a\u79c1\u4eba\u5e7f\u544a\u641c\u7d22\u5f15\u64ce\uff0c\u81f4\u529b\u4e8e\u5411\u60a8\u5c55\u793a\u6bcf\u4e2a\u641c\u7d22\u7684\u6700\u4f73\u7ed3\u679c\u3002\u6211\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u4e0e\u4efb\u4f55\u4eba\uff0c\u5c24\u5176\u662f\u5e7f\u544a\u5546\u9500\u552e\u6216\u4e0e\u60a8\u7684\u6570\u636e\u5206\u4eab\u3002\u8f6c\u5230Neeva.com\u83b7\u5f97\u514d\u8d39\u7684\u4e09\u4e2a\u6708\u8bd5\u7528\u3002\u5728\u514d\u8d39\u8bd5\u7528\u540e\uff0c\u60a8\u53ef\u4ee5\u6bcf\u6708\u8ba2\u96054.95\u7f8e\u5143\u3002 ", "note_en": "Today, we are pleased to announce the availability of our ad-free, private subscription search engine in the United States. Sign up and get three months free, then only $4.95 per month.\n The current state of search is broken. Mainstream search engines no longer primarily serve the user. They are littered with advertisements, burying organic search results far below the fold. What started as a well-intentioned way to organize the world\u2019s information has turned into a business focusing most of its resources on monetizing clicks to support advertisers.\n Neeva is search reimagined -- ads-free, private, and customizable. This all starts with flipping the traditional business model from an ads-based to a subscription-based service that is 100 percent focused on providing the best search experience for the user. We deliver more relevant results and higher quality content. We block third-party trackers. And by connecting Neeva to email accounts, calendars, and cloud storage platforms, users can surface information that is most valuable to them without sacrificing privacy.\n Moreover, we support the content ecosystem. Rather than being a toll collector for the web\u2019s content, we are strongly pro-publisher and are committed to creating revenue opportunities for content creators. We will share at least 20% of our topline revenue with content creator partners when their content is used to directly answer a Neeva user\u2019s query.\n \u201cNeeva was built on the premise that search should focus on the consumer, and only the consumer, not advertisers,\u201d said Sridhar Ramaswamy, CEO, and Co-Founder, Neeva. \u201cSearch results should always prioritize finding the best answer to a consumer\u2019s query \u2014 not on selling ads or tracking behavior online. Today\u2019s launch of our subscription-based model is the first step in providing a viable search alternative for consumers, built on trust and transparency.\n We put the user at the center of everything. From online shopping to searching old emails, every feature is designed with the user in mind.\n Ad-free: Up to 40% of search results on the major search engine are advertisements. We deliver 100% ad-free, real search results, allowing users to find what they want, without ads getting in the way.\n  Browse safely and privately: Our browser extension, compatible with all major browsers, prevents trackers from following consumers. We never sell or share user data with anyone. It\u2019s part of our  privacy promise. And users can search anonymously in incognito mode.\n  Customize search results: Users can choose the retailers they love and news sources they want to see results from. Neeva users can stay up-to-date on everything from stock picks to the status of packages for delivery on their homepage.\n  Get expert recommended shopping results: We allow users to discover the very best products aggregated in one place, and easily read through reviews from reputable sites and verified customers.\n  Search the web \u2014 and personal accounts: To make searching even more convenient, Neeva users can sync personal email, calendar, and documents so they can find everything they need from one search bar.\n  Support content creators with search queries: We are committed to sharing at least 20% of our topline revenue with content creator partners when their content is used to directly answer a Neeva user\u2019s query. Not only are we committed to paying content creator partners, but we are also working on a set of features to make it easy for content creators to establish direct relationships with Neeva users. For example, Neeva users will be able to easily subscribe to email newsletters directly from a search results page. We are already working with Medium and Quora and in the process of establishing robust and diverse partnerships from news to food to travel and beyond.\n  We provide a browser-based extension, compatible with all major browsers, Chrome, Firefox, Brave, Edge, and Safari. It runs across all devices and is available via an  iOS app.\n  Neeva is the world\u2019s first private, ad-free search engine, committed to showing you the best result for every search. We will never sell or share your data with anyone, especially advertisers. Go to  neeva.com for a free three-month trial. Following the free trial, you can subscribe for $4.95 per month.", "posttime": "2021-06-30 01:40:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "neeva,announces,\u641c\u7d22", "title": "Neeva\u5ba3\u5e03\u516c\u5171\u53ef\u7528\u6027\u81ea\u7531\u79c1\u4eba\u641c\u7d22\u5f15\u64ce ", "title_en": "Neeva Announces Public Availability of Its Ads Free, Private Search Engine", "transed": 1, "url": "https://neeva.com/blog/neeva-announces-public-availability", "via": "", "real_tags": ["neeva", "announces", "\u641c\u7d22"]}, {"category": "", "categoryclass": "", "imagename": "7cb56e18bed638eb8094ea45e66ef8b0.png", "infoid": 1068679, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "SQL\u8fde\u63a5\u662fQuintessential\u6570\u636e\u5e93\u64cd\u4f5c\u3002\u8fde\u63a5\u5141\u8bb8\u7528\u6237\u5207\u7247\u548c\u9ab0\u5b50\u591a\u4e2a\u4e0d\u540c\u7684\u6570\u636e\u96c6\uff0c\u4f8b\u5982\uff0c\u5c06\u4ea4\u6613\u6570\u636e\u4e0e\u4ea7\u54c1SKU\u6216\u5ba2\u6237\u4fe1\u606f\u4e0e\u8d2d\u4e70\u5386\u53f2\u76f8\u7ed3\u5408\u3002\u53ef\u4ee5\u5728\u4e0d\u52a0\u5165\u7684\u60c5\u51b5\u4e0b\u521b\u5efa\u7c7b\u4f3c\u7684\u7ed3\u679c\uff0c\u4f46\u9700\u8981\u5bbd\u7684\u6241\u5e73\u684c\u5b50\uff0c\u5e76\u4e14\u53ef\u80fd\u662f\u91cd\u7684\u9884\u5148\u5904\u7406\u548c\u540e\u5904\u7406\u3002\u6b63\u786e\u6267\u884c\uff0c\u52a0\u5165\u63d0\u4f9b\u7075\u6d3b\u6027\uff0c\u63d0\u9ad8\u6027\u80fd\u5e76\u5141\u8bb8\u5e7f\u6cdb\u7684\u6570\u636e\u63a2\u7d22\u3002\n \u7136\u800c\uff0c\u901a\u8fc7\u5b9a\u4e49\uff0c\u52a0\u5165\u6602\u8d35\u3002\u8fde\u63a5\u5c06\u5217\u4e0e\u4e00\u4e2a\u6216\u591a\u4e2a\u8868\u4e2d\u7684\u5217\u4f7f\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u8c13\u8bcd\u4e0e\u5339\u914d\u884c\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u8c13\u8bcd\u7ec4\u5408\u5230\u65b0\u8868\u4e2d\u3002\u7a0b\u5e8f\u5458\u5bf9\u8bed\u4e49\u76f8\u5f53\u4e8eFor\u5faa\u73af\u7684\u8fde\u63a5\u64cd\u4f5c\u662f\u6709\u76ca\u7684\u3002\u9274\u4e8e\u4ee5\u4e0b\u67e5\u8be2\uff0c\u5b83\u5c06\u6765\u81ea\u8868T1\u548c\u8868T2\u7684\u8bb0\u5f55\u76f8\u7ed3\u5408\u4f7f\u7528\u8868T1\u4e2d\u7684\u8c13\u8bcd\u5217A\u7b49\u4e8e\u8868T2\u4e2d\u7684\u5217B\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u5faa\u73af\u7f16\u5199\u4e00\u4e2a\u4f2a\u8026\u5408\uff1a\n   \u8fd9\u6837\u7684\u64cd\u4f5c\u5177\u6709\u590d\u6742\u6027N * M\uff0c\u5176\u4e2dN\u662fT1\uff0cM\u4e2d\u7684\u8bb0\u5f55\u6570\u662fT2\u4e2d\u7684\u8bb0\u5f55\u6570\u3002\u5bf9\u4e8e\u5c0f\u8868\uff0c\u8fd9\u662f\u5fae\u4e0d\u8db3\u9053\u7684\uff08\u7279\u522b\u662f\u5728GPU\u4e0a\uff09\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u5bf9\u4e8e\u5927\u8868\u6216\u590d\u6742\u7684\u52a0\u5165\u8c13\u8bcd\uff0c\u6211\u4eec\u8fc5\u901f\u8d85\u8fc7\u4e86\u5373\u4f7f\u662f\u6700\u5f3a\u5927\u7684\u5355\u670d\u52a1\u5668\u7cfb\u7edf\u7684\u8ba1\u7b97\u80fd\u529b\u3002\u52a0\u5165\u4f18\u5316\u662f\u4e00\u5bb6\u5b66\u4e60\u7684\u6570\u636e\u5e93\u7814\u7a76\u533a\u57df\uff0c\u8bb8\u591a\u7740\u540d\u7684\u65b9\u6cd5\u51cf\u8f7b\u4e86\u4e0a\u9762\u8be6\u8ff0\u7684\u201cN\u5e73\u65b9\u201d\u95ee\u9898\u3002\u4e00\u79cd\u5e38\u89c1\u65b9\u6cd5\u662f\u5229\u7528\u54c8\u5e0c\u8868\u6570\u636e\u7ed3\u6784\u6765\u51cf\u5c11\u4e24\u4e2a\u8868\u4e4b\u95f4\u6240\u9700\u7684\u5339\u914d\u6d4b\u8bd5\u7684\u6570\u91cf\u3002\u6b64\u65b9\u6cd5\u5728\u5176\u4e2d\u4e00\u4e2a\u8868\u4e0a\u6784\u5efa\u4e00\u4e2a\u54c8\u5e0c\u8868\uff0c\u5e76\u5c06\u5faa\u73af\u6269\u5c55\u5230\u54c8\u5e0c\u8868\u4e2d\u4ee5\u83b7\u53d6\u6f5c\u5728\u7684\u5339\u914d\u884c\u96c6\uff1a\n  \u867d\u7136\u5faa\u73af\u7ed3\u6784\u4fdd\u6301\u7c7b\u4f3c\u4e8e\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u793a\u4f8b\uff0c\u4f46\u6563\u5217\u8868\u53ef\u4ee5\u663e\u7740\u51cf\u5c11\u7b2c\u4e8c\u5faa\u73af\u4e2d\u7684\u641c\u7d22\u6570\u3002\u5728\u6700\u4f73\u60c5\u51b5\u4e0b\uff0c\u54c8\u5e0c\u8868\u53ef\u4ee5\u63d0\u4f9b\u6052\u5b9a\u7684\u65f6\u95f4\u67e5\u627e\u548c\u4e25\u683c\u7684\u5e73\u7b49\u4fdd\u8bc1\uff0c\u5c06\u5faa\u73af\u7f29\u77ed\u4e3a\uff1a\n   OmniCIDB\u652f\u6301\u54c8\u5e0c\u52a0\u5165CPU\u548cGPU\u4e0a\u7684\u54c8\u5e0c\u8868\u7684\u73b0\u573a\u5efa\u8bbe\u3002\u6839\u636e\u52a0\u5165\u5e73\u7b49\u8c13\u8bcd\u548c/\u6216\u5927\u5c0f\u7684\u590d\u6742\u6027\u652f\u6301\u591a\u4e2a\u54c8\u5e0c\u51fd\u6570\u3002\u4eca\u5929\uff0c\u6211\u4eec\u5c06\u8003\u8651\u4f7f\u7528\u54c8\u5e0c\u8054\u63a5\u52a0\u901f\u5730\u7406\u7a7a\u95f4\u8fde\u63a5\u67e5\u8be2\u3002\n \u6211\u4eec\u5c06\u5730\u7406\u7a7a\u95f4\u8fde\u63a5\u67e5\u8be2\u5b9a\u4e49\u4e3a\u4f7f\u7528\u5730\u7406\u7a7a\u95f4\u8fd0\u7b97\u7b26\u4f5c\u4e3a\u8fde\u63a5\u8c13\u8bcd\u7684\u5730\u7406\u7a7a\u95f4\u8fde\u63a5\u67e5\u8be2\u3002\u7528\u6237\u53ef\u80fd\u6709\u4e00\u4e2a\u5177\u6709\u7ecf\u5ea6\u548c\u7eac\u5ea6\u7684\u5730\u7406\u7f16\u7801\u63a8\u6587\u8868\uff0c\u5e76\u4e14\u5e0c\u671b\u786e\u5b9a\u63a8\u6587\u7684\u90ae\u653f\u7f16\u7801\u5728\u503e\u659c\u7684\u5730\u56fe\u4e0a\u5448\u73b0\u5728\u6e32\u67d3\u7684\u5730\u56fe\u4e0a\u7684\u90ae\u653f\u7f16\u7801\u7684\u63a8\u6587\u3002\u8fd9\u6837\u7684\u67e5\u8be2\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a\n   \uff08\u8bf7\u6ce8\u610f\uff0c\u5de6\u8fde\u63a5\u4fdd\u7559\u5728Zipcodes\u6570\u636e\u96c6\u4e2d\u65e0\u5339\u914d\u7684\u63a8\u6587\uff0c\u5982\u679c\u5b83\u6ca1\u6709\u76f8\u5e94\u7684\u90ae\u653f\u7f16\u7801\uff0c\u800c\u4e0d\u662f\u6392\u9664\u7684\u90ae\u653f\u7f16\u7801\uff0c\u5219\u5c06\u5305\u542b\u201c\u7a7a\u201d\u989c\u8272\u3002 \nWarning: Can only detect less than 5000 characters\nWarning: Can only detect less than 5000 characters\n\u5c3d\u7ba1\u6211\u4eec\u6b63\u5728\u5bfb\u627e\u589e\u52a0\u7684\u4f18\u5316\u6765\u63d0\u9ad8\u6211\u4eec\u91cd\u53e0\u7684\u5e76\u884c\u548c\u6027\u80fd\uff0c\u4f46\u5b83\u5df2\u7ecf\u663e\u793a\u51fa\u5177\u6709\u5de8\u5927\u7684\u597d\u5904\uff0c\u4f7f\u5927\u5730\u7406\u8fde\u63a5\u6210\u4e3a\u4e92\u52a8\u6216\u63a5\u8fd1\u4ea4\u4e92\u5f0f\u7684\u6027\u80fd\u6c34\u5e73\u3002\u5728\u4e00\u53f0\u673a\u5668\u4e0a\uff0c\u4f7f\u75282\u4e2aNVIDIA RTX 3090 GPU\uff0c\u5728\u5404\u79cd\u793a\u4f8b\u4e2d\u91cd\u53e0\u5728200\u52301,200\u500d\u4e4b\u95f4\u7684\u5faa\u73af\u52a0\u5165\u5728200\u52301,200\u500d\u4e4b\u95f4\uff0c\u6700\u6781\u7aef\u5730\u589e\u52a0\u4e86\u6211\u4eec\u7684\u63a8\u8350\u7ed9\u7f8e\u56fd\u4eba\u53e3\u666e\u67e5\u7ec4\u768411.3k\u67e5\u627e\u5faa\u73af\u3002\u6bcf\u79d2\u52a0\u516522.38M\u67e5\u627e\uff0c\u91cd\u53e0\u8fde\u63a5\u3002\u6700\u540e\uff0c\u6211\u4eec\u8ba4\u4e3a\u6709\u53ef\u80fd\u7684\u989d\u5916\u52a0\u901f\u3002\u4f8b\u5982\uff0c\u5229\u7528\u7a7a\u95f4\u586b\u5145\u66f2\u7ebf\u8fdb\u884c\u987a\u5e8f\u548c\u6563\u5217\u7684\u5b9e\u9a8c\u8868\u660e\uff0c\u6570\u636e\u8868\u660e\uff0c\u901a\u8fc7\u589e\u52a0\u7a7a\u95f4\u4f4d\u7f6e\u548c\u964d\u4f4e\u6563\u5217\u8fde\u63a5\u7684\u63a2\u9488\u9636\u6bb5\uff0c\u964d\u4f4e\u6267\u884c\u53d1\u6563\u7684\u989d\u59163-4\u500d\u7684\u53ef\u80fd\u6027\uff0c\u56e0\u6b64\u4fdd\u6301\u8c03\u6574\u8fd9\u4e2a\u524d\u9762\u3002\n \u591a\u8fb9\u5f62\u8fde\u63a5\u70b9\u53ea\u662f\u4e0a\u8ff0\u6280\u672f\u7684\u4e00\u4e2a\u793a\u4f8b\u5e94\u7528\u3002\u901a\u7528\u91cd\u53e0\u8fd0\u7b97\u7b26\u9002\u7528\u4e8e\u5404\u79cd\u67e5\u8be2\uff0c\u5305\u62ec\u7a7a\u95f4\u548c\u65f6\u95f4\u67e5\u8be2\uff08\u6216\u4e24\u8005\u7684\u7ec4\u5408\uff09\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4e24\u4e2a\u5e7f\u6cdb\u7684\u5e94\u7528\u7a0b\u5e8f\u51fa\u73b0\u4e86;\u8981\u6c42\u7b97\u6cd5\u6784\u5efa\u6563\u5217\u8868\u548c\u67e5\u8be2\u7684\u67e5\u8be2\uff0c\u5176\u57fa\u4e8e\u5b9a\u4e49\u67e5\u8be2\u4e2d\u7684\u91cd\u53e0\u5173\u7cfb\u7684\u8c13\u8bcd\u6765\u6784\u5efa\u6563\u5217\u8868\u548c\u67e5\u8be2\u3002\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0\u4e86\u5730\u7406\u7a7a\u95f4\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u8fde\u63a5\uff0c\u4f5c\u4e3a\u540e\u4e00\u79cd\u7c7b\u578b\u7684\u793a\u4f8b;\u5982\u679c\u7528\u6237\u5728\u5f7c\u6b64\u7684N\u4e2a\u5355\u4f4d\u5185\u8bf7\u6c42\u6240\u6709\u70b9\uff0c\u5219\u53ef\u4ee5\u6784\u5efa\u54c8\u5e0c\u8868\uff0c\u4f7f\u5f97\u59cb\u7ec8\u4fdd\u8bc1\u5bf9\u76f8\u90bb\u9891\u4f53\u7684\u7b80\u5355\u641c\u7d22\u4ee5\u8fd4\u56de\u53ef\u80fd\u4f4d\u4e8e\u5f7c\u6b64\u7684N\u4e2a\u5355\u4f4d\u5185\u7684\u70b9\u3002\u867d\u7136\u6211\u4eec\u5904\u4e8e\u751f\u4ea7\u8fd9\u4e9b\u6280\u672f\u7684\u65e9\u671f\u9636\u6bb5\uff0c\u4f46\u591a\u8fb9\u5f62\u52a0\u5165\u4e2d\u7684\u70b9\u5728\u5168\u90e8\u4ea7\u54c1\u6a21\u5f0f\u4e0b\u76845.6\u7248\u4e2d\u63d0\u4f9b\uff0c\u5305\u62ec\u684c\u9762\uff0c\u65e0\u7ebd\u4ee3\u5c3c\u548c\u4f01\u4e1a\u7248\u3002 ", "note_en": "SQL Joins are the quintessential database operation. A join allows the user to slice and dice multiple disparate data sets, e.g., combining transaction data with product SKUs or customer information with purchase history. Similar results could be created without joining but require wide flat tables and possibly heavy pre and post-processing. Properly executed, joins provide flexibility, increase performance and allow for a wide range of data exploration.\n However, joins are, by definition, expensive. A join combines the columns from one or more tables into a new table using one or more predicates to match rows. It is instructive for programmers to think of a JOIN operation semantically equivalent to a  for loop. Given the following query, which combines the records from table  t1 and table  t2 using the predicate column  a in table  t1 equal to column  b in table  t2, we can write a pseudocode  for  loop as follows: \u200d\n   Such an operation has complexity N * M, where N is the number of records in  t1 and M is the number of records in  t2. For small tables, this is trivial (particularly on GPUs). Nevertheless, for large tables or complicated join predicates, we quickly exceed the computational ability of even the most powerful single server systems. Join optimization is a well-studied area of database research, and many well-known approaches mitigate the \u201cN squared\u201d problem detailed above. One common approach is to leverage a hash table data structure to reduce the number of match tests required between the two tables. This method builds a hash table over one of the tables, and the loop is augmented with a lookup into the hash table to obtain the potential set of matching rows: \u200d\n  While the loop structure remains similar to our first example, the hash table can significantly reduce the number of searches in the second loop. In the best case, the hash table can provide both constant time lookup and strict equality guarantees, reducing the loop to: \u200d\n   OmniSciDB supports hash joins with on-the-fly construction of hash tables on both CPU and GPU. Multiple hash functions are supported depending on the complexity of the join\u2019s equality predicate and/or size. Today, we will consider accelerating geospatial join queries using hash joins.\n We define a geospatial join query as one which uses a geospatial operator as the join predicate. A user might have a table of geocoded tweets with longitude and latitude and want to determine what zipcode the tweet falls in -- possibly coloring tweets by zipcode on a rendered map in Immerse. Such a query might look like the following: \u200d\n   (note that left join preserves tweets with no match in the zipcodes datasets, meaning a tweet will be included with a \u201cNULL\u201d color if it has no corresponding zip code, rather than excluded)\n To determine whether a tweet is inside a given zipcode, we need to check the tweet location point against each zipcode polygon exhaustively. Most algorithms require a check of each vertex of the zipcode polygon (there are a few methods for doing this; we use the  winding method) against each point. Assuming we have 1 million tweets and 33,144 zipcodes, comparing each point to each polygon would result in 33 billion comparisons. Since the median zipcode has 166 vertices, we add more zeros for 5,501,904,000,000 total comparisons (5.5 trillion operations). This does not account for the operations required to load data, check boundary conditions, and more, so we can consider it a lower bound. The latest Ampere GPUs have nearly ten teraflops, which executes the above operation in about 500ms, but if we increase our tweets table to 100M, we see time to compute increase to 6 minutes. Most OmniSci customers use data in the range of 500M to the low billions, and most queries in OmniSci run in milliseconds. So, we need to employ some optimization to make geojoins interactive.\n While it may not be readily apparent, we can apply the same hash table technique discussed above to the zipcodes table. We require two conditions; first, we need a suitable hash function to build our hash table. Moreover, we need an expression to hash over that has the following property: ST_Contains is true if the hash join expression is also true. We introduce a new operator called Overlaps, which satisfies this property.\n    We define Overlaps( b,a) or  a overlaps  b to be true if the bounding box of object  a overlaps the bounding box of object  b. Note that this operator may be better named  ApproxOverlaps; we will stick with Overlaps for the rest of this article for brevity. For a point, we consider the bounding box to collapse to the point. So, if  a is a point and  b is another geospatial object, Overlaps returns true if point  a is inside the bounding box surrounding the object  b. Now we will prove ST_Contains is true if and only if Overlaps is true. Assume we have a point  a and a geospatial object  b and a bounding box  b_box. Assume ST_Contains( b, a) is true (that is, the geospatial object  b contains the point  a) and assume Overlaps( b, a) is false (that is,  a does not overlap  b). The bounding box  b_box contains  b by definition. So, if  b contains  a, then  a must be inside the bounding box for  b. Therefore  a overlaps  b. However, we assumed Overlaps( b, a) was false, so we have a contradiction and, if ST_Contains( b, a) is true, then Overlaps( b, a) must also be true.\n We can use this property to replace the expression ST_Contains( b, a) in the query with the binary predicate Overlaps( b, a) AND ST_Contains( b, a). We will then build a hash table over the expression Overlaps( b, a) and use the hash table to reduce the number of comparisons in the join. To do that, we need a hash function. Consider the bounding boxes of the geospatial objects b. If we take the union of all bounding boxes, make it a rectangle, and then subdivide this region into individual bins, each of the same size, we can create a function that spatially maps any point  a into a bin. One such function assigns an integer identifier to each bin, computed by dividing the point coordinates by the corresponding bin dimension and taking the floor.  Space-filling curves are another option. We opted for the simple hash function because our input data is not sorted or ordered, and queries typically target a single bucket, not a range of buckets. The memory locality properties of space-filling curves are an area of future exploration. To build a hash table for this function, we take the bounding box for each polygon, determine the bin(s) the bounding box overlaps, and write an identifier for the polygon into each bin.\n    Putting it all together, we combine the new expression Overlaps( b,a) AND ST_Contains( b,a) with the hash table over Overlaps( b,a). For a given point  a, we first check the hash table to see which bin the point belongs to by applying the hash function to the point. We read the list of polygon IDs from the bin. This operation computes Overlaps for the point  a and all polygons  b (note that the condition is a bit weaker, in that a point could be in the same bin as a polygon but the two could not overlap, but it is sufficient for our purposes as any polygon not in the bin cannot possibly contain the point -- see figure 1 ). This process constrains the total number of comparisons for ST_Contains to only polygons which  might contain the given point. If the bins are low occupancy, we can significantly reduce the number of comparisons required for each point. The following pseudocode illustrates this process: \u200d\n   We started with an expression, ST_Contains( b,a), and rewrote the expression to an equivalent expression, Overlaps( b,a) AND ST_Contains( b,a). We can then use the hash join framework with an appropriate hash function and hash table to constrain the search space of the expression and improve performance. So, how do we choose appropriate bin sizes when building the hash table?\n Hash table sizing is a tradeoff between the size of the hash table and the number of records in each bin. The fewer records in each bin, the less work we have to do per bin; this means fewer expensive ST_Contains operations in our example above. However, as bins get smaller, more bins must cover the same area, increasing the time to build the hash table and its size. Our algorithm (see figure 2) searches for a hash table with low bin occupancy, capped to a maximum size. We parameterize the search over the &#34;bin threshold,&#34; the minimum bin size we will allow in the hash table. The tuner initializes the bin size by iterating over all the bounding boxes we want to add to our hash table and determine the size of the bounding box in each dimension; if that bounding box size is less than the current bin threshold but greater than the current is chosen bin size, we take that as the new bin size. By lowering the bin size threshold, we can systematically search across both hash table size and bin occupancy.\n    We will walk through one step of the tuning process in detail. Each step computes a set of one-dimensional bin sizes (the framework currently only supports two-dimensional bins but is built to support arbitrary dimensionality). We can calculate the total hash table size and a metric for average bin occupancy from the computed bin sizes. We use the calculated size and occupancy to decide whether to continue tuning. First, we look to see if the hash table is too large. If the hash table has grown too big, we use the previously determined threshold value/bin sizes. However, if no previous value exists, we have likely overshot the bin size and need to pick a more significant threshold. In this case, the algorithm reverses itself and picks larger bins until we have a hash table under the size threshold. The remaining two cases are straightforward. Keys per bin is a measure of bin occupancy, i.e., how many bounding boxes overlap a given bin (in aggregate). If the keys per bin are increasing, or if we have reached the keys per bin threshold, we terminate the algorithm, assuming that the size costs of a larger hash table will outweigh any further occupancy gains, and use the values from the previous iteration.\n   We have run several experiments to demonstrate the algorithm search process and tradeoff between bin occupancy and hash table size. The experiments below use a left-hand side table with geotagged records from Twitter&#39;s public API (the &#34;tweets&#34; table). We used an AMD Threadripper 2950X with dual NVIDIA RTX 2080 GPUs. The tweets were loaded with the standard fragment size (32M rows per fragment), split evenly across both GPUs. No additional optimizations were applied. We used three polygon tables; counties in the United States (3,233 rows with 7,944,863 total vertices across all polygons), zipcodes in the United States (33,144 rows with 52,210,207 total vertices), and census blocks in the United States (220,740 rows with 67,581,813 total vertices. The query was a left join between the tweets table and the relevant polygon table, with the first run excluded to eliminate the initial disk fetch of the data. We used a single count aggregate with no filters in the projection. Data for each experiment are in the figures below.\n     All experiments consisted of setting a target key per bin parameter and determining the resulting hash table size, build time, and execution time of the query utilizing the hash table. Using these figures, we can understand how the algorithm behaves in various settings and what the tradeoff between hash table size and bin occupancy means for hash table build time and query execution.\n Generally, results show that as the hash table gets larger, the build time becomes much more expensive, and the execution time can either moderately decrease, remain the same, or even increase. The US Counties in Tweets figure displays time on the y-axis; we see that the build time oscillates wildly at relatively low keys per bin, left of the red dotted line. We also see corresponding oscillations in the hash table size. Figure 4 (below) plotted the chosen bin thresholds against the same target keys per bin as in Figure 3(b). As one would reasonably expect, the largest hash table corresponds to the smallest bin size. However, occupancy and hash table size do not seem to be correlated at these small bin sizes. \u200d\n    To understand this correlation (or lack of correlation), we return to the tuning algorithm; to make tuning decisions, we must select new bin sizes for each step. Reducing the previous bin size by a fixed step and finding the largest bounding box dimension under the new threshold determines the new bin size per dimension. In this way, the algorithm moves through the different-sized bounding boxes, ensuring that at least one bounding box fits roughly within a bin. In practice, this avoids bin sizes scaled by a fixed size that does not match the underlying geometry (mainly since the units of the underlying geometry can vary by the coordinate system). By combining the bin size chooser with hash table size and keys per bin metrics, we can minimize execution time (by maximizing hash table size) using keys per bin to keep build times in check. Indeed, the default solution is either at or relatively close to optimal in Figure 2.\n What happens when the bins get smaller? A slight variation in bin size at small scales results in a dramatic difference in hash table size. The small bin size is typically the result of many steps because the algorithm searches through bin sizes based on existing data and selects smaller bounding boxes at each iteration with a fixed step size. The keys per bin occupancy metric change as we work through bounding boxes of similar sizes. Suddenly, we jump to a much smaller bounding box; this causes the hash table size to increase dramatically and change the occupancy, which terminates the algorithm at the previous iteration (see Figure 4b). Essentially, the bin occupancy metric prevents us from \u201cfalling through\u201d bounding boxes to one which is much smaller than the \u201caverage\u201d bounding box size in the dataset.\n In summary, our experiments show that the occupancy metric helps the tuning algorithm avoid dramatic changes in hash table size due to &#34;slipping down&#34; to the next group of bounding boxes, which may be much smaller than our experimentation group. By combining an experimentally determined minimum occupancy threshold with occupancy trend, we can abort tuning right at the edge of a reasonably large hash table (giving low bin occupancy and good performance) without falling into an unstable region where the hash table size can increase by orders of magnitude or oscillate wildly across similar occupancy metrics. While this algorithm produces strong results, additional optimizations are possible. We want to solve the optimization problem to maximize hash table size for a given occupancy threshold and pick an occupancy threshold that maximizes query execution time without creating an unreasonable build time. Consider this our first attempt at approximating a solution.\n Even though we are looking at additional optimizations to increase parallelism and performance of our overlaps join approach, it already has shown to be of immense benefit for bringing big geo-joins to be interactive or near-interactive performance levels. On a machine, with 2 Nvidia RTX 3090 GPUs, overlaps join increased performance over loop join between 200 to 1,200X on various examples, at the most extreme increasing a join of US tweets to US census block groups from 11.3K lookups per second with loop join to 22.38M lookups per second with overlaps join.\u00a0 Finally, we believe there are additional speedups possible. For example, experiments leveraging space-filling curves to order and hash the data suggest the potential to gain an additional 3-4X in performance by increasing spatial locality and lowering execution divergence during the probe phase of the hash join, so stay tuned for more on this front.\n Point in polygon joins are just one example application of the techniques described above. The generic OVERLAPS operator applies to various queries, including spatial and temporal queries (or combinations of the two). In general, two broad applications emerge; queries requiring an algorithm to construct the hash table and queries that dictate the construction of the hash table based on the predicate defining the OVERLAPS relationship in the query. We have implemented distance joins between geospatial points as an example of the latter type; if a user requests all points within N units of each other, we can construct the hash table such that a simple search of neighboring bins is always guaranteed to return the points which might be within N units of each other. While we are in the early stages of productionizing these techniques, the point in polygon join is available in OmniSci as of version 5.6 across all product modalities, including desktop, OmniSci Free, and the Enterprise Edition.", "posttime": "2021-06-30 01:39:48", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5730\u7406,geospatial,\u8fde\u63a5", "title": "\u5728\u6bd4\u4f8b\u4e0b\u5236\u4f5c\u5730\u7406\u7a7a\u95f4\u52a0\u5165\u4e92\u52a8 ", "title_en": "Making geospatial joins interactive at scale", "transed": 1, "url": "https://www.omnisci.com/blog/making-geospatial-joins-interactive-at-scale", "via": "", "real_tags": ["\u5730\u7406", "\u8fde\u63a5"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068678, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "KVM\uff08\u57fa\u4e8e\u5185\u6838\u7684\u865a\u62df\u673a\uff09\u662f\u57fa\u4e8eLinux\u7684\u4e91\u73af\u5883\u7684De-Facto\u6807\u51c6\u865a\u62df\u673a\u7ba1\u7406\u7a0b\u5e8f\u3002\u5728Azure\u4e4b\u5916\uff0c\u51e0\u4e4e\u6240\u6709\u5927\u578b\u4e91\u548c\u6258\u7ba1\u63d0\u4f9b\u5546\u90fd\u5728KVM\u4e4b\u4e0a\u8fd0\u884c\uff0c\u5c06\u5176\u8f6c\u5316\u4e3a\u4e91\u4e2d\u7684\u4e00\u4e2a\u57fa\u672c\u5b89\u5168\u8fb9\u754c\u4e4b\u4e00\u3002\n    \u5728\u672c\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u6211\u63cf\u8ff0\u4e86\u7279\u5b9a\u4e8ekVM\u7684AMD\u4ee3\u7801\u4e2d\u7684\u6f0f\u6d1e\uff0c\u5e76\u8ba8\u8bba\u4e86\u5982\u4f55\u5c06\u6b64\u9519\u8bef\u53d8\u6210\u5b8c\u6574\u7684\u865a\u62df\u673a\u8f6c\u4e49\u3002\u636e\u6211\u6240\u77e5\uff0c\u8fd9\u662f\u7b2c\u4e00\u4e2a\u516c\u5f00\u5199\u4f5cKVM\u8bbf\u5ba2\u5230\u4e3b\u673a\u7a81\u7834\uff0c\u4e0d\u4f9d\u8d56\u4e8eQEMU\u7b49\u7528\u6237\u7a7a\u95f4\u7ec4\u4ef6\u4e2d\u7684\u9519\u8bef\u3002\u8ba8\u8bba\u7684\u9519\u8bef\u88ab\u5206\u914d\u4e86CVE-2021-29657\uff0c\u5f71\u54cd\u4e86\u5185\u6838\u7248\u672cV5.10-RC1\u81f3V5.12-RC6\uff0c\u5e76\u57282021\u5e743\u6708\u5e95\u88ab\u4fee\u8865\u3002\u7531\u4e8e\u8be5\u9519\u8bef\u4ec5\u5728V5.10\u4e2d\u88ab\u89e3\u91ca\uff0c\u5e76\u4e14\u5728\u5927\u7ea65\u4e2a\u6708\u540e\u53d1\u73b0\uff0c\u5927\u591a\u6570\u771f\u5b9e\u7684KVM\u90e8\u7f72\u4e0d\u5e94\u53d7\u5230\u5f71\u54cd\u3002\u6211\u4ecd\u7136\u8ba4\u4e3a\u8fd9\u4e2a\u95ee\u9898\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u6848\u4f8b\u7814\u7a76\uff0c\u53ef\u4ee5\u5728\u4e3aKVM\u5efa\u7acb\u7a33\u5b9a\u7684\u5ba2\u4eba\u5230\u4e3b\u7ba1\u9003\u751f\u7684\u5de5\u4f5c\u4e2d\uff0c\u5e0c\u671b\u8fd9\u4e2a\u5199\u4f5c\u80fd\u591f\u52a0\u5f3a\u865a\u62df\u673a\u7ba1\u7406\u7a0b\u5e8f\u59a5\u534f\u4e0d\u4ec5\u662f\u7406\u8bba\u95ee\u9898\u7684\u60c5\u51b5\u3002\n    \u5728\u6f5c\u5165\u9519\u8bef\u548c\u5265\u524a\u4e4b\u524d\uff0c\u6211\u5f00\u59cb\u7b80\u77ed\u6982\u8ff0KVM\u7684\u4f53\u7cfb\u7ed3\u6784\u3002\n     KVM\u662f\u4e00\u79cd\u57fa\u4e8eLinux\u7684\u5f00\u6e90\u7ba1\u7406\u7a0b\u5e8f\uff0c\u652f\u6301X86\uff0cARM\uff0cPowerPC\u548cS / 390\u4e0a\u7684\u786c\u4ef6\u52a0\u901f\u865a\u62df\u5316\u3002\u4e0e\u5176\u4ed6\u5927\u5f00\u6e90\u7ba1\u7406\u7a0b\u5e8fXen\u76f8\u6bd4\uff0cKVM\u4e0eLinux\u5185\u6838\u6df1\u5ea6\u96c6\u6210\uff0c\u5e76\u5728\u5176\u8c03\u5ea6\uff0c\u5185\u5b58\u7ba1\u7406\u548c\u786c\u4ef6\u96c6\u6210\u4e0a\u6784\u5efa\uff0c\u4ee5\u63d0\u4f9b\u6709\u6548\u7684\u865a\u62df\u5316\u3002\n    KVM\u5b9e\u73b0\u4e3a\u4e00\u4e2a\u6216\u591a\u4e2a\u5185\u6838\u6a21\u5757\uff08kvm.ko plus kvm-intel.ko\u6216kvm-amd.ko\u4e0a\u7684x86\uff09\uff0c\u5c06\u4f4e\u7ea7IOCTL\u7684API\u516c\u5f00\u5230/ dev / kvm\u8bbe\u5907\u4e0a\u7684\u7528\u6237\u7a7a\u95f4\u8fdb\u7a0b\u3002\u4f7f\u7528\u6b64API\uff0c\u7528\u6237\u7a7a\u95f4\u8fdb\u7a0b\uff08\u901a\u5e38\u79f0\u4e3aVMM for Virtual Machine Manager\uff09\u53ef\u4ee5\u521b\u5efa\u65b0\u7684VM\uff0c\u5206\u914dVCPU\u548c\u5185\u5b58\uff0c\u4ee5\u53ca\u62e6\u622a\u5185\u5b58\u6216IO\u8bbf\u95ee\uff0c\u4ee5\u63d0\u4f9b\u5bf9\u6a21\u62dfD\u6216\u865a\u62df\u5316\u611f\u77e5\u786c\u4ef6\u8bbe\u5907\u7684\u8bbf\u95ee\u3002 QEMU\u4e00\u76f4\u662f\u57fa\u4e8eKVM\u7684\u865a\u62df\u5316\u7684\u6807\u51c6\u7528\u6237\u7a7a\u95f4\u9009\u62e9\u5f88\u957f\u65f6\u95f4\uff0c\u4f46\u5728\u8fc7\u53bb\u7684\u51e0\u5e74\u4e2d\uff0cLKVM\uff0cCROSVM\u6216\u97ad\u70ae\u7b49\u66ff\u4ee3\u65b9\u6848\u5df2\u7ecf\u5f00\u59cb\u53d8\u5f97\u6d41\u884c\u3002\n    \u867d\u7136KVM\u5bf9\u5355\u72ec\u7684\u7528\u6237\u7a7a\u95f4\u7ec4\u4ef6\u7684\u4f9d\u8d56\u53ef\u80fd\u4f3c\u4e4e\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u597d\u5904\uff1aKVM\u4e3b\u673a\u4e0a\u8fd0\u884c\u7684\u6bcf\u4e2aVM\u90fd\u67091\uff1a1\u6620\u5c04\u5230Linux\u8fc7\u7a0b\uff0c\u4f7f\u5176\u4f7f\u7528\u6807\u51c6\u7684Linux\u5de5\u5177\u53ef\u7ba1\u7406\u3002\n    \u4f8b\u5982\uff0c\u8fd9\u610f\u5473\u7740\u5609\u5bbe\uff06\uff0339; s\u5b58\u50a8\u5668\u53ef\u4ee5\u901a\u8fc7\u8f6c\u50a8\u5176\u7528\u6237\u7a7a\u95f4\u8fc7\u7a0b\u7684\u5206\u914d\u5185\u5b58\u6216\u53ef\u4ee5\u8f7b\u677e\u5730\u5e94\u7528CPU\u65f6\u95f4\u548c\u5185\u5b58\u7684\u8d44\u6e90\u9650\u5236\u6765\u68c0\u67e5\u3002\u6b64\u5916\uff0cKVM\u53ef\u4ee5\u5c06\u5927\u591a\u6570\u4e0e\u8bbe\u5907\u4eff\u771f\u76f8\u5173\u7684\u5de5\u4f5c\u5378\u8f7d\u5230Userspace\u7ec4\u4ef6\u3002\u5728\u4e0e\u4e2d\u65ad\u5904\u7406\u76f8\u5173\u7684\u51e0\u4e2a\u6027\u80fd\u654f\u611f\u8bbe\u5907\u4e4b\u5916\uff0c\u53ef\u4ee5\u5728\u7528\u6237\u4f69\u7eb3\u4e2d\u5b9e\u73b0\u6240\u6709\u590d\u6742\u7684\u4f4e\u7ea7\u4ee3\u7801\uff0c\u7528\u4e8e\u63d0\u4f9b\u865a\u62df\u78c1\u76d8\uff0c\u7f51\u7edc\u6216GPU\u8bbf\u95ee\u6743\u9650\u3002 \n\u5728\u67e5\u770b\u4e0eKVM\u76f8\u5173\u7684\u516c\u4f17\u64b0\u5199\u76f8\u5173\u7684\u6f0f\u6d1e\u5e76\u5229\u7528\u5b83\u53d8\u5f97\u6e05\u695a\uff0c\u8fd9\u79cd\u8bbe\u8ba1\u662f\u4e00\u4e2a\u660e\u667a\u7684\u51b3\u5b9a\u3002\u5927\u591a\u6570\u62ab\u9732\u7684\u6f0f\u6d1e\u548c\u6240\u6709\u516c\u5171\u5229\u7528\u5f71\u54cdQEMU\u53ca\u5176\u5bf9\u6a21\u62df/\u534a\u865a\u62df\u5316\u8bbe\u5907\u7684\u652f\u6301\u3002\n    \u5c3d\u7ba1KVM\u7684\u5185\u6838\u653b\u51fb\u8868\u9762\u660e\u663e\u5c0f\u4e8e\u7531\u9ed8\u8ba4\u7684QEMU\u914d\u7f6e\u6216\u7c7b\u4f3c\u7684\u7528\u6237\u7a7a\u95f4VMMS\u66b4\u9732\u7684\u653b\u51fb\uff0c\u4f46KVM\u6f0f\u6d1e\u5177\u6709\u4f7f\u5176\u5bf9\u653b\u51fb\u8005\u975e\u5e38\u6709\u4ef7\u503c\u7684\u4f18\u52bf\uff1a\n \u867d\u7136\u7528\u6237\u7a7a\u95f4VMMS\u53ef\u4ee5\u662fSandboxed\u4ee5\u51cf\u5c11VM Breakout\u7684\u5f71\u54cd\uff0c\u4f46\u6ca1\u6709\u6b64\u7c7b\u9009\u9879\u53ef\u7528\u4e8eKVM\u672c\u8eab\u3002\u4e00\u65e6\u653b\u51fb\u8005\u80fd\u591f\u5728\u4e3b\u673a\u5185\u6838\u7684\u4e0a\u4e0b\u6587\u4e2d\u5b9e\u73b0\u4ee3\u7801\u6267\u884c\uff08\u6216\u7c7b\u4f3c\u5f3a\u5927\u7684\u57fa\u8bed\uff09\uff0c\u7cfb\u7edf\u5b8c\u5168\u6cc4\u9732\u3002\n \u7531\u4e8eQEMU\u7684\u5b89\u5168\u5386\u53f2\u7a0d\u5dee\uff0c\u65b0\u7684\u7528\u6237\u7a7a\u95f4VMMS\uff0c\u5982CROSVM\u6216Firecracker\u90fd\u4ee5Rust\uff0c\u4e00\u79cd\u5185\u5b58\u5b89\u5168\u8bed\u8a00\u7f16\u5199\u3002\u5f53\u7136\uff0c\u7531\u4e8eKVM API\u7684\u9519\u8bef\u6216\u9519\u8bef\u4f7f\u7528\uff0c\u4ecd\u7136\u5b58\u5728\u975e\u8bb0\u5fc6\u5b89\u5168\u6f0f\u6d1e\u6216\u95ee\u9898\uff0c\u4f46\u4f7f\u7528RECT\u6709\u6548\u5730\u9632\u6b62\u4e86\u8fc7\u53bb\u5728\u57fa\u4e8eC\u7684\u7528\u6237\u7a7a\u95f4VMMS\u4e2d\u53d1\u73b0\u7684\u5927\u591a\u6570\u9519\u8bef\u3002\n \u6700\u540e\uff0c\u7eafKVM\u5229\u7528\u53ef\u4ee5\u9488\u5bf9\u4f7f\u7528\u4e13\u6709\u6216\u91cd\u578b\u7528\u6237\u7a7a\u95f4VMM\u7684\u76ee\u6807\u3002\u867d\u7136\u5927\u4e91\u63d0\u4f9b\u5546\u516c\u5f00\u7684\u865a\u62df\u5316\u5806\u6808\u6ca1\u6709\u8be6\u7ec6\u63cf\u8ff0\uff0c\u4f46\u53ef\u4ee5\u5b89\u5168\u5730\u5047\u8bbe\u5b83\u4eec\u4e0d\u4f9d\u8d56\u4e8e\u672a\u4fee\u6539\u7684QEMU\u7248\u672c\uff0c\u4ee5\u83b7\u5f97\u5176\u751f\u4ea7\u5de5\u4f5c\u8d1f\u8f7d\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0cKVM\u7684\u8f83\u5c0f\u7684\u4ee3\u7801\u57fa\u7840\u4f7f\u5f97\u91cd\u5927\u4fee\u6539\u4e0d\u592a\u53ef\u80fd\uff08\u5e76\u4e14KVM\u7684\u8d21\u732e\u8005\u5217\u8868\u70b9\u5728\u5b58\u5728\u65f6\uff0c\u5728\u4e0a\u6e38\u7684\u4e0a\u6e38\u4fee\u6539\u65f6\uff09\u3002\n      \u8003\u8651\u5230\u8fd9\u4e9b\u4f18\u52bf\uff0c\u6211\u51b3\u5b9a\u82b1\u4e00\u4e9b\u65f6\u95f4\u4e3akvm\u6f0f\u6d1e\u8fdb\u884c\u72e9\u730e\uff0c\u8fd9\u53ef\u80fd\u53d8\u6210\u5ba2\u4eba\u5230\u4e3b\u673a\u9003\u751f\u3002\u5728\u8fc7\u53bb\uff0c\u6211\u53d6\u5f97\u4e86\u4e00\u4e9b\u6210\u529f\uff0c\u5728\u82f1\u7279\u5c14CPU\u4e0a\u627e\u5230\u4e86KVM\u652f\u6301\u5d4c\u5957\u865a\u62df\u5316\u7684\u6f0f\u6d1e\uff0c\u56e0\u6b64\u56de\u987e\u4e86AMD\u7684\u76f8\u540c\u529f\u80fd\u4f3c\u4e4e\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u8d77\u70b9\u3002\u8fd9\u66f4\u4e3a\u771f\u5b9e\uff0c\u56e0\u4e3a\u8fd1\u671fAMD\u7684\u5e02\u573a\u4efd\u989d\u7684\u589e\u52a0\u610f\u5473\u7740KVM\u7684AMD\u5b9e\u65bd\u7a81\u7136\u6210\u4e3a\u4e00\u4e2a\u6bd4\u8fc7\u53bb\u51e0\u5e74\u66f4\u6709\u8da3\u7684\u76ee\u6807\u3002\n    \u5d4c\u5957\u865a\u62df\u5316\uff0cVM\uff08\u540d\u4e3aL1\uff09\u7684\u80fd\u529b\u5c06\u5d4c\u5957\u7684\u8bbf\u5ba2\uff08L2\uff09\uff08L2\uff09\uff0c\u4e5f\u662f\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u7684\u5229\u57fa\u7279\u5f81\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u786c\u4ef6\u6539\u8fdb\uff0c\u51cf\u5c11\u4e86\u5176\u5f00\u9500\u548c\u8d8a\u6765\u8d8a\u591a\u7684\u5ba2\u6237\u9700\u6c42\uff0c\u5b83\u53d8\u5f97\u66f4\u52a0\u5e7f\u6cdb\u3002\u4f8b\u5982\uff0cMicrosoft\u4e25\u91cd\u63a8\u52a8\u57fa\u4e8e\u865a\u62df\u5316\u7684\u5b89\u5168\u6027\uff0c\u4f5c\u4e3a\u8f83\u65b0\u7684Windows\u7248\u672c\u7684\u4e00\u90e8\u5206\uff0c\u9700\u8981\u5d4c\u5957\u865a\u62df\u5316\u6765\u652f\u6301\u4e91\u6258\u7ba1\u7684Windows\u5b89\u88c5\u3002 KVM\u9ed8\u8ba4\u652f\u6301AMD\u548cIntel\u4e0a\u7684\u5d4c\u5957\u865a\u62df\u5316\uff0c\u56e0\u6b64\u5982\u679c\u7ba1\u7406\u5458\u6216\u7528\u6237\u7a7a\u95f4VMM\u672a\u660e\u786e\u7981\u7528\u5b83\uff0c\u5219\u5b83\u662f\u6076\u610f\u6216\u53d7\u635fVM\u7684\u653b\u51fb\u66f2\u9762\u7684\u4e00\u90e8\u5206\u3002 \nAMD\u7684\u865a\u62df\u5316\u6269\u5c55\u540d\u4e3aSVM\uff08\u5bf9\u4e8e\u5b89\u5168\u865a\u62df\u673a\uff09\uff0c\u4e3a\u4e86\u652f\u6301\u5d4c\u5957\u865a\u62df\u5316\uff0c\u4e3b\u673a\u7ba1\u7406\u7a0b\u5e8f\u9700\u8981\u62e6\u622a\u5176\u8bbf\u5ba2\u6267\u884c\u7684\u6240\u6709SVM\u6307\u4ee4\uff0c\u6a21\u62df\u5176\u884c\u4e3a\u5e76\u5c06\u5176\u4e0e\u5e95\u5c42\u786c\u4ef6\u540c\u6b65\u4fdd\u6301\u72b6\u6001\u3002\u6b63\u5982\u60a8\u53ef\u80fd\u60f3\u8c61\u7684\u90a3\u6837\uff0c\u5bf9\u590d\u6742\u903b\u8f91\u7f3a\u9677\u7684\u5de8\u5927\u6f5c\u529b\u6765\u5b9e\u73b0\u8fd9\u4e00\u6b63\u786e\u7684\u56f0\u96be\uff0c\u4f7f\u5176\u6210\u4e3a\u624b\u52a8\u4ee3\u7801\u5ba1\u67e5\u7684\u5b8c\u7f8e\u76ee\u6807\u3002\n     \u5728\u8fdb\u5165KVM CodeBase\u548c\u6211\u53d1\u73b0\u7684\u9519\u8bef\u4e4b\u524d\uff0c\u6211\u60f3\u5feb\u901f\u4ecb\u7ecdAMD SVM\u5982\u4f55\u4f7f\u9057\u8ff9\u7684\u5176\u4f59\u90e8\u5206\u66f4\u5bb9\u6613\u7406\u89e3\u3002 \uff08\u5bf9\u4e8e\u5f7b\u5e95\u7684\u6587\u6863\uff0c\u8bf7\u53c2\u9605AMD64\u67b6\u6784\u7a0b\u5e8f\u5458\u624b\u518c\uff0c\u7b2c2\u5377\uff1a\u7cfb\u7edf\u7f16\u7a0b\u7b2c15\u7ae0\u3002\uff09SVM\u5982\u679c\u901a\u8fc7\u5728EFER MSR\u4e2d\u8bbe\u7f6eSVME\u4f4d\uff0c\u8bf7\u652f\u63016\u4e2a\u65b0\u6307\u4ee4\u5230X86-64\u3002\u8fd9\u4e9b\u6307\u4ee4\u6700\u6709\u8da3\u7684\u662fVMRUN\uff08\u56e0\u4e3a\u5b83\u7684\u540d\u5b57\u8868\u660e\uff09\u8d1f\u8d23\u8fd0\u884cGuest VM\u3002 VMRUN\u901a\u8fc7rax\u5bc4\u5b58\u5668\u6307\u5411\u540d\u4e3a\u201c\u865a\u62df\u673a\u63a7\u5236\u5757\u201d\uff08vmcb\uff09\u7684\u6570\u636e\u7ed3\u6784\u7684\u9875\u9762\u5bf9\u9f50\u7684\u7269\u7406\u5730\u5740\uff0c\u8be5rax\u5bc4\u5b58\u5668\u91c7\u7528\u9690\u5f0f\u53c2\u6570\uff0c\u8be5\u6570\u636e\u7ed3\u6784\uff08vmcb\uff09\u63cf\u8ff0\u4e86VM\u7684\u72b6\u6001\u548c\u914d\u7f6e\u3002\n    VMCB\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\u9996\u5148\uff0c\u72b6\u6001\u4fdd\u5b58\u533a\u57df\u5b58\u50a8\u6240\u6709\u8bbf\u5ba2\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u5305\u62ec\u6bb5\u548c\u63a7\u5236\u5bc4\u5b58\u5668\u3002\u5176\u6b21\uff0c\u63cf\u8ff0VM\u914d\u7f6e\u7684\u63a7\u5236\u533a\u57df\u3002\u63a7\u5236\u533a\u57df\u63cf\u8ff0\u4e3aVM\u542f\u7528\u7684\u865a\u62df\u5316\u7279\u5f81\uff0c\u8bbe\u7f6e\u622a\u53d6\u7684VM\u52a8\u4f5c\u4ee5\u89e6\u53d1VM\u9000\u51fa\uff0c\u5e76\u5b58\u50a8\u4e00\u4e9b\u57fa\u672c\u914d\u7f6e\u503c\uff0c\u4f8b\u5982\u7528\u4e8e\u5d4c\u5957\u5206\u9875\u7684\u9875\u9762\u8868\u5730\u5740\u3002\n    \u5982\u679cVMCB\u6b63\u786e\u51c6\u5907\uff08\u5e76\u4e14\u6211\u4eec\u5c1a\u672a\u5728VM\u4e2d\u8fd0\u884c\uff09\uff0c\u5219VMRUN\u5c06\u9996\u5148\u5c06\u4e3b\u673a\u72b6\u6001\u4fdd\u5b58\u5728\u540d\u4e3aHOSS SAVE\u533a\u57df\u7684\u5185\u5b58\u533a\u57df\u4e2d\uff0c\u901a\u8fc7\u5c06\u7269\u7406\u5730\u5740\u5199\u5165VM_HSAVE_PA MSR\u6765\u914d\u7f6e\u5176\u5730\u5740\u3002\u4fdd\u5b58\u4e3b\u673a\u72b6\u6001\u540e\uff0c\u5c06CPU\u5207\u6362\u5230VM\u4e0a\u4e0b\u6587\uff0c\u53ea\u6709\u5728\u4e00\u4e2a\u539f\u56e0\u6216\u53e6\u4e00\u4e2a\u539f\u56e0\u89e6\u53d1VM Exit\u540e\uff0cvmrun\u4ec5\u8fd4\u56de\u3002\n    SVM\u7684\u4e00\u4e2a\u6709\u8da3\u65b9\u9762\u662fVM Exit\u540e\u7684\u5927\u91cf\u72b6\u6001\u6062\u590d\u5fc5\u987b\u7531\u865a\u62df\u673a\u7ba1\u7406\u7a0b\u5e8f\u5b8c\u6210\u3002\u53d1\u751fVM\u9000\u51fa\u540e\uff0c\u4ec5\u6062\u590dRIP\uff0cRSP\u548cRAX\uff0c\u6062\u590d\u5230\u5148\u524d\u7684\u4e3b\u673a\u503c\uff0c\u5e76\u4e14\u6240\u6709\u5176\u4ed6\u901a\u7528\u5bc4\u5b58\u5668\u4ecd\u5305\u542b\u8bbf\u5ba2\u503c\u3002\u6b64\u5916\uff0c\u5b8c\u6574\u7684\u4e0a\u4e0b\u6587\u4ea4\u6362\u673a\u9700\u8981\u624b\u52a8\u6267\u884cVMSAVE / VMLOAD\u6307\u4ee4\uff0c\u8be5\u6307\u4ee4\u4fdd\u5b58/\u52a0\u8f7d\u989d\u5916\u7684\u7cfb\u7edf\u5bc4\u5b58\u5668\uff08FS\uff0cSS\uff0cLDTR\uff0cStar\uff0cLSTAR ...\uff09\u3002\n    \u5bf9\u4e8e\u5d4c\u5957\u865a\u62df\u5316\u5de5\u4f5c\uff0cKVM\u62e6\u622aVMRUN\u6307\u4ee4\u7684\u6267\u884c\uff0c\u5e76\u6839\u636eVMCB\u51c6\u5907\u7684L1\u8bbf\u5ba2\uff08\u79f0\u4e3akVM\u672f\u8bed\u4e2d\u7684VMCB12\uff09\u521b\u5efa\u81ea\u5df1\u7684VMCB\u3002\u5f53\u7136\uff0cKVM\u4e0d\u80fd\u76f8\u4fe1\u5ba2\u6237\u63d0\u4f9bvmcb12\uff0c\u5e76\u4e14\u9700\u8981\u4ed4\u7ec6\u9a8c\u8bc1\u6700\u7ec8\u4ee5\u6765\u4f20\u9012\u7ed9\u786c\u4ef6\u7684\u771f\u5b9eVMCB\u7684\u6240\u6709\u5b57\u6bb5\uff08\u79f0\u4e3avmcb02\uff09\u3002\n    AMD\u4e0a\u7684\u5927\u591a\u6570KVM\u7528\u4e8e\u5d4c\u5957\u865a\u62df\u5316\u7684\u4ee3\u7801\u5728ARCH / X86 / KVM / SVM /\u5d4c\u5957\u4e2d\u5b9e\u73b0.C\uff0c\u62e6\u622a\u5d4c\u5957\u8bbf\u5ba2\u7684\u4ee3\u7801\u5728Nested_svm_vmrun\u4e2d\u5b9e\u73b0\uff1a \n*\u4fdd\u5b58\u65e7\u7684VMCB\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u9700\u8981\u9009\u62e9\u6211\u4eec\u7684\u4fdd\u5b58\uff0c\u4f46\u53ef\u4ee5\n      \u8be5\u529f\u80fd\u9996\u5148\u57281\uff08\u7f16\u7801\u6837\u672c\u4e2d\u6807\u8bb0\uff09\u4e2d\u7684\u5f53\u524d\u6d3b\u52a8\u7684VMCB\uff08SVM-\uff06gt; VCMB\uff09\u4e2d\u7684rax\u7684\u503c\u3002\u5bf9\u4e8e\u4f7f\u7528\u5d4c\u5957\u5206\u9875\u7684\u8bbf\u5ba2\uff08\u73b0\u5728\u662f\u73b0\u5728\u552f\u4e00\u7684\u76f8\u5173\u914d\u7f6e\uff09Rax\u5305\u542b\u4e00\u4e2a\u5ba2\u6237\u7269\u7406\u5730\u5740\uff08GPA\uff09\uff0c\u5b83\u9700\u8981\u9996\u5148\u5c06\u5176\u8f6c\u6362\u4e3a\u4e3b\u673a\u7269\u7406\u5730\u5740\uff08HPA\uff09\u3002 KVM_VCPU_MAP\uff082\uff09\u8d1f\u8d23\u6b64\u8f6c\u6362\uff0c\u5e76\u5c06\u5e95\u5c42\u9875\u9762\u6620\u5c04\u5230\u53ef\u901a\u8fc7KVM\u76f4\u63a5\u8bbf\u95ee\u7684\u4e3b\u673a\u865a\u62df\u5730\u5740\uff08HVA\uff09\u3002\n    vmcb\u6620\u5c04\u540e\uff0c\u5c06indested_vmcb_checks\u8c03\u75283\u4e2d\u7684\u67d0\u4e9b\u57fa\u672c\u9a8c\u8bc1\u3002\u4e4b\u540e\uff0c\u5c06\u5b58\u50a8\u5728SVM-\uff06gt\u4e2d\u7684L1 Guest\u4e0a\u4e0b\u6587\u3002VMCB\u88ab\u590d\u5236\u5230\u4e3b\u673a\u4fdd\u5b58\u533a\u57dfSVM-\uff06gt;\u5d4c\u5957\u3002\u5728KVM\u4e4b\u524d\u901a\u8fc7\u8c03\u7528Enter_svm_guest_mode\uff084\uff09\u8fdb\u5165\u5d4c\u5957\u7684guatern never\u4e4b\u524d\u3002\n         \u67e5\u770bEnter_svm_guest_Mode\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230KVM\u5c06VMCB12\u63a7\u5236\u533a\u57df\u76f4\u63a5\u590d\u5236\u5230SVM-\uff06GT;\u5d4c\u5957.DCL\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5bf9\u590d\u5236\u503c\u8fdb\u884c\u4efb\u4f55\u8fdb\u4e00\u6b65\u68c0\u67e5\u3002\n  \u719f\u6089\u53cc\u91cd\u83b7\u53d6\u6216\u4f7f\u7528\u65f6\u95f4\u4f7f\u7528\u65f6\u95f4\u6f0f\u6d1e\u7684\u8bfb\u8005\u53ef\u80fd\u5df2\u7ecf\u770b\u5230\u4e86\u4e00\u4e2a\u6f5c\u5728\u7684\u95ee\u9898\uff1aindested_svm_vmrun\u5f00\u5934\u7684\u547c\u53eb\u5bf9vmcb\u7684\u526f\u672c\u6267\u884c\u6240\u6709\u68c0\u67e5\u7684indapt_vmcb_check\u5b58\u50a8\u5728\u8bbf\u5ba2\u5185\u5b58\u4e2d\u3002\u8fd9\u610f\u5473\u7740\u5177\u6709\u591a\u4e2aCPU\u5185\u6838\u7684\u8bbf\u5ba2\u53ef\u4ee5\u5728indested_vmcb_checks\u9a8c\u8bc1\u540e\u4fee\u6539VMCB\u4e2d\u7684\u5b57\u6bb5\uff0c\u4f46\u5728\u5b83\u4eec\u88ab\u590d\u5236\u5230SVM-\uff06gt\u4e4b\u524d;\u5d4c\u5957\u3002\u5728load_nested_vmcb_control\u4e2d\u5d4c\u5957\u3002\n    \u8ba9\u6211\u4eec\u6765\u770b\u770bNested_vmcb_checks\uff0c\u770b\u770b\u6211\u4eec\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u6cd5\u7ed5\u8fc7\u4ec0\u4e48\u6837\u7684\u68c0\u67e5\uff1a\n         \u4e4d\u4e00\u770b\uff0c\u8fd9\u770b\u8d77\u6765\u5f88\u65e0\u5bb3\u3002 Control-\uff06gt; ASID\u672a\u4f7f\u7528\u4efb\u4f55\u4f4d\u7f6e\uff0c\u6700\u540e\u4e00\u6b21\u68c0\u67e5\u4ec5\u5bf9\u4e0d\u652f\u6301\u5d4c\u5957\u5206\u9875\u7684\u7cfb\u7edf\u76f8\u5173\u3002\u4f46\u662f\uff0c\u7b2c\u4e00\u4e2a\u68c0\u67e5\u7ed3\u679c\u662f\u975e\u5e38\u6709\u8da3\u7684\u3002 \n\u51fa\u4e8eME\u672a\u77e5\u7684\u539f\u56e0\uff0cSVM VMCB\u5305\u542b\u4e00\u4f4d\u4f4d\uff0c\u5176\u5728\u5ba2\u5ea7\u5185\u90e8\u6267\u884c\u65f6\u542f\u7528\u6216\u7981\u7528VMRUN\u6307\u4ee4\u7684\u62e6\u622a\u3002\u6e05\u9664\u8be5\u4f4d\u5b9e\u9645\u4e0a\u5e76\u975e\u5b9e\u9645\u652f\u6301\u786c\u4ef6\u5e76\u5bfc\u81f4\u7acb\u5373vmexit\uff0c\u56e0\u6b64indested_vmcb_check_controls\u4e2d\u7684\u6821\u9a8c\u53ea\u4f1a\u590d\u5236\u6b64\u884c\u4e3a\u3002\u5f53\u6211\u4eec\u901a\u8fc7\u53cd\u590d\u7ffb\u8f6c\u62e6\u622a_VmRun\u4f4d\u7684\u503c\u6765\u7ade\u4e89\u548c\u7ed5\u8fc7\u68c0\u67e5\u65f6\uff0c\u6211\u4eec\u6700\u7ec8\u53ef\u4ee5\u5728SVM-\uff06gt;\u5d4c\u5957.ctl\u4e2d\u5305\u542b0\u4ee3\u66ff\u62e6\u622a_Vmrun\u4f4d\u7684\u60c5\u51b5\u3002\u8981\u4e86\u89e3\u6211\u4eec\u9996\u6b21\u9700\u8981\u4e86\u89e3\u5d4c\u5957vmexit\u7684\u5f71\u54cd\uff0c\u8bf7\u53c2\u89c1kvm\uff1a\n    \u4e3bSVM\u9000\u51fa\u5904\u7406\u7a0b\u5e8f\u662fArch / x86 / kvm / svm.c\u4e2d\u7684\u51fd\u6570handle_exit\uff0c\u53ea\u8981\u53d1\u751fvmexit\u5c31\u4f1a\u8c03\u7528\u3002\u5f53KVM\u6b63\u5728\u8fd0\u884c\u5d4c\u5957\u7684\u8bbf\u5ba2\u65f6\uff0c\u9996\u5148\u5fc5\u987b\u68c0\u67e5\u9000\u51fa\u662f\u5426\u5e94\u7531\u81ea\u8eab\u6216L1\u865a\u62df\u673a\u7ba1\u7406\u7a0b\u5e8f\u5904\u7406\u3002\u4e3a\u6b64\uff0c\u5b83\u8c03\u7528unteed_svm_exit_handled\uff085\uff09whi ch\u5c06\u8fd4\u56denested_exit_done\uff0c\u5982\u679cvmexit\u5c06\u7531L1\u865a\u62df\u673a\u7ba1\u7406\u7a0b\u5e8f\u5904\u7406\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u901a\u8fc7L0\u865a\u62df\u673a\u7ba1\u7406\u7a0b\u5e8f\u8fdb\u884c\u8fdb\u4e00\u6b65\u5904\u7406\uff1a\n           indested_svm_exit_handled\u9996\u6b21\u8c03\u7528nested_svm_intercept\uff086\uff09\u4ee5\u67e5\u770b\u662f\u5426\u5e94\u8be5\u5904\u7406\u9000\u51fa\u3002\u5f53\u6211\u4eec\u901a\u8fc7\u5728L2 Guest\u4e2d\u6267\u884cVMRUN\u89e6\u53d1EXIT\u65f6\uff0c\u6267\u884c\u9ed8\u8ba4\u60c5\u51b5\uff087\uff09\u4ee5\u67e5\u770bSVM-\uff06gt\u4e2d\u7684\u62e6\u622a\u5668_Vmrun\u4f4d\u662f\u5426\u8bbe\u7f6e\u3002\u901a\u5e38\uff0c\u8fd9\u5e94\u8be5\u59cb\u7ec8\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u51fd\u6570\u8fd4\u56deNested_exit_done\u4ee5\u89e6\u53d1\u4eceL2\u5230L1\u7684\u5d4c\u5957VM\u9000\u51fa\uff0c\u5e76\u8ba9L1\u865a\u62df\u673a\u7ba1\u7406\u7a0b\u5e8f\u5904\u7406\u51fa\u53e3\uff088\uff09\u3002 \uff08\u4ee5\u8fd9\u79cd\u65b9\u5f0fKVM\u652f\u6301\u65e0\u9650\u5d4c\u5957\u7684\u865a\u62df\u673a\u7ba1\u7406\u7a0b\u5e8f\uff09\u3002\n    \u4f46\u662f\uff0c\u5982\u679cL1\u5ba2\u6237\u5229\u7528\u4e0a\u8ff0SVM-\uff06gt\u6240\u63cf\u8ff0\u7684\u7ade\u4e89\u6761\u4ef6;\u5d4c\u5957.ctl\u4e0d\u4f1a\u6709\u62e6\u622a\u5668\uff0c\u5e76\u4e14VM Exit\u5c06\u7531KVM\u672c\u8eab\u5904\u7406\u3002\u8fd9\u5bfc\u81f4\u7b2c\u4e8c\u6b21\u8c03\u7528indest_svm_vmrun\uff0c\u540c\u65f6\u4ecd\u5728L2 Guest\u4e0a\u4e0b\u6587\u4e2d\u8fd0\u884c\u3002 Nested_svm_vmrun\u672a\u5199\u5165\u4ee5\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\uff0c\u5e76\u76f2\u76ee\u5730\u8986\u76d6\u5b58\u50a8\u5728SVM-\uff06gt\u4e2d\u7684L1\u4e0a\u4e0b\u6587;\u5d4c\u5957.HSAVE\u4f7f\u7528\u5f53\u524d\u6d3b\u52a8\u7684SVM-\uff06GT\u7684\u6570\u636e; VMCB\u5305\u542bL2 Guest\u7684\u6570\u636e\uff1a\n     *\u4fdd\u5b58\u65e7\u7684VMCB\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u9700\u8981\u9009\u62e9\u6211\u4eec\u7684\u4fdd\u5b58\uff0c\u4f46\u53ef\u4ee5\n    \u8fd9\u6210\u4e3a\u4e00\u4e2a\u5b89\u5168\u95ee\u9898\uff0c\u56e0\u4e3a\u578b\u53f7\u7279\u5b9a\u5bc4\u5b58\u5668\uff08MSR\uff09\u62e6\u622a\u88ab\u5d4c\u5957\u7684\u8bbf\u5ba2\u5904\u7406\uff1a\n  SVM\u4f7f\u7528\u6743\u9650\u4f4d\u56fe\u6765\u63a7\u5236VM\u53ef\u4ee5\u8bbf\u95ee\u54ea\u4e9bMSR\u3002\u4f4d\u56fe\u662f\u4e00\u4e2a8KB\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u4e2aMSR\u4e24\u4e2a\u4f4d\uff0c\u5176\u4e2d\u4e00\u4e2a\u63a7\u5236\u8bfb\u53d6\u8bbf\u95ee\u548c\u53e6\u4e00\u4e2a\u5199\u8bbf\u95ee\u3002\u5728\u8be5\u4f4d\u7f6e\u4e2d\u76841\u4f4d\u610f\u5473\u7740\u63a5\u5165\u88ab\u62e6\u622a\u5e76\u89e6\u53d1VM\u51fa\u53e3\uff0c0\u6bd4\u7279\u8868\u793aVM\u5177\u6709\u76f4\u63a5\u8bbf\u95eeMSR\u3002\u4f4d\u56fe\u7684HPA\u5730\u5740\u5b58\u50a8\u5728VMCB\u63a7\u5236\u533a\u57df\u4e2d\uff0c\u5bf9\u4e8e\u6b63\u5e38\u7684L1 KVM Guest\uff0c\u4e00\u65e6\u521b\u5efaVCPU\uff0c\u9875\u9762\u5c31\u4f1a\u5206\u914d\u5e76\u56fa\u5b9a\u5230\u5185\u5b58\u4e2d\u3002 \n\u5bf9\u4e8e\u5d4c\u5957\u7684\u8bbf\u5ba2\uff0cMSR\u6743\u9650\u4f4d\u56fe\u5b58\u50a8\u5728SVM-\uff06gt\u4e2d;\u5d4c\u5957.msrpm\u53ca\u5176\u7269\u7406\u5730\u5740\u88ab\u590d\u5236\u5230\u6d3b\u52a8\u7684VMCB\u4e2d\uff08\u5728SVM-\uff06gt; vmcb-\uff06gt; control.msrpm_base_pa\uff09\u4e2d\uff0c\u800c\u5d4c\u5957guest\u865a\u62df\u673a\u8fd0\u884c\u3002\u4f7f\u7528\u6240\u63cf\u8ff0\u7684\u53cc\u91cd\u8c03\u7528inested_svm_vmrun\uff0c\u6076\u610f\u5ba2\u6237\u673a\u53ef\u4ee5\u5c06\u6b64\u503c\u590d\u5236\u5230svm-\uff06gt;\u6267\u884cCopy_vmcb_Control_area\u65f6\uff0c\u5c06\u6b64\u503c\u590d\u5236\u5230SVM-\uff06gt;\u5d4c\u5957.hsave vmcb\u3002\u8fd9\u5f88\u6709\u8da3\uff0c\u56e0\u4e3aKVM\u7684HSAVE\u533a\u57df\u901a\u5e38\u4ec5\u5305\u542bL1 Guest\u4e0a\u4e0b\u6587\u6240\u4ee5SVM-\uff06gt;\u5d4c\u5957.hsave.msrpm_base_pa\u901a\u5e38\u6307\u5411Pinned VCPU\u7684MSR\u4f4d\u56fe\u9875\u9762\u3002\n      \u81ea\u63d0\u4ea4\u201c2FCF4876\uff1aKVM\uff1aNSVM\uff1a\u4ece\u53bb\u5e7410\u6708\u5f00\u59cb\u5d4c\u5957\u72b6\u6001\u7684\u9700\u6c42\u5206\u914d\u201d\uff0cSVM-\uff06GT;\u5f53\u5ba2\u6237\u66f4\u6539MSR_EFER\u5bc4\u5b58\u5668\u7684SVME\u4f4d\u65f6\uff0c\u52a8\u6001\u5206\u914d\u5e76\u91ca\u653e\u5d4c\u5957.MSRPM\uff1a\n       \u5bf9\u4e8e\u201c\u7981\u7528SVME\u201d\u6848\u4f8b\uff0cKVM\u5c06\u9996\u5148\u8c03\u7528svm_leave_\uff0c\u4ee5\u5f3a\u5236\u7559\u4e0b\u6f5c\u529b\n  \u5d4c\u5957\u5ba2\u4eba\u7136\u540e\u91ca\u653eSVM-\uff06gt;\u5d4c\u5957\u6570\u636e\u7ed3\u6784\uff08\u5305\u62ecMSR\u6743\u9650\u4f4d\u56fe\u7684\u5907\u4efd\u9875\u9762\uff09\u5728SVM_FREE_\u5df2\u88ab\u4e2d\u3002\u6b63\u5982SVM_LEAVE_NESTED\u8ba4\u4e3asvm-\uff06gt;\u5d4c\u5957.hsave\u5305\u542bl1 guest\u865a\u62df\u673a\u7684\u4fdd\u5b58\u4e0a\u4e0b\u6587\uff0c\u5b83\u53ea\u662f\u5c06\u5176\u63a7\u4ef6\u533a\u57df\u590d\u5236\u5230\u771f\u5b9e\u7684vmcb\uff1a\n           svm-\uff06gt;\u5d4c\u5957 - \uff06gt; msrpm\u3002\u4e00\u65e6\u5b8c\u6210\u4e86SVM_FREE_\u5df2\u5b8c\u6210\u5e76\u4e14KVM\u901a\u8fc7\u63a7\u5236\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\uff0cCPU\u5c06\u4f7f\u7528\u91ca\u653e\u9875\u9762\u8fdb\u884c\u5176MSR\u6743\u9650\u68c0\u67e5\u3002\u5982\u679c\u9875\u9762\u91cd\u590d\u4f7f\u7528\u5e76\u5c06\u5176\u90e8\u5206\u8986\u76d6\u4e3a\u96f6\uff0c\u5219\u8fd9\u4e3a\u5ba2\u6237\u63d0\u4f9b\u4e86\u5bf9\u4e3b\u673aMSR\u7684\u8bbf\u95ee\u6743\u9650\u3002\n    \u4e3a\u4e86\u603b\u7ed3\uff0c\u6076\u610f\u5ba2\u4eba\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u83b7\u5f97\u4e3b\u673aMSRS\uff1a\n \u53cd\u590d\u5c1d\u8bd5\u4f7f\u7528VMRUN\u6307\u4ee4\u542f\u52a8L2\u8bbf\u5ba2\uff0c\u540c\u65f6\u5728\u7b2c\u4e8c\u4e2aCPU\u6838\u5fc3\u4e0a\u7ffb\u8f6cIntercept_vmrun\u4f4d\u3002 \n\u5982\u679cvmrun\u6210\u529f\uff0c\u8bf7\u5c1d\u8bd5\u4f7f\u7528vmrun\u7684\u53e6\u4e00\u4e2a\u8c03\u7528\u6765\u542f\u52a8\u201cL3\u201d\u6765\u5bbe\u3002\u5982\u679c\u8fd9\u5931\u8d25\uff0c\u6211\u4eec\u5728\u6b65\u9aa42\u4e2d\u5931\u53bb\u4e86\u6bd4\u8d5b\uff0c\u5e76\u4e14\u5fc5\u987b\u518d\u8bd5\u4e00\u6b21\u3002\u5982\u679cvmrun\u6210\u529f\uff0c\u6211\u4eec\u5df2\u6210\u529f\u8986\u76d6SVM-\uff06gt;\u5d4c\u5957.HSAVE\u4e0e\u6211\u4eec\u7684L2\u4e0a\u4e0b\u6587\u3002\n \u6e05\u9664MSR_efer\u4e2d\u7684SVME\u4f4d\uff0c\u540c\u65f6\u4ecd\u5728\u201cL3\u201d\u4e0a\u4e0b\u6587\u4e2d\u8fd0\u884c\u3002\u8fd9\u4f7f\u5f97\u73b0\u5728\u6b63\u5728\u6267\u884c\u7684L2 Guest\u865a\u62df\u673a\u4f7f\u7528\u7684MSR\u6743\u9650\u4f4d\u56fe\u5907\u4efd\u9875\u9762\u3002\n \u7b49\u5230KVM\u4e3b\u673a\u91cd\u7528\u5907\u4efd\u9875\u9762\u3002\u8fd9\u5c06\u53ef\u80fd\u6e05\u9664\u5168\u90e8\u6216\u67d0\u4e9b\u4f4d\uff0c\u4f7f\u8bbf\u5ba2\u8bbf\u95ee\u4e3b\u673aMSR\u3002\n    \u5f53\u6211\u6700\u521d\u53d1\u73b0\u5e76\u62a5\u544a\u8fd9\u79cd\u6f0f\u6d1e\u65f6\uff0c\u6211\u611f\u5230\u975e\u5e38\u76f8\u4fe1\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684MSR\u8bbf\u95ee\u5e94\u8be5\u6216\u591a\u6216\u5c11\u7b49\u4e8e\u4e3b\u673a\u4e0a\u7684\u5b8c\u6574\u4ee3\u7801\u6267\u884c\u3002\u867d\u7136\u6211\u7684\u611f\u89c9\u662f\u6b63\u786e\u7684\uff0c\u4f46\u5230\u8fbe\u90a3\u91cc\u4ecd\u7136\u82b1\u4e86\u6211\u591a\u5468\u7684\u5229\u7528\u53d1\u5c55\u3002\u5728\u4e0b\u4e00\u8282\u4e2d\uff0c\u6211\u5c06\u63cf\u8ff0\u5c06\u6b64\u539f\u8bed\u8f6c\u4e3a\u4e3b\u673a\u8f6c\u4e49\u7684\u6b65\u9aa4\u3002\n     \u5047\u8bbe\u6211\u4eec\u7684\u8bbf\u5ba2\u53ef\u4ee5\u83b7\u5f97\u5bf9\u4efb\u4f55MSR\u7684\u5b8c\u5168\u4e0d\u53d7\u9650\u5236\u7684\u8bbf\u95ee\u6743\u9650\uff08\u8fd9\u53ea\u662f\u51ed\u501fInit_On_Alloc = 1\u662f\u6700\u73b0\u4ee3\u5316\u5206\u5e03\u7684\u9ed8\u8ba4\u503c\uff09\uff0c\u6211\u4eec\u5982\u4f55\u5728KVM\u4e3b\u673a\u7684\u4e0a\u4e0b\u6587\u4e2d\u5347\u7ea7\u5b83\u5728\u8fd0\u884c\u4efb\u610f\u4ee3\u7801\u4e2d\uff1f\u8981\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u67e5\u770b\u73b0\u4ee3AMD\u7cfb\u7edf\u652f\u6301\u54ea\u79cdMSR\u3002\u67e5\u770b\u6700\u8fd1AMD\u5904\u7406\u5668\u7684BIOS\u548cKernel\u5f00\u53d1\u4eba\u5458\u6307\u5357\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u5e7f\u6cdb\u7684MSR\uff0c\u4ee5\u4f17\u6240\u5468\u77e5\u7684\u548c\u5e7f\u6cdb\u4f7f\u7528\u7684\u8bf8\u5982EFER\uff08\u6269\u5c55\u529f\u80fd\u542f\u7528\u5bc4\u5b58\u5668\uff09\u6216LSTAR\uff08SYSCALL\u76ee\u6807\u5730\u5740\uff09\u4ee5\u5f88\u5c11\u4f7f\u7528\u4e0eSMI_ON_IO_TRAP\uff08\u53ef\u7528\u4e8e\u5728\u8bbf\u95ee\u7279\u5b9aIO\u7aef\u53e3\u8303\u56f4\u65f6\u751f\u6210\u7cfb\u7edf\u7ba1\u7406\u6a21\u5f0f\u4e2d\u65ad\uff09\u3002\n  \u67e5\u770b\u5217\u8868\uff0c\u50cfLSTAR\u6216Kernel_GSBase\u8fd9\u6837\u7684\u591a\u4e2a\u5bc4\u5b58\u5668\u4f3c\u4e4e\u662f\u6709\u8da3\u7684\u76ee\u6807\uff0c\u7528\u4e8e\u91cd\u5b9a\u5411\u4e3b\u673a\u5185\u6838\u7684\u6267\u884c\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b9e\u9645\u4e0a\u542f\u7528\u4e86\u5bf9\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u4e0d\u53d7\u9650\u5236\u7684\u8bbf\u95ee\uff0c\u4f46\u662f\u5728vmexit\u4e4b\u540e\uff0c\u5b83\u4eec\u4f1a\u81ea\u52a8\u5c06\u5176\u6062\u590d\u5230\u6709\u6548\u72b6\u6001\uff0c\u4ee5\u4fbf\u4fee\u6539\u5b83\u4eec\u4e0d\u4f1a\u5bfc\u81f4\u4e3b\u673a\u884c\u4e3a\u4e2d\u7684\u4efb\u4f55\u66f4\u6539\u3002\n    \u6b64\u524d\uff0c\u6211\u4eec\u4e4b\u524d\u63d0\u5230\u7684\u4e00\u4e2aMSR\u4f3c\u4e4e\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u79cd\u76f4\u63a5\u5b9e\u73b0\u4ee3\u7801\u6267\u884c\u7684\u65b9\u5f0f\uff1a\u5b58\u50a8\u4e3b\u673a\u4fdd\u5b58\u533a\u57df\u7269\u7406\u5730\u5740\u7684VM_HSAVE_PA\uff0c\u7528\u4e8e\u5728\u53d1\u751fvmexit\u65f6\u6062\u590d\u4e3b\u673a\u4e0a\u4e0b\u6587\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u63a7\u4ef6\u4e0b\u5c06\u6b64MSR\u6307\u5411\u5185\u5b58\u4f4d\u7f6e\uff0c\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u4f2a\u9020\u6076\u610f\u4e3b\u673a\u4e0a\u4e0b\u6587\u5e76\u5728VMexit\u540e\u6267\u884c\u81ea\u5df1\u7684\u4ee3\u7801\u3002 \nAMD\u975e\u5e38\u6e05\u695a\u7684\u662f\uff0c\u8f6f\u4ef6\u4e0d\u5e94\u8be5\u4ee5\u4efb\u4f55\u65b9\u5f0f\u89e6\u6478\u4e3b\u673a\u4fdd\u5b58\u533a\u57df\uff0c\u5e76\u4e14\u5b58\u50a8\u5728\u8be5\u533a\u57df\u4e2d\u7684\u6570\u636e\u4f9d\u8d56\u4e8eCPU\uff1a\u201c\u5904\u7406\u5668\u5b9e\u73b0\u53ef\u4ee5\u5728\u6307\u5411\u7684\u5185\u5b58\u533a\u57df\u4e2d\u4ec5\u5b58\u50a8\u90e8\u5206\u6216\u8005\u4e3b\u72b6\u6001\u901a\u8fc7vm_hsave_pa msr\uff0c\u53ef\u4ee5\u5728\u9690\u85cf\u7684\u7247\u4e0a\u5b58\u50a8\u5668\u4e2d\u5b58\u50a8\u4e00\u4e9b\u6216\u6240\u6709\u4e3b\u673a\u72b6\u6001\u3002\u4e0d\u540c\u7684\u5b9e\u73b0\u53ef\u4ee5\u9009\u62e9\u4fdd\u5b58\u4e3b\u673a\u6bb5\u5bc4\u5b58\u5668\u7684\u9690\u85cf\u90e8\u5206\u4ee5\u53ca\u9009\u62e9\u5668\u3002\u7531\u4e8e\u8fd9\u4e9b\u539f\u56e0\uff0c\u8f6f\u4ef6\u4e0d\u5f97\u4f9d\u8d56\u4e3b\u673a\u72b6\u6001\u4fdd\u5b58\u533a\u57df\u7684\u683c\u5f0f\u6216\u5185\u5bb9\uff0c\u4e5f\u4e0d\u4f1a\u901a\u8fc7\u4fee\u6539\u4e3b\u673a\u4fdd\u5b58\u533a\u57df\u7684\u5185\u5bb9\u6765\u5c1d\u8bd5\u66f4\u6539\u4e3b\u673a\u72b6\u6001\u3002 \u201c\uff08AMD64\u67b6\u6784\u7a0b\u5e8f\u5458\u624b\u518c\uff0c\u7b2c2\u5377\uff1a\u7cfb\u7edf\u7f16\u7a0b\uff0c\u7b2c477\u9875\uff09\u3002\u4e3a\u4e86\u52a0\u5f3a\u91cd\u70b9\uff0c\u4e3b\u673a\u4fdd\u5b58\u533a\u57df\u7684\u683c\u5f0f\u65e0\u8bc1\u3002\n \u968f\u7740\u4efb\u4f55\u95ee\u9898\u5bfc\u81f4\u7acb\u5373\u5904\u7406\u5668\u5173\u95ed\uff0c\u8c03\u8bd5\u6d89\u53ca\u65e0\u6548\u4e3b\u673a\u72b6\u6001\u7684\u95ee\u9898\u975e\u5e38\u4e4f\u5473\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u6211\u4e0d\u786e\u5b9a\u662f\u5426\u5728VM\u5185\u90e8\u8fd0\u884c\u65f6\u91cd\u5199VM_HSAVE_PA MSR\u751a\u81f3\u53ef\u4ee5\u5de5\u4f5c\u3002\u5728\u6b63\u5e38\u8fd0\u884c\u671f\u95f4\uff0c\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u5e76\u4e0d\u662f\u771f\u6b63\u7684\u4e8b\u60c5\uff0c\u56e0\u6b64\u8986\u76d6\u4e86MSR\uff0c\u53ea\u4f1a\u5bfc\u81f4\u7acb\u5373\u5d29\u6e83\u3002\n \u5373\u4f7f\u6211\u4eec\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u5ba2\u4eba\u4e2d\u521b\u5efa\u6709\u6548\uff08\u4f46\u6076\u610f\uff09\u4e3b\u673a\u4fdd\u5b58\u533a\u57df\uff0c\u6211\u4eec\u4ecd\u7136\u9700\u8981\u67d0\u79cd\u65b9\u5f0f\u6765\u8bc6\u522b\u5176\u4e3b\u673a\u7269\u7406\u5730\u5740\uff08HPA\uff09\u3002\u7531\u4e8e\u6211\u4eec\u7684\u8bbf\u5ba2\u4f7f\u7528\u5d4c\u5957\u5206\u9875\u542f\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8bbf\u5ba2\u4e2d\u770b\u5230\u7684\u7269\u7406\u5730\u5740\uff08GPAS\uff09\u4ecd\u7136\u662f\u4e00\u4e2a\u6e90\u4e8eHPA\u7b49\u6548\u7684\u5730\u5740\u3002\n    \u5728\u82b1\u4e00\u4e9b\u65f6\u95f4\u6eda\u52a8\u5230AMD\u7684\u6587\u6863\u4e4b\u540e\uff0c\u6211\u4ecd\u7136\u51b3\u5b9aVM_HSAVE_PA\u4f3c\u4e4e\u662f\u6700\u4f73\u7684\u524d\u8fdb\u65b9\u5411\uff0c\u5e76\u51b3\u5b9a\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002\n    \u5728\u503e\u5012\u5728AMD EPYC 7351P CPU\u4e0a\u8fd0\u884c\u7684\u666e\u901aKVM Guest\u7684\u4e3b\u673a\u4fdd\u5b58\u533a\u57df\u540e\uff0c\u7b2c\u4e00\u4e2a\u95ee\u9898\u5f88\u5feb\u5c31\u4f1a\u6d88\u5931\uff1a\u4e8b\u5b9e\u8bc1\u660e\uff0c\u4e3b\u673a\u4fdd\u5b58\u533a\u57df\u5177\u6709\u4e0e\u666e\u901aVMCB\u76f8\u540c\u7684\u5e03\u5c40\uff0c\u53ea\u6709\u51e0\u4e2a\u76f8\u5173\u5b57\u6bb5\u521d\u59cb\u5316\u3002\u751a\u81f3\u66f4\u597d\uff0c\u521d\u59cb\u5316\u7684\u5b57\u6bb5\u5305\u62ec\u5728AMD\u624b\u518c\u4e2d\u8bb0\u5f55\u7684\u6240\u6709\u5df2\u4fdd\u5b58\u7684\u4e3b\u673a\u4fe1\u606f\uff0c\u56e0\u6b64\u62c5\u5fc3A\n...... ", "note_en": "KVM (for Kernel-based Virtual Machine) is the de-facto standard hypervisor for Linux-based cloud environments. Outside of Azure, almost all large-scale cloud and hosting providers are running on top of KVM, turning it into one of the fundamental security boundaries in the cloud.\n    In this blog post I describe a   vulnerability \u00a0in KVM\u2019s AMD-specific code and discuss how this bug can be turned into a full virtual machine escape.  To the best of my knowledge, this is the first public writeup of a KVM guest-to-host breakout that does not rely on bugs in user space components such as QEMU. The discussed bug was assigned CVE-2021-29657, affects kernel versions  v5.10-rc1 to v5.12-rc6 \u00a0and was patched at the end of   March \u00a02021 . \u00a0As the bug only became exploitable in v5.10 and was discovered roughly 5 months later, most real world deployments of KVM should not be affected. I still think the issue is an interesting case study in the work required to build a stable guest-to-host escape against KVM and hope that this writeup can strengthen the case that hypervisor compromises are not only theoretical issues.\n    I start with a short overview of KVM\u2019s architecture, before diving into the bug and its exploitation.\n     KVM is a Linux based open source hypervisor supporting hardware accelerated virtualization on x86, ARM, PowerPC and S/390. In contrast to the other big open source hypervisor Xen, KVM is deeply integrated with the Linux Kernel and builds on its scheduling, memory management and hardware integrations to provide efficient virtualization.\n    KVM is implemented as one or more kernel modules (kvm.ko plus kvm-intel.ko or kvm-amd.ko on x86) that expose a low-level IOCTL-based   API \u00a0to user space processes over the /dev/kvm device. Using this API, a user space process (often called VMM for Virtual Machine Manager) can create new VMs, assign vCPUs and memory, and intercept memory or IO accesses to provide access to  emulate d or virtualization-aware hardware devices.   QEMU \u00a0has been the standard user space choice for KVM-based virtualization for a long time, but in the last few years alternatives like   LKVM ,   crosvm \u00a0or   Firecracker \u00a0have started to become popular.\n    While KVM\u2019s reliance on a separate user space component might seem complicated at first, it has a very nice benefit: Each VM running on a KVM host has a 1:1 mapping to a Linux process, making it managable using standard Linux tools.\n    This means for example, that a guest&#39;s memory can be inspected by dumping the allocated memory of its user space process or that resource limits for CPU time and memory can be applied easily. Additionally, KVM can offload most work related to device emulation to the userspace component. Outside of a couple of performance-sensitive devices related to interrupt handling, all of the complex low-level code for providing virtual disk, network or GPU access can be implemented in userspace.\n    When looking at public writeups of KVM-related vulnerabilities and exploits it becomes clear that this design was a wise decision. The large majority of disclosed vulnerabilities and all publicly available exploits affect QEMU and its support for emulated/paravirtualized devices.\n    Even though KVM\u2019s kernel attack surface is significantly smaller than the one exposed by a default QEMU configuration or similar user space VMMs, a KVM vulnerability has advantages that make it very valuable for an attacker:\n Whereas user space VMMs can be sandboxed to reduce the impact of a VM breakout, no such option is available for KVM itself. Once an attacker is able to achieve code execution (or similarly powerful primitives like write access to page tables) in the context of the host kernel, the system is fully compromised.\n Due to the somewhat poor security history of QEMU, new user space VMMs like crosvm or Firecracker are written in Rust, a memory safe language. Of course, there can still be non-memory safety vulnerabilities or problems due to incorrect or buggy usage of the KVM APIs, but using Rust effectively prevents the large majority of bugs that were discovered in C-based user space VMMs in the past.\n Finally, a pure KVM exploit can work against targets that use proprietary or heavily modified user space VMMs. While the big cloud providers do not go into much detail about their virtualization stacks publicly, it is safe to assume that they do not depend on an unmodified QEMU version for their production workloads. In contrast, KVM\u2019s smaller code base makes heavy modifications unlikely (and KVM\u2019s contributor list points at a strong tendency to upstream such modifications when they exist).\n      With these advantages in mind, I decided to spend some time hunting for a KVM vulnerability that could be turned into a guest-to-host escape. In the past, I had   some success \u00a0with finding vulnerabilities in KVM\u2019s support for nested virtualization on Intel CPUs so reviewing the same functionality for AMD seemed like a good starting point. This is even more true, \u00a0because the recent increase of AMD\u2019s market share in the server segment means that KVM\u2019s AMD implementation is suddenly becoming a more interesting target than it was in the last years.\n    Nested virtualization, the ability for a VM (called L1) to spawn nested guests (L2), was also a niche feature for a long time. However, due to hardware improvements that reduce its overhead and increasing customer demand it\u2019s becoming more widely available. For example, Microsoft is heavily pushing for   Virtualization-based Security \u00a0as part of newer Windows versions, requiring nested virtualization to support cloud-hosted Windows installations. KVM enables support for nested virtualization on both AMD \u00a0and \u00a0Intel by default, so if an administrator or the user space VMM does not explicitly disable it, it\u2019s part of the attack surface for a malicious or compromised VM.\n    AMD\u2019s virtualization extension is called SVM (for Secure Virtual Machine) and in order to support nested virtualization, the host hypervisor needs to intercept all SVM instructions that are executed by its guests, emulate their behavior and keep its state in sync with the underlying hardware. As you might imagine, implementing this correctly is quite difficult with a large potential for complex logic flaws, making it a perfect target for manual code review.\n     Before diving into the KVM codebase and the bug I discovered, I want to quickly introduce how AMD SVM works to make the rest of the post easier to understand. (For a thorough documentation see   AMD64 Architecture Programmer\u2019s Manual, Volume 2: System Programming Chapter 15 .) SVM adds support for 6 new instructions to x86-64 if SVM support is enabled by setting the SVME bit in the EFER MSR. The most interesting of these instructions is  VMRUN , which (as its name suggests) is responsible for running a guest VM.  VMRUN  takes an implicit parameter via the RAX register pointing to the page-aligned physical address of a data structure called \u201cvirtual machine control block\u201d (VMCB), which describes the state and configuration of the VM.\n    The VMCB is split into two parts: First, the State Save area, which stores the values of all guest registers, including segment and control registers. Second, the Control area which describes the configuration of the VM. The Control area describes the virtualization features enabled for a VM, \u00a0sets which VM actions are intercepted to trigger a VM exit  and \u00a0stores some fundamental configuration values such as the page table address used for   nested paging .\n    If the VMCB is correctly prepared (and we are not already running in a VM), VMRUN will first save the host state in a memory region called the host save area, whose address is configured by writing a physical address to the VM_HSAVE_PA MSR. Once the host state is saved, the CPU switches to the VM context and VMRUN only returns once a VM exit is triggered for one reason or another.\n    An interesting aspect of SVM is that a lot of the state recovery after a VM exit has to be done by the hypervisor. Once a VM exit occurs, only RIP, RSP and RAX are restored to the previous host values and all other general purpose registers still contain the guest values. In addition, a full context switch requires manual execution of the VMSAVE/VMLOAD instructions which save/load additional system registers (FS, SS, LDTR, STAR, LSTAR \u2026) from memory.\n    For nested virtualization to work, KVM intercepts execution of the VMRUN instruction and creates its own VMCB based on the VMCB the L1 guest prepared (called vmcb12 in KVM terminology). Of course, KVM can\u2019t trust the guest provided vmcb12 and needs to carefully validate all fields that end up in the real VMCB that gets passed to the hardware (known as vmcb02).\n    Most of the KVM\u2019s code for nested virtualization on AMD is implemented in   arch/x86/kvm/svm/nested.c \u00a0and the code that intercepts VMRUN instructions of nested guests is implemented in  nested_svm_vmrun :\n           * Save the old vmcb, so we don&#39;t need to pick what we save, but can\n      The function first fetches the value of RAX out of the currently active vmcb ( svm-&gt;vcmb ) in  1  (numbers are marked in the code samples) . For guests using nested paging (which is the only relevant configuration nowadays) RAX contains a guest physical address (GPA), which needs to be translated into a host physical address (HPA) first.  kvm_vcpu_map \u00a0( 2 ) takes care of this translation and maps the underlying page to a host virtual address (HVA) that can be directly accessed by KVM.\n    Once the VMCB is mapped,  nested_vmcb_checks \u00a0is called for some basic validation in  3 . Afterwards, the L1 guest context which is stored in  svm-&gt;vmcb \u00a0is copied into the host save area  svm-&gt;nested.hsave \u00a0before KVM enters the nested guest context by calling  enter_svm_guest_mode \u00a0( 4 ) .\n         Looking at  enter_svm_guest_mode \u00a0we can see that KVM copies the vmcb12 control area directly into svm-&gt;nested.ctl and does not perform any further checks on the copied value.\n  Readers familiar with double fetch or Time-of-Check-to-Time-of-Use vulnerabilities might already see a potential issue here: The call to  nested_vmcb_checks \u00a0at the beginning of  nested_svm_vmrun \u00a0performs all of its checks on a copy of the VMCB that is stored in guest memory. This means that a guest with multiple CPU cores can modify fields in the VMCB after they are verified in  nested_vmcb_checks , but before they are copied to svm-&gt;nested.ctl in  load_nested_vmcb_control .\n    Let\u2019s look at  nested_vmcb_checks  to see what kind of checks we can bypass with this approach:\n         At first glance this looks pretty harmless.  control-&gt;asid \u00a0isn\u2019t used anywhere and the last check is only relevant for systems where nested paging isn\u2019t supported. However, the first check turns out to be very interesting.\n    For reasons unknown to me, SVM VMCBs contain a bit that enables or disables interception of the VMRUN instruction when executed inside a guest. Clearing this bit isn\u2019t actually supported by hardware and results in an immediate VMEXIT, so the check in  nested_vmcb_check_controls \u00a0simply replicates this behavior. \u00a0When we race and bypass the check by repeatedly flipping the value of the INTERCEPT_VMRUN bit, we can end up in a situation where svm-&gt;nested.ctl contains a 0 in place of the INTERCEPT_VMRUN bit. To understand the impact we first need to see how nested vmexit\u2019s are handled in KVM:\n    The main SVM exit handler is the function  handle_exit \u00a0in   arch/x86/kvm/svm.c , which is called whenever a VMexit occurs. When KVM is running a nested guest, it first has to check if the exit should be handled by itself or the L1 hypervisor. To do this it calls the function  nested_svm_exit_handled \u00a0( 5 ) whi ch will return  NESTED_EXIT_DONE if the vmexit will be handled by the L1 hypervisor and no further processing by the L0 hypervisor is needed :\n           nested_svm_exit_handled \u00a0first calls  nested_svm_intercept (6) \u00a0to see if the exit should be handled. When we trigger an exit by executing VMRUN in a L2 guest, the default case is executed ( 7 )  to see if the INTERCEPT_VMRUN bit in svm-&gt;nested.ctl is set.  Normally, this should always be the case and the function returns NESTED_EXIT_DONE to trigger a nested VM exit from L2 to L1 and to let the L1 hypervisor handle the exit ( 8 ). (This way KVM supports infinite nesting of hypervisors).\n    However, if the L1 guest exploited the race condition described above svm-&gt;nested.ctl won\u2019t have the INTERCEPT_VMRUN bit set and the VM exit will be handled by KVM itself. This results in a second call to  nested_svm_vmrun \u00a0while still running inside the L2 guest context.  nested_svm_vmrun \u00a0isn\u2019t written to handle this situation and will blindly overwrite the L1 context stored in  svm-&gt;nested.hsave \u00a0with data from the currently active  svm-&gt;vmcb \u00a0which contains data for the L2 guest:\n     * Save the old vmcb, so we don&#39;t need to pick what we save, but can\n    This becomes a security issue due to the way Model Specific Register (MSR) intercepts are handled for nested guests:\n  SVM uses a permission bitmap to control which MSRs can be accessed by a VM. The bitmap is a 8KB data structure with two bits per MSR, one of which controls read access and the other write access. A 1 bit in this position means the access is intercepted and triggers a vm exit, a 0 bit means the VM has direct access to the MSR. The HPA address of the bitmap is stored in the VMCB control area and for normal L1 KVM guests, the pages are allocated and pinned into memory as soon as a vCPU is created.\n    For a nested guest, the MSR permission bitmap is stored in  svm-&gt;nested.msrpm \u00a0and its physical address is copied into the active VMCB (in  svm-&gt;vmcb-&gt;control.msrpm_base_pa ) while the nested guest is running. Using the described double invocation of  nested_svm_vmrun , a malicious guest can copy this value into the  svm-&gt;nested.hsave \u00a0VMCB when  copy_vmcb_control_area \u00a0is executed. This is interesting because the KVM\u2019s hsave area normally only contains data from the L1 guest context so  svm-&gt;nested.hsave.msrpm_base_pa \u00a0would normally point to the pinned vCPU-specific MSR bitmap pages.\n      Since commit \u201c  2fcf4876: KVM: nSVM: implement on demand allocation of the nested state \u201d from last October, svm-&gt;nested.msrpm is dynamically allocated and freed when a guest changes the SVME bit of the MSR_EFER register:\n       For the \u201cdisable SVME\u201d case, KVM will first call  svm_leave_nested \u00a0to forcibly leave potential\n  nested guests and then free the  svm-&gt;nested \u00a0data structures (including the backing pages for the MSR permission bitmap) in  svm_free_nested . As  svm_leave_nested \u00a0believes that  svm-&gt;nested.hsave \u00a0contains the saved context of the L1 guest, it simply copies its control area to the real VMCB:\n           svm-&gt;nested-&gt;msrpm . Once  svm_free_nested \u00a0is finished and KVM passes control back to the guest, the CPU will use the freed pages for its MSR permission checks. This gives a guest unrestricted access to host MSRs if the pages are reused and partially overwritten with zeros.\n    To summarize, a malicious guest can gain access to host MSRs using the following approach:\n Repeatedly try to launch a L2 guest using the VMRUN instruction while flipping the INTERCEPT_VMRUN bit on a second CPU core.\n If VMRUN succeeds, try to launch a \u201cL3\u201d guest using another invocation of VMRUN. If this fails, we have lost the race in step 2 and must try again. If VMRUN succeeds we have successfully overwritten  svm-&gt;nested.hsave \u00a0with our L2 context.\n Clear the SVME bit in MSR_EFER while still running in the \u201cL3\u201d context. This frees the MSR permission bitmap backing pages used by the L2 guest who is now executing again.\n Wait until the KVM host reuses the backing pages. This will potentially clear all or some of the bits, giving the guest access to host MSRs.\n    When I initially discovered and reported this vulnerability, I was feeling pretty confident that this type of MSR access should be more or less equivalent to full code execution on the host. While my feeling turned out to be correct, getting there still took me multiple weeks of exploit development. In the next section I\u2019ll describe the steps to turn this primitive into a guest-to-host escape.\n     Assuming our guest can get full unrestricted access to any MSR (which is only a question of timing thanks to init_on_alloc=1 being the default for most modern distributions), how can we escalate this into running arbitrary code in the context of the KVM host? To answer this question we first need to look at what kind of MSRs are supported on a modern AMD system. Looking at the   BIOS and Kernel Developer\u2019s Guide \u00a0for recent AMD processors we can find a wide range of MSRs starting with well known and widely used ones such as EFER (the Extended Feature Enable Register) or LSTAR (the syscall target address) to rarely used ones like SMI_ON_IO_TRAP (can be used to generate a System Management Mode Interrupt when specific IO port ranges are accessed).\n  Looking at the list, several registers like LSTAR or KERNEL_GSBASE seem like interesting targets for redirecting the execution of the host kernel. Unrestricted access to these registers is actually  enabled by default , however they are automatically restored to a valid state by KVM after a vmexit so modifying them does not lead to any changes in host behavior.\n    Still, there is one MSR that we previously mentioned and that seems to give us a straightforward way to achieve code execution: The VM_HSAVE_PA that stores the physical address of the host save area, which is used to restore the host context when a vmexit occurs. If we can point this MSR at a memory location under our control we should be able to fake a malicious host context and execute our own code after a vmexit.\n     AMD is pretty clear about the fact that software should not touch the host save area in any way and that the data stored in this area is CPU-dependent: \u201c Processor implementations may store only part or none of host state in the memory area pointed to by VM_HSAVE_PA MSR and may store some or all host state in hidden on-chip memory. Different implementations may choose to save the hidden parts of the host\u2019s segment registers as well as the selectors. For these reasons, software must not rely on the format or contents of the host state save area, nor attempt to change host state by modifying the contents of the host save area. \u201d (AMD64 Architecture Programmer\u2019s Manual, Volume 2: System Programming, Page 477). To strengthen the point, the format of the host save area is undocumented.\n Debugging issues involving an invalid host state is very tedious as any issue leads to an immediate processor shutdown. Even worse, I wasn\u2019t sure if rewriting the VM_HSAVE_PA MSR while running inside a VM can even work. It\u2019s not really something that should happen during normal operation so in the worst case scenario, overwriting the MSR would just lead to an immediate crash.\n Even if we can create a valid (but malicious) host save area in our guest, we still need some way to identify its host physical address (HPA). Because our guest runs with nested paging enabled, physical addresses that we can see in the guest (GPAs) are still one address translation away from their HPA equivalent.\n    After spending some time scrolling through AMD\u2019s documentation, I still decided that VM_HSAVE_PA seems to be the best way forward and decided to tackle these problems one by one.\n    After dumping the host save area of a normal KVM guest running on an AMD EPYC 7351P CPU, the first problem goes away quickly: As it turns out, the host save area has the same layout as a normal VMCB with only a couple of relevant fields initialized. Even better, the initialized fields include all the saved host information documented in the AMD manual so the fear that a\n......", "posttime": "2021-06-30 01:39:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9003\u751f,escape,kvm", "title": "\u4e00\u4e2aEPYC\u9003\u751f\uff1a\u6848\u4f8b\u7814\u7a76KVM\u7a81\u7834 ", "title_en": "An EPYC escape: Case-study of a KVM breakout", "transed": 1, "url": "https://googleprojectzero.blogspot.com/2021/06/an-epyc-escape-case-study-of-kvm.html", "via": "", "real_tags": ["\u9003\u751f", "escape", "kvm"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068677, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e25\u91cd\u7684\u6025\u6027\u547c\u5438\u7efc\u5408\u5f81\u51a0\u72b6\u75c5\u6bd22\uff08SARS-COV-2\uff09\u4fe1\u4f7fRNA\uff08mRNA\uff09\u7684\u75ab\u82d7\u5728\u9884\u9632\u51a0\u72b6\u75c5\u6bd2\u75be\u75c52019\u5e741-5\u4e2d\u6709\u6548\u301c95\uff05\u3002\u4eba\u7c7b\u75ab\u82d7\u8bf1\u5bfc\u7684\u6297\u4f53\u5206\u6ccc\u6297\u4f53\uff08PBS\uff09\u548c\u751f\u53d1\u4e2d\u5fc3\uff08GC\uff09B\u7ec6\u80de\u7684\u52a8\u6001\u4ecd\u7136\u5c1a\u4e0d\u6e05\u695a\u3002\u6211\u4eec\u5728\u63a5\u53d7\u4e24\u5242BNT162B2\u768414\u4e2a\u60a3\u8005\u768414\u4e2a\u4e2a\u4f53\u4e2d\u68c0\u67e5\u4e86\u5916\u5468\u8840\uff08n = 41\uff09\u4e2d\u7684\u6297\u539f\u7279\u5f02\u6027B\u7ec6\u80de\u53cd\u5e94\uff0c\u5e76\u572814\u4e2a\u60a3\u6709\u4e24\u79cd\u5242\u91cf\u7684BNT162B2\uff0c\u7f16\u7801\u5168\u957fSARS-COV-2\u98d9\u5347\u7684mRNA\u7684\u75ab\u82d7\uff08S \uff09\u57fa\u56e01.\u5faa\u73afIgG-\u548cIgA\u5206\u6cccPBS\u9776\u5411\u7b2c\u4e8c\u514d\u75ab\u540e\u4e00\u5468\u8fbe\u5230\u7684S\u86cb\u767d\uff0c\u7136\u540e\u5728\u4e09\u5468\u540e\u6301\u7eed\u4e0b\u964d\u3002\u8fd9\u4e9bPB\u53cd\u5e94\u524d\u9762\u7684\u8840\u6e05\u6297\u8840\u6e05\u6297\u672b\u671f\u548c\u4e2d\u548c\u6297\u4f53\u7684\u6700\u5927\u6c34\u5e73\uff0c\u4ee5\u65e9\u671f\u5faa\u73af\u7684SARS-COV-2\u83cc\u682a\u4ee5\u53ca\u65b0\u51fa\u73b0\u7684\u53d8\u4f53\uff0c\u7279\u522b\u662f\u5728\u5148\u524d\u611f\u67d3\u7684\u4e2a\u4f53\u4e2d\uff0c\u5176\u4ea7\u751f\u4e86\u6700\u5f3a\u5927\u7684\u8840\u6676\u53cd\u5e94\u7684SARS-COV-2 \u3002\u901a\u8fc7\u68c0\u67e5\u6392\u51fa\u814b\u7a9dLNS\u7684\u7ec6\u9488\u5438\u6c14\u7269\uff08FNA\uff09\uff0c\u6211\u4eec\u9274\u5b9a\u4e86\u5728\u539f\u53d1\u6027\u514d\u75ab\u540e\u91c7\u6837\u7684\u6240\u6709\u53c2\u4e0e\u8005\u4e2d\u62df\u5408S\u86cb\u767d\u7684GC B\u7ec6\u80de\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728\u589e\u5f3a\u540e\uff0c\u5728\u8fd9\u4e9b\u6392\u51fa\u7684LNS\u4e2d\u6301\u7eed\u9ad8\u9891\u7387\u7684S\u7ed3\u5408GC B\u7ec6\u80de\u548cPBS\u5728\u589e\u5f3a\u5242\u514d\u75ab\u540e\u81f3\u5c1112\u5468\u3002 S\u7ed3\u5408GC B\u7ec6\u80de\u884d\u751f\u7684\u5355\u514b\u9686\u6297\u4f53\u4e3b\u8981\u9776\u5411S\u86cb\u767d\u7684\u53d7\u4f53\u7ed3\u5408\u7ed3\u6784\u57df\uff0c\u5176\u514b\u9686\u8f83\u5c11\u4e0eN-\u672b\u7aef\u7ed3\u6784\u57df\u6216\u4e0e\u4eba\u8d1d\u66ff\u59a5\u8461\u8404\u75c5\u6bd2OC43\u548cHKU1\u5171\u7528\u7684\u8868\u4f4d\u3002\u4e0e\u4ec5\u8bc6\u522bSARS-COV-2 S\u86cb\u767d\u7684\u90a3\u4e9b\uff0c\u540e\u8005\u4ea4\u53c9\u53cd\u5e94\u6027B\u7ec6\u80de\u514b\u9686\u5177\u6709\u66f4\u9ad8\u6c34\u5e73\u7684\u4f53\u91cd\u7a81\u53d8\uff0c\u8868\u660e\u5b58\u50a8\u5668B\u7ec6\u80de\u6765\u6e90\u3002\u6211\u4eec\u7684\u7814\u7a76\u8868\u660e\uff0c\u57fa\u4e8eSARS-COV-2 mRNA\u7684\u4eba\u7c7b\u75ab\u82d7\u63a5\u79cd\u8bf1\u5bfc\u6301\u7eed\u7684GC B\u7ec6\u80de\u53cd\u5e94\uff0c\u4ece\u800c\u80fd\u591f\u4ea7\u751f\u5f3a\u5927\u7684\u4f53\u6db2\u514d\u75ab\u529b\u3002\n       \n     \u901a\u8fc7\u63d0\u4ea4\u8bc4\u8bba\uff0c\u60a8\u540c\u610f\u9075\u5b88\u6211\u4eec\u7684\u6761\u6b3e\u548c\u793e\u533a\u6307\u5357\u3002\u5982\u679c\u60a8\u53d1\u73b0\u6ee5\u7528\u7684\u4e1c\u897f\u6216\u4e0d\u9075\u5b88\u6211\u4eec\u7684\u6761\u6b3e\u6216\u6307\u5357\uff0c\u8bf7\u5c06\u5176\u6807\u8bb0\u4e3a\u4e0d\u5408\u9002\u3002 ", "note_en": "Severe Acute Respiratory Syndrome Coronavirus 2 (SARS-CoV-2) messenger RNA (mRNA)-based vaccines are ~95% effective in preventing coronavirus disease 2019 1\u20135. The dynamics of antibody secreting plasmablasts (PBs) and germinal centre (GC) B cells induced by these vaccines in humans remain unclear. We examined antigen-specific B cell responses in peripheral blood (n=41) and draining lymph nodes (LNs) in 14 individuals who received two doses of BNT162b2, an mRNA-based vaccine encoding full-length SARS-CoV-2 spike (S) gene 1. Circulating IgG- and IgA-secreting PBs targeting the S protein peaked one week after the second immunization then declined, becoming undetectable three weeks later. These PB responses preceded maximal levels of serum anti-S binding and neutralizing antibodies to an early circulating SARS-CoV-2 strain as well as emerging variants, especially in individuals previously infected with SARS-CoV-2, who produced the most robust serologic responses. By examining fine needle aspirates (FNAs) of draining axillary LNs, we identified GC B cells that bound S protein in all participants sampled after primary immunization. Remarkably, high frequencies of S-binding GC B cells and PBs were sustained in these draining LNs for at least twelve weeks after the booster immunization. S-binding GC B cell-derived monoclonal antibodies predominantly targeted the receptor binding domain of the S protein, with fewer clones binding to the N-terminal domain or to epitopes shared with the S proteins of the human betacoronaviruses OC43 and HKU1. The latter cross-reactive B cell clones had higher levels of somatic hypermutation compared to those that only recognized SARS-CoV-2 S protein, suggesting a memory B cell origin. Our studies demonstrate that SARS-CoV-2 mRNA-based vaccination of humans induces a persistent GC B cell response, enabling the generation of robust humoral immunity.\n       \n     By submitting a comment you agree to abide by our  Terms and  Community Guidelines. If you find something abusive or that does not comply with our terms or guidelines please flag it as inappropriate.", "posttime": "2021-06-30 01:39:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u73b0\u4ee3,moderna,\u7ec6\u80de", "title": "\u8f89\u745e\u548c\u73b0\u4ee3\u75ab\u82d7\u53ef\u80fd\u4f1a\u4ea7\u751f\u6301\u4e45\u7684\u514d\u75ab\u529b ", "title_en": "Pfizer and Moderna vaccines may produce lasting immunity", "transed": 1, "url": "https://www.nature.com/articles/s41586-021-03738-2", "via": "", "real_tags": ["\u73b0\u4ee3", "moderna", "\u7ec6\u80de"]}]