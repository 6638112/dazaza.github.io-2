[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1071712, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0b\u8f7d PDF \u6458\u8981\uff1a\u7ed9\u5b9a\u4e00\u5f20\u6905\u5b50\u7684\u56fe\u7247\uff0c\u6211\u4eec\u80fd\u5426\u63d0\u53d6\u6905\u5b50\u7684 3D \u5f62\u72b6\uff0c\u4e3a\u5176\u5408\u7406\u7684\u5173\u8282\u548c\u52a8\u4f5c\u5236\u4f5c\u52a8\u753b\uff0c\u5e76\u5728\u5176\u539f\u59cb\u56fe\u50cf\u7a7a\u95f4\u4e2d\u8fdb\u884c\u539f\u4f4d\u6e32\u67d3\uff1f\u4e0a\u8ff0\u95ee\u9898\u4fc3\u4f7f\u6211\u4eec\u8bbe\u8ba1\u4e00\u79cd\u81ea\u52a8\u5316\u65b9\u6cd5\u6765\u63d0\u53d6\u548c\u64cd\u4f5c\u5355\u4e2a\u56fe\u50cf\u4e2d\u7684\u94f0\u63a5\u5bf9\u8c61\u3002\u4e0e\u4e4b\u524d\u5728\u5bf9\u8c61\u64cd\u4f5c\u65b9\u9762\u7684\u5de5\u4f5c\u76f8\u6bd4\uff0c\u6211\u4eec\u7684\u5de5\u4f5c\u8d85\u8d8a\u4e86\u4e8c\u7ef4\u64cd\u4f5c\u5e76\u4e13\u6ce8\u4e8e\u53ef\u94f0\u63a5\u5bf9\u8c61\uff0c\u4ece\u800c\u4e3a\u53ef\u80fd\u7684\u5bf9\u8c61\u53d8\u5f62\u5f15\u5165\u4e86\u66f4\u5927\u7684\u7075\u6d3b\u6027\u3002\u6211\u4eec\u65b9\u6cd5\u7684\u6d41\u7a0b\u9996\u5148\u4ece\u8f93\u5165\u56fe\u50cf\u91cd\u5efa\u548c\u7ec6\u5316\u611f\u5174\u8da3\u5bf9\u8c61\u7684 3D \u7f51\u683c\u8868\u793a\uff1b\u5229\u7528\u8bed\u4e49\u90e8\u5206\u5206\u5272\u4fe1\u606f\u9884\u6d4b\u5176\u63a7\u5236\u5173\u8282\uff1b\u83b7\u5f97\u7684\u5bf9\u8c61 3-D \u7f51\u683c\u7136\u540e\u901a\u8fc7\u975e\u521a\u6027\u53d8\u5f62\u8fdb\u884c\u52a8\u753b\u5904\u7406\uff0c\u5e76\u6e32\u67d3\u4ee5\u5728\u5176\u539f\u59cb\u56fe\u50cf\u7a7a\u95f4\u4e2d\u6267\u884c\u539f\u4f4d\u8fd0\u52a8\u3002\u5b9a\u91cf\u8bc4\u4f30\u662f\u5bf9\u5355\u4e2a\u56fe\u50cf\u7684 3-D \u91cd\u5efa\u8fdb\u884c\u7684\uff0c\u8fd9\u662f\u4e00\u9879\u4e0e\u6211\u4eec\u7684\u7ba1\u9053\u76f8\u5173\u7684\u65e2\u5b9a\u4efb\u52a1\uff0c\u6211\u4eec\u7684\u7ed3\u679c\u660e\u663e\u8d85\u8fc7\u4e86 SOTA \u7684\u7ed3\u679c\u3002\u5e7f\u6cdb\u7684\u89c6\u89c9\u7ed3\u679c\u4e5f\u8bc1\u660e\u4e86\u6211\u4eec\u65b9\u6cd5\u7684\u9002\u7528\u6027\u3002", "note_en": "Download PDF  Abstract: Given a picture of a chair, could we extract the 3-D shape of the chair,animate its plausible articulations and motions, and render in-situ in itsoriginal image space? The above question prompts us to devise an automatedapproach to extract and manipulate articulated objects in single images.Comparing with previous efforts on object manipulation, our work goes beyond2-D manipulation and focuses on articulable objects, thus introduces greaterflexibility for possible object deformations. The pipeline of our approachstarts by reconstructing and refining a 3-D mesh representation of the objectof interest from an input image; its control joints are predicted by exploitingthe semantic part segmentation information; the obtained object 3-D mesh isthen rigged \\&amp; animated by non-rigid deformation, and rendered to performin-situ motions in its original image space. Quantitative evaluations arecarried out on 3-D reconstruction from single images, an established task thatis related to our pipeline, where our results surpass those of the SOTAs by anoticeable margin. Extensive visual results also demonstrate the applicabilityof our approach.", "posttime": "2021-08-06 12:06:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5bf9\u8c61,object", "title": "\u5bf9\u8c61\u5524\u9192\uff1a3D \u5bf9\u8c61\u91cd\u5efa\uff0c\u5355\u4e2a\u56fe\u50cf\u7684\u52a8\u753b", "title_en": "Object Wake-Up: 3-D Object Reconstruction, Animation from a Single Image", "transed": 1, "url": "https://arxiv.org/abs/2108.02708", "via": "", "real_tags": ["\u5bf9\u8c61", "object"]}, {"category": "", "categoryclass": "", "imagename": "da41a066c3fe38d8c437575664373ff9.jpg", "infoid": 1071710, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51e0\u5468\u524d\uff0c\u57c3\u5fb7\u52a0\u00b7\u5fb7\u6c83\u65af\u57fa\u8d70\u8fdb\u9a6c\u8428\u8bf8\u585e\u5dde\u8428\u9ed8\u7ef4\u5c14\u7684\u4e00\u5bb6 Stop &amp; Shop \u6742\u8d27\u5e97\uff0c\u5c31\u50cf\u8fdb\u5165\u8c0b\u6740\u73b0\u573a\u7684\u4fa6\u63a2\u3002\u4ed6\u8d70\u8fdb\u9ea6\u7247\u8fc7\u9053\uff0c\u5e0c\u671b\u5728\u90a3\u91cc\u627e\u5230\u786e\u51ff\u7684\u8bc1\u636e\u3002\u4ed6\u626b\u89c6\u4e86\u8d27\u67b6\u3002\u54e6\u4e0d\uff0c\u4ed6\u60f3\u3002\u4ed6\u6765\u5f97\u592a\u665a\u4e86\u3002\u8fd9\u5bb6\u5546\u5e97\u5df2\u7ecf\u7528\u65b0\u7684\u66ff\u6362\u4e86\u65e7\u7684 General Mills \u9ea6\u7247\u76d2\u2014\u2014\u6bd4\u5982 Cheerios \u548c Cocoa Puffs\u3002\u5c31\u597d\u50cf\u5acc\u7591\u4eba\u7684\u6307\u7eb9\u88ab\u64e6\u5e72\u51c0\u4e86\u4e00\u6837\u3002\u7136\u540e\u5fb7\u6c83\u65af\u57fa\u671d\u5546\u5e97\u540e\u9762\u8d70\u53bb\u3002\u679c\u7136\uff0c\u4e00\u4e2a\u8fc7\u9053\u7684\u5c3d\u5934\u5806\u6ee1\u4e86\u65e7\u76d2\u5b50\u7684\u53ef\u53ef\u6ce1\u8299\u548c\u82f9\u679c\u8089\u6842\u9ea6\u7247\u3002\u4ed6\u6293\u8d77\u4e00\u76d2\u65e7\u7684\u53ef\u53ef\u6ce1\u8299\uff0c\u548c\u65b0\u7684\u5e76\u6392\u653e\u7f6e\u3002\u554a\u54c8\uff01\u4ed6\u6536\u5230\u7684\u5c0f\u8d39\u662f\u5bf9\u7684\u3002\u901a\u7528\u78e8\u574a\u5df2\u5c06\u5176\u201c\u5bb6\u5ead\u88c5\u201d\u76d2\u5b50\u7684\u5bb9\u91cf\u4ece 19.3 \u76ce\u53f8\u51cf\u5c11\u5230 18.1 \u76ce\u53f8\u3002 Dworsky \u8d70\u5230\u6536\u94f6\u53f0\uff0c\u4e24\u4e2a\u76d2\u5b50\u2014\u2014\u5598\u6c14\uff01 \u2014\u2014\u4ef7\u683c\u4e00\u6837\u3002\u8fd9\u662f\u4e00\u4e2a\u5f7b\u5934\u5f7b\u5c3e\u7684\u6848\u4f8b\uff1aGeneral Mills \u662f\u53e6\u4e00\u4e2a\u201c\u6536\u7f29\u901a\u80c0\u201d\u7684\u8087\u4e8b\u8005\u3002 Dworsky \u662f\u524d\u9a6c\u8428\u8bf8\u585e\u5dde\u52a9\u7406\u68c0\u5bdf\u957f\u548c\u957f\u671f\u7684\u6d88\u8d39\u8005\u6743\u76ca\u5021\u5bfc\u8005\u3002\u4ed6\u82b1\u4e86\u51e0\u5341\u5e74\u65f6\u95f4\u5728\u4ed6\u7684\u7f51\u7ad9 Mouseprint \u4e0a\u8ddf\u8e2a\u516c\u53f8\u7f29\u51cf\u4ea7\u54c1\u7684\u5b9e\u4f8b\u3002\u4ed6\u7528\u539f\u6765\u7684\u540d\u5b57\uff0c\u7f29\u5c0f\u89c4\u6a21\u6765\u6307\u4ee3\u5b83\uff0c\u4f46\u7ecf\u6d4e\u5b66\u5bb6\u76ae\u5e15\u00b7\u9a6c\u5c14\u59c6\u683c\u4f26\u5927\u7ea6\u5341\u5e74\u524d\u5c06\u5b83\u91cd\u65b0\u547d\u540d\u4e3a\u201c\u6536\u7f29\u901a\u80c0\u201d\uff0c\u8fd9\u4e2a\u8bcd\u88ab\u4fdd\u7559\u4e86\u4e0b\u6765\u3002\u7f29\u5c0f\u89c4\u6a21\u548c\u6536\u7f29\u81a8\u80c0\u90fd\u662f\u6307\u540c\u4e00\u4ef6\u4e8b\uff1a\u516c\u53f8\u51cf\u5c11\u4ea7\u54c1\u7684\u5c3a\u5bf8\u6216\u6570\u91cf\uff0c\u540c\u65f6\u6536\u53d6\u76f8\u540c\u751a\u81f3\u66f4\u9ad8\u7684\u4ef7\u683c\u3002 \u201c\u7f29\u5c0f\u89c4\u6a21\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u5077\u5077\u6478\u6478\u7684\u4ef7\u683c\u4e0a\u6da8\uff0c\u201d\u5fb7\u6c83\u65af\u57fa\u8bf4\u3002 \u201c\u6d88\u8d39\u8005\u5f80\u5f80\u5bf9\u4ef7\u683c\u5f88\u654f\u611f\u3002\u4f46\u4ed6\u4eec\u6ca1\u6709\u51c0\u91cd\u610f\u8bc6\u3002\u4ed6\u4eec\u53ef\u4ee5\u7acb\u5373\u5224\u65ad\u4ed6\u4eec\u662f\u5426\u4e60\u60ef\u4e3a\u4e00\u7bb1\u6a59\u6c41\u652f\u4ed8 2.99 \u7f8e\u5143\uff0c\u800c\u8fd9\u4e00\u4ef7\u683c\u9ad8\u8fbe 3.19 \u7f8e\u5143\u3002\u4f46\u5982\u679c\u6a59\u6c41\u5bb9\u5668\u6ca1\u6709\u4e86\u4ece 64 \u76ce\u53f8\u5230 59 \u76ce\u53f8\uff0c\u4ed6\u4eec\u53ef\u80fd\u4e0d\u4f1a\u6ce8\u610f\u5230\u3002\u201d [\u7f16\u8005\u6ce8\uff1a\u8fd9\u662fPlanet Money \u65f6\u4e8b\u901a\u8baf\u7684\u6458\u5f55\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u6ce8\u518c]\n\u5982\u679c\u6d88\u8d39\u8005\u662f\u7ecf\u5178\u7ecf\u6d4e\u7406\u8bba\u4e2d\u63cf\u8ff0\u7684\u7406\u6027\u751f\u7269\uff0c\u4ed6\u4eec\u4f1a\u6ce8\u610f\u5230\u6536\u7f29\u901a\u80c0\u3002\u4ed6\u4eec\u4f1a\u5bc6\u5207\u5173\u6ce8\u6bcf\u4e2a\u53ef\u53ef\u6ce1\u8299\u7684\u4ef7\u683c\uff0c\u800c\u4e0d\u4f1a\u8ff7\u604b\u516c\u53f8\u5982\u4f55\u5305\u88c5\u8fd9\u4e9b\u53ef\u53ef\u6ce1\u8299\u7684\u5671\u5934\u3002 John T. Gourville \u548c Jonathan J. Koehler \u7684\u4e00\u9879\u7814\u7a76\u5206\u6790\u4e86\u8c37\u7269\u548c\u5176\u4ed6\u884c\u4e1a\u5e02\u573a\u7684\u6570\u636e\uff0c\u53d1\u73b0\u6d88\u8d39\u8005\u6bd4\u7ecf\u5178\u7406\u8bba\u9884\u6d4b\u7684\u66f4\u5bb9\u6613\u4e0a\u5f53\u53d7\u9a97\u3002\u4ed6\u4eec\u5bf9\u4ef7\u683c\u53d8\u5316\u6bd4\u5bf9\u6570\u91cf\u53d8\u5316\u66f4\u654f\u611f\u3002\u5f53\u7136\uff0c\u516c\u53f8\u591a\u5e74\u6765\u5df2\u7ecf\u77e5\u9053\u8fd9\u4e00\u70b9\u3002\u56de\u5230\u8fc7\u53bb\uff0c\u5fb7\u6c83\u65af\u57fa\u8bf4\uff0c\u4ed6\u8bb0\u5f97\u4e70\u8fc7\u66f4\u5927\u7684\u7cd6\u679c\u68d2\u548c\u66f4\u5927\u7684\u536b\u751f\u7eb8\u5377\u3002\u4ed6\u8bf4\uff0c\u6700\u521d\u7684 Charmin \u536b\u751f\u7eb8\u5377\u6709 650 \u5f20\u3002\u73b0\u5728\u4f60\u5fc5\u987b\u4e3a\u201cMega Rolls\u201d\u548c\u201cSuper Mega Rolls\u201d\u652f\u4ed8\u989d\u5916\u8d39\u7528\u2014\u2014\u5373\u4f7f\u662f\u90a3\u4e9b\u6bd4\u539f\u6765\u5c11\u5f97\u591a\u7684\u5e8a\u5355\u3002\u96ea\u4e0a\u52a0\u971c\u7684\u662f\uff0cCharmin \u6700\u8fd1\u7f29\u5c0f\u4e86\u536b\u751f\u5dfe\u7684\u5c3a\u5bf8\u3002\u8c08\u8bba\u4e00\u4e2a\u7cdf\u7cd5\u7684\u4ea4\u6613\u3002\u6536\u7f29\u901a\u80c0\u6216\u7f29\u5c0f\u89c4\u6a21\u53ef\u80fd\u4e0e\u5927\u4f17\u6d88\u8d39\u4e3b\u4e49\u4e00\u6837\u53e4\u8001\u3002\u591a\u5e74\u6765\uff0cDworsky \u8bb0\u5f55\u4e86\u4ece Doritos \u5230\u5a74\u513f\u6d17\u53d1\u6c34\u518d\u5230\u7267\u573a\u6577\u6599\u7684\u6240\u6709\u4e1c\u897f\u7684\u7f29\u5c0f\u5c3a\u5bf8\u3002 \u201c\u5f53\u5236\u9020\u5546\u9762\u4e34\u67d0\u79cd\u5b9a\u4ef7\u538b\u529b\u65f6\uff0c\u5f80\u5f80\u4f1a\u53d1\u751f\u88c1\u5458\uff0c\u201d\u4ed6\u8bf4\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6c7d\u6cb9\u6216\u8c37\u7269\u7684\u4ef7\u683c\u4e0a\u6da8\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5f53\u653f\u5e9c\u51e0\u4e2a\u6708\u524d\u5f00\u59cb\u62a5\u544a\u901a\u80c0\u98d9\u5347\u65f6\uff0c\u5fb7\u6c83\u65af\u57fa\u6b63\u5728\u5bfb\u627e\u5176\u72e1\u733e\u3001\u840e\u7f29\u7684\u8868\u4eb2\u3002\u6211\u4eec\u73b0\u5728\u770b\u5230\u4e86\u4e00\u6ce2\u6536\u7f29\u81a8\u80c0\uff0c\u4ece Tillamook \u51b0\u6dc7\u6dcb\u5230 Royal Canin \u732b\u7cae\u3002 Dworksy \u8bf4\uff1a\u201c\u7531\u4e8e\u6211\u4eec\u73b0\u5728\u770b\u5230\u901a\u8d27\u81a8\u80c0\u7387\u4e0a\u5347\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u8ba4\u4e3a\u4f60\u4f1a\u770b\u5230\u66f4\u591a\u7269\u54c1\u88ab\u7f29\u5c0f\u5c3a\u5bf8\u3002\u201d \u201c\u800c\u4e14\u4e5f\u8bb8\u8fd9\u4f1a\u662f\u53cc\u91cd\u6253\u51fb\uff1a\u6211\u4eec\u4f1a\u770b\u5230\u4e00\u4e9b\u4ea7\u54c1\u7684\u4ef7\u683c\u4e0a\u6da8\uff0c\u540c\u65f6\u4f60\u7684\u5305\u88c5\u5b9e\u9645\u4e0a\u5374\u51cf\u5c11\u4e86\u3002\u201d\u4e54\u7eb3\u68ee\u00b7\u83f2\u7b56 (Jonathan Fitzer) \u662f\u901a\u7528\u78e8\u574a (General Mills) \u751f\u4ea7\u7684\u53e6\u4e00\u79cd\u8c37\u7269 Cinnamon Toast Crunch \u7684\u5fe0\u5b9e\u7c89\u4e1d\u3002\u51e0\u5468\u524d\uff0c\u4ed6\u53bb\u4e86\u4f5b\u7f57\u91cc\u8fbe\u5dde\u5766\u5e15\u5e02\u7684\u4e00\u5bb6\u5f53\u5730\u6742\u8d27\u5e97\uff0c\u91cd\u65b0\u632f\u4f5c\u8d77\u6765\u3002\u4f46\u662f\u8d27\u67b6\u4e0a\u6709\u4e24\u4e2a\u4e0d\u540c\u7248\u672c\u7684\u4ea7\u54c1\u3002\u65e7\u76d2\u5b50\u548c\u5f80\u5e38\u4e00\u6837\u3002\u7136\u800c\uff0c\u65b0\u7684\u76d2\u5b50\u66f4\u9ad8\u66f4\u7626\u3002\u5b83\u88c5\u9970\u7740\u4e00\u5f20\u56fe\u7247\u5e7f\u544a Space Jam\uff0c\u4e00\u90e8\u7531\u52d2\u5e03\u6717\u8a79\u59c6\u65af\u4e3b\u6f14\u7684\u65b0\u7535\u5f71\u91cd\u542f\u3002 Fitzer \u5047\u8bbe\u66f4\u9ad8\u7684\u9ea6\u7247\u76d2\u610f\u5473\u7740\u66f4\u591a\u7684\u9ea6\u7247\uff0c\u8fd9\u53ef\u80fd\u662f\u53ef\u4ee5\u539f\u8c05\u7684\u3002 \u201c\u7136\u540e\u6211\u770b\u7740\u5e95\u90e8\uff0c\u6211\u770b\u5230\u6570\u5b57\u5df2\u7ecf\u5173\u95ed\uff0c\u6211\u60f3\uff0c&#39;\u54e6\uff0c\u73b0\u5728\u6765\u5427\u3002\u6211\u5728\u8fd9\u91cc\u88ab\u626f\u6389\u4e86\uff0c&#39;\u201d\u4ed6\u8bf4\u3002 Fitzer \u5173\u6ce8\u4e86 Reddit \u4e0a\u7684\u201cr/shrinkflation\u201d\u5e16\u5b50\uff0c\u4ed6\u5728\u7f51\u7ad9\u4e0a\u4e0a\u4f20\u4e86\u4e24\u4e2a\u76d2\u5b50\u7684\u56fe\u7247\u3002 \u201c\u8fd9\u662f\u75af\u72c2\u7684\u6536\u7f29\uff0c\u201d\u4e00\u4f4d\u8bc4\u8bba\u8005\u8bf4\u3002\u53e6\u4e00\u4e2a\u4eba\u5bf9 Cinnamon Toast Crunch \u7684\u5236\u9020\u5546\u8bf4\uff1a\u201c\u4f60\u4e3a\u4ec0\u4e48\u8981\u9634\u6697\uff0c\u54df\uff1f\u201d\u4e0a\u5468\uff0cGeneral Mills \u5ba3\u5e03\u539f\u6599\u3001\u5305\u88c5\u3001\u52b3\u52a8\u529b\u548c\u5361\u8f66\u8fd0\u8f93\u6210\u672c\u4e0d\u65ad\u4e0a\u5347\uff0c\u8feb\u4f7f\u5176\u8c03\u6574\u4e1a\u52a1\u3002\u5b83\u8868\u793a\u6b63\u5728\u91c7\u53d6\u201c\u5b9a\u4ef7\u884c\u52a8\u201d\u548c\u5176\u4ed6\u63aa\u65bd\u6765\u5e94\u5bf9\u8fd9\u79cd\u901a\u8d27\u81a8\u80c0\u3002\u6211\u4eec\u4e0e General Mills \u53d6\u5f97\u4e86\u8054\u7cfb\uff0c\u4e86\u89e3\u5b83\u6b63\u5728\u7f29\u51cf\u8c37\u7269\u89c4\u6a21\u4f5c\u4e3a\u5176\u6218\u7565\u7684\u4e00\u90e8\u5206\u3002\n\u201cGeneral Mills \u4e00\u76f4\u81f4\u529b\u4e8e\u5728\u6211\u4eec\u7684\u8c37\u7269\u4ea7\u54c1\u4e2d\u521b\u9020\u4e00\u81f4\u6027\u548c\u6807\u51c6\u5316\uff0c\u8ba9\u8d2d\u7269\u8005\u66f4\u5bb9\u6613\u533a\u5206\u8d27\u67b6\u4e0a\u7684\u5c3a\u5bf8\u3002\u5bf9\u4e8e\u5bfb\u6c42\u6bcf\u76ce\u53f8\u6700\u4f18\u60e0\u4ef7\u683c\u7684\u6d88\u8d39\u8005\u6765\u8bf4\uff0c\u6700\u5927\u7684\u4ef7\u503c\u901a\u5e38\u662f\u5728\u6211\u4eec\u66f4\u5927\u7684\u8c37\u7269\u76d2\u4e2d\uff0c\u201d\u901a\u7528\u78e8\u574a\u53d1\u8a00\u4eba Kelsey Roemhildt \u8bf4\u3002 \u201c\u8fd9\u4e00\u53d8\u5316\u8fd8\u5141\u8bb8\u66f4\u9ad8\u6548\u7684\u5361\u8f66\u88c5\u8f7d\uff0c\u4ece\u800c\u51cf\u5c11\u8def\u4e0a\u7684\u5361\u8f66\u548c\u4f7f\u7528\u7684\u52a0\u4ed1\u71c3\u6599\uff0c\u8fd9\u5bf9\u4e8e\u51cf\u5c11\u5168\u7403\u6392\u653e\u4ee5\u53ca\u62b5\u6d88\u4e0e\u901a\u8d27\u81a8\u80c0\u76f8\u5173\u7684\u6210\u672c\u589e\u52a0\u90fd\u5f88\u91cd\u8981\u3002\u201d\u901a\u7528\u78e8\u574a\u5bf9\u5176\u6536\u7f29\u901a\u80c0\u7684\u91cd\u65b0\u5b9a\u4e49\u4f3c\u4e4e\u662f\u7f8e\u56fd\u4f01\u4e1a\u754c\u7684\u5178\u578b\u3002\u516c\u53f8\u901a\u5e38\u5c06\u7f29\u5c0f\u89c4\u6a21\u4f5c\u4e3a\u6539\u5584\u73af\u5883\u3001\u4e3a\u6d88\u8d39\u8005\u63d0\u4f9b\u66f4\u591a\u9009\u62e9\u6216\u63d0\u9ad8\u4ea7\u54c1\u8d28\u91cf\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u4f8b\u5982\uff0c\u5f53 Charmin \u7684\u4e00\u4f4d\u53d1\u8a00\u4eba\u5728 WBUR \u9762\u5bf9\u8bb0\u8005\u5173\u4e8e\u7f29\u5c0f\u4ed6\u4eec\u7684\u5395\u7eb8\u65b9\u683c\u7684\u5c3a\u5bf8\u65f6\uff0c\u5979\u8868\u793a\u8fd9\u662f\u201c\u521b\u65b0\u201d\u7684\u7ed3\u679c\uff0c\u8ba9\u6d88\u8d39\u8005\u57fa\u672c\u4e0a\u53ef\u4ee5\u66f4\u6709\u6548\u5730\u64e6\u5c41\u80a1\u3002\u5982\u679c\u8fd9\u79cd\u60c5\u51b5\u6301\u7eed\u4e0b\u53bb\uff0c\u4e5f\u8bb8\u6709\u4e00\u5929\u6211\u4eec\u90fd\u4f1a\u751f\u6d3b\u5728\u5c0f\u4eba\u56fd\u7684\u53cd\u4e4c\u6258\u90a6\u4e2d\uff0c\u5728\u90a3\u91cc\u6211\u4eec\u88ab\u8feb\u5403\u5fae\u578b\u7cd6\u679c\uff0c\u559d\u5c0f\u996e\u6599\uff0c\u5e76\u7528\u5c0f\u65b9\u683c\u7eb8\u64e6\u5c41\u80a1\u3002\u6216\u8005\uff0c\u4e5f\u8bb8\u6d88\u8d39\u8005\u4f1a\u5f00\u59cb\u6ce8\u610f\u5230\u5e76\u8868\u8fbe\u62c5\u5fe7\uff0c\u6d88\u8d39\u8005\u9700\u6c42\u7684\u529b\u91cf\u5c06\u8feb\u4f7f\u516c\u53f8\u503e\u542c\u5e76\u8c03\u6574\u5176\u4ea7\u54c1\u7684\u89c4\u6a21\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4eec\u4e3a\u53ef\u53ef\u6ce1\u8299\u7231\u597d\u8005\u7948\u7977\u3002\u60a8\u559c\u6b22\u8fd9\u4e2a\u65f6\u4e8b\u901a\u8baf\u7247\u6bb5\u5417\uff1f\u597d\u5427\uff0c\u5b83\u5728\u60a8\u7684\u6536\u4ef6\u7bb1\u4e2d\u770b\u8d77\u6765\u66f4\u597d\uff01\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u6ce8\u518c\u3002", "note_en": "A couple of weeks ago, Edgar Dworsky walked into a Stop &amp; Shop grocery store in Somerville, Mass., like a detective entering a murder scene.\n  He stepped into the cereal aisle, where he hoped to find the smoking gun. He scanned the shelves. Oh no, he thought. He was too late. The store had already replaced old General Mills cereal boxes \u2014 such as Cheerios and Cocoa Puffs \u2014 with newer ones. It was as though the suspect&#39;s fingerprints had been wiped clean.\n  Then Dworsky headed toward the back of the store. Sure enough, old boxes of Cocoa Puffs and Apple Cinnamon Cheerios were stacked at the end of one of the aisles. He grabbed an old box of Cocoa Puffs and put it side by side with the new one. Aha! The tip he had received was right on the money. General Mills had downsized the contents of its &#34;family size&#34; boxes from 19.3 ounces to 18.1 ounces.\n  Dworsky went to the checkout aisle, and both boxes \u2014 gasp! \u2014 were the same price. It was an open-and-shut case: General Mills is yet another perpetrator of &#34;shrinkflation.&#34;\n        Dworsky is a former Massachusetts assistant attorney general and longtime consumer advocate. He has spent decades tracking instances of companies shrinking products on his website  Mouseprint. He refers to it by its original name, downsizing, but economist Pippa Malmgren rechristened it &#34;shrinkflation&#34; about a decade ago, and the term stuck. Downsizing and shrinkflation both refer to the same thing: companies reducing the size or quantity of their products while charging the same price or even more.\n  &#34;Downsizing is really a sneaky price increase,&#34; Dworsky says. &#34;Consumers tend to be price conscious. But they&#39;re not net-weight conscious. They can tell instantly if they&#39;re used to paying $2.99 for a carton of orange juice and that goes up to $3.19. But if the orange juice container goes from 64 ounces to 59 ounces, they&#39;re probably not going to notice.&#34;\n  [Editor&#39;s note: This is an excerpt of  Planet Money  &#39;s newsletter. You can    sign up here  ]\n  If consumers were the rational creatures depicted in classic economic theory, they would notice shrinkflation. They would keep their eyes on the price per Cocoa Puff and not fall for gimmicks in how companies package those Cocoa Puffs. A  study by John T. Gourville and Jonathan J. Koehler analyzed data from the market for cereal and other sectors and found that consumers are much more gullible than classic theory predicts. They are more sensitive to changes in price than to changes in quantity. Companies, of course, have known this for years.\n      Back in the day, Dworsky says, he remembers buying bigger candy bars and bigger rolls of toilet paper. The original Charmin roll of toilet paper, he says, had  650 sheets. Now you have to pay extra for &#34;Mega Rolls&#34; and &#34;Super Mega Rolls&#34; \u2014 and even those have many fewer sheets than the original. To add insult to injury, Charmin recently  shrank the size of their toilet sheets. Talk about a crappy deal.\n  Shrinkflation, or downsizing, is probably as old as mass consumerism. Over the years, Dworsky has documented the downsizing of everything from Doritos to baby shampoo to ranch dressing. &#34;The downsizing tends to happen when manufacturers face some type of pricing pressure,&#34; he says. For example, if the price of gasoline or grain goes up.\n  That is why, when the government began reporting surges in inflation several months ago, Dworsky was on the lookout for its devious, shrinkifying cousin. We&#39;re now seeing a wave of shrinkflation, from  Tillamook ice cream to  Royal Canin cat food. &#34;As we&#39;re seeing inflation picking up now, that&#39;s why I think you&#39;re going to see more items being downsized,&#34; Dworksy says. &#34;And maybe it&#39;s going to be a double-whammy: We&#39;re going to see some products going up in price at the same time that you&#39;re actually getting less in the package.&#34;\n      Jonathan Fitzer is a big fan of Cinnamon Toast Crunch, another cereal made by General Mills. A couple of weeks ago, he went to a local grocery store in Tampa, Fla., to re-up. But on the shelf were two different versions of the product. The old box was the same as always. The new box, however, was taller and skinnier. And it was adorned with a picture advertising  Space Jam, a new movie reboot starring LeBron James. Fitzer might have been forgiven for assuming a taller cereal box meant more cereal. &#34;And then I looked at the bottom and I saw the numbers were off and I was like, &#39;oh, come on now. I&#39;m getting ripped off here,&#39;&#34; he says.\n  Fitzer follows the &#34; r/shrinkflation&#34; thread on Reddit, and he uploaded a picture of the two boxes on the site. &#34;That&#39;s crazy shrinkage,&#34;  said one commenter. Another had words for the makers of Cinnamon Toast Crunch: &#34;Why ya being shady, yo?&#34;\n    Last week,  General Mills announced the rising cost of ingredients, packaging, labor, and trucking was forcing it to revamp its business. It said that it was taking &#34;pricing actions&#34; and other steps to grapple with this inflation. We reached out to General Mills about reports that it&#39;s downsizing its cereals as part of its strategy.\n  &#34;General Mills has been working to create consistency and standardization across our cereal products, making it easier for shoppers to distinguish between sizes on shelf. For consumers seeking the best price per ounce, the most value is normally in our larger boxes of cereal,&#34; says Kelsey Roemhildt, a General Mills spokesperson. &#34;This change also allows more efficient truck loading leading to fewer trucks on the road and fewer gallons of fuel used, which is important in both reducing global emissions as well as offsetting increased costs associated with inflation.&#34;\n  General Mills&#39; reframing of its shrinkflation seems to be pretty typical of Corporate America. Companies often sell downsizing as a way to help the environment, offer consumers more choice, or improve the quality of their products. When a spokesperson for Charmin, for example, was confronted by  reporters at WBUR about shrinking the size of their toilet sheet squares, she suggested it was the result of &#34;innovations&#34; that allow consumers to, basically, wipe their butts more efficiently.\n  If this keeps up, maybe someday we&#39;ll all be living in a Lilliputian dystopia where we&#39;re forced to eat miniature candy bars, drink tiny drinks, and wipe our bottoms with teeny-tiny squares of paper. Or maybe consumers will start to notice and voice concern and the power of consumer demand will force companies to listen and right-size their products. Until then, our prayers are with the lovers of Cocoa Puffs.\n  Did you enjoy this newsletter segment? Well, it looks even better in your inbox! You can   sign up here .", "posttime": "2021-08-06 12:06:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6536\u7f29,shrinkflation,\u6d88\u8d39\u8005", "title": "\u5f53\u5fc3\u201c\u6536\u7f29\u901a\u80c0\u201d\uff0c\u901a\u8d27\u81a8\u80c0\u7684\u72e1\u733e\u8868\u4eb2", "title_en": "Beware of 'shrinkflation,' inflation's devious cousin", "transed": 1, "url": "https://www.npr.org/sections/money/2021/07/06/1012409112/beware-of-shrinkflation-inflations-devious-cousin", "via": "", "real_tags": ["\u6536\u7f29", "\u6d88\u8d39\u8005"]}, {"category": "", "categoryclass": "", "imagename": "365e4730cecab4d5447439fb841dc361.jpg", "infoid": 1071709, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6839\u636e CNBC \u770b\u5230\u7684\u51fa\u751f\u8bc1\u660e\uff0c\u9677\u5165\u56f0\u5883\u7684 Theranos \u521b\u59cb\u4eba\u4f0a\u4e3d\u838e\u767d\u00b7\u970d\u59c6\u65af\uff08Elizabeth Holmes\uff09\u751f\u4e0b\u4e86\u4e00\u4e2a\u5a74\u513f\u3002\u798f\u5c14\u6469\u65af\u56e0\u5979\u5df2\u5012\u95ed\u7684\u7845\u8c37\u521d\u521b\u516c\u53f8\u800c\u9762\u4e34\u5341\u591a\u9879\u7535\u6c47\u6b3a\u8bc8\u91cd\u7f6a\u3002\u5979\u7684\u6000\u5b55\u63a8\u8fdf\u4e86\u5979\u7684\u5ba1\u5224\u5f00\u59cb\u3002 Theranos \u521b\u59cb\u4eba\u4f0a\u4e3d\u838e\u767d\u00b7\u970d\u59c6\u65af (Elizabeth Holmes) \u7684\u6000\u5b55\u63a8\u8fdf\u4e86\u5979\u5373\u5c06\u8fdb\u884c\u7684\u6b3a\u8bc8\u5ba1\u5224\u7684\u5f00\u59cb\uff0c\u5979\u751f\u4e0b\u4e86\u4e00\u4e2a\u5a74\u513f\u3002 CNBC \u5468\u56db\u83b7\u5f97\u4e86\u5411\u5723\u9a6c\u7279\u5965\u53bf\u8bb0\u5f55\u5458\u529e\u516c\u5ba4\u63d0\u4ea4\u7684\u8bb0\u5f55\uff0c\u663e\u793a\u798f\u5c14\u6469\u65af\u548c\u5979\u7684\u642d\u6863\u6bd4\u5229\u57c3\u6587\u65af\u4e8e 7 \u6708 10 \u65e5\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u7ea2\u6749\u57ce\u7684\u7ea2\u6749\u533b\u9662\u751f\u4e86\u4e00\u4e2a\u5b69\u5b50\u3002\u798f\u5c14\u6469\u65af\u7684\u5176\u4e2d\u4e00\u540d\u5f8b\u5e08\u827e\u7c73\u00b7\u8428\u54c8\u91cc\u4e9a (Amy Saharia) \u62d2\u7edd\u5bf9\u8fd9\u4e00\u6d88\u606f\u53d1\u8868\u8bc4\u8bba\u3002\u5ba1\u5224\u539f\u5b9a\u4e8e 7 \u6708\u5f00\u59cb\uff0c\u4f46\u56e0\u6000\u5b55\u63a8\u8fdf\u5230 8 \u6708 31 \u65e5\u3002\u798f\u5c14\u6469\u65af\u9762\u4e34\u4e5d\u9879\u7535\u6c47\u6b3a\u8bc8\u7f6a\u540d\u548c\u4e24\u9879\u4e32\u8c0b\u7535\u6c47\u6b3a\u8bc8\u7f6a\u540d\u3002\u68c0\u5bdf\u5b98\u6307\u63a7\u798f\u5c14\u6469\u65af\u5c31\u5176\u516c\u53f8\u7684\u8840\u6db2\u68c0\u6d4b\u6280\u672f\u6b3a\u9a97\u4e86\u6295\u8d44\u8005\u3001\u60a3\u8005\u548c\u533b\u751f\u3002\u5979\u5df2\u4e0d\u8ba4\u7f6a\u3002 NBC \u65b0\u95fb\u6cd5\u5f8b\u5206\u6790\u5e08\u4e39\u5c3c\u00b7\u585e\u74e6\u6d1b\u65af (Danny Cevallos) \u8bf4\uff1a\u201c\u4f5c\u4e3a\u4e00\u540d\u65b0\u5988\u5988\uff0c\u5979\u53ea\u80fd\u5f97\u5230\u966a\u5ba1\u5458\u7684\u540c\u60c5\u3002\u201d \u201c\u5982\u679c\u88ab\u5b9a\u7f6a\uff0c\u5373\u4f7f\u5979\u7684\u91cf\u5211\u6307\u5357\u8981\u6c42\u76d1\u7981\uff0c\u5979\u7684\u5f8b\u5e08\u4e5f\u4f1a\u5c06\u5979\u7684\u6bcd\u6027\u7f6e\u4e8e\u6cd5\u5b98\u9762\u524d\u548c\u4e2d\u5fc3\u4f4d\u7f6e\u3002\u201d\u5728\u4e0a\u4e2a\u6708\u63a5\u53d7 CNBC \u91c7\u8bbf\u65f6\uff0c\u6253\u7834 Theranos \u4e11\u95fb\u7684\u524d\u300a\u534e\u5c14\u8857\u65e5\u62a5\u300b\u8bb0\u8005\u7ea6\u7ff0\u00b7\u5361\u96f7\u9c81 (John Carreyrou) \u8868\u793a\uff0c\u4ed6\u66fe\u4e0e\u4e0e\u6b64\u6848\u6709\u5173\u7684\u4eba\u4ea4\u8c08\u8fc7\uff0c\u6709\u4e9b\u4eba\u201c\u8ba4\u4e3a\u5979\u5728\u4e3a\u81ea\u5df1\u7684\u6000\u5b55\u8ba1\u65f6\uff0c\u4ee5\u4fbf\u5728\u5ba1\u5224\u671f\u95f4\u9732\u9762\u83b7\u5f97\u966a\u5ba1\u56e2\u7684\u540c\u60c5\u3002\u201d\n\u201c\u5982\u679c\u4f0a\u4e3d\u838e\u767d\u88ab\u5224\u6709\u7f6a\uff0c\u6848\u4ef6\u63d0\u4ea4\u6cd5\u5b98\u5ba3\u5224\uff0c\u5982\u679c\u4ed6\u628a\u5979\u9001\u8fdb\u76d1\u72f1\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u4ed6\u5c31\u4f1a\u5265\u593a\u5b69\u5b50\u7684\u6bcd\u4eb2\u591a\u5e74\uff0c\u201d\u5361\u96f7\u9c81\u8bf4\u3002 \u201c\u8fd9\u662f\u4e00\u4e2a\u91cd\u5927\u7684\u51b3\u5b9a\u3002\u201d\u8fd9\u4e0d\u662f\u798f\u5c14\u6469\u65af\u5bb6\u65cf\u552f\u4e00\u7684\u5a74\u513f\u6d88\u606f\u3002\u6839\u636e\u8fd9\u5bf9\u592b\u5987\u7684\u5728\u7ebf\u767b\u8bb0\uff0c\u5979\u7684\u5144\u5f1f\u514b\u91cc\u65af\u8482\u5b89\uff08Christian\uff09\u548c\u4ed6\u7684\u59bb\u5b50\u4e5f\u5728 Theranos \u5de5\u4f5c\uff0c\u4ed6\u4eec\u5c06\u5728 9 \u6708\u8fce\u6765\u4e00\u4e2a\u5b69\u5b50\u3002", "note_en": "Embattled Theranos founder Elizabeth Holmes has given birth to a baby, according to a birth certificate seen by CNBC.\n Holmes is facing a dozen felony counts of wire fraud over her defunct Silicon Valley startup. Her pregnancy delayed the start of her trial.\n Theranos founder Elizabeth Holmes, whose pregnancy delayed the start of her upcoming fraud trial, has given birth to a baby.\n Records filed with the San Mateo County Recorder office, obtained by CNBC on Thursday, reveal Holmes and her partner, Billy Evans, had a baby on July 10 at Sequoia Hospital in Redwood City, California.\n  One of Holmes&#39; attorneys, Amy Saharia, declined to comment on the news.  The trial was originally scheduled to begin in July, but was pushed back to August 31 due to her pregnancy. Holmes faces nine counts of wire fraud and two counts of conspiracy to commit wire fraud. Prosecutors allege Holmes deceived investors, patients and doctors about her company&#39;s blood testing technology. She has pleaded not guilty.\n  &#34;Being a new mother can only help get her sympathy from jurors,&#34; NBC news Legal Analyst Danny Cevallos, said.\u00a0&#34;If convicted, even if her sentencing guidelines call for incarceration, her attorneys will place her motherhood front and central before the judge.&#34;\n In an interview with CNBC last month, John Carreyrou, the former Wall Street Journal reporter who broke the Theranos scandal, said he spoke to people tied to the case and some &#34;think that she was timing her pregnancy in order to be showing during the trial to get the jury sympathies.&#34;\n &#34;If Elizabeth is convicted and the case goes to the judge for sentencing, if he sends her to prison for a long time he&#39;d be depriving the child of his or her mother for many years,&#34; Carreyrou said. &#34;And that&#39;s a heavy decision to make.&#34;\n This isn&#39;t the only baby news for the Holmes family. Her brother Christian, who also worked at Theranos, and his wife are expecting a child in September, according to the couple&#39;s online registry.", "posttime": "2021-08-06 12:06:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u798f\u5c14\u6469\u65af,holmes,theranos", "title": "\u4f0a\u4e3d\u838e\u767d\u00b7\u798f\u5c14\u6469\u65af (Elizabeth Holmes) \u5728 Theranos \u6b3a\u8bc8\u6848\u5ba1\u5224\u4e34\u8fd1\u4e4b\u9645\u5206\u5a29", "title_en": "Elizabeth Holmes gives birth as Theranos fraud trial nears", "transed": 1, "url": "https://www.cnbc.com/2021/08/06/elizabeth-holmes-gives-birth-as-theranos-fraud-trial-nears.html", "via": "", "real_tags": ["\u798f\u5c14\u6469\u65af", "holmes", "theranos"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071708, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5929\u771f\u5730\u505a\u5230\u8fd9\u4e00\u70b9\u5e76\u4e0d\u662f\u7279\u522b\u56f0\u96be\u3002\u8fd9\u91cc\u7684\u6311\u6218\u662f\u50cf\u7f16\u5199\u6279\u5904\u7406\u67e5\u8be2\u4e00\u6837\u5b9e\u73b0\u5b83\uff0c\u4f46\u8981\u4ee5\u8fd9\u6837\u7684\u65b9\u5f0f\u5b9e\u73b0\uff0c\u4f8b\u5982 materialize \u6216 dida \u4e4b\u7c7b\u7684\u589e\u91cf\u7cfb\u7edf\u53ef\u4ee5\u5728\u65b0\u7f16\u8f91\u5230\u8fbe\u65f6\u6709\u6548\u5730\u66f4\u65b0\u7ed3\u679c\u3002\u4e0d\u662f\u56e0\u4e3a\u8fd9\u6bb5\u4ee3\u7801\u672c\u8eab\u7279\u522b\u6709\u7528\uff0c\u800c\u662f\u56e0\u4e3a\u5b83\u6709\u52a9\u4e8e\u53d1\u73b0\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u89e3\u51b3\u54ea\u4e9b\u7c7b\u578b\u7684\u95ee\u9898\u7684\u754c\u9650\u3002\u8be5\u7ec3\u4e60\u6709\u70b9\u50cf GPU \u7f16\u7a0b\uff0c\u56e0\u4e3a\u907f\u514d\u987a\u5e8f\u7b97\u6cd5\u548c\u5171\u4eab\u53ef\u53d8\u6570\u636e\u7ed3\u6784\u9700\u8981\u975e\u5e38\u5c0f\u5fc3\u5730\u5c06\u95ee\u9898\u7684\u5b9e\u9645\u57fa\u672c\u6570\u636e\u4f9d\u8d56\u9879\u4e0e\u5178\u578b\u7f16\u7a0b\u6280\u672f\u610f\u5916\u5f15\u5165\u7684\u6570\u636e\u4f9d\u8d56\u9879\u5206\u5f00\u3002\u6211\u4eec\u6709\u4e00\u4e2a\u7f16\u8f91\u6811\uff0c\u6bcf\u4e2a\u7f16\u8f91\u90fd\u4ee3\u8868\u4e00\u4e2a\u5b57\u7b26\u7684\u63d2\u5165\u3002\u6bcf\u4e2a\u7f16\u8f91\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684 id\uff0c\u4e3a\u4e86\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u5c06\u8bf4\u5b83\u53ea\u662f\u4e00\u4e2a\u6574\u6570\u3002\u6bcf\u4e2a\u5176\u4ed6\u7f16\u8f91\u90fd\u6709\u4e00\u4e2a\u7236\u7f16\u8f91\u3002\u7f16\u8f91\u7684 id \u603b\u662f\u5927\u4e8e\u5176\u7236\u7ea7\u7684 id\u3002\u4e3a\u4e86\u6784\u5efa\u5b9e\u9645\u7684\u6587\u672c\uff0c\u6211\u4eec\u91c7\u7528\u8fd9\u68f5\u7f16\u8f91\u6811\uff0c\u6309 id \u5bf9\u6bcf\u4e2a\u7f16\u8f91\u7684\u5b50\u9879\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u5bf9\u6811\u8fdb\u884c\u9884\u5e8f\u904d\u5386\u3002\u521b\u5efa\u8868\u7f16\u8f91\uff08id \u6574\u6570\uff0cparent_id \u6574\u6570\uff0c\u5b57\u7b26\u6587\u672c\uff09\uff1b\u63d2\u5165\u7f16\u8f91\u503c\uff08 0 \uff0c null \uff0c &#39;a&#39; \uff09\uff1b\u63d2\u5165\u7f16\u8f91\u503c ( 1 , 0 , &#39;b&#39; );\u63d2\u5165\u7f16\u8f91\u503c ( 2 , 0 , &#39;e&#39; );\u63d2\u5165\u7f16\u8f91\u503c ( 3 , 1 , &#39;c&#39; );\u63d2\u5165\u7f16\u8f91\u503c ( 4 , 1 , &#39;d&#39; );\u63d2\u5165\u7f16\u8f91\u503c ( 5 , 2 , &#39;f&#39; );\u63d2\u5165\u7f16\u8f91\u503c ( 6 , 5 , &#39;g&#39; );\u63d2\u5165\u7f16\u8f91\u503c ( 7 , 5 , &#39;h&#39; );\u63d2\u5165\u7f16\u8f91\u503c ( 8 , 5 , &#39;i&#39; );\n\u9274\u4e8e\u6211\u4eec\u6b63\u5728\u5c1d\u8bd5\u5bf9\u8fd9\u7ec4\u7f16\u8f91\u8fdb\u884c\u6392\u5e8f\uff0c\u81ea\u7136\u7684\u53cd\u5e94\u662f\u4ece\u4ee5\u4e0b\u5185\u5bb9\u5f00\u59cb\uff1a\u4f46\u6211\u4eec\u7acb\u5373\u9677\u5165\u56f0\u5883\uff0c\u56e0\u4e3a\u6ca1\u6709\u660e\u663e\u7684\u6392\u5e8f\u952e\u3002\u8ba9\u6211\u4eec\u51b3\u5b9a\u4e00\u4e2a\u7f16\u8f91\u5e94\u8be5\u5728\u53e6\u4e00\u4e2a\u7f16\u8f91\u4e4b\u524d\u8fd8\u662f\u4e4b\u540e\u7684\u4fe1\u606f\u9690\u542b\u5728\u6811\u7684\u5f62\u72b6\u4e2d\u3002\u4e3a\u4e86\u5f97\u5230\u4e00\u4e2a\u5b9e\u9645\u503c\u8fdb\u884c\u6392\u5e8f\uff0c\u6211\u4eec\u9700\u8981\u5305\u542b\u6240\u6709\u8fd9\u4e9b\u4fe1\u606f\u3002\u9012\u5f52\u8def\u5f84 (id, path , character) as ( select edits . id , edits . id , edits . character from edits where edits . parent_id is null union all select child . id , parent . path || &#39;,&#39; || child . id , child . character from edits as child, path as parent where child . parent_id = parent . id ) select * from path order by path \u3002\u5c0f\u8def ;\u8fd9\u5c31\u662f\u95ee\u9898\u7684\u672c\u8d28 - \u6309\u7167\u4ece\u6839\u76ee\u5f55\u5f00\u59cb\u7684\u8def\u5f84\u4e2d\u7684 id \u5bf9\u7f16\u8f91\u8fdb\u884c\u6392\u5e8f\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5bf9\u4e8e\u5e73\u8861\u826f\u597d\u7684\u6811\u6728\uff0c\u8fd9\u5c06\u662f\u6545\u4e8b\u7684\u7ed3\u5c3e\u3002\u4f46\u662f\u7528\u4e8e\u6587\u672c\u7f16\u8f91 crdt \u7684\u6811\u5f80\u5f80\u975e\u5e38\u6df1\u548c\u72ed\u7a84\uff0c\u56e0\u6b64\u5b9e\u73b0\u8fd9\u4e9b\u8def\u5f84\u5c06\u4f7f\u5b58\u50a8\u6210\u672c\u770b\u8d77\u6765\u50cf O(N\u00b2)\u3002 \uff08\u5728\u5178\u578b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u53ea\u67e5\u770b\u5177\u6709\u591a\u4e2a\u5b69\u5b50\u7684\u8def\u5f84\u7684\u4e00\u90e8\u5206\u6765\u51cf\u5c11\u8fd9\u4e00\u70b9\u3002\u4f46\u6700\u574f\u7684\u60c5\u51b5\u4ecd\u7136\u662f O(N\u00b2)\uff09\u5728\u5927\u591a\u6570\u8bed\u8a00\u4e2d\uff0c\u5982\u679c\u663e\u5f0f\u5b58\u50a8\u5bc6\u94a5\u592a\u6602\u8d35\uff0c\u6211\u4eec\u53ea\u662f\u4f7f\u7528\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u8fdb\u884c\u6392\u5e8f\u3002\u521b\u5efa\u51fd\u6570 compare_edits (id1 integer , id2 integer ) \u5c06\u6bd4\u8f83\u8fd4\u56de\u4e3a ???;\u901a\u8fc7\u6bd4\u8f83 compare_edits( edit . id ) \u4ece\u7f16\u8f91\u987a\u5e8f\u4e2d\u9009\u62e9 *\uff1b\n\u589e\u91cf\u7ef4\u62a4\u8fd9\u6837\u7684\u6392\u5e8f\u8fd0\u7b97\u7b26\u4f1a\u5f88\u68d8\u624b\u3002\u53ef\u80fd\u5fc5\u987b\u663e\u5f0f\u5b58\u50a8\u4e00\u7ec4\u6bd4\u8f83\u3002\u5bf9\u4e8e\u6211\u6765\u8bf4\uff0c\u5982\u4f55\u4ee5\u4e00\u79cd\u4f7f\u6240\u9700\u7684\u6bd4\u8f83\u96c6\u76f8\u5bf9\u4e8e\u8f93\u5165\u7684\u5fae\u5c0f\u53d8\u5316\u4fdd\u6301\u7a33\u5b9a\u7684\u65b9\u5f0f\u9009\u62e9\u652f\u70b9\u5e76\u4e0d\u660e\u663e\u3002\u4f46\u5b83\u53ef\u80fd\u662f\u53ef\u80fd\u7684\u3002\u5982\u679c\u4f7f\u7528\u5185\u7f6e\u7684\u6392\u5e8f\u8fd0\u7b97\u7b26\u4e0d\u53ef\u884c\uff0c\u4e5f\u8bb8\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u663e\u5f0f\u904d\u5386\u6811\u3002 with recursiverightmost_child(id, parent_id) as ( select max (id), edit . parent_id from edit where edit . parent_id is not null group by parent_id),rightmost_descendant(id, child_id) as ( select id, id from edit union select parent . parent_id , child . child_id \u4ece rightmost_child \u4e3a\u7236\u7ea7\uff0c rightmost_descendant \u4e3a child where parent . id = child . id ),rightmost_leaf(id, Leaf_id) as ( select id, max (child_id) as leaf_id from rightmost_descendant group by id),prev_sibling(id) , prev_id) as ( select edit . id , ( select max (sibling . id ) from edit as mirror where edit . parent_id = mirror . parent_id and edit . id &gt; mirror . id ) as prev_id from edit where prev_id is not null ), prev_edit(id, prev_id) as ( -- \u6ca1\u6709\u4e0a\u4e00\u4e2a\u5144\u5f1f\u59d0\u59b9\u7684\u7f16\u8f91\u5728\u4ed6\u4eec\u7684\u7236\u7ea7\u4e4b\u540e\u9009\u62e9 edit . id , edit . parent_id from edit where prev_sibling where prev_sibling . id = edit . id ) union all - - \u5176\u4ed6\u7f16\u8f91\u51fa\u73b0\u5728\u4ed6\u4eec\u4e0a\u4e00\u4e2a\u5144\u5f1f\u9009\u62e9\u7f16\u8f91\u7684\u6700\u53f3\u8fb9\u7684\u53f6\u5b50\u4e4b\u540e. id \uff0c rightmost_leaf \u3002 Leaf_id \u6765\u81ea edit\u3001prev_sibling\u3001rightmost_leaf\uff0c\u5176\u4e2d edit \u3002 id = prev_sibling \u3002 id \u548c prev_sibling \u3002 prev_id = rightmost_leaf \u3002 id ),position(id, position, character) as ( -- root is at position 0 select edit . id , 0 , edit . character from edit where edit . parent_id is null union all -- \u6240\u6709\u5176\u4ed6\u7f16\u8f91\u90fd\u5728\u4ed6\u4eec\u4e0a\u4e00\u6b21\u7f16\u8f91\u4e4b\u540eselect edit . id , position . position + 1 , edit . character from edit, prev_edit, position where edit . id = prev_edit . id and prev_edit . prev_id = position . id ) select * from position order by position .\u4f4d\u7f6e ;\u8ba9\u5144\u5f1f=\u7f16\u8f91\uff08\uff1f\u7f16\u8f91\u3002\u7f16\u8f91\u3002\uff08\u7f16\u8f91\u7236~\u7236\uff09\uff09\u5165\u53e3rightmost_child =\u7f16\u8f91\uff08\uff1f\u7f16\u8f91\u3002\u7f16\u8f91\u3002\uff08\u6700\u5927[\u7f16\u8f91~\u7236]\uff09\uff09\u5165\u53e3rightmost_leaf=\u4fee\u590d\uff08\u7f16\u8f91\uff08\uff1f\u7f16\u8f91\u3002\u7f16\u8f91\u3002\u7f16\u8f91\uff09 ) (?[rightmost_leaf] . (rightmost_leaf (?edit . ?leaf .edit . (max [leaf | (leaf rightmost_child)]))))) \u5165\u53e3prev = edits (?edit .edit .let prev_siblings = (edit\u5144\u5f1f) ( ?sibling . (when (edit &gt;sibling)sibling)) in if !!prev_siblings (max [prev_siblings] rightmost_leaf) (edit parent)) \u5165\u53e3\u4f4d\u7f6e = fix (root . 0) (?[position] . (position | (position) (?edit . ?pos . (edit ~prev) . (pos + 1))))) inedits (?edit . (edit position) .edit . (edit character)) \u5728\u4efb\u4f55\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u90fd\u53ef\u80fd\u4e0d\u5f97\u4e0d\u81f3\u5c11\u7ef4\u62a4\u4e00\u4e2a\u5173\u4e8e parent\u3001~parent \u548c character \u7684\u7d22\u5f15\uff0c\u53ef\u80fd\u8fd8\u6709\u8bb8\u591a\u4e2d\u95f4\u7ed3\u679c\u7684\u7d22\u5f15\u3002\u6709\u70b9\u4ee4\u4eba\u62c5\u5fe7\u7684\u662f\uff0c\u4ece\u4ee3\u7801\u4e2d\u6839\u672c\u65e0\u6cd5\u9884\u6d4b\u8fd9\u4e9b\u5c06\u662f\u4ec0\u4e48\u4ee5\u53ca\u5b83\u4eec\u5c06\u82b1\u8d39\u591a\u5c11\u3002\u5728\u7406\u60f3\u60c5\u51b5\u4e0b\uff0cprev \u7684\u8f93\u51fa\u975e\u5e38\u7a33\u5b9a\uff0c\u56e0\u6b64\u5e94\u8be5\u5141\u8bb8\u5408\u7406\u6709\u6548\u7684\u589e\u91cf\u7ef4\u62a4\u3002\u4f46\u662f\u4f4d\u7f6e\u8f93\u51fa\u7684\u5f88\u5927\u4e00\u90e8\u5206\u4f1a\u5728\u6bcf\u6b21\u65b0\u7f16\u8f91\u65f6\u53d1\u751f\u53d8\u5316\uff0c\u56e0\u6b64\u7ef4\u62a4\u8d77\u6765\u6548\u7387\u4f4e\u4e0b\u3002\u8fd9\u662f\u56e0\u4e3a prev \u9690\u5f0f\u8868\u793a\u6392\u5e8f\uff0c\u5c31\u76f8\u90bb\u7f16\u8f91\u4e4b\u95f4\u7684\u76f8\u5bf9\u6392\u5e8f\u800c\u8a00\uff0c\u800c position \u901a\u8fc7\u5bf9\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u8fdb\u884c\u7f16\u53f7\u6765\u663e\u5f0f\u8868\u793a\u6392\u5e8f\u3002\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c\u6bcf\u4e2a\u65b0\u7684\u7f16\u8f91\u53ea\u6539\u53d8\u5b83\u53f3\u8fb9\u7684\u7b2c\u4e00\u4e2a\u7f16\u8f91\u7684 prev \u503c\uff0c\u4f46\u589e\u52a0\u5b83\u53f3\u8fb9\u7684\u6bcf\u4e2a\u7f16\u8f91\u7684\u4f4d\u7f6e\u7f16\u53f7\u3002\n\u6211\u4eec\u4ece\u4e00\u4e2a\u7a7a\u5e8f\u5217\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u5728\u5176\u4e2d\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u5b58\u50a8\u7f16\u8f91\u3002\u5bf9\u4e8e\u6bcf\u6b21\u7f16\u8f91\uff0c\u6211\u4eec\u901a\u8fc7\u9996\u5148\u626b\u63cf\u5e8f\u5217\u627e\u5230\u5b83\u7684\u7236\u7ea7\uff0c\u7136\u540e\u5411\u53f3\u626b\u63cf\u627e\u5230\u6b63\u786e\u7684\u70b9\u63d2\u5165\u5b50\u7ea7\u6765\u5c06\u5176\u63d2\u5165\u5230\u5e8f\u5217\u4e2d\u3002\u5982\u679c\u5e8f\u5217\u88ab\u5b9e\u73b0\u4e3a\u4e00\u4e2a b \u6811\uff0c\u90a3\u4e48\u8fd9\u4e9b\u626b\u63cf\u548c\u63d2\u5165\u662f\u76f8\u5f53\u4fbf\u5b9c\u7684\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u8ddf\u8e2a b \u6811\u6bcf\u4e2a\u5206\u652f\u4e2d\u7684\u5b57\u7b26\u6570\uff0c\u4ee5\u4fbf\u901a\u8fc7\u6cbf\u7740 b \u6811\u7684\u4e3b\u5e72\u8d70\u4e0b\u53bb\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u56de\u7b54\u8bf8\u5982\u201c\u7b2c 142 \u4e2a\u5b57\u7b26\u7684\u7f16\u8f91 ID \u662f\u4ec0\u4e48\u201d\u4e4b\u7c7b\u7684\u67e5\u8be2\u3002\u547d\u4ee4\u5f0f\u89e3\u51b3\u65b9\u6848\u6839\u636e\u67d0\u4e9b\u6709\u5e8f\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u4f4d\u7f6e\u9690\u5f0f\u8868\u793a\u6392\u5e8f\u3002\u5728\u6570\u636e\u7ed3\u6784\u7684\u5f00\u5934\u9644\u8fd1\u63d2\u5165\u65b0\u7f16\u8f91\u4e0d\u9700\u8981\u663e\u5f0f\u66f4\u65b0\u6bcf\u4e2a\u540e\u9762\u5143\u7d20\u7684\u4f4d\u7f6e - \u8be5\u4f4d\u7f6e\u9690\u542b\u5728\u6574\u4e2a\u7ed3\u6784\u4e2d\u3002\u4f7f\u7528\u9012\u5f52\u5e8f\u5217(last_id, characters, ids) as ( select edit . id , edit . character , array[ edit . id ] from edit where edit . parent_id is null union all select edit . id , -- insert edit.character and edit .id at insert_point substring ( sequence . characters , 1 , insert_point . insert_point - 1 ) || edit . character || substring ( sequence . characters , insert_point . insert_point ), sequence . ids [ 1 : insert_point . insert_point - 1 ] ||\u7f16\u8f91 . id || \u5e8f\u5217 . ids [ \u63d2\u5165\u70b9 . \u63d2\u5165\u70b9 :] \u6765\u81ea\u5e8f\u5217\uff0c\u7f16\u8f91\u8fde\u63a5\u6a2a\u5411\uff08\u9009\u62e9\u5408\u5e76\uff08\u5206\u949f\uff08i\uff09\uff0c\u6570\u7ec4\u957f\u5ea6\uff08\u5e8f\u5217\u3002ids\uff0c1\uff09+ 1\uff09\u4f5c\u4e3a\u63d2\u5165\u70b9\u6765\u81ea\u751f\u6210\u4e0b\u6807\uff08\u5e8f\u5217\u3002ids\uff0c1 ) as i -- \u4fa7\u5411\u7f16\u8f91\u8fde\u63a5\u7684\u7236\u7ea7\u7684\u6570\u7ec4\u626b\u63cf\uff08\u4ece generate_subscripts( sequence . ids , 1 ) \u4e2d\u9009\u62e9 j \u4f5c\u4e3a j where sequence . ids [j] = edit . parent_id ) as parent_ix on true -- \u5bf9\u7236\u7ea7\u7684\u6570\u7ec4\u626b\u63cfids[i] \u52a0\u5165\u6a2a\u5411\uff08\u4ece generate_subscripts( sequence . ids , 1 ) \u4e2d\u9009\u62e9 k\u4f5c\u4e3a k\uff0c\u7f16\u8f91\u4e3a o_edit \u5176\u4e2d\u5e8f\u5217\u3002 ids [k] = o_edit \u3002 parent_id \u548c\u5e8f\u5217\u3002 ids [i] = o_edit \u3002 id ) as o_parent_ix on true - \u627e\u5230 i &gt; parent_ix \u7684\u63d2\u5165\u70b9\u3002 j \u548c o_parent_ix \u3002 k &lt; parent_ix \u3002 j) \u4f5c\u4e3a\u5bf9 true where \u5e8f\u5217\u7684\u63d2\u5165\u70b9\u3002 last_id + 1 = \u7f16\u8f91\u3002 id ) select * from sequence order by last_id desclimit 1 ; Imp \u6ca1\u6709\u4efb\u4f55\u5e8f\u5217\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u4f2a\u9020\u4e00\u4e2a\u6709\u5173\u7cfb\u7684\u6570\u636e\u7ed3\u6784\uff0c\u81f3\u5c11\u770b\u770b\u4ee3\u7801\u4f1a\u662f\u4ec0\u4e48\u6837\u5b50\u3002 // \u5904\u7406\u201c\u6570\u7ec4\u201d\u7684\u51fd\u6570let insert = ?[sequence] . \uff1f\u4f4d\u7f6e \u3002 \uff1f\u7269\u54c1 \u3002\u8ba9 old = \u5e8f\u5217 (?old_position . ?old_item . (if (old_position &gt;= position) (old_position + 1) old_position) . old_item ) in old | (position . item)inlet find_min_pos = ?[sequence] \u3002 \uff1f[\u6761\u4ef6] \u3002 ( let found = sequence (?pos . ?edit . (when (cond pos edit) pos)) in min [found] ) in// \u5b9e\u9645 crdt codelet sequence = fix (0 . root) (?[sequence] . let next_edit = 1 + (max [sequence (?pos . ?edit .edit)]) in if !(edits next_edit) \u5e8f\u5217 let parent_pos = find_min_pos [sequence] [?pos . ?edit . ((next_edit parent) = edit)] \u5728let insert_point = find_min_pos [sequence] [?o_pos . ?o_edit . ( let o_parent_pos = find_min_pos [sequence] [?pos . ?edit . ((o_edit parent) = edit)] in (o_pos &gt; parent_pos) &amp; (parent_pos &gt; o_parent_pos) )] in insert [sequence] (if !!insertion_point inserting_point (max [sequence (?pos . ?edit . pos)])) next_edit ) insequence (?pos . ?edit . pos .edit . (edit character))\n\u8fd9\u4f7f\u5f53\u524d\u8e69\u811a\u7684\u89e3\u91ca\u5668\u5c48\u670d\uff0c\u4f46\u6211\u8ba4\u4e3a\u53ef\u4ee5\u6709\u6548\u5730\u6267\u884c\u5b83\u3002\u5bf9\u4e8e sql \u548c imp \u7248\u672c\uff0c\u4f3c\u4e4e\u53ef\u4ee5\u9010\u6b65\u7ef4\u62a4\u8fd9\u4e00\u70b9\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528\u6301\u4e45\u6570\u636e\u7ed3\u6784\u6765\u5b9e\u73b0\u6570\u7ec4\uff0c\u90a3\u4e48\u63d2\u5165\u4e0d\u4f1a\u592a\u6602\u8d35\u3002\u5982\u679c\u6211\u4eec\u63d0\u793a\u8fd0\u884c\u65f6\u4e0d\u4f1a\u5220\u9664\u4efb\u4f55\u7f16\u8f91\u5e76\u4e14\u65b0\u7f16\u8f91\u7684 id \u7f16\u53f7\u4f1a\u589e\u52a0\uff0c\u90a3\u4e48\u5b83\u53ef\u4ee5\u63a8\u65ad\u5b83\u4e0d\u9700\u8981\u5b58\u50a8\u6570\u7ec4\u7684\u65e7\u503c\uff08\u53c2\u89c1\u4f8b\u5982 edelweiss\uff09\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u4e2a\u5b8c\u5168\u5076\u7136\u7684\u987a\u5e8f\u4f9d\u8d56\uff0c\u5931\u53bb\u4e86\u5229\u7528\u5e76\u884c\u6027\u6216\u77e2\u91cf\u5316\u7684\u80fd\u529b\uff0c\u4e5f\u5931\u53bb\u4e86\u5904\u7406\u4e71\u5e8f\u7f16\u8f91\u7684\u80fd\u529b\u3002\u4efb\u4f55\u4e0b\u6e38\u4ee3\u7801\u7684\u589e\u91cf\u7ef4\u62a4\u53ef\u80fd\u9700\u8981\u80fd\u591f\u533a\u5206\u5e8f\u5217\u7684\u8fde\u7eed\u7248\u672c\u3002\u8be5\u5e8f\u5217\u6309\u4e00\u4e2a\u952e\u8fdb\u884c\u6392\u5e8f\uff0c\u8be5\u952e\u5b9e\u73b0\u751a\u81f3\u6bd4\u8f83\u7684\u6210\u672c\u90fd\u5f88\u9ad8\u3002\u5feb\u901f\u547d\u4ee4\u5f0f\u89e3\u51b3\u65b9\u6848\u4f9d\u8d56\u4e8e\u4e0d\u9002\u5408\u589e\u91cf\u7ef4\u62a4\u7684\u5de7\u5999\u9690\u5f0f\u6bd4\u8f83\u3002\u867d\u7136\u7f16\u8f91\u7684\u76f8\u5bf9\u987a\u5e8f\u662f\u7a33\u5b9a\u7684\uff08\u4f8b\u5982\uff0c\u5982\u679c id=4 \u51fa\u73b0\u5728 id=12 \u4e4b\u524d\uff0c\u90a3\u4e48\u5b83\u603b\u662f\u5728\u5b83\u4e4b\u524d\uff09\uff0c\u4f46\u7edd\u5bf9\u4f4d\u7f6e\u975e\u5e38\u4e0d\u7a33\u5b9a\uff08\u5982\u679c\u63d2\u5165\u65b0\u7684\u7f16\u8f91\uff0c\u5219\u5fc5\u987b\u589e\u52a0\u5176\u540e\u6240\u6709\u5185\u5bb9\u7684\u4f4d\u7f6e\uff09\u3002\u56e0\u6b64\uff0c\u7edd\u5bf9\u4f4d\u7f6e\u7684\u4efb\u4f55\u660e\u786e\u8868\u793a\u90fd\u5c06\u5bfc\u81f4\u4e0b\u6e38\u5927\u91cf\u6d41\u5931\u3002\u540e\u4e00\u4e2a\u95ee\u9898\u5e76\u4e0d\u662f\u5173\u7cfb\u8bed\u8a00\u72ec\u6709\u7684\u2014\u2014\u7a33\u5b9a\u7684 id \u662f\u4efb\u4f55\u589e\u91cf\u7ef4\u62a4\u95ee\u9898\u7684\u6838\u5fc3\uff08\u4f8b\u5982\uff0c\u6587\u672c\u7f16\u8f91\u5668\u4e2d\u7684\u589e\u91cf\u7b97\u6cd5\u901a\u5e38\u4f9d\u8d56\u4e8e\u6307\u5411\u6811\u8282\u70b9\u7684\u6307\u9488\u800c\u4e0d\u662f\u5b57\u7b26\u4f4d\u7f6e\uff09\u3002\u5173\u7cfb\u8bed\u8a00\u7684\u96be\u70b9\u5728\u4e8e\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528\u6307\u9488\u6807\u8bc6\u4f5c\u4e3a id\uff0c\u56e0\u4e3a\u8fd9\u9700\u8981\u4e25\u683c\u7ea6\u675f\u7684\u6267\u884c\u987a\u5e8f\u3002\u4e5f\u8bb8\u4e00\u79cd\u9009\u62e9\u662f\u62e5\u6709\u4e00\u4e2a\u4e0b\u964d\u5230\u63d2\u5165\u548c\u5220\u9664\u7ea7\u522b\u7684\u9003\u751f\u8231\u53e3\u3002\u5728\u90a3\u4e2a\u7ea7\u522b\uff0c\u6211\u4eec\u53ef\u4ee5\u57fa\u4e8e\u64cd\u4f5c\u5386\u53f2\u6784\u5efa\u7a33\u5b9a\u7684 id\uff0c\u7c7b\u4f3c\u4e8e\u4f7f\u7528\u6811\u8282\u70b9\u4f5c\u4e3a\u5e8f\u5217\u4e2d\u7684 id\u3002\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u8bc1\u5728\u58f0\u660e\u5c42\u4e2d\u65e0\u6cd5\u89c2\u5bdf\u5230 id \u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u4ee5\u4fbf\u63d2\u5165/\u5220\u9664\u7684\u987a\u5e8f\u4e0d\u4f1a\u5f71\u54cd\u6700\u7ec8\u7ed3\u679c\u3002\n\u6211\u7684\u5de5\u4f5c\u76ee\u524d\u662f\u901a\u8fc7\u4e0e\u5728 github \u4e0a\u8d5e\u52a9\u6211\u7684\u4eba\u5206\u4eab\u60f3\u6cd5\u548c\u6b63\u5728\u8fdb\u884c\u7684\u5de5\u4f5c\u6765\u8d44\u52a9\u7684\u3002", "note_en": "Doing this naively isn&#39;t particularly hard. The challenge here is to implement it as if writing a batch query, but in such a way that an incremental system like  materialize or  dida can efficiently update the result when new edits arrive. Not because this code would be particularly useful in itself, but because it helps discover the boundaries of what kinds of problems are possible to solve in this way.\n The exercise is a little like GPU programming, in that avoiding sequential algorithms and shared mutable data-structures requires very carefully separating the actual essential data dependencies of the problem from those accidentally introduced by typical programming techniques.\n   We have a tree of edits, each of which represents the insert of a single character.\n  Each edit has a unique id, which for the purpose of this simple example we&#39;ll say is just an integer.\n  Every other edit has a parent edit. The id of an edit is always greater than the id of its parent.\n To construct the actual text we take this tree of edits, sort the children of each edit by id, and then do an pre-order traversal of the tree.\n    create table  edit (id  integer , parent_id  integer , character  text ); insert into  edit  values  ( 0 ,  null ,  &#39;a&#39; ); insert into  edit  values  ( 1 ,  0 ,  &#39;b&#39; ); insert into  edit  values  ( 2 ,  0 ,  &#39;e&#39; ); insert into  edit  values  ( 3 ,  1 ,  &#39;c&#39; ); insert into  edit  values  ( 4 ,  1 ,  &#39;d&#39; ); insert into  edit  values  ( 5 ,  2 ,  &#39;f&#39; ); insert into  edit  values  ( 6 ,  5 ,  &#39;g&#39; ); insert into  edit  values  ( 7 ,  5 ,  &#39;h&#39; ); insert into  edit  values  ( 8 ,  5 ,  &#39;i&#39; );\n Given that we&#39;re trying to sort this set of edits, the natural reaction would be to start with something like:\n  But we&#39;re immediately stuck because there isn&#39;t an obvious sort key. The information that lets us decide whether one edit should become before or after another edit is implicit in the shape of the tree. To get an actual value to sort by, we would need to include all that information.\n with  recursive  path (id,  path , character)  as  (  select  edits . id ,  edits . id ,  edits . character  from  edits  where  edits . parent_id  is  null  union all select  child . id ,  parent . path  ||  &#39;,&#39;  ||  child . id ,  child . character  from  edits  as  child,  path  as  parent  where  child . parent_id  =  parent . id  ) select  *  from path order by path . path ;\n  This is the essence of the problem - sorting the edits by the ids in their path from the root. It&#39;s a beautiful solution, and for nicely balanced trees this would be the end of the story. But the trees for text editing crdts tend to be very deep and narrow so materializing these paths will make the storage cost look like O(N\u00b2).\n (We could maybe cut this down in the typical case by only looking at parts of the path with more than one child. But the worst case would still be O(N\u00b2))\n  In most languages, if explicitly storing the key was too expensive we&#39;d just sort using a custom comparison function instead.\n create function  compare_edits (id1  integer , id2  integer ) returns comparison  as  ???;  select  *  from  edit  order by  comparing compare_edits( edit . id );\n  It would be tricky to incrementally maintain such a sort operator. The set of comparisons would probably have to be explicitly stored. It&#39;s not obvious to me how to pick pivots in a way that makes the set of required comparisons stable with respect to small changes in the input. But it might be possible.\n  If using the builtin sort operator is not feasible, maybe we can explicitly traverse the tree ourselves.\n  with  recursiverightmost_child(id, parent_id)  as  (  select  max (id),  edit . parent_id  from  edit  where  edit . parent_id  is not  null  group by  parent_id),rightmost_descendant(id, child_id)  as  (  select  id, id  from  edit  union select  parent . parent_id ,  child . child_id  from  rightmost_child  as  parent, rightmost_descendant  as  child  where  parent . id  =  child . id ),rightmost_leaf(id, leaf_id)  as  (  select  id,  max (child_id)  as  leaf_id  from  rightmost_descendant  group by  id),prev_sibling(id, prev_id)  as  (  select  edit . id , (  select  max ( sibling . id )  from  edit  as  sibling  where  edit . parent_id  =  sibling . parent_id  and  edit . id  &gt;  sibling . id  )  as  prev_id  from  edit  where  prev_id  is not  null ),prev_edit(id, prev_id)  as  (  -- edits that have no prev siblings come after their parent  select  edit . id ,  edit . parent_id  from  edit  where  not  exists (  select  *  from  prev_sibling  where  prev_sibling . id  =  edit . id  )  union all  -- other edits come after the rightmost leaf of their prev sibling  select  edit . id ,  rightmost_leaf . leaf_id  from  edit, prev_sibling, rightmost_leaf  where  edit . id  =  prev_sibling . id  and  prev_sibling . prev_id  =  rightmost_leaf . id ),position(id, position, character)  as  (  -- root is at position 0  select  edit . id ,  0 ,  edit . character  from  edit  where  edit . parent_id  is  null  union all  -- every other edit comes after their prev edit  select  edit . id ,  position . position  +  1 ,  edit . character  from  edit, prev_edit, position  where  edit . id  =  prev_edit . id  and  prev_edit . prev_id  =  position . id ) select  * from  position order by  position . position ;\n   let sibling = edits (?edit . edit . (edit parent ~parent)) inlet rightmost_child = edits (?edit . edit . (max [edit ~parent])) inlet rightmost_leaf = fix (edits (?edit . edit . edit)) (?[rightmost_leaf] . (rightmost_leaf (?edit . ?leaf . edit . (max [leaf | (leaf rightmost_child)])))) inlet prev = edits (?edit . edit . let prev_siblings = (edit sibling) (?sibling . (when (edit &gt; sibling) sibling)) in if !!prev_siblings (max [prev_siblings] rightmost_leaf) (edit parent)) inlet position = fix (root . 0) (?[position] . (position | (position (?edit . ?pos . (edit ~prev) . (pos + 1))))) inedits (?edit . (edit position) . edit . (edit character))\n In either case, we&#39;re likely to have to maintain at least an index on  parent,  ~parent and  character and probably also indexes for many intermediate results too. It&#39;s somewhat concerning that it&#39;s not at all predictable from the code what those will be and how much they will cost.\n In the ideal case, the output of  prev is very stable and so should admit reasonably efficient incremental maintenance. But large parts of the output of  position will change on every new edit, so it is inherently inefficient to maintain.\n This is because  prev represents the ordering implicitly, in terms of relative ordering between adjacent edits, whereas  position represents the ordering explicitly by numbering each position in the sequence. In this problem, each new edit only changes the  prev value of the first edit to its right, but increments the  position number of every edit to its right.\n   We start with an empty sequence, in which we&#39;ll store the edits in the correct order.\n  For each edit, we insert it into the sequence by first scanning the sequence to find its parent, and then scanning to the right to find the correct point to insert the child.\n If the sequence is implemented as a b-tree then these scans and inserts are fairly cheap. We can also keep track of the number of characters in each branch of the b-tree so that queries like &#34;what is the edit id for the 142nd character&#34; can be efficiently answered by walking down the spine of the b-tree.\n  The imperative solution represents the ordering implicitly in terms of position in some ordered data-structure. Inserting a new edit near the beginning of the data-structure does not require explicitly updating the position of every later element - the position is implicit in the overall structure.\n   with  recursive sequence(last_id, characters, ids)  as  (  select  edit . id ,  edit . character , array[ edit . id ]  from  edit  where  edit . parent_id  is  null  union all select  edit . id ,  -- insert edit.character and edit.id at insertion_point  substring ( sequence . characters ,  1 ,  insertion_point . insertion_point - 1 )  ||  edit . character  ||  substring ( sequence . characters ,  insertion_point . insertion_point ),  sequence . ids [ 1 : insertion_point . insertion_point - 1 ]  ||  edit . id  ||  sequence . ids [ insertion_point . insertion_point :]  from  sequence, edit  join  lateral (  select  coalesce( min (i), array_length( sequence . ids ,  1 ) + 1 )  as  insertion_point  from  generate_subscripts( sequence . ids ,  1 )  as  i  -- array scan for parent of edit  join  lateral (  select  j  from  generate_subscripts( sequence . ids ,  1 )  as  j  where  sequence . ids [j]  =  edit . parent_id )  as  parent_ix on true  -- array scan for parent of ids[i]  join  lateral (  select  k  from  generate_subscripts( sequence . ids ,  1 )  as  k, edit  as  o_edit  where  sequence . ids [k]  =  o_edit . parent_id  and  sequence . ids [i]  =  o_edit . id )  as  o_parent_ix on true  -- find insertion point  where  i  &gt;  parent_ix . j  and  o_parent_ix . k  &lt;  parent_ix . j  )  as  insertion_point on true  where  sequence . last_id  +  1  =  edit . id ) select  *  from  sequence order by  last_id  desclimit  1 ;\n  Imp doesn&#39;t have any sequence data-structure, but we can fake one with relations to at least see what the code would look like.\n // functions for working with &#39;arrays&#39;let insert = ?[sequence] . ?position . ?item . let old = sequence (?old_position . ?old_item . (if (old_position &gt;= position) (old_position + 1) old_position) . old_item ) in old | (position . item)inlet find_min_pos = ?[sequence] . ?[cond] . ( let found = sequence (?pos . ?edit . (when (cond pos edit) pos)) in min [found] ) in// actual crdt codelet sequence = fix (0 . root) (?[sequence] . let next_edit = 1 + (max [sequence (?pos . ?edit . edit)]) in if !(edits next_edit) sequence let parent_pos = find_min_pos [sequence] [?pos . ?edit . ((next_edit parent) = edit)] in let insertion_point = find_min_pos [sequence] [?o_pos . ?o_edit . ( let o_parent_pos = find_min_pos [sequence] [?pos . ?edit . ((o_edit parent) = edit)] in (o_pos &gt; parent_pos) &amp; (parent_pos &gt; o_parent_pos) )] in insert [sequence] (if !!insertion_point insertion_point (max [sequence (?pos . ?edit . pos)])) next_edit ) insequence (?pos . ?edit . pos . edit . (edit character))\n This brings the current crappy interpreter to its knees, but I think that it is possible to execute it efficiently.\n For both the sql and imp versions it seems possible to incrementally maintain this. If we use a persistent data-structure to implement the array, then the inserts are not too expensive. If we hint to the runtime that no edits will be deleted and new edits will have increasing id numbers, then it can infer that it doesn&#39;t need to store old values of the arrays (see eg  edelweiss).\n On the other hand, we&#39;ve introduced a completely incidental sequential dependency, lost the ability to take advantage of parallelism or vectorization, and lost the ability to handle out-of-order edits. And incremental maintenance of any downstream code might require the ability to diff successive versions of the sequence.\n   The sequence is sorted by a key that is expensive to materialize or even compare. Fast imperative solutions rely on clever implicit comparisons that don&#39;t lend themselves to incremental maintenance.\n While the relative ordering of edits is stable (eg if  id=4 comes before  id=12 then it will always come before it) the absolute positions are very unstable (if a new edit is inserted, the positions of everything after it must be incremented). So any explicit representation of absolute position will cause massive churn downstream.\n The latter problem isn&#39;t unique to relational languages - stable ids are at the heart of any incremental maintenance problem (eg incremental algorithms in text editors often rely on pointers to tree nodes instead of character position). What makes life difficult in relational languages is that we can&#39;t use pointer identity as an id, because that requires a strongly-constrained execution order.\n Perhaps one option is to have an escape hatch that drops down to the level of inserts and deletes. At that level we can construct stable ids based on the history of operations, in a similar fashion to using tree nodes as ids into a sequence. We just have to guarantee that the details of the ids are not observable in the declarative layer so that the order of inserts/deletes does not affect the final result.\n My work is currently funded by sharing thoughts and work in progress with people who  sponsor me on github.", "posttime": "2021-08-06 12:05:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5173\u7cfb,ordering,\u7f16\u8f91", "title": "\u5173\u7cfb\u8bed\u8a00\u4e2d\u7684\u9690\u5f0f\u6392\u5e8f", "title_en": "Implicit Ordering in Relational Languages", "transed": 1, "url": "https://scattered-thoughts.net/writing/implicit-ordering-in-relational-languages", "via": "", "real_tags": ["\u5173\u7cfb", "ordering", "\u7f16\u8f91"]}, {"category": "", "categoryclass": "", "imagename": "ac1360095041925da55ebd2e07828d0b.jpg", "infoid": 1071706, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5185\u5bb9\u4ea4\u4ed8\u7f51\u7edc\u516c\u53f8 Cloudflare Inc. \u7684\u80a1\u7968\u5728\u4eca\u5929\u7684\u76d8\u540e\u4ea4\u6613\u4e2d\u4e0b\u8dcc\uff0c\u6b64\u524d\u6295\u8d44\u8005\u5bf9\u8be5\u516c\u53f8\u7684\u8282\u62cd\u89c4\u6a21\u6ca1\u6709\u7559\u4e0b\u6df1\u523b\u5370\u8c61\u3002\u5728\u622a\u81f3 6 \u6708 30 \u65e5\u7684\u5b63\u5ea6\u4e2d\uff0cCloudflare \u62a5\u544a\u7684\u6536\u5165\u4e3a 1.524 \u4ebf\u7f8e\u5143\uff0c\u540c\u6bd4\u589e\u957f 53%\u3002\u672c\u5b63\u5ea6\u51c0\u4e8f\u635f\u4e3a 3550 \u4e07\u7f8e\u5143\u6216\u6bcf\u80a1 2 \u7f8e\u5206\uff0c\u800c 2020 \u5e74\u540c\u4e00\u5b63\u5ea6\u4e3a 2610 \u4e07\u7f8e\u5143\u6216\u6bcf\u80a1 3 \u7f8e\u5206\u3002\u5206\u6790\u5e08\u6b64\u524d\u9884\u6d4b\u6536\u5165\u4e3a 1.46 \u4ebf\u7f8e\u5143\uff0c\u6bcf\u80a1\u4e8f\u635f\u4e3a 3 \u7f8e\u5206\u3002\u672c\u5b63\u5ea6\u7684\u4eae\u70b9\u5305\u62ec Cloudflare \u7684\u590d\u5408\u5e74\u589e\u957f\u7387\u589e\u957f\u4e86 68%\uff0c\u56e0\u4e3a\u8be5\u516c\u53f8\u5c06\u5e74\u5316\u6536\u5165\u81f3\u5c11\u4e3a 100,000 \u7f8e\u5143\u7684\u5927\u5ba2\u6237\u6570\u91cf\u589e\u52a0\u5230 1,088 \u4e2a\u3002\u622a\u81f3\u672c\u5b63\u5ea6\u672b\uff0c\u8be5\u516c\u53f8\u76ee\u524d\u7ea6\u6709 19% \u7684\u5e78\u8fd0 1,000 \u5ba2\u6237\u4e3a\u4ed8\u8d39\u5ba2\u6237\u3002 Cloudflare \u5ba2\u6237\u603b\u6570\u73b0\u5728\u8d85\u8fc7 126,000\uff0c\u5176\u4e2d 48% \u7684\u6536\u5165\u6765\u81ea\u7f8e\u56fd\u4ee5\u5916\u3002\u8be5\u516c\u53f8\u73b0\u5728\u6bcf\u5929\u963b\u6b62\u8d85\u8fc7 870 \u4ebf\u4e2a\u7f51\u7edc\u5a01\u80c1\u3002 Cloudflare \u8054\u5408\u521b\u59cb\u4eba\u517c\u9996\u5e2d\u6267\u884c\u5b98\u9a6c\u4fee\u00b7\u666e\u6797\u65af (Matthew Prince) \u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8868\u793a\uff1a\u201c\u4f5c\u4e3a\u4e0a\u5e02\u516c\u53f8\uff0c\u6211\u4eec\u8fce\u6765\u4e86\u6709\u53f2\u4ee5\u6765\u6700\u5f3a\u52b2\u7684\u5b63\u5ea6\uff0c\u6211\u4eec\u7684\u6536\u5165\u589e\u957f\u7ee7\u7eed\u52a0\u901f\uff0c\u540c\u6bd4\u589e\u957f 53%\u3002\u201d . \u201c\u65e0\u8bba\u6211\u4eec\u662f\u4e3a\u4e16\u754c\u4e0a\u6700\u590d\u6742\u7684\u7ec4\u7ec7\u63d0\u4f9b\u96f6\u4fe1\u4efb\u5b89\u5168\u89e3\u51b3\u65b9\u6848\uff0c\u8fd8\u662f\u901a\u8fc7 Cloudflare Workers \u5b9e\u73b0\u4e0b\u4e00\u4e2a\u5341\u4ebf\u7f8e\u5143\u7684\u4e1a\u52a1\uff0c\u6211\u4eec\u90fd\u5c06\u7ee7\u7eed\u4e13\u6ce8\u4e8e\u63d0\u4f9b\u5ba2\u6237\u6240\u4f9d\u8d56\u7684\u5b89\u5168\u3001\u53ef\u7f16\u7a0b\u7684\u7f51\u7edc\u89e3\u51b3\u65b9\u6848\u3002\u201d Cloudflare \u4f30\u8ba1\u4e0b\u4e00\u5b63\u5ea6\u7684\u6536\u5165\u5728 1.65 \u4ebf\u7f8e\u5143\u81f3 1.66 \u4ebf\u7f8e\u5143\u4e4b\u95f4\uff0c\u8c03\u6574\u540e\u7684\u6bcf\u80a1\u4e8f\u635f\u4e3a 4 \u7f8e\u5206\u81f3 3 \u7f8e\u5206\u3002\u5206\u6790\u5e08\u6b64\u524d\u9884\u8ba1\u6bcf\u80a1\u4e8f\u635f 2 \u7f8e\u5206\uff0c\u6536\u5165\u4e3a 1.574 \u4ebf\u7f8e\u5143\u3002\nCloudflare \u8868\u793a\uff0c\u4ed6\u4eec\u9884\u8ba1\u5168\u5e74\u6536\u5165\u5c06\u5728 6.29 \u4ebf\u7f8e\u5143\u81f3 6.33 \u4ebf\u7f8e\u5143\u4e4b\u95f4\uff0c\u8c03\u6574\u540e\u6bcf\u80a1\u4e8f\u635f\u5728 11 \u81f3 12 \u7f8e\u5206\u4e4b\u95f4\u3002\u5c3d\u7ba1\u5b63\u5ea6\u6570\u636e\u8d85\u51fa\u4e86\u5206\u6790\u5e08\u7684\u9884\u671f\u5e76\u4e14\u4e0e\u9884\u671f\u5927\u81f4\u76f8\u7b26\uff0c\u4f46\u6295\u8d44\u8005\u5e76\u672a\u7559\u4e0b\u6df1\u523b\u5370\u8c61\u3002 Cloudflare \u7684\u80a1\u4ef7\u5728\u76d8\u540e\u4ea4\u6613\u4e2d\u4e0b\u8dcc 5.5%\u3002\u4e0e\u6295\u8d44\u8005\u53ef\u80fd\u9884\u671f\u7684\u66f4\u597d\u76f8\u6bd4\uff0c\u6570\u636e\u5e76\u4e0d\u7cdf\u7cd5\u3002 Cloudflare \u4eca\u5e74\u8868\u73b0\u51fa\u8272\uff0c\u5176\u80a1\u4ef7\u4eca\u5e74\u8fc4\u4eca\u4e0a\u6da8\u4e86 63%\u3002\u4f34\u968f\u7740\u8fd9\u4e00\u6ea2\u4ef7\u800c\u6765\u7684\u662f\u5bf9\u5f3a\u52b2\u62a5\u544a\u7684\u9884\u671f\uff0c\u5c3d\u7ba1 Cloudflare \u5728\u524d\u56db\u4e2a\u5b63\u5ea6\u7684\u8868\u73b0\u8d85\u51fa\u4e86\u9884\u671f\uff0c\u4f46\u8fd9\u6b21\u7684\u5e45\u5ea6\u5e76\u4e0d\u5927\u3002\u52a0\u5165\u6211\u4eec\u7684 Cube \u4ff1\u4e50\u90e8\u548c Cube \u6d3b\u52a8\u4e13\u5bb6\u793e\u533a\uff0c\u8868\u8fbe\u60a8\u5bf9\u6211\u4eec\u4f7f\u547d\u7684\u652f\u6301\u3002\u52a0\u5165\u793e\u533a\uff0c\u5176\u4e2d\u5305\u62ec Amazon Web Services\uff0c\u5373\u5c06\u6210\u4e3a Amazon.com \u9996\u5e2d\u6267\u884c\u5b98 Andy Jassy\u3001\u6234\u5c14\u79d1\u6280\u516c\u53f8\u521b\u59cb\u4eba\u517c\u9996\u5e2d\u6267\u884c\u5b98\u8fc8\u514b\u5c14\u6234\u5c14\u3001\u82f1\u7279\u5c14\u9996\u5e2d\u6267\u884c\u5b98 Pat Gelsinger \u4ee5\u53ca\u66f4\u591a\u540d\u4eba\u548c\u4e13\u5bb6\u3002\u6211\u4eec\u5c06\u4e8e 6 \u6708 16 \u65e5\u4e3e\u884c\u7b2c\u4e8c\u6b21\u4e91\u521b\u4e1a\u5c55\u793a\u4f1a\u3002\u5355\u51fb\u6b64\u5904\u52a0\u5165\u514d\u8d39\u4e14\u5f00\u653e\u7684 Startup Showcase \u6d3b\u52a8\u3002", "note_en": "Shares in content delivery network company Cloudflare Inc. dropped in after-hours trading today after investors were not impressed by the size of the company\u2019s beat.\n For the quarter ending June 30, Cloudflare reported revenue of $152.4 million, up 53% year-over-year. Net loss in the quarter was $35.5 million or two cents per share compared with $26.1 million or three cents per share in the same quarter of 2020.\n Analysts had  been predicting revenue of $146 million and a loss per share of three cents.\n Highlights in the quarter included a 68% increase in Cloudflare\u2019s compound annual growth rate as the company increased its number of large customers, those with at least $100,000 in annualized revenue, to 1,088. As of the end of the quarter, the company now counts about 19% of the Fortunate 1,000 as paying customers.\n Total Cloudflare customers are now over 126,000, with 48% of revenue coming from outside of the U.S. The company is now blocking more than 87 billion cyber threats per day.\n \u201cWe had our strongest quarter ever as a public company, and our revenue growth continued to accelerate, growing 53% year-over-year,\u201d Matthew Prince, co-founder a chief executive officer of Cloudflare (pictured), said in  a statement. \u201cWhether we\u2019re offering zero trust security solutions to the world\u2019s most sophisticated organizations or enabling the next billion-dollar business with Cloudflare Workers, we remain focused on delivering secure, programmable network solutions that our customers rely on.\u201d\n Cloudflare is estimating revenue of between $165 million and $166 million for the quarter ahead and an adjusted loss per share of four cents to three cents. Analysts had  been predicting revenue of $157.4 million on a loss of two cents per share.\n For the full year, Cloudflare said that they expected revenue to come in at between $629 million and $633 million and an adjusted loss of between 11 and 12 cents per share.\n Despite beating analyst estimates with the quarterly figures and being roughly in line with expectations on estimates, investors were not impressed. Share in Cloudflare dropped 5.5% in after-hours trading.\n It wasn\u2019t so much that the figures were bad versus that investors may have expected better. Cloudflare has been a stellar performer this year, with its share price up 63% year to date. With that premium comes expectations of strong reports, and although Cloudflare has beaten predictions in its previous four quarters, it wasn\u2019t by a large margin this time.\n  Show your support for our mission by joining our Cube Club and Cube Event Community of experts. Join the community that includes Amazon Web Services and soon to be Amazon.com CEO Andy Jassy, Dell Technologies founder and CEO Michael Dell, Intel CEO Pat Gelsinger and many more luminaries and experts.\n We are holding our second cloud startup showcase on June 16.\u00a0 Click here to join the free and open Startup Showcase event.", "posttime": "2021-08-06 10:50:50", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7f8e\u56fd,\u8d85\u51fa,paying,cloudflare", "title": "Cloudflare \u8d85\u51fa\u9884\u671f\uff0c\u7b2c\u4e8c\u5b63\u5ea6\u6536\u5165\u4e3a 1.524 \u4ebf\u7f8e\u5143\uff0c\u540c\u6bd4\u589e\u957f 53%\uff0c48% \u6765\u81ea\u7f8e\u56fd\u4ee5\u5916\uff1b\u8d22\u5bcc 1,000 \u5f3a\u516c\u53f8\u4e2d\u7ea6\u6709 19% \u662f\u4ed8\u8d39\u5ba2\u6237", "title_en": "Cloudflare beats expectations with Q2 revenue of $152.4M, up 53% YoY, 48% came from outside of the US; says ~19% of Fortune 1,000 firms are paying customers", "transed": 1, "url": "https://siliconangle.com/2021/08/05/cloudflare-shares-drop-despite-beating-estimates-second-quarter-earnings/", "via": "", "real_tags": ["\u7f8e\u56fd", "\u8d85\u51fa", "paying"]}]