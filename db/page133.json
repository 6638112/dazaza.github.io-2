[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1066831, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u521b\u9020  \u5e10\u6237 ", "note_en": "Create\r\t\t\t\t\t\t\t\t\t\t\tAccount", "posttime": "2021-06-19 11:56:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9ed1\u5323\u5b50,black,\u521b\u9020", "title": "\u88ab\u544a\u77e5\u9ed1\u5323\u5b50\uff08\u98de\u884c\u6570\u636e\u8bb0\u5f55\u4eea\uff09\u7684\u53d1\u660e\u8005\u6765\u653e\u5f03\u8fd9\u4e2a\u60f3\u6cd5 ", "title_en": "The Inventor of the Black Box (Flight Data Recorder) Was Told to Drop the Idea", "transed": 1, "url": "https://spectrum.ieee.org/tech-history/space-age/the-inventor-of-the-black-box-was-told-to-drop-the-idea-and-get-on-with-blowing-up-fuel-tanks", "via": "", "real_tags": ["\u9ed1\u5323\u5b50", "black", "\u521b\u9020"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1066830, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eca\u5929\uff06\uff0339; s\u9009\u9879 - \u4ece\u5982\u4f55\u521b\u9020ryan\u5317\u7684\u6240\u6709\u5185\u5bb9\u3002\u5982\u679c\u4f60\u5e94\u8be5\u88ab\u8fd0\u56de\u5386\u53f2\uff0c\u8fd9\u5c31\u662f\u5982\u4f55\u6652\u9ed1\u52a8\u7269\u76ae\u80a4\uff1a\n \uff06\uff0334;\u6652\u9ed1\u6700\u521d\u662f\u57287000\u5e74\u7684bce\u4e2d\u53d1\u660e\u7684\u3002\u6ca1\u6709\u6652\u9ed1\uff0c\u52a8\u7269\u76ae\u80a4\u8fc5\u901f\u8150\u70c2\uff0c\u751a\u81f3\u5e72\u71e5\u7684\uff0c\u53d8\u5f97\u575a\u786c\uff0c\u4e0d\u7075\u6d3b\uff0c\u8106\u5f31\u3002\u97a3\u5236\u5c06\u8fd9\u4e9b\u76ae\u80a4\u8f6c\u5316\u4e3a\u76ae\u9769\uff1a\u4e00\u79cd\u7269\u8d28\u5982\u6b64\u6297\u62d2\uff0c3500 BCE\u7684\u76ae\u978b\u5e78\u5b58\u6210\u4e3a\u73b0\u4ee3\u65f6\u4ee3\u3002\u5b83\uff06\uff0339;\u6211\uff06\uff0339; ll\u7edd\u5bf9\u60f3\u505a\uff0c\u4f46\u4f60\u5e94\u8be5\u8bb0\u4f4f\uff0c\u4e3a\u6652\u9ed1\u51c6\u5907\u52a8\u7269\u76ae\u80a4\u6d89\u53ca\u76ae\u80a4\u53d1\u9175\uff0c\u800c\u4e14\u8fd8\u5141\u8bb8\u5b83\u4eec\u5728\u5c3f\u6db2\u4e2d\u6d78\u6ce1\uff0c\u5e76\u5728\u5927\u4fbf\u4e2d\u6309\u6469\u5b83\u4eec\uff0c\u6240\u4ee5\u4e5f\u8bb8\u8bbe\u7f6e\u4f60\u7684\u5766\u514b\u65af\u987a\u98ce\u3002\n \uff06\uff0334;\u5c60\u5bb0\u52a8\u7269\u540e\uff0c\u7acb\u5373\u5c06\u76ae\u80a4\u5e73\u653e\uff0c\u8986\u76d6\u76d0\u6216\u6c99\u5b50\u7684\u8089\u8d28\u4fa7\uff0c\u8fd9\u5c06\u4f7f\u5b83\u4eec\u70d8\u5e72\u5e76\u5ef6\u8fdf\u5206\u89e3\u3002\u5728\u51e0\u5929\u5185\uff0c\u9690\u85cf\u5c06\u53d8\u5f97\u8270\u96be\uff0c\u51e0\u4e4e\u8106\u5f31\uff0c\u7136\u540e\u4ed6\u4eec\u53ef\u4ee5\u88ab\u8fd0\u9001\u5230\u4f60\u7684\u6652\u9ed1\u5730\u533a\u3002\u4e00\u65e6\u90a3\u91cc\uff0c\u4f60\uff06\uff0339; ll\u6d78\u6ce1\u76ae\u80a4\uff1a\u8fd9\u6e05\u6d01\u4e86\u6c61\u57a2\u548c\u8840\u6db2\u5e76\u518d\u6b21\u67d4\u8f6f\u5b83\u4eec\u3002\u76ae\u80a4\u64e6\u9664\u4efb\u4f55\u5269\u4e0b\u7684\u8089\u4f53\uff0c\u7136\u540e\u5728\u5c3f\u6db2\u4e2d\u6d78\u6ce1\u5b83\u4eec - \u8fd9\u4f7f\u5f97\u5934\u53d1\u677e\u52a8\uff0c\u7136\u540e\u53ef\u4ee5\u522e\u6389\u3002\u4f60\uff06\uff0339; LL\u901a\u8fc7\u6df7\u5408Poo\u548c\u6c34\uff0c\u4f7f\u6211\u4eec\u63d0\u524d\u5ba3\u4f20\u7684\u5927\u4fbf\u6d46\u6db2\uff0c\u7136\u540e\u6d78\u6ce1\u4f60\u7684\u76ae\u80a4\uff1a\u5927\u4fbf\u4e2d\u7684\u9176\u4f1a\u5bfc\u81f4\u76ae\u80a4\u53d1\u9175\uff0c\u8f6f\u5316\u5b83\u4eec\uff0c\u4f7f\u5b83\u4eec\u66f4\u52a0\u7075\u6d3b\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u7ad9\u5728\u4f60\u7684\u4fbf\u4fbf\u6d46\u6599\u4e2d\u6765\u5e2e\u52a9\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u7528\u811a\u63c9\u634f\u76ae\u80a4 - \u53ea\u662f\u7ee7\u7eed\u544a\u8bc9\u81ea\u5df1\u4f60\uff06\uff0339;\u91cd\u65b0\u7834\u788e\u8461\u8404 - \u4f46\u8bf7\u52a1\u5fc5\u4ee5\u540e\u7528\u80a5\u7682\u548c\u6c34\u6d17\u6da4\uff0c\u6216\u8005\u66f4\u597d\u5730\u4f7f\u7528\u975e\u4eba\u7c7b\u52a8\u529b\uff08\u5982\u6c34\u8f66\uff09\u63c9\u6413\u76ae\u80a4\u3002\n \uff06\uff0334;\u6bd5\u7adf\uff0c\u8fd9\u4e24\u4ef6\u4e8b\u4f1a\u53d1\u751f\uff1a\u4f60\u7684\u52a8\u7269\u76ae\u80a4\u4f1a\u67d4\u8f6f\uff0c\u7075\u6d3b\uff0c\u51c6\u5907\u6652\u9ed1\uff0c\u6ca1\u6709\u4eba\u60f3\u8981\u5728\u4f60\u9644\u8fd1\u7684\u4efb\u4f55\u5730\u65b9\u3002\n \uff06\uff0334;\u6652\u9ed1\u8fd9\u4e9b\u76ae\u80a4\uff0c\u4f60\uff06\uff0339; ll\u9700\u8981\u6536\u96c6\u4e00\u4e9b\u9002\u5f53\u7684\u540d\u5b57\u548c\uff0339;\u5355\u5b81\uff0c\uff06\uff0339;\u6765\u81ea\u542b\u6709\u540c\u6837\u9002\u5f53\u547d\u540d\u7684\u6811\u6728\u7684\u6811\u6728;\u5355\u5b81\u9178\u3002\uff06\uff0339;\u6a61\u6811\uff0c\u6817\u5b50\uff0c\u94c1\u6749\u548c\u7ea2\u6811\u6797\u7684\u6811\u76ae\u5728\u5355\u5b81\u9ad8\uff0c\u56e0\u4e3a\u96ea\u677e\u6811\u6728\uff0c\u7ea2\u6728\u6811\u6728\u7b49\u7b49\u3002\u5355\u5b81\u662f\u68d5\u8272\u7684\uff0c\u6240\u4ee5\u5982\u679c\u4f60\uff06\uff0339;\u4f7f\u7528\u6728\u5934\u800c\u4e0d\u662f\u6811\u76ae\uff0c\u5bfb\u627e\u7ea2\u8272\u6216\u68d5\u8272\u7684\u6728\u6750\uff0c\u5e76\u8bb0\u4f4f\u786c\u6728\u901a\u5e38\u6bd4\u8f6f\u6728\u66f4\u5bb9\u7eb3\u66f4\u591a\u7684\u5355\u97a3\u3002\u8981\u63d0\u53d6\u5355\u5b81\uff0c\u5c06\u6728\u6750\u6216\u6811\u76ae\u5207\u788e\uff0c\u7136\u540e\u5728\u6c34\u4e2d\u716e\u6cb8\u51e0\u4e2a\u5c0f\u65f6\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u751f\u4ea7\u4e86\u5b83\uff0c\u90a3\u4e48\u5411\u4f60\u7684\u6c34\u4e2d\u6dfb\u52a0\u5c0f\u82cf\u6253\u6c34\u4f1a\u4f7f\u5b83\u66f4\u52a0\u57fa\u7840\uff0c\u8fd9\u5c06\u66f4\u6709\u6548\u5730\u5236\u4f5c\u5355\u5b81\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u540c\u6837\u7684\u6811\u76ae\u591a\u6b21\u91cd\u590d\u6b64\u8fc7\u7a0b\u4ee5\u4ea7\u751f\u66f4\u7a00\u91ca\u7684\u5355\u5b81\u89e3\u51b3\u65b9\u6848\u3002\n \uff06\uff0334;\u6bd5\u7adf\uff0c\u6652\u9ed1\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u662f\u6700\u7b80\u5355\u7684\u90e8\u5206\uff1a\u53ea\u9700\u4f38\u5c55\u52a8\u7269\u76ae\u4e0b\u5e76\u5c06\u5b83\u4eec\u6d78\u5165\u60a8\u7684\u5355\u5b81\u6d53\u5ea6\u6d53\u5ea6\u7684\u5355\u5b81\u89e3\u51b3\u65b9\u6848\u4e2d\u51e0\u5468\u3002\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u62c9\u4f38\u5916\u7684\u76ae\u80a4\u5bf9\u5355\u5b81\u7684\u6c34\u5206\u8fdb\u884c\u4ea4\u6613\uff0c\u6539\u53d8\u9690\u85cf\uff06\uff0339; S\u86cb\u767d\u8d28\u7ed3\u6784\uff0c\u4f7f\u5176\u66f4\u52a0\u67d4\u97e7\uff0c\u66f4\u8010\u8150\u8680\uff0c\u4ee5\u53ca\u9632\u6c34\u3002\u5b83\uff06\uff0339;\u5b83\uff1a\u4f60\uff06\uff0339; ve maved\u76ae\u9769\uff01\u76ae\u9769\uff06\uff0339; s\u4e0d\u4ec5\u9002\u7528\u4e8e\u51c9\u723d\u7684\u5939\u514b;\u5b83\u4e5f\u662f\u4e3a\u4e86\u978b\u5b50\uff0c\u9774\u5b50\uff08\u4f60\u53ef\u4ee5\u5b8c\u5168\u4ece\u76ae\u9769\u4e2d\u5236\u4f5c\uff09\uff0c\u7ebf\u675f\uff0c\u8239\u53ea\uff0c\u98df\u5802\uff08\u76ae\u9769\u53ef\u4ee5\u62ff\u7740\u6c34\u800c\u4e0d\u6f0f\u6c34\uff0c\u5b83\u8d62\u5f97\u4e86\uff06\uff0339;\u5f53\u4f60\u628a\u5b83\u653e\u4e0b\u65f6\uff0c\u5b83\u50cf\u9676\u5668\u4e00\u6837\u8131\u843d\uff09 \uff0c\u97ad\u5b50\uff08\u6709\u8da3\u7684\u4e8b\u5b9e\uff1a\u5f53\u97ad\u5b50\u7684\u5c16\u7aef\u8d85\u8fc7\u58f0\u97f3\u7684\u901f\u5ea6\u8d85\u8fc7\u58f0\u97f3\u65f6\uff0c\u97ad\u5b50\u88c2\u7f1d\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5c0f\u58f0\u97f3\u7e41\u8363\u7684\u58f0\u97f3\uff0c\u6240\u4ee5\u4ece\u6280\u672f\u4e0a\u4f60\u5df2\u7ecf\u53d1\u660e\u4e86\u8d85\u97f3\u901f\u6280\u672f\uff09\u548c\u4fdd\u62a4\u76d4\u7532\u3002\n \uff06\uff0334;\u5982\u679c\u4f60\u51c6\u5907\u4f60\u7684\u76ae\u80a4\uff0c\u4f46\u4e0d\u8981\uff06\uff0339; t\u68d5\u8910\u8272\uff0c\u4f60\uff06\uff0339; ll\u751f\u4ea7\u751f\u76ae\uff0c\u5b83\u5728\u6e7f\u65f6\u8f6f\u5316\uff0c\u4f46\u5728\u5e72\u71e5\u65f6\u5177\u6709\u786c\u5316\u548c\u6536\u7f29\u7684\u6709\u7528\u7279\u6027\u3002\u60a8\u53ef\u4ee5\u5229\u7528\u7ed1\u5b9a\uff1a\u8981\u5c06\u5200\u7247\u8fde\u63a5\u5230\u6746\u5e76\u5236\u4f5c\u8f74\uff0c\u53ea\u9700\u5c06\u4e00\u6761\u6e7f\u7684\u751f\u6839\u5305\u88f9\u7262\u56fa\u5730\u7f20\u7ed5\u5728\u4e00\u8d77\u5e76\u8ba9\u5b83\u5e72\u71e5\u3002\u9664\u4e86\u4e3a\u60a8\u7684\u72d7\u505a\u51fa\u7f8e\u5473\u7684\u4f73\u80b4\u5916\uff08\u6211\u4eec\u53ea\u80fd\u5047\u8bbe\u60a8\u5df2\u7ecf\u5f00\u59cb\u7e41\u6b96......\uff09\uff0cRawhide\u53ef\u7528\u4e8e\u5236\u4f5c\u9f13\u76ae\uff0c\u706f\u7f69\u548c\u539f\u59cb\u9a6c\u8e44\u94c1\uff0c\u751a\u81f3\u7528\u4e8e\u6f14\u5458\u3002\u5982\u679c\u4f60\uff06\uff0339;\u518d\u8fd9\u6837\u505a\uff0c\u52a1\u5fc5\u5c06\u4e00\u4e9b\u623f\u95f4\u7559\u7ed9\u5408\u540c\uff1a\u5728\u592a\u7d27\u7684\u751f\u76ae\u9769\u4e2d\u5305\u88f9\u80a2\u4f53\u5df2\u88ab\u7528\u4e8e\u9177\u5211\u3002\u90a3\u4e2a\uff06\uff0339;\u53f3\uff1a\u5f53Rawhide\u56f4\u7ed5\u624b\u811a\u7b7e\u7ea6\uff0c\u638c\u63e1\u4e86\u8db3\u591f\u7684\u538b\u529b\u6765\u6253\u7834\u9aa8\u5934\uff0c\u5b83\u4f1a\u4ea7\u751f\u8db3\u591f\u7684\u538b\u529b\uff0c\u5c06\u8fd9\u4e9b\u9aa8\u5934\u79fb\u52a8\u5230\u4ed6\u4eec\u4e0d\u6b63\u5e38\u7684\u5730\u65b9\u3002\uff06\uff0334; ", "note_en": "Today&#39;s selection -- from  How to Invent Everything by Ryan North. If you should get transported back to pre-history, here\u2019s how to tan an animal skin:\n &#34;Tanning was originally invented in 7000 BCE. Without tanning, animal skins quickly rot, and even dried ones become hard, inflexible, and brittle. Tanning transforms these skins into leather: a substance so resistant to rot that leather shoes from 3500 BCE have survived into the modern era. It&#39;s something you&#39;ll definitely want to do, but you should keep in mind that preparing animal skins for tanning involves not only skin fermentation but also soaking them in urine and massaging them in poop slurries, so maybe set up your tanneries downwind.\n &#34;Immediately after slaughtering the animals, lay the skins flat and cover the fleshy side in salt or sand, which will dry them out and delay decomposi\u00adtion. In a few days the hides will become hard and almost crispy, and they can then be transported to your tanning area. Once there, you&#39;ll soak the hides: this cleans off dirt and gore and softens them up again. Scour the skins to remove any remaining flesh, then soak them in urine -- this loosens the hair, which can then be scraped off. You&#39;ll make the poop slurry we advertised earlier by mixing poo and water, and then soak your skins in that: enzymes in the poop will cause the skins to ferment, softening them and making them more flexible. You can help this process by standing in your poop slurry and kneading the skins with your feet -- just keep telling yourself you&#39;re crushing grapes -- but be sure to wash up with soap and water afterward, or better yet use nonhuman power (like a waterwheel) to knead the skins for you.\n &#34;After all this, two things will have happened: your animal skins will be soft, flexible, and ready for tanning, and nobody will want to get anywhere near you.\n &#34;To tan these skins, you&#39;ll need to collect some appropriately named &#39;tannins,&#39; which come from trees containing the equally appropriately named &#39;tannic acid.&#39; The bark from oak, chestnut, hemlock, and mangrove trees is high in tannin, as is the wood of cedar trees, redwood trees, and more. Tannins are brown, so if you&#39;re using wood instead of bark, look for red- or brown-colored wood, and keep in mind that hardwoods generally contain more tannin than softwoods. To extract tannins, shred your wood or bark and boil it in water for several hours. If you&#39;ve produced it already, adding baking soda to your water will make it more basic, which will draw out the tannins more effectively. You can repeat this process several times with the same bark to produce more dilute tannic solutions.\n &#34;After all this, the tanning process is actually the easiest part: just stretch the animal skins out and immerse them in your tannic solutions of gradually increasing concentrations for a few weeks. During this process, the stretched-out skins trade their moisture for tannins, altering the hide&#39;s protein structure to make it more flexible, more resistant to rotting, and water resistant. And that&#39;s it: you&#39;ve produced leather! Leather&#39;s useful not just for cool jackets; it&#39;s also for shoes, boots (you can make both entirely out of leather), harnesses, boats, can\u00adteens (leather can hold water without leaking, and it won&#39;t break when you drop it like pottery does), whips (fun fact: a whip-crack is actually the sound of a small sonic boom when the tip of the whip exceeds the speed of sound, so technically you&#39;re already inventing supersonic technology), and protective armor.\n &#34;If you prepare your skin but don&#39;t tan it, you&#39;ll produce rawhide, which soft\u00adens when wet but which has the useful property of hardening and contracting when dry. You can exploit that for binding: to attach a blade to a stick and make an ax, just wrap a strip of wet rawhide securely around both and let it dry. Besides making a delicious treat for your dogs (which we can only assume you&#39;ve already started breeding...), rawhide is useful in making drum skins, lampshades, and primitive horseshoes, and has\u00a0 even been used for casts. If you&#39;re doing that, though, be sure to leave some room for it to contract: wrapping limbs in too-tight rawhide has been used for torture. That&#39;s right: while rawhide contracting around hands and feet won&#39;t produce enough pressure to break bones, it will produce enough pressure to move those bones to places they don&#39;t normally go.&#34;", "posttime": "2021-06-19 11:55:57", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u52a8\u7269,animal,\u76ae\u80a4", "title": "\u6652\u9ed1\u52a8\u7269\u76ae\u80a4 ", "title_en": "Tanning an Animal Skin", "transed": 1, "url": "https://www.delanceyplace.com/view-archives.php?4351", "via": "", "real_tags": ["\u52a8\u7269", "animal", "\u76ae\u80a4"]}, {"category": "", "categoryclass": "", "imagename": "84d43a86d7f453d06fe4fb5dfb1f2e92.jpg", "infoid": 1066829, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ee3\u8868Revlon\u7684\u53bb\u5e74\u82b1\u65d7\u96c6\u56e2\u8bd5\u56fe\u4e3aRevlon\uff06\uff0339;\u8d37\u6b3e\u4eba\u63d0\u4ea4780\u4e07\u7f8e\u5143\u7684\u5229\u606f\u652f\u4ed8\u3002\u76f8\u53cd\uff0c\u4ed6\u4eec\u4e0d\u5c0f\u5fc3\u53d1\u9001\u4e868.93\u4ebf\u7f8e\u5143 - \u8d37\u6b3e\u7684\u6574\u4e2a\u4f59\u989d\uff0c\u8fd9\u4e0d\u662f2023\u5e74\u3002\n \u5f53\u4ed6\u4eec\u610f\u8bc6\u5230\u4ed6\u4eec\u7684\u9519\u8bef\u65f6\uff0c\u4ed6\u4eec\u8bd5\u56fe\u62ff\u56de\u94b1\u3002\u4e00\u4e9b\u8d37\u6b3e\u4eba\u62d2\u7edd\u4e86\uff0c\u8ba9\u82b1\u65d7\u96c6\u56e2\u8d85\u51fa\u4e86\u5927\u7ea65\u4ebf\u7f8e\u5143\u3002\u6848\u4ef6\u53bb\u4e86\u5ba1\u5224\uff0c\u672c\u5468\u7f8e\u56fd\u7684\u5c0f\u533a\u6cd5\u5b98\u5728\u66fc\u54c8\u987f\u7edf\u6cbb\u7740\u82b1\u65d7\u96c6\u56e2\u7684Jesse Furman\u3002\n \u8fd9\u53ef\u80fd\u53d1\u751f\u8fd9\u79cd\u9519\u8bef\u5417\uff1f\u4e8b\u5b9e\u8bc1\u660e\uff0c\u53ef\u6015\u7684\u7cdf\u7cd5\u7684UI\u8bbe\u8ba1\u3002\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u8fd8\u6b3e\u5b89\u6392\u7684\u673a\u5236\uff0c\u8be5\u673a\u5236\u901a\u8fc7\u4e00\u5757\u540d\u4e3aFlexCube\u7684\u91d1\u878d\u8f6f\u4ef6\u6267\u884c\u3002\u5f17\u66fc\u6cd5\u5b98\u603b\u7ed3\u4e86\uff1a\n  \u5728FlexCube\u4e0a\uff0c\u6700\u7b80\u5355\u7684\uff08\u6216\u8bb8\u53ea\u662f\uff09\u6267\u884c\u4ea4\u6613\u7684\u65b9\u5f0f - \u652f\u4ed8Angelo Gordon\u8d37\u6b3e\u4eba\u4efd\u989d\u622a\u81f32020\u5e748\u670811\u65e5\u622a\u81f38\u670811\u65e5\uff0c\u7136\u540e\u5c062016\u5e74\u671f\u9650\u8d37\u6b3e\u4e0e\u5269\u4f59\u7684\u8d37\u6b3e\u4eba\u91cd\u7ec4 - \u5728\u7cfb\u7edf\u4e2d\u8fdb\u5165\u5b83\uff0c\u4eff\u4f5b\u5168\u90e8\u652f\u4ed8\u8d37\u6b3e\uff0c\u4ece\u800c\u89e6\u53d1\u5e94\u8ba1\u7684\u5229\u606f\u652f\u4ed8\u7ed9\u6240\u6709\u8d37\u65b9\uff0c\u800c\u662f\u5c06\u652f\u4ed8\u7684\u4e3b\u8981\u90e8\u5206\u6307\u5411A\uff06\uff0334;\u6d17\u8d26\u6237\uff06\uff0334;  - \uff06\uff03 34;\u4e00\u4e2a\u5185\u90e8\u82b1\u65d7\u94f6\u884c\u8d26\u6237......\u5e2e\u52a9\u786e\u4fdd\u91d1\u94b1\u4e0d\u4f1a\u79bb\u5f00\u94f6\u884c\u3002\uff06\uff0334;\n ARS Technica\u5728\u6848\u4f8b\u4e2d\u83b7\u5f97\u4e86\u5c4f\u5e55\u622a\u56fe\uff0c\u663e\u793a\u4e86\u87ba\u65cb\u53d1\u751f\u7684\u4f4d\u7f6e\uff1a\n \u5c06\u6b64\u4ea4\u6613\u8fdb\u5165FlexCube\u7684\u5b9e\u9645\u5de5\u4f5c\u843d\u5230\u5370\u5ea6\u7684\u5206\u5305\u5546\u3002\u4ed6\u51fa\u73b0\u4e86\u4e00\u4e2a\u770b\u8d77\u6765\u50cf\u8fd9\u6837\u7684\u67d4\u6027\u5c4f\u5e55\uff1a\n   \u5206\u5305\u5546\u8ba4\u4e3a\u68c0\u67e5\uff06\uff0334;\u6821\u957f\uff06\uff0334;\u590d\u9009\u6846\u5e76\u8f93\u5165\u82b1\u65d7\u94f6\u884c\u6d17\u8f66\u8d26\u6237\u7684\u6570\u91cf\uff0c\u786e\u4fdd\u672c\u91d1\u652f\u4ed8\u5c06\u7559\u5728\u82b1\u65d7\u94f6\u884c\u3002\u4ed6\u9519\u4e86\u3002\u4e3a\u9632\u6b62\u652f\u4ed8\u6821\u957f\uff0c\u5b9e\u9645\u4e0a\u9700\u8981\u5206\u5305\u5546\u8bbe\u7f6e\uff06\uff0334;\u524d\u9762\uff06\uff0334;\u548c\uff0334;\u57fa\u91d1\uff06\uff0334;\u7530\u5730\u5230\u6d17\u6da4\u8d26\u6237\u4ee5\u53ca\uff06\uff0334;\u6821\u957f\u3002\uff06\uff0334;\u5206\u5305\u5546\u6ca1\u6709\u505a\u5230\u8fd9\u4e00\u70b9\u3002 \n\u82b1\u65d7\u94f6\u884c\u548c\uff0339;\u25a0\u7a0b\u5e8f\u8981\u6c42\u4e09\u4eba\u5728\u6b64\u5927\u5c0f\u7684\u4ea4\u6613\u4e2d\u7b7e\u5b57\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f\u4ed6\u5728\u5370\u5ea6\u7684\u540c\u4e8b\uff0c\u4ee5\u53ca\u7279\u62c9\u534e\u5dde\u7684\u4e00\u4f4d\u9ad8\u7ea7\u82b1\u65d7\u94f6\u884c\u5b98\u5458\u3002\u6240\u6709\u4e09\u4eba\u90fd\u8ba4\u4e3a\u8bbe\u5b9a\uff06\uff0334;\u6821\u957f\uff06\uff0334;\u5185\u90e8\u6d17\u6da4\u8d26\u53f7\u7684\u73b0\u573a\u5c06\u9632\u6b62\u6821\u957f\u4ed8\u6b3e\u3002\u5f53\u4ed6\u6279\u51c6\u4ea4\u6613\u65f6\uff0c\u7279\u62c9\u534e\u5dde\u4e3b\u7ba1\u5199\u9053\uff1a\uff06\uff0334;\u770b\u8d77\u6765\u4e0d\u9519\uff0c\u8bf7\u7ee7\u7eed\u3002\u6821\u957f\u4f1a\u6d17\u3002\uff06\uff0334;\n  \u5b83\u770b\u8d77\u6765\uff06\uff0334;\u597d\uff06\uff0334;\u5bf9\u4e8e\u9ad8\u7ea7\u4e3b\u7ba1\uff0c\u56e0\u4e3a\u6ca1\u6709\u8bbe\u8ba1\u89c4\u5b9a\uff0c\u4f7f\u5b83\u770b\u8d77\u6765\u5f88\u7cdf\u7cd5\u3002\u60a8\u4f1a\u8ba4\u4e3a\uff0c\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u8f6f\u4ef6\u8bbe\u8ba1\u4eba\u5458\u5c06\u7ec4\u5408\u67d0\u4e9b\u6309\u94ae\uff0c\u63d0\u4f9b\u8b66\u544a\u63d0\u793a\uff0c\u5c06\u989c\u8272\u4ece\u7eff\u8272\u53d8\u4e3a\u7ea2\u8272\uff0c\u6216\u8fd9\u4e9b\u4e1c\u897f\u7684\u7ec4\u5408\u3002\u800c\u662f\u8be5\u7a0b\u5e8f\u4f3c\u4e4e\u662f\u7531\uff06\uff0339; 90s\u7684\u5de5\u7a0b\u5e08\u8bbe\u8ba1\u7684\u3002\n \u4e3a\u60a8\u63d0\u4f9bUI\u8bbe\u8ba1\u5e08\u7684\u7ed3\u679c\uff1a\u94f6\u884c\u80af\u5b9a\u4f1a\u5728\u672a\u6765\u5bfb\u627e\u66f4\u597d\u7684\u8f6f\u4ef6\uff0c\u5e76\u613f\u610f\u4e3a\u6b64\u4ed8\u51fa\u4ee3\u4ef7\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u771f\u6b63\u7684\u673a\u4f1a\u3002\n      \u4ed6\u4eec\uff06\uff0339;\u5b9e\u9645\u4e0a\u53ea\u662f\u7ee7\u7eed\u652f\u4ed8\u4e00\u6b21\u6027\u7684\u79bb\u5cb8\u627f\u5305\u5546\uff0c\u56e0\u4e3a\u5b83\u662f\u7f8e\u56fd\u94f6\u884c\u6240\u505a\u7684\u4e00\u5458\u3002\n  \u6211\u4eec\u8fd8\u5e94\u8be5\u5206\u51fa\u53bb\u4ec0\u4e48\uff1f\u54e6\uff0c\u8ba9\u6211\u4eec\u7684\u5fc3\u810f\u5728\u5370\u5ea6\u7684\u4e00\u5bb6\u516c\u53f8\u5206\u5305\u7ed9\u6211\u4eec\u7684\u5fc3\u810f\u8df3\u52a8\uff0c\u800c\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u5f00\u59cb\u3002\u662f\u7684\uff0c\u662f\u4ec0\u4e48\uff0c\u4e00\u79cd\u53ef\u6015\u7684\u8f6f\u4ef6UI\uff0c\u4f46\u662f\u5927\u591a\u6570\u5de5\u4e1a\u8f6f\u4ef6\u63a5\u53e3\u770b\u8d77\u6765\u50cf10093\uff0c\u5e76\u5728\u53ef\u6015\u7684\u5f00\u653e\u7cfb\u7edf\u548c10\u4e2a\u52a0\u4e0a\u5386\u53f2\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u8fd0\u884c\u3002 ", "note_en": "Last year Citigroup, representing Revlon, attempted to make a $7.8 million interest payment to Revlon&#39;s lenders. Instead they accidentally sent  $893 million--the entire balance of the loan, which was not due until 2023.\n When they realized their mistake, they tried to get the money back. Some of the lenders refused, leaving Citigroup out of roughly $500 million. The case went to trial, and  this week U.S. District Judge Jesse Furman in Manhattan ruled against Citigroup.\n How could an error like this possibly happen? Terrible, terrible UI design, as it turns out. First off we need to understand the mechanisms of the repayment arrangement, which is executed through a piece of financial software called Flexcube. As Judge Furman summarized:\n  On Flexcube, the easiest (or perhaps only) way to execute the transaction\u2014to pay the Angelo Gordon Lenders their share of the principal and interim interest owed as of August 11, 2020, and then to reconstitute the 2016 Term Loan with the remaining Lenders\u2014was to enter it in the system as if paying off the loan in its entirety, thereby triggering accrued interest payments to all Lenders, but to direct the principal portion of the payment to a &#34;wash account&#34;\u2014&#34;an internal Citibank account... to help ensure that money does not leave the bank.&#34;\n Ars Technica got ahold of a screenshot used in the case, which shows where the screw-up occurred:\n The actual work of entering this transaction into Flexcube fell to a subcontractor in India. He was presented with a Flexcube screen that looked like this:\n   The subcontractor thought that checking the &#34;principal&#34; checkbox and entering the number of a Citibank wash account would ensure that the principal payment would stay at Citibank. He was wrong. To prevent payment of the principal, the subcontractor actually needed to set the &#34;front&#34; and &#34;fund&#34; fields to the wash account as well as &#34;principal.&#34; The subcontractor didn&#39;t do that.\n Citibank&#39;s procedures require that three people sign off on a transaction of this size. In this case, that was the subcontractor, a colleague of his in India, and a senior Citibank official in Delaware. All three believed that setting the &#34;principal&#34; field to an internal wash account number would prevent payment of the principal. As he approved the transaction, the Delaware supervisor wrote: &#34;looks good, please proceed. Principal is going to wash.&#34;\n  It looked &#34;good&#34; to the senior supervisor because there are no design provisions to make it look bad. You would think, where an error of this magnitude was possible, the software designers would group certain buttons together, provide warning prompts, change colors from green to red, or a combination of these things. Instead the program appears to have been designed by an engineer in the &#39;90s.\n The upshot for you UI designers out there: Banks will certainly be looking for better software in the future, and willing to pay top dollar for it. There&#39;s a real opportunity here.\n      They&#39;ll actually just continue paying as little as humanly possible for disposable offshore contractors because that&#39;s what American banks do.\n  What else should we sub out? ooh, Let&#39;s subcontract the management of our heart beating to a company in India while we&#39;re at it. And yes, what a horrible software UI, however, most industrial software interfaces look like1993 and run on terrifyingly open systems and on 10 plus-year-old Operating Systems.", "posttime": "2021-06-19 11:55:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,ui,\u652f\u4ed8", "title": "UI\u8bbe\u8ba1\u7684\u5c4f\u5e55\u622a\u56fe\uff0cLED\u82b1\u65d7\u96c6\u56e2\u4e0d\u5c0f\u5fc3\u53d1\u9001$ 893M ", "title_en": "Screenshot of the UI Design That Led Citigroup to Accidentally Send $893M", "transed": 1, "url": "https://www.core77.com/posts/105540/Screenshot-of-the-Horrific-UI-Design-That-Led-Citigroup-to-Accidentally-Send-893-Million#", "via": "", "real_tags": ["\u8bbe\u8ba1", "ui", "\u652f\u4ed8"]}, {"category": "", "categoryclass": "", "imagename": "3b6b16b937e46a69ab3441d70829e2a4.jpeg", "infoid": 1066828, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7ebd\u7ea6\uff08\u8def\u900f\u793e\uff09-Paypal Holdings Inc\u5c06\u63d0\u5347\u5176\u54c1\u724c\u652f\u4ed8\u4ea7\u54c1\u7684\u5546\u54c1\u6210\u672c\uff0c\u540c\u65f6\u524a\u51cf\u4e86\u4e00\u4e9b\u7b7e\u8bc1\u548c\u4e07\u4e8b\u8fbe\u5361\u4ea4\u6613\u7684\u5e55\u540e\u5904\u7406\uff0c\u8fd9\u662f\u4e00\u4e2a\u8d8a\u6765\u8d8a\u7ade\u4e89\u529b\u7684\u6570\u5b57\u4ed8\u6b3e\u884c\u4e1a\u7684\u5927\u80c6\u4e3e\u63aa\u3002\n  \u6218\u7565\u8f6c\u53d8\u53cd\u6620\u4e86PayPal\u5728\u7ebf\u4ea4\u6613\u4e2d\u7684\u4e0d\u65ad\u589e\u957f\u7684\u529b\u91cf\uff0c\u5728\u7ebf\u4ea4\u6613\u4e2d\u98d9\u5347\uff0c\u5728Covid-19\u5927\u6d41\u884c\u671f\u95f4\u98d9\u5347\u3002\u968f\u7740\u6d88\u8d39\u8005\u548c\u4f01\u4e1a\u690d\u5165\u516c\u53f8\uff0c\u5e02\u573a\u9886\u5bfc\u8005\u5728\u9501\u5b9a\u671f\u95f4\uff0c\u5176\u6d3b\u8dc3\u8d26\u6237\u5b89\u88c5\u57283.77\u4ebf\u4e0a\uff0c\u8d85\u8fc72015\u5e74\u7684\u4e24\u500d\u591a\u3002\n \u8be5\u516c\u53f8\u8868\u793a\uff0c\u6b64\u4e3e\u53cd\u6620\u4e86\u5176\u4e13\u6709\u670d\u52a1\u7684\u4ef7\u503c\uff0c\u6d88\u8d39\u8005\u5728\u7ed3\u8d26\u65f6\u63d0\u4f9bPayPal\u4ea7\u54c1\u7684\u53ef\u80fd\u6027\u8fd1\u4e09\u500d\uff0c\u800c\u65b0\u4e70\u5165\u7684\u7528\u6237\u7684\u7528\u6237\u5e73\u5747\u82b1\u8d3915 \uff05 \u66f4\u591a\u7684\u3002\n \u201c\u6211\u4eec\u6b63\u5728\u66f4\u6362\u4ef7\u683c\uff0c\u4ee5\u5e2e\u52a9\u5ba2\u6237\u66f4\u6e05\u695a\u5730\u4e86\u89e3\u6211\u4eec\u63d0\u4f9b\u4ef7\u503c\u7684\u5730\u65b9\uff0c\u201d\u5e15\u4f69\u5c14\u7684\u4e2d\u5c0f\u4f01\u4e1a\u548c\u4f19\u4f34\u9ad8\u7ea7\u526f\u603b\u88c1Dan Leberman\u5728\u63a5\u53d7\u91c7\u8bbf\u65f6\u8868\u793a\u3002\n    PayPal\u5c06\u5356\u65b93.49\uff05\u52a0\u4e0a49\u7f8e\u5206\u6765\u5904\u7406\u901a\u8fc7\u5176\u4e13\u6709\u4ea7\u54c1\u7684\u4ea4\u6613\uff0c\u5305\u62ec\u5728\u516c\u53f8\u4e0e\u8def\u900f\u793e\u5206\u4eab\u7684\u6750\u6599\u7684Matercation\u7f51\u7ad9\u53ca\u5176\u6570\u5b57\u94b1\u5305\u3002\n \u8f83\u9ad8\u7684\u5229\u7387\u9002\u7528\u4e8ePayPal\u7ed3\u8d26\u7b49\u4ea7\u54c1\uff0c\u4f7f\u7528Venmo\uff0cPayPal\u4fe1\u7528\u5361\u652f\u4ed8\uff0c\u65b0\u7684\u4e70\u5165\u73b0\u5728\u4ed8\u8d39\u7684\u85aa\u916c4\u3002\n PayPal\u62e5\u67093.92\u4ebf\u6d3b\u8dc3\u7684\u8d26\u6237\uff0c\u5305\u62ec\u5168\u74033100\u4e07\u5546\u5bb6\uff0c\u4e5f\u62e5\u6709Venmo\uff0cBraintree\u548cIzettle\u3002 \n\u5546\u4eba\u5c06\u5f88\u96be\u77e5\u9053\u4ed6\u4eec\u4ecePayPal\u529f\u80fd\u4e2d\u83b7\u5f97\u591a\u5c11\u989d\u5916\u4ef7\u503c\uff0c\u4ee5\u6362\u53d6\u66f4\u9ad8\u7684\u5229\u7387\uff0cCardfellow.com\u7684\u521b\u59cb\u4eba\u8868\u793a\u4e3a\u5546\u5bb6\u63d0\u4f9b\u7684\u52a0\u5de5\u4ea4\u6613\u3002\n \u201cPayPal\u5e0c\u671b\u6210\u4e3a\u4e00\u9879\u5168\u9762\u7684\u4ed8\u6b3e\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u901a\u8fc7\u9500\u552e\u4ef7\u503c\u8d85\u51fa\u4ef7\u683c\uff0c\u5f88\u96be\u5728\u90a3\u91cc\u3002\u201d\n  \u5356\u5bb6\u5c06\u652f\u4ed82.59\uff05\u52a0\u4e0a49\u7f8e\u5206\u7684PayPal\uff0c\u901a\u8fc7\u6d88\u8d39\u8005\u770b\u4e0d\u89c1\uff0c\u4f7f\u7528\u7b7e\u8bc1\u548c\u4e07\u4e8b\u8fbe\u5361\u501f\u8bb0\u5361\u548c\u5176\u4ed6\u516c\u53f8\u7684\u4fe1\u7528\u5361\u4ed8\u6b3e\u3002\n \u8fc7\u53bb\uff0cPayPal\u6536\u8d39\u5356\u65b92.9\uff05\u52a030\u7f8e\u5206\uff0c\u4ee5\u4fbf\u5728\u5927\u591a\u6570\u5728\u7ebf\u4ea4\u6613\u4e0a\u4ed8\u6b3e\uff0c\u65e0\u8bba\u5176\u89d2\u8272\u5982\u4f55\u3002\n \u964d\u4f4e\u57fa\u672c\u4e8b\u52a1\u5904\u7406\u7387\u6709\u52a9\u4e8ePayPal\u4e0e\u7ade\u4e89\u5bf9\u624b\u7ade\u4e89\uff0c\u5305\u62ec\u6761\u7eb9\u548c\u6388\u6743\u7f51\u3002 Leberman\u8868\u793a\uff0cPayPal\u9884\u8ba1\u56e0\u6298\u6263\u800c\u6536\u8d2d\u5ba2\u6237\u3002\n \u201c\u6211\u4eec\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u5927\u80c6\u7684\u4ef7\u683c\u51fa\u6765\uff0c\u201d\u4ed6\u8bf4\u3002\n \u968f\u7740\u5927\u578b\u5546\u5bb6\u503e\u5411\u4e8e\u8c08\u5224\u72ec\u7279\u7684\u4ea4\u6613\uff0c\u5229\u7387\u5f92\u6b65\u65c5\u884c\u5c06\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5f71\u54cd\u4e2d\u5c0f\u578b\u4f01\u4e1a\uff0c\u5176\u4e2d\u4e00\u4e9b\u4eba\u7531\u4e8e\u5168\u56fd\u8303\u56f4\u5185\u7684\u52b3\u52a8\u529b\u77ed\u7f3a\u548c\u901a\u8d27\u81a8\u80c0\u62c5\u5fe7\uff0c\u8fd9\u4e00\u5e74\u4e2d\u5df2\u7ecf\u5931\u53bb\u4e86\u4fe1\u5fc3\u3002 \n\u8fd9\u4e9b\u53d8\u5316\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53cd\u6620\u4e86PayPal\u57282015\u5e74\u4eceeBay Inc\u5206\u88c2\u540e\u5f00\u53d1\u7684\u3002  \u867d\u7136\u5176\u5927\u90e8\u5206\u4ea4\u6613\u90fd\u5728\u7ebf\uff0c\u4f46PayPal\u8fd8\u5c06\u901a\u8fc7\u5176\u7f51\u7edc\u964d\u4f4e\u4eba\u5458\u4ea4\u6613\u7684\u4ef7\u683c\uff0c\u8fd9\u5e94\u8be5\u5e2e\u52a9\u5b83\u4e0eSquare Inc.\u7ade\u4e89\u3002  \u5bf9\u4e8e\u5927\u591a\u6570\u8d2d\u4e70\u91cf\u8d85\u8fc710\u7f8e\u5143\uff0cPayPal\u5c06\u6536\u53d61.90\uff05\u52a010\u7f8e\u5206\u3002 \u4e3a\u4e86\u66f4\u4fbf\u5b9c\u7684\u8d2d\u4e70\uff0c\u901f\u7387\u901a\u5e38\u4e3a2.40\uff05\u52a05\u7f8e\u5206\u3002  Paypal\u5728\u5927\u6d41\u884c\u671f\u95f4\u84ec\u52c3\u53d1\u5c55\u7684\u5546\u4e1a\uff0c\u56e0\u4e3a\u66f4\u591a\u7684\u5bb6\u5ead\u6d88\u8d39\u8005\u5728\u7ebf\u5ea6\u8fc7\u3002 \u5b83\u5728\u7b2c\u4e00\u5b63\u5ea6\u5904\u7406\u4e862850\u4ebf\u7f8e\u5143\u7684\u4ed8\u6b3e\uff0c\u540c\u6bd4\u589e\u957f49\uff05\u3002  \u201c\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u5b9a\u4ef7\uff0c\u201d\u7814\u7a76\u516c\u53f8IDC\u5206\u6790\u5e08Aaron Press\u8868\u793a\u3002 \u201c\u4ed6\u4eec\u786e\u4fdd\u5e02\u573a\u660e\u767d\uff0c\u4ed6\u4eec\u5e94\u8be5\u8003\u8651PayPal\u4f5c\u4e3a\u5168\u9762\u7684\u4ed8\u6b3e\u7b56\u7565\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e00\u79cd\u4ed8\u6b3e\u65b9\u5f0f\u3002\u201d ", "note_en": "NEW YORK (Reuters) -PayPal Holdings Inc will lift merchant costs for its branded payment products while cutting those for behind-the-scenes processing of some Visa and Mastercard transactions, a bold move in an increasingly competitive digital payments sector.\n  The strategic shift reflects PayPal\u2019s growing power in online transactions, which surged during the COVID-19 pandemic. As consumers and businesses flocked to the company, a market leader, during lockdown, its active accounts mounted to 377 million, more than twice as many as in 2015.\n The company said the move reflected the value of its proprietary services, with consumers nearly three times as likely to complete a purchase when PayPal products are available at checkout, while users of the new buy-now-pay-later option spend an average of 15% more.\n \u201cWe are changing prices to help our customers understand even more clearly where we provide value,\u201d Dan Leberman, PayPal\u2019s senior vice president for small and medium business and partners, said in an interview.\n    PayPal will charge sellers 3.49% plus 49 cents to process transactions made through its proprietary products, including its button on merchant websites and its digital wallet, according to material the company shared with Reuters.\n The higher rate applies to products like PayPal Checkout, Pay with Venmo, PayPal Credit and new buy-now-pay-later offering Pay in 4.\n PayPal has 392 million active accounts, including 31 million merchants globally, and also owns Venmo, Braintree and iZettle.\n It will be hard for merchants to know how much extra value they are getting from PayPal features in exchange for the higher rates, said Ben Dwyer, the founder of cardfellow.com who analyzes processing deals offered to merchants.\n \u201cPayPal wants to be a comprehensive payment solution, but it is tough to get there by selling on value over price.\u201d\n  Sellers will pay 2.59% plus 49 cents for PayPal to process, unseen by consumers, online payments made with Visa and Mastercard debit and credit cards from other companies.\n In the past, PayPal charged sellers 2.9% plus 30 cents for payments on most online transactions, regardless of its role.\n Lowering basic transaction processing rates helps PayPal compete with rivals including Stripe and Authorize.net. PayPal expects to acquire customers because of the discounts, Leberman said.\n \u201cWe think it\u2019s a bold price to come out with,\u201d he said.\n As large merchants tend to negotiate unique deals, rate hikes will largely affect small-to-medium sized businesses, some of which have lost confidence this year due to a nationwide labor shortage and inflation worries.\n  The changes largely reflect services PayPal has developed since splitting from eBay Inc in 2015.\n Although most of its transactions are online, PayPal will also reduce prices for in-person transactions through its network, which should help it compete with Square Inc.\n For most of those purchases over $10, PayPal will charge 1.90% plus 10 cents. For cheaper buys, the rate will usually be 2.40% plus 5 cents.\n PayPal\u2019s business boomed during the pandemic as more homebound consumers spent online. It processed $285 billion in payments in the first quarter, up 49% from the year-earlier period.\n \u201cIt\u2019s more than just pricing,\u201d said Aaron Press, an analyst at research company IDC. \u201cThey are making sure the market understands that they should be thinking of PayPal as a comprehensive payments strategy and not just one form of payment.\u201d", "posttime": "2021-06-19 11:13:57", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7f8e\u56fd,\u4ea4\u6613,\u4ea7\u54c1,increase,paypal", "title": "PayPal\u5c06\u4f7f\u7f8e\u56fd\u5356\u65b9\u7684\u6210\u672c\u589e\u52a0\u52303.49\uff05\uff0c\u6bcf\u6b21\u4ea4\u6613\u6bcf\u6b21\u8fd0\u8f93\u4ea7\u54c1\u4e0a\u6da80.49\u7f8e\u5143\uff0c\u4ece2.9\uff05\u52a0\u4e0a\u5927\u591a\u6570\u4ea4\u66130.30\u7f8e\u5143 ", "title_en": "PayPal will increase US sellers' costs to 3.49% plus $0.49 per transaction on its payment products starting Aug. 2, up from 2.9% plus $0.30 on most transactions", "transed": 1, "url": "https://www.reuters.com/article/us-paypal-rates-idUSKCN2DU1V4", "via": "", "real_tags": ["\u7f8e\u56fd", "\u4ea4\u6613", "\u4ea7\u54c1", "increase", "paypal"]}, {"category": "", "categoryclass": "", "imagename": "ebb5f263b39bc241d11c01ce626a58bd.png", "infoid": 1066827, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u56fe\u50cf\u662f\u6620\u5c04\u8fde\u7eed\u57df\u7684\u51fd\u6570\uff0c\u4f8b\u5982\uff0c\u4e00\u4e2a\u76d2\u5b50$ [0\uff0cx] \\ times [0\uff0cy] $\uff0c\u5f3a\u5ea6\uff08r\uff0cg\uff0cb\uff09\u3002\u8981\u5c06\u5176\u5b58\u50a8\u5728\u8ba1\u7b97\u673a\u5b58\u50a8\u5668\u4e0a\uff0c\u56fe\u50cf\u88ab\u79bb\u6563\u5230\u6570\u7ec4\u9635\u5217[H] [W]\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u9635\u5217[i] [j]\u662f\u50cf\u7d20\u3002\n \u79bb\u6563\u5316\u5982\u4f55\u5de5\u4f5c\uff1f\u79bb\u6563\u50cf\u7d20\u5982\u4f55\u6d89\u53ca\u5e95\u5c42\u8fde\u7eed\u56fe\u50cf\u7684\u62bd\u8c61\u6982\u5ff5\uff1f\u8fd9\u4e9b\u57fa\u672c\u95ee\u9898\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u548camp\u4e2d\u53d1\u6325\u7740\u91cd\u8981\u4f5c\u7528;\u8ba1\u7b97\u673a\u89c6\u89c9\u7b97\u6cd5\u3002\n \u672c\u6587\u8ba8\u8bba\u4e86\u8fd9\u4e9b\u4f4e\u7ea7\u7ec6\u8282\u4ee5\u53ca\u5b83\u4eec\u5982\u4f55\u5f71\u54cd\u6211\u4eec\u7684CNN\u6a21\u578b\u548c\u6df1\u5ea6\u5b66\u4e60\u56fe\u4e66\u9986\u3002\u5982\u679c\u60a8\u66fe\u7ecf\u60f3\u77e5\u9053\u54ea\u4e2a\u8c03\u6574\u4f7f\u7528\u529f\u80fd\u6216\u8005\u662f\u5426\u5e94\u8be5\u6dfb\u52a0/\u51cf\u53bb0.5\u62161\u5230\u67d0\u4e9b\u50cf\u7d20\u5750\u6807\uff0c\u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u627e\u5230\u7b54\u6848\u3002\u6709\u8da3\u7684\u662f\uff0c\u8fd9\u4e9b\u7ec6\u8282\u5df2\u7ecf\u6709\u52a9\u4e8eDetectron\u548cDetectron2\u7684\u8bb8\u591a\u51c6\u786e\u6027\u6539\u8fdb\u3002\n   \u91c7\u6837\u7406\u8bba\u544a\u8bc9\u6211\u4eec\uff0c\u901a\u8fc7\u91c7\u6837\u548c\u8fc7\u6ee4\uff0c\u5982\u4f55\u5c06\u8fde\u7eed\u76842D\u4fe1\u53f7\u53d8\u6210\u79bb\u6563\u6570\u7ec4\u3002\n \u6211\u4eec\u9009\u62e9\u4e00\u4e2a$ H \\ times W $\u77e9\u5f62\u7f51\u683c\uff0c\u6211\u4eec\u5c06\u4ece\u5176\u4e2d\u7ed8\u5236\u6837\u54c1\u3002\u4e3a\u4e86\u5145\u5206\u5229\u7528\u6240\u751f\u4ea7\u7684\u6837\u672c\uff0c\u6211\u4eec\u5fc5\u987b\u77e5\u9053\u9009\u62e9\u8be5\u7f51\u683c\u4e0a\u7684\u6bcf\u4e2a\u6837\u672c\u7684\u786e\u5207\u4f4d\u7f6e\u3002\n \u8fd9\u4e9b\u91c7\u6837\u70b9\u4e0a\u7684\u503c\u4e0d\u662f\u4ece\u539f\u59cb\u4fe1\u53f7\u76f4\u63a5\u68c0\u7d22\u7684\uff0c\u800c\u662f\u6765\u81ea\u6d88\u9664\u9ad8\u9891\u5206\u91cf\u7684\u8fc7\u6ee4\u6b65\u9aa4\u3002\u6ee4\u6ce2\u5668\u7684\u7cdf\u7cd5\u9009\u62e9\u53ef\u80fd\u5bfc\u81f4\u522b\u540d\u6548\u679c\u3002\n \u91c7\u6837\u548c\u8fc7\u6ee4\u5728\u57fa\u672c\u56fe\u50cf\u5904\u7406\u64cd\u4f5c\u4e2d\u90fd\u5f88\u91cd\u8981\uff0c\u4f8b\u5982\u8c03\u6574\u5927\u5c0f\u3002\u8c03\u6574\u5927\u5c0f\u64cd\u4f5c\u91c7\u7528\u79bb\u6563\u56fe\u50cf\uff0c\u4f9d\u8d56\u5b83\u5e76\u521b\u5efa\u65b0\u56fe\u50cf\u3002\u91c7\u6837\u7f51\u683c\u548c\u91c7\u6837\u6ee4\u6ce2\u5668\u7684\u9009\u62e9\u5c06\u5f71\u54cd\u5982\u4f55\u5b9e\u73b0\u8fd9\u79cd\u57fa\u672c\u64cd\u4f5c\u3002 \n\u4f8b\u5982\uff0c\u5728FID\u8ba1\u7b97\u4e2d\u7684\u9519\u8bef\u8ba1\u7b97\u5e93\u548c\u4ee4\u4eba\u60ca\u8bb6\u7684\u5fae\u5999\u4e4b\u5904\u7684\u8bba\u6587\u7814\u7a76\u8fc7\u6ee4\u95ee\u9898\uff0c\u5e76\u663e\u793a\u4e86\u8bb8\u591a\u5e93\u4e2d\u7684\u8c03\u6574\u5927\u5c0f\u64cd\u4f5c\uff08OpenCV\uff0cPytorch\uff0cTensorFlow\uff09Don\uff06\uff0339; T\u8003\u8651\u5230\u4f4e\u901a\u6ee4\u6ce2\u3002\u7136\u540e\uff0c\u8fd9\u5bfc\u81f4\u4e0d\u6b63\u786e\u7684\u6df1\u5ea6\u5b66\u4e60\u8bc4\u4f30\u3002\n \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5ffd\u7565\u4e86\u5bf9\u91c7\u6837\u8fc7\u6ee4\u5668\u7684\u95ee\u9898\uff0c\u5e76\u4e14\u53ea\u7814\u7a76\u91c7\u6837\u7f51\u683c\u7684\u5750\u6807\u3002\u6211\u4eec\uff06\uff0339; ll\u770b\u5230\u8fd9\u4e2a\u9009\u62e9\u5728\u56fe\u4e66\u9986\u4e4b\u95f4\u4e5f\u4e0d\u4e00\u81f4\uff0c\u5e76\u4e14\u53ef\u4ee5\u5f71\u54cdCNN\u6a21\u578b\u7684\u8bbe\u8ba1\u548c\u6027\u80fd\u3002\n  \u50cf\u7d20\u4f4d\u4e8e\u6211\u4eec\u9009\u62e9\u7684\u91c7\u6837\u7f51\u683c\u4e0a\u3002\u5f53\u7136\uff0c\u6211\u4eec\u5e0c\u671b\u4ec5\u8003\u8651\u50cf\u7d20\u5747\u5300\u95f4\u9694\u7684\u77e9\u5f62\u7f51\u683c\u3002\u4f46\u6709\u8bb8\u591a\u5176\u4ed6\u56e0\u7d20\u6709\u5173\uff1a\n  \uff08\u8fd9\u4e9b\u672f\u8bed\u53ef\u80fd\u5728\u5176\u4ed6\u5730\u65b9\u5b58\u5728\u4e0d\u540c\u7684\u610f\u601d\uff0c\u4f46\u8fd9\u662f\u6211\u5728\u672c\u6587\u4e2d\u5b9a\u4e49\u5b83\u4eec\u7684\u65b9\u5f0f\u3002\uff09\n \u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u6848\u4f8b\u3002\u6211\u4eec\u60f3\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff1a\u5bf9\u4e8e$ [0\uff0cn] $\u5b9a\u4e49\u76841d\u4fe1\u53f7\uff0c\u6709stride = 1\u7684\u91c7\u6837\u7f51\u683c\u662f\u4ec0\u4e48\uff1f\u6709\u4e00\u4e9b\u4e0d\u540c\u7684\u9009\u62e9\uff1a\n  \u5728\u8be5\u56fe\u4e2d\uff0c\u7eff\u6761\u8868\u793a\u957f\u5ea6$ N $\u76841D\u4fe1\u53f7\uff0c\u84dd\u70b9\u8868\u793a\u62cd\u6444\u70b9\u6837\u672c\u7684\u4f4d\u7f6e\u3002\u5728\u6bcf\u4e2a\u6837\u672c\u7684\u9876\u90e8\uff0c\u6211\u4eec\u6807\u8bb0\u4e3a\u5750\u6807\uff0c\u5e95\u90e8\u662f\u5b83\u4eec\u7684\u96f6\u57fa\u50cf\u7d20\u7d22\u5f15\u3002\u66f4\u6b63\u5f0f\u7684\u662f\uff0c\u7ed9\u5b9a\u9636\u6bb5\uff08\u8fd9\u91cc\u7b49\u4e8e1\uff09\uff0c\u7f51\u683c\u7684\u504f\u79fb\u548c\u5206\u8fa8\u7387\u7531\u4e0b\u8868\u5b9a\u4e49\uff08\u5047\u8bbe$ \\ frac {n} {stride} $\u662f\u4e00\u4e2a\u6574\u6570\uff09\uff1a\n $$ \\ begin {array} {| c | ccc |} \\ text {grid}\uff06amp; \\\u6587\u672c{offset}\uff06amp; \\\u6587\u672c{\u5206\u8fa8\u7387} \\\\\\ hline\u2460\uff06amp; 0\uff06amp; \\ frac {n} {stride} +1 \\\\\u2461\uff06amp; \\ frac {stride} {2}\uff06amp; \\ frac {n} {stride} \\\\\u2462\uff06amp; 0\uff06amp; \\ frac {n} {stride} \\\\ \\ end {array} $$ \n\u5f53\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u50cf\u7d20\u6570\u7ec4\u65f6\uff0c\u5b83\u4eec\uff08\u6216\u81f3\u5c11\u524d\u4e24\u4e2a\uff09\u90fd\u662f\u6240\u6709\u6709\u6548\u7684\u89e3\u91ca\u3002\u6211\u4eec\u9009\u62e9\u7684\u89e3\u91ca\u4f1a\u5f71\u54cd\u6211\u4eec\u5982\u4f55\u5b9e\u73b0\u64cd\u4f5c\u548c\u6a21\u578b\uff0c\u56e0\u4e3a\u5b83\u4eec\u6bcf\u4e2a\u90fd\u6709\u4e00\u4e9b\u72ec\u7279\u7684\u5947\u602a\u5c5e\u6027\u3002\u8981\u66f4\u591a\u5730\u4e86\u89e3\u5b83\u4eec\uff0c\u8bf7\u8ba9\uff06\uff0339;\u25a0\u68c0\u67e5\u6bcf\u6b21\u89e3\u91ca\u90fd\u5e94\u8be5\u5982\u4f55\u5b9e\u73b02x\u8c03\u6574\u5927\u5c0f\u3002\n  \u2460\u7684\u72ec\u7279\u4e0d\u826f\u8d22\u4ea7\u662f\uff0c\u6b65\u5e45\u5e76\u4e0d\u662f\u51b3\u8bae\u7684\u53cd\u6bd4\u3002\u6240\u4ee52X\u8c03\u6574\u5927\u5c0f\u662f\u66a7\u6627\u7684\uff1a\u6211\u4eec\u5fc5\u987b\u6e05\u695a\u6211\u4eec\u60f3\u8981\u4e00\u534a\u7684\u6b65\u5e45\uff0c\u6216\u4e24\u500d\u7684\u50cf\u7d20\u3002\u8c03\u6574\u5927\u5c0f\u540e\u7684\u65b0\u7f51\u683c\u5982\u4e0b\u6240\u793a\uff1a\n    \u60a8\u53ef\u4ee5\u8f7b\u677e\u9a8c\u8bc14\u4e2a\u4e0d\u540c\u8c03\u6574\u5927\u5c0f\u7684\u7f51\u683c\u4ecd\u7136\u5339\u914d\u4e0a\u8868\u4e2d\u7684\u76f8\u5e94\u5b9a\u4e49\u3002\n \u5bf9\u4e8e2D\u60c5\u51b5\uff0c2X\u8c03\u6574\u2460\uff08\u4e24\u4e2a\u50cf\u7d20\u7684\u4e24\u500d\uff09\u548c\u2461\u770b\u8d77\u6765\u5f88\u559c\u6b22\u8fd9\u4e2a\uff08\u56fe\u7247\uff1a\u8fd9\u91cc\uff09\uff1a\n   \u5916\u63a8\uff1a\u2461\u548c\u2462\u90fd\u9700\u8981\u5916\u63a8\u7684\u539f\u59cb\u7f51\u683c\u8fb9\u754c\u5916\u90e8\u8fdb\u884c\u8c03\u6574\u5927\u5c0f\uff0c\u4f46\u2460\u53ea\u9700\u8981\u63d2\u503c\u3002\u5916\u63a8\u6709\u65f6\u662f\u4e0d\u5e0c\u671b\u7684\u3002\n \u4e0d\u5bf9\u79f0\uff1a\u2462\u662f\u4e0d\u5bf9\u79f0\u7684\uff0c\u5b83\u53ef\u80fd\u662f\u4e00\u4e2a\u6c38\u8fdc\u4e0d\u4f1a\u4f7f\u7528\u5b83\u7684\u5145\u5206\u7406\u7531\u3002\u7ed3\u679c\u662f\u8c03\u6574\u5927\u5c0f\uff08\u7ffb\u8f6c\uff08x\uff09\uff09\uff01=\u89e6\u53d1\u5668\uff08\u8c03\u6574\u5927\u5c0f\uff08x\uff09\uff09\u3002\u6240\u6709\u5176\u4ed6\u4eba\u90fd\u662f\u5bf9\u79f0\u7684\u3002\n \u4fe1\u606f\u635f\u5931\uff1a\u5728\u2460\uff08\u8fc8\u51fa\u7684\u4e00\u534a\uff09\u548c\u2462\uff0c\u5728\u65e7\u7f51\u683c\u4e2d\u5b58\u5728\u5927\u7ea6\u4e00\u534a\u7684\u70b9\u4e0a\u7684\u70b9\u3002\u4e0d\u5fc5\u7acb\u5373\u63d2\u503c\uff0c\u6211\u4eec\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u4fe1\u606f\u4e22\u5931\u3002\u4f46\u662f\uff0c\u5728\u2460\u4e2d\uff08\u4e24\u4e2a\u50cf\u7d20\u7684\u4e24\u500d\uff09\u548c\u2461\uff0c\u5927\u591a\u6570\u6216\u6240\u6709\u65b0\u50cf\u7d20\u90fd\u9700\u8981\u91cd\u65b0\u8ba1\u7b97\u3002 \n\u5bf9\u4e8e\u5176\u4ed6\u4efb\u610f\u6bd4\u4f8b\u56e0\u5b50\u8c03\u6574\u5927\u5c0f\uff0c\u6240\u6709\u7248\u672c\u90fd\u5177\u6709\u4fe1\u606f\u4e22\u5931\u3002\u4f462\u500d/ 0.5\u500d\u8c03\u6574\u5927\u5c0f\u5728\u6df1\u5ea6\u5b66\u4e60\u4e2d\u662f\u6700\u5e38\u89c1\u7684\u3002\n DEEPLAB\u7cfb\u5217\u7684\u5206\u5272\u6a21\u578b\u662f\u4f7f\u7528\u7f51\u683c\u2460\uff08\u4e00\u534a\u7684\u4e00\u534a\uff09\u4e3a\u6240\u67092x\u8c03\u6574\u800c\u95fb\u540d\u3002\u5728\u8fd9\u91cc\u67e5\u770b\u5176\u4f5c\u8005\u7684\u5355\u8bcd\u3002\u8fd9\u4e0e\u4ed6\u4eec\u4f7f\u7528\u7684\u4e0d\u65b9\u4fbf\u56fe\u50cf\u5f62\u72b6\u5339\u914d\uff0c\u4f8b\u5982321x513\u3002\u6211\u542c\u5230\u4e86\uff06\uff0334\u7684\u597d\u5904\u7684\u610f\u89c1;\u6ca1\u6709\u4fe1\u606f\u635f\u5931\u548c\uff0334;\u548c\uff0334;\u6ca1\u6709\u5916\u63a8\u548c\uff0334;\u53ef\u4ee5\u8ba9\u5b83\u5728\u5206\u5272\u4e2d\u7a81\u51fa\u2461\uff0c\u4f46\u6211\u8fd8\u6ca1\u6709\u770b\u5230\u66f4\u591a\u7684\u8bc1\u636e\u3002\n  \u56fe\u4e66\u9986\u4f7f\u7528\u4ec0\u4e48\uff1f\u60c5\u51b5\u6709\u70b9\u51cc\u4e71\u3002\u6211\uff06\uff0339; ll\u5217\u51fa\u6211\u6240\u77e5\u9053\u7684\uff0c\u5e76\u671f\u5f85\u60a8\u7684\u5e2e\u52a9\u589e\u52a0\u66f4\u591a\u3002\u6ca1\u6709\u4fdd\u8bc1\u4ed6\u4eec\u90fd\u662f\u6b63\u786e\u7684\uff0c\u56e0\u4e3a\u6211\u6ca1\u6709\u68c0\u67e5\u6240\u6709\u8fd9\u4e9b\u6e90\u4ee3\u7801\u3002\n  tfv1\u65b9\u6cd5= bilinear /\u6700\u8fd1\uff0calpion_corners = false\uff1a\u2462tfv1\u65b9\u6cd5= bilinear /\u6700\u8fd1\uff0calpion_corners = true\uff1a\u2460tfv2\u65b9\u6cd5= bilinear /\u6700\u8fd1\uff1a\u2461\uff08\u5728tfv2\u4e2d\uff0c\u5220\u9664alpion_corners\u9009\u9879\uff09\n \u4f3c\u4e4e\u6df7\u4e71\u5728\u6df1\u5ea6\u5b66\u4e60\u4e16\u754c\u4e2d\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\u3002\u600e\u4e48\u6765\u7684\uff1f\u4ece\u6211\u53ef\u4ee5\u8bf4\u7684\u8bdd\uff0c\u5386\u53f2\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a\n Tensorflow\u662f\u7b2c\u4e00\u4e2a\u5f15\u5165\u2462\uff0c\u5728\u5176\u521d\u59cb\u5f00\u6e90\u4e2d\u7684\u4f4d\u7f6e\u3002\u8fd9\u540e\u6765\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u9519\u8bef\u5e76\u5728v2\u4e2d\u56fa\u5b9a\uff08\u4e0d\u6253\u7834v1\u4e2d\u7684\u517c\u5bb9\u6027\uff09\u3002\n alpion_corners = true\uff08\u2460\uff09\u51fa\u73b0\u5728Tensorflow 0.7\u57282016\u5e74\u3002\u6211\u731c\u8fd9\u53ef\u80fd\u662f\u4e3a\u4e86Deeblab\u5f00\u53d1\u800c\u4e0d\u662f\u4e00\u822c\u4f7f\u7528\u3002 \n\u8fd9\u610f\u5473\u7740Tensorflow\u4ece\u672a\u6709\u9002\u5f53\u7684\u8c03\u6574\u5927\u5c0f\u51fd\u6570\uff08\u7f51\u683c\u2461\uff09\u76f4\u5230TFV2\uff01\u5728\u8fd9\u4e9b\u5e74\u5185\uff0c\u7f55\u89c1\u7684\u7248\u672c\uff08\u2460\uff09\u548c\u9519\u8bef\u7684\u7248\u672c\uff08\u2462\uff09\u5df2\u7ecf\u4f20\u64ad\u7ed9\u4eba\u4eec\uff06\uff0339; S\u578b\u53f7\u548c\u5176\u4ed6\u56fe\u4e66\u9986\u3002\n Pytorch\uff06\uff0339; S\u63d2\u5165\u6700\u521d\u6765\u81ea\u4e0a\u7f6e\u64cd\u4f5c\u3002\u6700\u8fd1\u7684Upsample\u662f\u8d8a\u91ce\u8f66\uff06\uff0339;\u9996\u5148\u5728Luatorch\u4e8e2014\u5e74\u6dfb\u52a0\u3002Bilinear Upsample\u4e8e2016\u5e74\u5728Luatorch\u4e2d\u6dfb\u52a0\u5e76\u4f7f\u7528Grid\u2460\u3002 Grid\u2461\u4e8e2018\u5e74\u6dfb\u52a0\u5230Diall_Corners = False\u9009\u9879\u4e0b\u7684Pytorch\uff0c\u5e76\u4ece\u90a3\u65f6\u8d77\u5c31\u6210\u4e3a\u9ed8\u8ba4\u503c\u3002\n \u7531\u4e8e\u8fd9\u79cd\u6df7\u4e71\uff0c\u8c03\u6574Onnx\u4e2d\u7684\u8fd0\u7b97\u7b26\u5927\u5c0f\u5fc5\u987b\u652f\u63015\u4e2a\u7248\u672c\u7684\u5750\u6807\u53d8\u6362\uff01 kudos\u5230onnx\u7ef4\u62a4\u8005\u3002\n  \u8bb8\u591a\u8ba1\u7b97\u673a\u56fe\u5f62\u6559\u79d1\u4e66\u548c\u8bba\u6587\u8ba8\u8bba\u4e86\u8fd9\u4e2a\u4e3b\u9898\u5e76\u9009\u62e9\u2461\uff0c\u4f8b\u5982\uff1a\n \uff06\uff0334;\u50cf\u7d20\u7684\u5750\u6807\u662f\u4ec0\u4e48\uff1f\uff06\uff0334;\u4ece\u56fe\u5f62\u5b9d\u77f3\u3002\u5728\u5b9e\u65f6\u6e32\u67d3\u4e2d\u518d\u6b21\u89e3\u91ca\u3002\n \uff08\u8bf7\u6ce8\u610f\uff0c\u5176\u4e2d\u4e00\u4e9b\u4f7f\u7528\u2461\u4f46\u5b9a\u4e49\u4e86\u8303\u56f4$ [ -  \\ frac {stride} {2}\uff0cn- \\ frac {stride} {2}] $\u3002\u6211\u4eec\u8ba8\u8bba\u4e86\u66f4\u591a\u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\uff06\uff0339 \u3002\uff09\n \u9274\u4e8e\u6240\u6709\u56fe\u5f62\u6587\u732e\uff0c\u8ba1\u7b97\u673a\u89c6\u89c9\u548c\u6df1\u5ea6\u5b66\u4e60\u56fe\u4e66\u9986\u4fc3\u8fdb\u7f51\u683c\u2461\uff0c\u6211\u4eec\u4f7f\u7528\u2461\u4f5c\u4e3a\u201c\u516c\u7ea6\u201d\u3002 \n\u6211\u4eec\u9009\u62e9\u2461\u4f5c\u4e3a\u7f51\u683c\u5730\u70b9\u7684\u516c\u7ea6\uff0c\u4f46\u8fd9\u4e0d\u662f\u6545\u4e8b\u7684\u7ed3\u5c3e\uff01\u6211\u4eec\u73b0\u5728\u77e5\u9053\u76f8\u5bf9\u4e8e\u4fe1\u53f7\u5f00\u5934\u7684\u7f51\u683c\u4f4d\u7f6e\u4e3a0.5,1.5\uff0c$ \\ Cdots $\uff0c\u4f46\u4ed6\u4eec\u7684\u7edd\u5bf9\u5750\u6807\u662f\u4ec0\u4e48\uff1f\u6362\u53e5\u8bdd\u8bf4\uff0c\u539f\u70b9\u5728\u54ea\u91cc\uff080,0\uff09\uff1f\n \u8fd9\u53ea\u662f\u4e00\u4e2a\u60ef\u4f8b\u7684\u9009\u62e9\uff0c\u5bf9\u4efb\u4f55\u7b97\u6cd5\u6ca1\u6709\u5927\u91cf\u5f71\u54cd\u3002\u4e0a\u9762\u5217\u51fa\u7684\u4e24\u4e2a\u56fe\u5f62\u6587\u732e\u6211\u5c06\u539f\u70b9\u653e\u5728\u7b2c\u4e00\u4e2a\u50cf\u7d20\u4e0a\u3002\u8fd9\u6709\u4e00\u4e2a\u597d\u5904\uff0c\u6240\u6709\u50cf\u7d20\u4f4d\u7f6e\u90fd\u6709\u6574\u6570\u5750\u6807\uff0c\u800c\u4e14\u5b83\uff06\uff0339;\u4fe1\u53f7\u5728$ [ -  0.5\uff0cn-0.5] $\u4ee5\u4e0b\u79f0\u4e3a\uff06\uff0334;\u6574\u6570\u4e2d\u5fc3\uff06\uff0334\u7684\u5947\u602a;\u3002\n \u53e6\u4e00\u4e2a\u516c\u7ea6\uff0c\uff06\uff0334;\u6574\u6570\u89d2\u843d\uff06\uff0334;\u6216\uff06\uff0334;\u534a\u6574\u6570\u4e2d\u5fc3\uff06\uff0334;\uff0c\u5c06\u539f\u70b9\u653e\u5728\u4fe1\u53f7\u7684\u5f00\u5934\uff0c\u56e0\u6b64\u7b2c\u4e00\u4e2a\u50cf\u7d20\u4ee5\uff080.5,0.5\uff09\u4e3a\u4e2d\u5fc3\u3002\u6211\u4eec\u9009\u62e9\u6574\u6570\u89d2\u843d\uff0c\u7136\u540e\u5c06\u5728\u8fde\u7eed\u5750\u6807\u548c\u79bb\u6563\u50cf\u7d20\u6307\u6570\u4e4b\u95f4\u5177\u6709\u4ee5\u4e0b\u5173\u7cfb\uff1a\n  \u9009\u62e9\u6ca1\u6709\uff0c\u56e0\u4e3a\u7edd\u5bf9\u5750\u6807\u6c38\u8fdc\u4e0d\u4f1a\u6d89\u53ca\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e\u63a5\u53d7\u6216\u8fd4\u56de\u7edd\u5bf9\u5750\u6807\u7684\u804c\u80fd\uff0c\u6211\u4eec\u5e94\u8be5\u4e86\u89e3\u4ed6\u4eec\u7684\u516c\u7ea6\u3002\u4f8b\u5982\uff1a\n cv2.findcontours\u8fd4\u56de\u7531\u7d22\u5f15\u8868\u793a\u7684\u6574\u6570\u591a\u8fb9\u5f62\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u59cb\u7ec8\u5c060.5\u50cf\u7d20\u6dfb\u52a0\u5230\u5176\u7ed3\u679c\uff0c\u4ee5\u83b7\u53d6\u4e0e\u6211\u4eec\u7684\u60ef\u4f8b\u76f8\u5339\u914d\u7684\u5750\u6807\u3002\n Cv2.warpaffine\u4f7f\u7528\u5750\u6807\u7cfb0.5\u3002\u5b83\u5728\u8fd9\u4e2a\u95ee\u9898\u4e0a\u62b1\u6028\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5927\u591a\u6570OpenCV\u529f\u80fd\u4f7f\u7528\uff06\uff0334;\u6574\u6570\u4e2d\u5fc3\uff06\uff0334;\u4e60\u4fd7\u3002\n pycocotools.mask.frpyObjects\u53ef\u4ee5\u5c06\u591a\u8fb9\u5f62\u5448\u73b0\u200b\u200b\u4e3a\u63a9\u7801\u3002\u5b83\u63a5\u53d7\u4e0e\u6211\u4eec\u7684\u60ef\u4f8b\u76f8\u7b26\u7684\u591a\u8fb9\u5f62\u3002 pil.imagedraw.polygon\u4e5f\u662f\u5982\u6b64\uff0c\u4f46\u5b83\u7684\u7ed3\u679c\u662f0.5\u50cf\u7d20\uff06\uff0334;\u80d6\u5b50\uff06\uff0334;\u7531\u4e8e\u5176\u5982\u4f55\u5b9e\u65bd\u3002\u8fd9\u5f71\u54cd\u4e86City Capes\u6ce8\u91ca\u3002 \n\u5982\u679c\u6570\u636e\u96c6\u7528\u5750\u6807\u6ce8\u91ca\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u77e5\u9053\u5176\u9009\u62e9\u5750\u6807\u7cfb\u3002\u6570\u636e\u96c6\u6240\u6709\u8005\u901a\u5e38\u4e0d\u63d0\u4f9b\u6b64\u4fe1\u606f\uff0c\u56e0\u6b64\u6211\u4eec\u731c\u6d4b\u3002\u4f8b\u5982\uff0c\u5728Coco\u4e2d\uff0c\u4f3c\u4e4e\u591a\u8fb9\u5f62\u6ce8\u91ca\u7b26\u5408\u6211\u4eec\u7684\u60ef\u4f8b\uff0c\u4f46\u662fkeypoint\u6ce8\u91ca\u4e0d\u4f1a\u4e14\u5e94\u9012\u589e0.5\u3002\n \u65e2\u7136\u6211\u4eec\u6709\u4e00\u4e2a\u5750\u6807\u7cfb\u516c\u7ea6\uff0c\u5b83\uff06\uff0339;\u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u7cfb\u7edf\u4e2d\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u505a\u6cd5\uff0c\u59cb\u7ec8\u4f7f\u7528\u5750\u6807\u800c\u4e0d\u662f\u6307\u6570\u6765\u4ee3\u8868\u51e0\u4f55\u5f62\u72b6\uff0c\u4f8b\u5982\u76d2\u5b50\u548c\u591a\u8fb9\u5f62\u3002\u8fd9\u662f\u56e0\u4e3a\u7d22\u5f15\u662f\u6574\u6570\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u51e0\u4f55\u64cd\u4f5c\u671f\u95f4\u8f7b\u677e\u4e22\u5931\u7cbe\u5ea6\u3002\u5bf9\u8fb9\u754c\u6846\u7684\u6307\u6570\u5bfc\u81f4\u4e86DETECTRON\u4e2d\u7684\u4e00\u4e9b\u95ee\u9898\u3002\n  Detectron / Detectron2\u4e2d\u7684\u6a21\u578b\u90fd\u6d89\u53ca\u56fe\u50cf\u4e2d\u5bf9\u8c61\u7684\u672c\u5730\u5316\uff0c\u56e0\u6b64\u50cf\u7d20\u548c\u5750\u6807\u60ef\u4f8b\u5f88\u591a\u3002\u4e24\u4e2a\u5e93\u4e2d\u7684\u5404\u79cd\u6539\u8fdb\u548c\u9519\u8bef\u4fee\u6b63\u4e0e\u50cf\u7d20\u76f8\u5173\u3002\n  \u5728\u68c0\u6d4b\u6a21\u578b\u4e2d\uff0c\u8fb9\u754c\u6846\u56de\u5f52\u901a\u5e38\u9884\u6d4b\uff06\uff0334; deltas\uff06\uff0334;\u5728\u5730\u9762\u771f\u7406\uff08GT\uff09\u6846\u548c\u53c2\u8003\u6846\uff08\u4f8b\u5982\u951a\u70b9\uff09\u4e4b\u95f4\u3002\u5728\u57f9\u8bad\u4e2d\uff0cGT\u76d2\u5b50\u88ab\u7f16\u7801\u4e3aDeltas\u4f5c\u4e3a\u57f9\u8bad\u76ee\u6807\u3002\u5728\u63a8\u65ad\u4e2d\uff0c\u9884\u6d4b\u7684\u589e\u91cf\u88ab\u89e3\u7801\u4ee5\u6210\u4e3a\u8f93\u51fa\u6846\u3002\n detectron\u4e2d\u7684\u6846\u901a\u5e38\u4f7f\u7528\u6574\u6570\u7d22\u5f15\uff0c\u800c\u4e0d\u662f\u5750\u6807\u3002\u56e0\u6b64\uff0c\u6846\u7684\u5bbd\u5ea6\u7531$ x_1  -  x_0 + 1 $\u800c\u4e0d\u662f$ x_1  -  x_0 $\u7ed9\u51fa\u3002\u5b83\u7684\u76d2\u5b50\u53d8\u6362\u4ee3\u7801\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff08\u4ec5\u663e\u793a\u7b80\u6d01\u7684\u4e00\u4e2a\u7ef4\u5ea6\uff09\uff1a\n ref_x0\uff0cref_x1\uff1aint\uff03\u53c2\u8003\u6846ref_w = ref_x1  -  ref_x0 + 1 ref_center = ref_x0 + 0.5 * ref_w def\uff08x0\uff0cx1\uff09\uff1a\uff03\u7ed9\u5b9a\u53c2\u8003\u6846\u548cgt box w = x1  -  x0 + 1 center = x0 + 0.5 * w dx =\uff08\u4e2d\u5fc3 -  ref_center\uff09/ ref_w #delta\u4e2d\u5fc3dw = log\uff08w / ref_w\uff09\uff03delta\u4e4b\u95f4\u7684\u5bbd\u5ea6\u8fd4\u56dedx\uff0cdw def\uff08dx\uff0cdw\uff09\uff1a\uff03\u7ed9\u5b9a\u53c2\u8003\u6846\u548cdeltas center = dx * ref_w + ref_center \uff03undo\u7f16\u7801w = exp\uff08dw\uff09* ref_w x0\uff0cx1 =\u4e2d\u5fc3 -  0.5 * w\uff0ccenter + 0.5 * w\u8fd4\u56dex0\uff0cx1\n \u7531\u4e8e\u4ee3\u7801\u4f3c\u4e4e\u662f\u65e0\u8f9c\u7684\uff0c\u8fd9\u4e24\u4e2a\u529f\u80fd\u5f7c\u6b64\u4e0d\u5012\u6570\uff1a\u89e3\u7801\uff08\u7f16\u7801\uff08x0\uff0cx1\uff09\uff09\uff01=\uff08x0\uff0cx1\uff09\u3002 X1\u9519\u8bef\u5730\u89e3\u7801\uff1a\u5b83\u5e94\u8be5\u662f\u4e2d\u5fc3+ 0.5 * W  -  1\u3002 \n\u6b64\u9519\u8bef\u51fa\u73b0\u57282015\u5e74\u5de6\u53f3\u7684PY-Faster-RCNN\u9879\u76ee\u4e2d\uff0c\u4ecd\u5728\u4eca\u5929\u3002\u5b83\u88ab\u4f20\u9012\u5230\u80f6\u7247R-CNN\u7eb8\u4e0a\u7684\u5bfc\u81f4\u5bfc\u81f4\u5bfc\u81f4\u7684\u7ed3\u679c\u3002\u7136\u540e\u5b83\u57282017\u5e74\u5e95\u627e\u5230\u4e86\u5b83\uff0c\u5e76\u5728\u6211\u53d1\u73b0\u5b83\u540e\u4fee\u590d\u4e86\uff0c\u5e76\u6709\u52a9\u4e8e\u6539\u55840.4\u301c0.7\u76d2\u5b50AP\u3002 Detectron\u4e8e2018\u5e74\u57282018\u5e74\u8fdb\u884c\u4e86\u5f00\u653e\u6765\u6e90\u3002\u5728Detectron2\u4e2d\uff0c\u6211\u4eec\u91c7\u7528\u89c4\u5219\u59cb\u7ec8\u4f7f\u7528\u6846\u67b6\u6846\u67b6\u5750\u6807\uff0c\u56e0\u6b64\u4e0d\u518d\u5b58\u5728\u95ee\u9898\u3002\n  \u5982\u4f55\u6c34\u5e73\u7ffb\u8f6c\u51e0\u4f55\u5f62\u72b6\uff1f\u867d\u7136\u50cf\u7d20\u7d22\u5f15\u5e94\u8be5\u7528$ i \\ refrearrow w  -  1  -  1  -  i $\uff0c\u4f46\u6211\u4eec\u5e94\u8be5\u9075\u5faa\u89c4\u5219\u59cb\u7ec8\u4f7f\u7528\u5750\u6807\uff0c\u5e76\u4e14\u5750\u6807\u5e94\u8be5\u7528$ x\u5de6arrow w  -  x $\uff06\uff0334;\u6574\u6570\u89d2\uff06\uff03 34;\u7cfb\u7edf\u3002\n Detectron ISN\uff06\uff0339; T\u5982\u6b64\u4e25\u683c\uff0c\u5b83\u4f7f\u7528\u4e86$ w  -  1  -  x $ for cocordines\u3002 IIRC\uff0c\u4fee\u590d\u95ee\u9898\u5bfc\u81f4\u301c0.5\u9762\u7f69\u7684AP\u6539\u8fdb\u3002\n   \u5728detectron\u4e2d\u751f\u6210\u951a\u7684\u4ee3\u7801\u5f88\u957f\uff0c\u56e0\u4e3a\u5b83\u8bd5\u56fe\u751f\u6210\u6574\u6570\u503c\u951a\u76d2\u3002\u901a\u8fc7\u91c7\u7528Detectron2\u4e2d\u6240\u6709\u6846\u7684\u5750\u6807\uff0c\u4e0d\u9700\u8981\u6574\u6570\u6846\u3002\u8fd9\u7b80\u5316\u4e86\u53ea\u9700\u51e0\u884c\u4ee3\u7801\u7684\u6240\u6709\u903b\u8f91\u3002\n \u8fd9\u4e0d\u4f1a\u5f71\u54cd\u7cbe\u5ea6\uff0c\u56e0\u4e3a\u951a\u7684\u786e\u5207\u503c\u5e76\u4e0d\u91cd\u8981\uff0c\u53ea\u8981\u5728\u8bad\u7ec3\u4e2d\u4f7f\u7528\u5373\u53ef\u3002\u6d4b\u8bd5\u3002\n  Roialign\u64cd\u4f5c\u5c06\u6765\u81ea\u56fe\u50cf\u7684\u533a\u57df\u4f5c\u5f0a\u5e76\u5c06\u5176\u8c03\u6574\u4e3a\u67d0\u4e9b\u5f62\u72b6\u3002\u5b83\uff06\uff0339;\u5f88\u5bb9\u6613\u72af\u9519\u8bef\uff0c\u56e0\u4e3a\u6d89\u53ca\u4e24\u4e2a\u56fe\u50cf\u548c\u4e24\u4e2a\u5750\u6807\u7cfb\u3002\u8ba9\uff06\uff0339; s\u884d\u751f\u5982\u4f55\u6267\u884croialign\u3002\n  \u7ed9\u5b9a\u56fe\u50cf\u548c\u533a\u57df\uff08\u7eff\u8272\u6846\uff09\uff0c\u6211\u4eec\u60f3\u8981\u91cd\u65b0\u91c7\u6837\u4e0e\u8be5\u533a\u57df\u5bf9\u5e94\u7684k $ \\ times $ k\u8f93\u51fa\u56fe\u50cf\u3002 w.l.o.g.\u6211\u4eec\u5047\u8bbe\u8f93\u5165\u56fe\u50cf\u5177\u6709stride = 1\u3002\u7531\u4e8e\u6211\u4eec\u77e5\u9053\u5206\u8fa8\u7387\u548c\u7edd\u5bf9\u7684\u8f93\u51fa\u957f\u5ea6\uff0c\u56e0\u6b64\u4ece\u7f51\u683c\u2461\u5b9a\u4e49\u5bfc\u51fa\u7684\u8f93\u51fa\u6b65\u5e45\u662f$\uff08\\ FRAC {X_1  -  X_0} {K}\uff0c\\ FRAC {Y_1-Y_0} {k}\uff09$\u3002\u56e0\u4e3a\u7f51\u683c\u504f\u79fb\u91cf\u4e3a0.5 $ \\ times $ scride\uff0c\u6240\u4ee5\u8f93\u51fa\u50cf\u7d20[i\uff0cj]\u7684\u4f4d\u7f6e\u662f$$\uff08x_0 +\uff080.5 + j\uff09\\ frac {x_1  -  x_0} {k}\uff0cy_0 +\uff080.5 + i\uff09 \\ frac {y_1  -  y_0} {k}\uff09$$ Let\uff06\uff0339; s\u8c03\u7528\u5b83$\uff08x\uff0cy\uff09$\u3002\u8981\u5728\u5730\u70b9$\uff08x\uff0cy\uff09$\u65f6\u8ba1\u7b97\u91cd\u91c7\u6837\u503c\uff0c\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4e0e\u51764\u4e2a\u6700\u8fd1\u50cf\u7d20\u8fdb\u884c\u53cc\u7ebf\u6027\u63d2\u503c\uff08\u8fd9\u5bf9\u5e94\u4e8esampling_ratio = 1\u7684roialign\u3002\u6211\u4eec\u5728\u56fe\u4e2d\u793a\u51fa\u4e86\u8f93\u51fa\u76844\u4e2a\u76f8\u90bb\u8f93\u5165\u50cf\u7d20\u3002\u5728\u51cf\u53bb0.5\u4ee5\u5bf9\u9f50\u5176\u5750\u6807\u7cfb\u4e4b\u540e\u83b7\u5f974\u7f8e\u5143\u6700\u8fd1\u7684$\uff08x\uff0cy\uff09$\u76844\u4e2a\u6700\u8fd1\u50cf\u7d20\u7684\u6307\u6570\uff1a \n$$ \\ begin {array} {l} a = \\ text {\u8f93\u5165} [\\ text {floor}\uff08y-0.5\uff09\uff0c\\ text {floor}\uff08x-0.5\uff09] \\\\ b = \\ text {\u8f93\u5165} [ \\\u6587\u672c{floor}\uff08y-0.5\uff09\uff0c\\ text {ceil}\uff08x-0.5\uff09] \\\\ c = \\ text {\u8f93\u5165} [\\ text {ceil}\uff08y-0.5\uff09\uff0c\\ text {floor}\uff08x -0.5\uff09] \\\\ d = \\ text {\u8f93\u5165} [\\ text {ceil}\uff08y-0.5\uff09\uff0c\\ text {ceil}\uff08x-0.5\uff09] \\\\ \\ end {array} $$\n \u5728Detectron\u4e2d\u7684roialign\u7684\u539f\u59cb\u5b9e\u65bd\u6ca1\u6709\u51cf\u53bb0.5\u5230\u5e95\uff0c\u6240\u4ee5\u5b83\u5b9e\u9645\u4e0a\u4e0d\u662f\u5f88\u5bf9\u9f50\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u6b64\u7ec6\u8282\u4e0d\u4f1a\u5f71\u54cdR-CNN\u7684\u51c6\u786e\u6027\uff0c\u56e0\u4e3aroialign\u5e94\u7528\u4e8eCNN\u7279\u5f81\uff0c\u5e76\u4e14\u636e\u4fe1CNN\u80fd\u591f\u62df\u5408\u7565\u5fae\u672a\u5bf9\u51c6\u7684\u7279\u5f81\u3002\n \u4f46\u662f\uff0c\u6211\u4eec\u5728\u5176\u4ed6\u5730\u65b9\u6709\u65b0\u7528\u4f8b\u7684\u7f57\u5229\u4eba\uff0c\u4f8b\u5982\uff0c\u4ece\u5730\u9762\u771f\u76f8\u9762\u5177\u62cd\u6444\u63a9\u6a21\u5934\u8bad\u7ec3\u76ee\u6807\uff0c\u56e0\u6b64\u6211\u5c06\u5176\u56fa\u5b9a\u5728detectron2 / torchvision roidign\u4e2d\uff0c= true\u9009\u9879\u3002\u5b83\u7684unittest\u6f14\u793a\u4e86\u65e7\u7248\u672c\u5982\u4f55\u9519\u4f4d\u3002\n \u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0c\u6211\u4eec\u53d1\u73b0\u5750\u6807\u53d8\u6362\u516c\u5f0f\uff0c\u5b83\u6613\u4e8e\u4f7f\u7528f.grid_sample\u5b9e\u73b0roialign\u3002\u6211\u505a\u8fc7\u7ec3\u4e60\uff0c\u53d1\u73b0\u8fd910\uff05-50\uff05\u8f83\u6162\u3002\n  \u63a9\u6a21R-CNN\u88ab\u57f9\u8bad\uff0c\u4ee5\u9884\u6d4b\u5728\u7ed9\u5b9a\u6846\u5185\u9650\u5236\u7684\u56fa\u5b9a\u5206\u8fa8\u7387\uff08\u4f8b\u598228x28\uff09\u7684\u63a9\u6a21\uff08\u6211\u4eec\u79f0\u4e4b\u4e3a\uff06\uff0334; Roimask\uff06\uff0334;\uff09\u3002\u4f46\u6700\u7ec8\u6211\u4eec\u7ecf\u5e38\u60f3\u8981\u83b7\u5f97\u5168\u9762\u5f62\u8c61\u9762\u5177\u3002 A\uff06\uff0334;\u7cca\u72b6\u9762\u5177\uff06\uff0334;\u9700\u8981\u64cd\u4f5c\u4ee5\u5c06\u5c0froimask\u7c98\u8d34\u5230\u56fe\u50cf\u4e2d\u7ed9\u5b9a\u533a\u57df\u4e2d\u3002\n  \u6b64\u64cd\u4f5c\u662froilign\u7684\u5012\u6570\uff0c\u56e0\u6b64\u5e94\u8be5\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u7684\u63a8\u5bfc\u3002\u5728Detectron\u4e2d\uff0c\u8fd9\u662f\u7528\u4e00\u4e9b\u9b54\u672f\u820d\u5165\u548camp\u5b9e\u65bd;\u8c03\u6574\u5927\u5c0f\u5e76\u4e0d\u5b8c\u5168\u662froialign\u7684\u5012\u6570\u3002\u5728Detectron2\u4e2d\u5c06\u5176\u56fa\u5b9a\u5c06\u63a9\u6a21AP\u589e\u52a00.1\u301c0.4\u3002\n  Pointrend\u662f\u6211\u4eec\u521b\u5efa\u7684\u5206\u6bb5\u65b9\u6cd5\uff0c\u4e13\u6ce8\u4e8e\u70b9\u660e\u667a\u7684\u529f\u80fd\u3002\u6307\u51fa\u7684\u76d1\u7763\u5b9e\u4f8b\u5206\u6bb5\uff0c\u4e5f\u6765\u81ea\u6211\u4eec\u7684\u56e2\u961f\uff0c\u4f7f\u7528Point-Wise\u6ce8\u91ca\u6765\u5217\u8f66\u5206\u6bb5\u6a21\u578b\u3002\u8fd9\u4e24\u4e2a\u9879\u76ee\u90fd\u6d89\u53ca\u91cd\u91cf\u4f7f\u7528\u70b9\u91c7\u6837\u548c\u5750\u6807\u53d8\u6362\u3002\u6709\u4e00\u4e2a\u660e\u786e\u7684\u50cf\u7d20\u548c\u5750\u6807\u5bf9\u4ed6\u4eec\u7684\u6210\u529f\u5f88\u91cd\u8981\u3002 \n\u7531\u4e8e\u4e00\u4e9b\u5728\u6df1\u5ea6\u5b66\u4e60\u56fe\u4e66\u9986\u7684\u65e9\u671f\u7684\u4e00\u4e9b\u908b\u7684\u5b88\u5219\uff0c\u4eca\u5929\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u9762\u4e34\u591a\u4e2a\u7248\u672c\u7684\u8c03\u6574\u5927\u5c0f\u51fd\u6570\u3002 \u4e0e\u4e24\u4e2a\u4e0d\u540c\u7684\u5750\u6807\u7cfb\u7ea6\u5b9a\uff0c\u5b83\u4eec\u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u4ee3\u7801\u4e2d\u8f7b\u677e\u5bfc\u81f4\u9690\u85cf\u9519\u8bef\u3002  \u672c\u6587\u91cd\u65b0\u5ba1\u89c6\u4e86\u8fd9\u4e9b\u5386\u53f2\u6280\u672f\u503a\u52a1\uff0c\u5e76\u5c55\u793a\u4e86\u8fd9\u4e9b\u6709\u8da3\u7684\u7ec6\u8282\u5982\u4f55\u5728\u5efa\u6a21\u548c\u57f9\u8bad\u65b9\u9762\u3002 \u6211\u5e0c\u671b\u4ed6\u4eec\u80fd\u5e2e\u52a9\u4f60\u505a\u51fa\u6b63\u786e\u7684\u9009\u62e9\u3002 ", "note_en": "Technically, an image is a function that maps a  continuous domain, e.g. a box $[0, X] \\times [0, Y]$, to intensities such as (R, G, B). To store it on computer memory, an image is  discretized to an array  array[H][W], where each element  array[i][j] is a  pixel.\n How does discretization work? How does a discrete pixel relate to the abstract notion of the underlying continuous image? These basic questions play an important role in computer graphics &amp; computer vision algorithms.\n This article discusses these low level details, and how they affect our CNN models and deep learning libraries. If you ever wonder which resize function to use or whether you should add/subtract 0.5 or 1 to some pixel coordinates, you may find answers here. Interestingly, these details have contributed to many accuracy improvements in Detectron and Detectron2.\n   Sampling theory tells us how a continuous 2D signal is turned into a discrete array by  sampling and  filtering.\n We choose a $H \\times W$ rectangular grid of points, from which we will draw samples. In order to make best use of the produced samples, we have to know the exact location every sample on this grid is chosen.\n Values on these sampled points are not directly retrieved from the original signal, but come from a filtering step that removes high-frequency components. Bad choice of filter can lead to aliasing effects.\n Sampling and filtering are both important in basic image processing operations, such as resize. Resize operation takes a discrete image, resamples it and creates a new image. The choice of sampling grid and sampling filter will then affect how such a basic operation is implemented.\n For example, the paper  On Buggy Resizing Libraries and Surprising Subtleties in FID Calculation studies the filtering issues, and shows that the resize operations in many libraries (OpenCV, PyTorch, TensorFlow) don&#39;t take into account the low-pass filtering. This then leads to incorrect deep learning evaluation.\n In this article, we ignore the issue of sampling filter, and only studies the  coordinates of sampling grid. We&#39;ll see that this choice is also inconsistent among libraries, and can affect the design and performance of CNN models.\n  Pixels are located on a sampling grid we choose. Naturally, we would like to only consider rectangular grids where pixels are spaced evenly. But there are many other factors to concern with:\n  (These terminology may have a different meaning elsewhere, but this is how I define them in this article.)\n For simplicity, we look at the one dimensional case instead. We want to answer this question: for a 1D signal defined on $[0, N]$, what is the sampling grid with stride=1? There are a few different choices:\n  In this figure, the green bars represent the 1D signal of length $N$, and blue dots represent the locations where point samples are taken. On top of each sample we labeled their  coordinates, while on the bottom are their zero-based  pixel indices. More formally, given a stride (which equals to 1 here), the offset and resolution of the grid are defined by the following table (assume $ \\frac{N}{stride}$ is an integer):\n $$ \\begin{array}{|c|ccc|} \\text{grid} &amp; \\text{offset} &amp; \\text{resolution} \\\\\\hline \u2460 &amp; 0 &amp; \\frac{N}{stride}+1 \\\\ \u2461 &amp; \\frac{stride}{2} &amp; \\frac{N}{stride} \\\\ \u2462 &amp; 0 &amp; \\frac{N}{stride} \\\\ \\end{array} $$\n They (or at least the first two) are all  valid interpretations when we are given an array of pixels. The interpretation we choose affects how we implement operations and models, because they each have some unique weird properties. To understand them more, let&#39;s check how a 2x resize operation should be implemented under each interpretation.\n  A unique undesired property of \u2460 is that, stride is not the inverse of resolution. So a 2x resize is ambiguous: we have to be clear whether we want half of stride, or twice more pixels. The new grids after resize look like these:\n    You can easily verify that the 4 different resized grids still match the corresponding definition in our table above.\n For 2D case, the 2x resize in \u2460(twice more pixels) and \u2461 look liks this (image credit:  here):\n   Extrapolation: \u2461 and \u2462 both need extrapolation outside the border of the original grid to perform resize, but \u2460 only needs interpolation. Extrapolation is sometimes undesirable.\n Asymmetry: \u2462 is asymmetric, and it&#39;s probably a good reason to never use it. One consequence is that  resize(flip(x)) != flip(resize(x)). All others are symmetric.\n Information Loss: in \u2460(half of stride) and \u2462 , about half of the points on the new grid exist in the old grid. By not having to interpolate their values, we minimize the loss of information. However, in \u2460(twice more pixels) and \u2461, most or all of the new pixels need to be recomputed.\n For resize with other arbitrary scale factor, all versions have information loss. But 2x/0.5x resize are most common in deep learning.\n The DeepLab series of segmentation models are famous for using grid \u2460(half of stride) for all the 2x resize. See  here for words from its author. This matches the inconvenient image shapes they use, such as 321x513. I&#39;ve heard opinions that the benefits of &#34;no information loss&#34; and &#34;no extrapolation&#34; may let it outperform \u2461 in segmentation, but I have yet to see more evidence.\n  What do libraries use? Situation is a bit messy. I&#39;ll list what I know and looking forward to your help to add more. No guarantee they are all correct, since I didn&#39;t check the source code for all of them.\n  TFv1  method=BILINEAR/NEAREST, align_corners=False: \u2462 TFv1  method=BILINEAR/NEAREST, align_corners=True: \u2460 TFv2  method=BILINEAR/NEAREST: \u2461 (In TFv2,  align_corners option was removed)\n It seems the mess is unique in the deep learning world. How come? From what I can tell, the history looks like this:\n TensorFlow is the first place that introduces \u2462, in its initial open source. This was later considered as  a bug and fixed in v2 (to not break compatibility in v1).\n align_corners=True(\u2460)  appeared in TensorFlow 0.7 in 2016. I guess this was probably intended for DeepLab development and not for general use.\n This means TensorFlow never had a proper resize function (grid \u2461) until TFv2! During all these years, the uncommon version (\u2460) and the wrong version (\u2462) have propagated to people&#39;s models and other libraries.\n PyTorch&#39;s  interpolate comes originally from  upsample operation. Nearest upsample was buggy when it&#39;s first  added in LuaTorch in 2014. Bilinear upsample was first  added in LuaTorch in 2016 and used grid \u2460. Grid \u2461 was  added in 2018 to PyTorch under an  align_corners=False option, and became the default since then.\n Due to this mess, resize operator in ONNX has to support  5 versions of coordinate transform! Kudos to ONNX maintainers.\n  Many computer graphics textbooks and papers talk about this topic and choose \u2461, for example:\n &#34;What Are the Coordinates of a Pixel?&#34; from  Graphics Gems. Explained again in  Real-time Rendering.\n (Note that some of them uses \u2461 but defines the continuous signal in the range $[-\\frac{stride}{2}, N-\\frac{stride}{2}]$. We&#39;ll discuss more about this.)\n Given all the graphics literature, computer vision and deep learning libraries promoting grid \u2461, we  use \u2461 as the convention.\n  We pick \u2461 as the convention for grid locations, but this is not the end of the story! We now know the grid locations  relative to the beginning of the signal are 0.5, 1.5, $\\cdots$, but what are their  absolute coordinates? In other words, where is the origin (0, 0) ?\n This is just a choice of convention and has no substantial effect on any algorithms. Two of the graphics literature I listed above put the origin on the first pixel. This has a benefit that all pixel locations have integer coordinates, but then it&#39;s weird that the signal lies on $[-0.5, N-0.5]$ This convention is sometimes referred to as &#34;integer centers&#34;.\n Another convention, &#34;integer corners&#34;, or &#34;half-integer centers&#34;, puts the origin on the beginning of the signal, so the first pixel is centered at (0.5, 0.5).  We chose integer corners, and then will have the following relationship between continuous coordinates and discrete pixel indices:\n  The choice doesn&#39;t matter for resize because absolute coordinates are never involved. However, for functions that accept or return absolute coordinates, we should be aware of their convention. For example:\n cv2.findContours returns integer polygons represented by indices. So we always add 0.5 pixel to its results to obtain coordinates that match our convention.\n cv2.warpAffine uses a coordinate system shifted by 0.5. It is complained in  this issue. In fact most OpenCV functions use the &#34;integer center&#34; convention.\n pycocotools.mask.frPyObjects can render polygons as masks. It accepts polygons that match our convention. Same for  PIL.ImageDraw.polygon, but its results are 0.5 pixel &#34;fatter&#34; due to how its implemented. This has affected cityscapes annotations.\n If a dataset is annotated with coordinates, we also need to know its choice of coordinate system. This information is often not provided by dataset owner, so we make guesses. For example, in COCO it appears that polygon annotations match our convention, but keypoint annotations do not and should be incremented by 0.5.\n Now that we have a convention for the coordinate system, it&#39;s a good practice in computer vision systems to  always use coordinates rather than indices to represent geometries, such as boxes and polygons. This is because indices are integers, and can easily lose precision during geometric operations. Using indices for bounding boxes has caused some issues in Detectron.\n  Models in  Detectron /  Detectron2 all involve localization of objects in images, so the convention of pixels and coordinates matters a lot. Various improvements and bugfixes in the two libraries are related to pixels.\n  In detection models, bounding box regression typically predicts &#34;deltas&#34; between the ground truth (GT) box and a reference box (e.g. anchor). In training, GT box is encoded to deltas as training target. In inference, the predicted deltas are decoded to become output box.\n Boxes in Detectron often use integer indices, instead of coordinates. So the width of a box is given by $x_1 - x_0 + 1$ instead of $x_1 - x_0$. Its box transform code looked like this for a long time (showing only one dimension for brevity):\n ref_x0, ref_x1: int  # the reference box ref_w = ref_x1 - ref_x0 +  1 ref_center = ref_x0 +  0.5 * ref_w    def   (x0, x1):  # given reference box and gt box  w = x1 - x0 +  1  center = x0 +  0.5 * w  dx = (center - ref_center) / ref_w  # delta between centers  dw = log(w / ref_w)  # delta between widths   return dx, dw    def   (dx, dw):  # given reference box and deltas  center = dx * ref_w + ref_center  # undo the encoding  w = exp(dw) * ref_w  x0, x1 = center -  0.5 * w, center +  0.5 * w   return x0, x1\n As innocent as the code seems, the two functions are not inverse of each other:  decode(encode(x0, x1)) != (x0, x1).  x1 is incorrectly decoded: it should be  center + 0.5 * w - 1 instead.\n This bug appeared in the  py-faster-rcnn project around 2015, and is  still there today. It was carried into Detectron and negatively affected results in the Mask R-CNN paper. Then it&#39;s  fixed in late 2017 after I found it, and contributed to an improvement of 0.4~0.7 box AP. Detectron went open source in 2018 with this fix. In Detectron2, we adopt the rule to always use floating point coordinates for boxes, so the issue no longer exists.\n  How to horizontally flip a geometry? Although pixel indices should be flipped by $i \\leftarrow W - 1 - i$, we should follow the rule to always use coordinates, and coordinates should be flipped by $x \\leftarrow W - x$ under &#34;integer corner&#34; system.\n Detectron isn&#39;t so rigorous on this and it  uses $W - 1 - x$ for coordinates. IIRC, fixing the issue leads to ~0.5 mask AP improvement.\n   The  code to generate anchors in Detectron is quite long, because it tries to generate integer-valued anchor boxes. By adopting coordinates for all boxes in Detectron2, integer boxes are not needed. This simplifies all the logic to just  a few lines of code.\n This does not affect accuracy, because the exact values of anchors are not that important as long as the same is used in training &amp; testing.\n  The RoIAlign operation crops a region from an image and resize it to certain shape. It&#39;s easy to make mistakes because two images and two coordinate systems are involved. Let&#39;s derive how to perform RoIAlign.\n  Given an image and a region (the green box), we want to resample a K $\\times$ K output image that corresponds to the region. W.l.o.g. we assume the input image has stride=1. Since we know the resolution and the absolute length of output, the output stride derived from the definition of grid \u2461 is $(\\frac{x_1 - x_0}{K}, \\frac{y_1-y_0}{K})$. Because grid offset is 0.5$\\times$stride, the location of output pixel  [i,j] is $$(x_0 + (0.5 + j)\\frac{x_1 - x_0}{K}, y_0 + (0.5 + i)\\frac{y_1 - y_0}{K})$$ Let&#39;s call it $(X, Y)$. To compute resampled values at location $(X, Y)$, an easy way is to do bilinear interpolation with its 4 nearest pixels (this corresponds to RoIAlign with  sampling_ratio=1). We show the 4 neighboring input pixels of  output[0,0] in the figure. The  indices of 4 nearest pixels of $(X, Y)$ are obtained after subtracting 0.5 to align their coordinate system:\n $$ \\begin{array}{l} A = \\text{input}[\\text{floor}(Y-0.5), \\text{floor}(X-0.5)] \\\\ B = \\text{input}[\\text{floor}(Y-0.5), \\text{ceil}(X-0.5)] \\\\ C = \\text{input}[\\text{ceil}(Y-0.5), \\text{floor}(X-0.5)] \\\\ D = \\text{input}[\\text{ceil}(Y-0.5), \\text{ceil}(X-0.5)] \\\\ \\end{array} $$\n The original implementation of RoIAlign in Detectron doesn&#39;t subtract 0.5 in the end, so it&#39;s actually not very aligned. It turns out this detail does not affect accuracy of R-CNNs, because RoIAlign is applied on CNN features, and CNN is believed to be able to fit slightly misaligned features.\n However, we have new use cases of RoIAlign in other places, e.g. to crop mask head training targets from the ground truth mask, so I fixed it in the detectron2 / torchvision RoIAlign with an   aligned=True option. Its  unittest demonstrates how the old version is misaligned.\n Btw, once we figured out the coordinate transform formula, it&#39;s easy to implement RoIAlign using  F.grid_sample. I had done the exercise and found this 10%-50% slower.\n  Mask R-CNN is trained to predict masks of fixed resolution (e.g. 28x28) restrained inside given boxes (we call it  &#34;RoIMask&#34;). But in the end we often want to obtain full-image masks. A &#34;paste mask&#34; operation is needed to paste the small RoIMask into the given region in the image.\n  This operation is an inverse of RoIAlign, so it should be implemented similar to our derivation above. In Detectron, this  was implemented with some magic rounding &amp; resize that are not exactly the inverse of RoIAlign. Fixing it in detectron2 increases the mask AP by 0.1~0.4.\n  PointRend is a segmentation method we created that focuses on point-wise features.  Pointly-Supervised Instance Segmentation, also from our team, uses point-wise annotations to train segmentation models. Both projects involve heavy use of point sampling and coordinate transforms. Having a clear convention of pixels and coordinates was important to their success.\n  Due to some sloppy code in the early days of deep learning libraries, today we&#39;re facing multiple versions of resize functions. Together with the two different coordinate system conventions, they easily cause hidden bugs in computer vision code.\n This article revisits these historical technical debts and shows how these fun details matter in modeling and training. I hope they will help you make proper choices.", "posttime": "2021-06-19 11:13:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6df1\u5ea6\u5b66\u4e60,\u5b66\u4e60,learning", "title": "\u50cf\u7d20\u5728\u54ea\u91cc\uff1f - \u6df1\u5ea6\u5b66\u4e60\u7684\u89c2\u70b9 ", "title_en": "Where Are Pixels? \u2013 A Deep Learning Perspective", "transed": 1, "url": "https://ppwwyyxx.com/blog/2021/Where-are-Pixels/", "via": "", "real_tags": ["\u6df1\u5ea6\u5b66\u4e60", "\u5b66\u4e60", "learning"]}]