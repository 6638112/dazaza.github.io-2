[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1068526, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6700\u8fd1\u795e\u7ecf\u8f90\u5c04\u573a\uff08NERF\uff09\u5468\u56f4\u7684\u7814\u7a76\u7206\u70b8\u8868\u660e\uff0c\u5728\u795e\u7ecf\u7f51\u7edc\u4e2d\u9690\u5f0f\u5b58\u50a8\u573a\u666f\u548c\u7167\u660e\u4fe1\u606f\u5b58\u5728\u5de8\u5927\u7684\u6f5c\u529b\uff0c\u4f8b\u5982\uff0c\u7528\u4e8e\u65b0\u9896\u7684\u89c6\u56fe\u3002\u7136\u800c\uff0c\u9632\u6b62\u4e86NERF\u7684\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e00\u4e2a\u4e3b\u8981\u9650\u5236\u662f\u6cbf\u7740\u6bcf\u4e2a\u89c6\u56fe\u5149\u7ebf\u7684\u8fc7\u5ea6\u7f51\u7edc\u8bc4\u4f30\u7684\u7981\u6b62\u8ba1\u7b97\u6210\u672c\uff0c\u9700\u8981\u5728\u65e8\u5728\u5728\u5f53\u524d\u8bbe\u5907\u4e0a\u5b9e\u65f6\u6e32\u67d3\u65f6\u9700\u8981\u6570\u5341\u4e2aPetaflops\u3002\u6211\u4eec\u8868\u660e\uff0c\u5f53\u5c40\u90e8\u6837\u54c1\u653e\u7f6e\u5728\u573a\u666f\u4e2d\u7684\u8868\u9762\u5468\u56f4\u65f6\uff0c\u53ef\u4ee5\u663e\u7740\u964d\u4f4e\u6bcf\u4e2a\u89c6\u56fe\u5149\u7ebf\u6240\u9700\u7684\u6837\u672c\u6570\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u4e2a\u6df1\u5ea6Oracle\u7f51\u7edc\uff0c\u5176\u9884\u6d4b\u6bcf\u4e2a\u89c6\u56fe\u5149\u7ebf\u7684\u5149\u7ebf\u6837\u672c\u4f4d\u7f6e\uff0c\u5177\u6709\u5355\u4e2a\u7f51\u7edc\u8bc4\u4f30\u3002\u6211\u4eec\u8868\u660e\uff0c\u5728\u5bf9\u6570\u4e0a\u79bb\u6563\u5316\u548c\u7403\u5f62\u626d\u66f2\u7684\u6df1\u5ea6\u503c\u5468\u56f4\u4f7f\u7528\u5206\u7c7b\u7f51\u7edc\u5bf9\u4e8e\u7f16\u7801\u8868\u9762\u4f4d\u7f6e\u800c\u4e0d\u662f\u76f4\u63a5\u4f30\u8ba1\u6df1\u5ea6\u81f3\u5173\u91cd\u8981\u3002\u8fd9\u4e9b\u6280\u672f\u7684\u7ec4\u5408\u5bfc\u81f4DonerF\uff0c\u53cc\u7f51\u7edc\u8bbe\u8ba1\u5177\u6709\u6df1\u5ea6Oracle\u7f51\u7edc\u4f5c\u4e3a\u7b2c\u4e00\u6b65\u548c\u7528\u4e8e\u5c04\u7ebf\u7d2f\u79ef\u7684\u5c40\u90e8\u91c7\u6837\u7684\u7740\u8272\u7f51\u7edc\u3002\u901a\u8fc7\u6211\u4eec\u7684\u8bbe\u8ba1\uff0c\u4e0eNERF\u76f8\u6bd4\uff0c\u6211\u4eec\u5c06\u63a8\u7406\u6210\u672c\u964d\u4f4e\u81f348\u500d\u3002\u4e0e\u7b80\u5355\u7684\u8ba1\u7b97\u5185\u6838\u7ed3\u5408\u4f7f\u7528\u7684\u6401\u677f\u63a8\u65adAPI\uff0c\u6211\u4eec\u662f\u7b2c\u4e00\u4e2a\u5728\u5355\u4e2aGPU\u4e0a\u4ee5\u4ea4\u4e92\u5f0f\u5e27\u901f\u7387\u5448\u73b0\u57fa\u4e8e\u5149\u7ebf\u7684\u795e\u7ecf\u8868\u793a\uff08\u6bcf\u79d215\u5e27\uff09\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u6211\u4eec\u4e13\u6ce8\u4e8e\u573a\u666f\u7684\u91cd\u8981\u90e8\u5206\uff0c\u56e0\u6b64\u4e0eNERF\u76f8\u6bd4\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u5e73\u7b49\u6216\u66f4\u597d\u7684\u8d28\u91cf\u3002\n          \u7531\u4e8e\u6211\u4eec\u7684\u65b0\u6df1\u5ea6Oracle\u91c7\u6837\u65b9\u6848\uff0cDonerf\u5b9e\u73b0\u4e86\u7c7b\u4f3c\u4e8eNERF\u7684\u8d28\u91cf\uff0c\u5b83\u4f7f\u7528\u4e86\u603b\u5171\u200b\u200b256\u4e2a\u6837\u672c\u3002\u57284\u4e2a\u6837\u672c\uff08\u4e0e\u4e0b\u9762\u7684Nerf\u6bd4\u8f83\uff09\uff0cDonerf\u4ee5\u76f8\u540c\u7684\u8d28\u91cf\u5b9e\u73b0\u4e8620x-48x\u7684\u52a0\u901f\u3002\u5355\u51fb/\u62d6\u52a8\u6ed1\u5757\u4ee5\u6bd4\u8f83Donerf\uff0cNerf\u548c\u5730\u9762\u771f\u76f8\u6405\u62cc\u673a\u6e32\u67d3\u4e4b\u95f4\u7684\u5404\u79cd\u8f93\u51fa\u3002\n            \u6211\u4eec\u7684\u6df1\u5ea6Oracle\u901a\u8fc7\u6cbf\u7ebf\u7684\u7a7a\u95f4\u79bb\u6563\uff0c\u5e76\u6cbf\u7740\u5149\u7ebf\u9884\u6d4b\u91c7\u6837\u6982\u7387\u6765\u9884\u6d4b\u5404\u4e2a\u6f5c\u5728\u7684\u91c7\u6837\u5019\u9009\u8005\u3002 3\u4e2a\u989c\u8272\u901a\u9053\u6cbf\u7740\u5c04\u7ebf\u503c\u7f16\u78013\u4e2a\u6700\u9ad8\u6982\u7387\uff0c\u8bf4\u660e\u53ef\u80fd\u53ea\u6709\u5e94\u8be5\u91c7\u6837\u7684\u5355\u4e2a\u8868\u9762\uff0c\u800c\u5f69\u8272\u503c\u8868\u660e\u6837\u54c1\u9700\u8981\u6df1\u5165\u6269\u5c55\u3002\u5373\u4f7f\u662f\u76f8\u5bf9\u7c97\u7cd9\u7684\u6df1\u5ea6\u9884\u6d4b\u4e5f\u8db3\u4ee5\u4f7fDonerf\u6709\u6548\u5730\u653e\u7f6e\u6837\u54c1\u3002\n      \u6211\u4eec\u4f7f\u7528\u7ffb\u8f6c\u8bef\u5dee\u4f30\u8ba1\u5668\u4ea7\u751f\u9519\u8bef\u5730\u56fe\uff0c\u8fd9\u4e9b\u9519\u8bef\u5730\u56fe\u6a21\u578b\u4eba\u7c7b\u5982\u4f55\u611f\u77e5\uff06\uff0334\u65f6\u4f1a\u611f\u77e5\u9519\u8bef;\u7ffb\u8f6c\uff06\uff0334;\u5728\u56fe\u50cf\u548c\u76ee\u6807\u8f93\u51fa\u4e4b\u95f4\u3002 Donerf\u5728\u663e\u7740\u964d\u4f4e\u7684\u6027\u80fd\u8981\u6c42\u4e0b\u663e\u793a\u4e86\u7c7b\u4f3c\u6216\u66f4\u597d\u7684\u7ed3\u679c\u3002\n           T. Neff\uff0cP. Stadlbauer\uff0cM. Parger\uff0cA.Kurz\uff0cJ.H. H. Mueller\uff0cC. R. A. Chaitanya\uff0cA. Kaplanyan\uff0cM. Steinberger Donerf\uff1a\u4f7f\u7528\u6df1\u5ea6Oracle\u7f51\u7edc\u5b9e\u65f6\u6e32\u67d3\u7d27\u51d1\u7684\u795e\u7ecf\u8f90\u5c04\u9886\u57df\uff08\u5728Arxiv\u4e0a\u6258\u7ba1\uff09\n           \u8fd9\u4e2a\u6a21\u677f\u6700\u521d\u7531Phillip Isola\u548cRichard Zhang\u4e3a\u4e30\u5bcc\u591a\u5f69\u7684ECCV\u9879\u76ee\u5236\u4f5c;\u53ef\u4ee5\u5728\u6b64\u5904\u627e\u5230\u4ee3\u7801\u3002 ", "note_en": "The recent research explosion around Neural Radiance Fields (NeRFs) shows that there is immense potential for implicitly storing scene and lighting information in neural networks, e.g., for novel view generation. However, one major limitation preventing the widespread use of NeRFs is the prohibitive computational cost of excessive network evaluations along each view ray, requiring dozens of petaFLOPS when aiming for real-time rendering on current devices. We show that the number of samples required for each view ray can be significantly reduced when local samples are placed around surfaces in the scene.\tTo this end, we propose a depth oracle network, which predicts ray sample locations for each view ray with a single network evaluation.\tWe show that using a classification network around logarithmically discretized and spherically warped depth values is essential to encode surface locations rather than directly estimating depth. The combination of these techniques leads to DONeRF, a dual network design with a depth oracle network as a first step and a locally sampled shading network for ray accumulation.\tWith our design, we reduce the inference costs by up to 48x compared to NeRF.\tUsing an off-the-shelf inference API in combination with simple compute kernels, we are the first to render raymarching-based neural representations at interactive frame rates (15 frames per second at 800x800) on a single GPU.\tAt the same time, since we focus on the important parts of the scene around surfaces, we achieve equal or better quality compared to NeRF.\n          Due to our novel depth oracle sampling scheme, DONeRF achieves quality similar to  NeRF, which uses a total of 256 samples.\t\t\t\tAt only 4 samples (comparison to NeRF below), DONeRF achieves a speedup of 20x-48x at the same quality. Click / Drag the Sliders to compare various outputs between DONeRF, NeRF and Ground Truth Blender renderings.\n            Our Depth Oracle predicts multiple potential sampling candidates along each ray by discretizing the space along rays and predicting sampling probabilities along rays.\t\t\tThe 3 color channels encode the 3 highest probabilities along the ray - gray values illustrate that there is likely only a single surface that should be sampled, while colorful values indicate that samples need to be spread out in depth.\t\t\tEven a relatively coarse depth prediction is sufficient for DONeRF to place samples efficiently.\n      We use the  FLIP error estimator to produce error maps that model how likely humans would perceive errors when &#34;flipping&#34; between an image and the target output. \t\t\tDONeRF shows similar or better results at significantly lower performance requirements.\n           T. Neff, P. Stadlbauer, M. Parger, A. Kurz, J. H. Mueller, C. R. A. Chaitanya, A. Kaplanyan, M. Steinberger   DONeRF: Towards Real-Time Rendering of Compact Neural Radiance Fields using Depth Oracle Networks \t\t\t\t\t\t\t\t(hosted on  ArXiv)\n           This template was originally made by  Phillip Isola and  Richard Zhang for a  colorful ECCV project; the code can be found  here.", "posttime": "2021-06-29 23:08:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f90\u5c04,real,donerf", "title": "Donerf\uff1a\u8fc8\u5411\u7d27\u51d1\u795e\u7ecf\u8f90\u5c04\u7530\u7684\u5b9e\u65f6\u6e32\u67d3 ", "title_en": "DONeRF: Towards Real-Time Rendering of Compact Neural Radiance Fields", "transed": 1, "url": "https://depthoraclenerf.github.io/", "via": "", "real_tags": ["\u8f90\u5c04", "real", "donerf"]}, {"category": "", "categoryclass": "", "imagename": "8e34bc9889c766a5591cdce8bc4e41a7.png", "infoid": 1068525, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ee5\u592a\u7f51\u5230\u5904\u90fd\u662f\uff0c\u6210\u5343\u4e0a\u4e07\u7684\u786c\u4ef6\u4f9b\u5e94\u5546\u8bf4\u8bdd\u5e76\u5b9e\u65bd\u5b83\u3002\u7136\u800c\uff0c\u51e0\u4e4e\u6bcf\u4e2a\u4ee5\u592a\u7f51\u94fe\u63a5\u90fd\u6709\u4e00\u4e2a\u5e38\u89c1\u7684\u6570\u5b57\uff0cmtu\uff1a\n $ ip l1\uff1alo\uff1a\uff06lt; loopback\uff0cUp\uff0cdepend_up\uff06gt; MTU 65536\u72b6\u6001\u672a\u77e5\u94fe\u63a5/\u73af\u56de00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a\uff06lt;\u5e7f\u64ad\uff0c\u591a\u64ad\uff0cUp\uff0cdepart_up\uff06gt; MTU 1500\u72b6\u6001UP\u94fe\u8def/\u4e59\u919aXX\uff1aXX\uff1aXX\uff1aXX\uff1aXX\uff1aXX BRD FF\uff1aFF\uff1aFF\uff1aFF\uff1aFF\uff1aFF\uff1aFF\n MTU\uff08\u6700\u5927\u4f20\u8f93\u5355\u5143\uff09\u8868\u793a\u5355\u4e2a\u6570\u636e\u5305\u7684\u6570\u91cf\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5f53\u4f60\u5728\u81ea\u5df1\u7684\u5c40\u57df\u7f51\u4e0a\u4e0e\u8bbe\u5907\u4ea4\u8c08\u65f6\uff0cMTU\u5c06\u5927\u7ea61500\u4e2a\u5b57\u8282\uff0c\u4e92\u8054\u7f51\u57281500\u4e0a\u51e0\u4e4e\u666e\u904d\u666e\u904d\u8fd0\u884c\u3002\u4f46\u662f\uff0c\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u8fd9\u4e9b\u94fe\u8def\u5c42\u6280\u672f\u65e0\u6cd5\u4f20\u8f93\u66f4\u5927\u7684\u6570\u636e\u5305\u3002\n \u4f8b\u5982\uff0c802.11\uff08\u66f4\u597d\u79f0\u4e3aWiFi\uff09\u7684MTU\u4e3a2304\u5b57\u8282\uff0c\u6216\u8005\u5982\u679c\u60a8\u7684\u7f51\u7edc\u4f7f\u7528FDDI\uff0c\u5219\u60a8\u53ef\u4ee5\u4f7f\u7528\u5927\u7ea64352\u5b57\u8282\u7684MTU\u3002\u4ee5\u592a\u7f51\u672c\u8eab\u5177\u6709\u201c\u5de8\u578b\u6846\u67b6\u201d\u7684\u6982\u5ff5\uff0c\u5176\u4e2dMTU\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u9ad8\u8fbe9000\u5b57\u8282\uff08\u5728\u652f\u6301NIC\uff0c\u4ea4\u6362\u673a\u548c\u8def\u7531\u5668\u4e0a\uff09\u3002\n \u4f46\u662f\uff0c\u4e92\u8054\u7f51\u4e0a\u51e0\u4e4e\u90fd\u4e0d\u662f\u8fd9\u4e00\u95ee\u9898\u3002\u7531\u4e8e\u4e92\u8054\u7f51\u7684\u9aa8\u5e72\u73b0\u5728\u4e3b\u8981\u7531\u4ee5\u592a\u7f51\u94fe\u8def\u7ec4\u6210\uff0c\u56e0\u6b64\u6570\u636e\u5305\u7684\u6700\u5927\u5927\u5c0f\u73b0\u5728\u975e\u6b63\u5f0f\u5730\u8bbe\u7f6e\u4e3a1500\u4e2a\u5b57\u8282\uff0c\u4ee5\u907f\u514d\u5206\u6bb5\u7684\u6570\u636e\u5305\u3002\n \u5728\u5b83\u7684\u8138\u4e0a1500\u662f\u4e00\u4e2a\u5947\u602a\u7684\u6570\u5b57\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u671f\u671b\u5728\u8ba1\u7b97\u65f6\u9700\u8981\u5927\u91cf\u7684\u5e38\u6570\u6765\u57fa\u4e8e\u6570\u5b66\u5e38\u6570\uff0c\u4f8b\u59822. 1500\u7684\u6743\u529b\uff0c\u4f46\u662f\u7b26\u5408\u5176\u4e2d\u7684\u4efb\u4f55\u6743\u529b\u3002\n   Ethernet\u7684\u9996\u6b21\u91cd\u5927\u7a81\u7834\u5230\u4e16\u754c\u4e0a\u7684\u5f62\u5f0f\u4e3a10Base-2\uff08Cheapernet\uff09\u548c10Base-5\uff08\u7c97\u7ebf\uff09\uff0c\u6570\u5b57\u8868\u793a\u5927\u81f4\u6570\u767e\u7c73\u7684\u5355\u4e2a\u7f51\u6bb5\u53ef\u80fd\u8de8\u8d8a\u3002 \n\u8fd9\u7bc7\u6587\u7ae0\u7684\u5148\u524d\u7248\u672c\u9519\u8bef\u3002\u5982\u679c\u4ecd\u5e0c\u671b\u9605\u8bfb\u5f52\u6863\u7248\u672c\uff0c\u8bf7\u5355\u51fb\u6b64\u5904\n \u7531\u4e8e\u5f53\u65f6\u6709\u8bb8\u591a\u7ade\u4e89\u534f\u8bae\uff0c\u5e76\u4e14\u5b58\u5728\u786c\u4ef6\u9650\u5236\uff0c\u56e0\u6b64\u539f\u59cb\u521b\u5efa\u8005\u5728\u7535\u5b50\u90ae\u4ef6\u4e2d\u6307\u51fa\u4e86\u8be5\u6570\u636e\u5305\u7f13\u51b2\u5b58\u50a8\u5668\u8981\u6c42\u5728Magic 1500\u53f7\u7801\u4e2d\u64ad\u653e\u3002 \uff08\u611f\u8c22@MELED\u5bfb\u627e\u6b64\u95ee\u9898\uff09\n \u56de\u60f3\u8d77\u6765\uff0c\u6700\u5927\u7684\u6700\u5927\u53ef\u80fd\u662f\u66f4\u597d\u7684\uff0c\u4f46\u5982\u679c\u5728\u65e9\u671f\u8fed\u4ee3\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u53ef\u80fd\u4f1a\u963b\u6b62\u5bf9\u4ee5\u592a\u7f51\u7684\u5e7f\u6cdb\u63a5\u53d7\uff0c\u6240\u4ee5\u6211\u5e76\u4e0d\u771f\u6b63\u5173\u6ce8\u3002\n \u7136\u800c\uff0c\u8fd9\u4e0d\u662f\u6574\u4e2a\u6545\u4e8b\u3002 \u201c\u4ee5\u592a\u7f51\uff1a\u672c\u5730\u8ba1\u7b97\u673a\u7f51\u7edc\u7684\u5206\u5e03\u5f0f\u6570\u636e\u5305\u4ea4\u6362\u201d\u7eb8\u5f20\u4ece1980\u5e74\u5f00\u59cb\uff0c\u662f\u7f51\u7edc\u4e0a\u8f83\u5927\u6570\u636e\u5305\u6548\u7387\u6210\u672c\u5206\u6790\u7684\u65e9\u671f\u8bf4\u660e\u3002\u8fd9\u5bf9\u5f53\u65f6\u7684\u4ee5\u592a\u7f51\u5c24\u4e3a\u91cd\u8981\uff0c\u56e0\u4e3a\u4ee5\u592a\u7f51\u5c06\u5728\u6240\u6709\u7cfb\u7edf\u4e4b\u95f4\u5171\u4eab\u76f8\u540c\u7684\u540c\u8f74\u7535\u7f06\uff0c\u6216\u8005\u4f1a\u6709\u4ee5\u592a\u7f51\u96c6\u7ebf\u5668\uff0c\u5b83\u53ea\u53ea\u5141\u8bb8\u4e00\u4e2a\u6570\u636e\u5305\u56f4\u7ed5\u4ee5\u592a\u7f51\u6bb5\u7684\u6240\u6709\u6210\u5458\u4f20\u8f93\u3002\n \u5fc5\u987b\u91c7\u6458\u4e00\u4e2a\u6570\u5b57\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u4e9b\u5171\u4eab\uff08\u6709\u65f6\u5fd9\u788c\uff09\u6bb5\u7684\u4f20\u8f93\u5ef6\u8fdf\u4e0d\u4f1a\u592a\u9ad8\uff0c\u800c\u4e14\u8fd8\u6ca1\u6709\u592a\u5927\u7684\u6570\u636e\u5305\u6807\u9898\u3002 \uff08\u8bf7\u53c2\u9605\u4e0a\u9762\u6709\u5173\u7684\u7eb8\u5f20\u4e0a\u7684\u4e00\u4e9b\u8868\u683c\uff08\u7b2c15-16\u9875\uff09\n \u5b83\u4f3c\u4e4e\u6700\u591a\u7684\u662f\uff0c\u5f53\u65f6\u7684\u5de5\u7a0b\u5e08\u6311\u9009\u4e861500\u4e2a\u5b57\u8282\uff0c\u6216\u5927\u7ea612000\u4f4d\u4f5c\u4e3a\u6700\u597d\u7684\u201c\u5b89\u5168\u201d\u503c\u3002\n \u4ece\u90a3\u65f6\u8d77\uff0c\u5404\u79cd\u5176\u4ed6\u4f20\u8f93\u7cfb\u7edf\u90fd\u5df2\u7ecf\u8fc7\u6765\u4e86\uff0c\u4f46\u5b83\u4eec\u7684\u6700\u4f4eMTU\u503c\u4ecd\u7136\u662f1500\u5b57\u8282\u7684\u4ee5\u592a\u7f51\u3002\u5728\u7f51\u7edc\u4e0a\u5927\u4e8e\u6700\u4f4eMTU\u5c06\u5bfc\u81f4IP\u788e\u7247\uff0c\u6216\u8005\u9700\u8981\u6267\u884c\u8def\u5f84MTU\u68c0\u6d4b\u3002\u4e24\u8005\u90fd\u6709\u81ea\u5df1\u7684\u95ee\u9898\u3002\u5373\u4f7f\u6709\u65f6\u5927\u578b\u64cd\u4f5c\u7cfb\u7edf\u4f9b\u5e94\u5546\u4e22\u5f03\u9ed8\u8ba4MTU\u5728\u751a\u81f3\u751a\u81f3\u66f4\u4f4e\u3002 \n\u6240\u4ee5\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e92\u8054\u7f51\u7684MTU\u4e3b\u8981\u662f\u7531\u4e8e\u9057\u7559\u5ef6\u8fdf\u7f16\u53f7\u548c\u786c\u4ef6\u9650\u5236\u800c\u57281500\u4e0a\u9650\uff0c\u8fd9\u5bf9\u4e8e\u4e92\u8054\u7f51\u6548\u7387\u6709\u591a\u7cdf\u7cd5\uff1f\n  \u5982\u679c\u6211\u4eec\u67e5\u770b\u6765\u81ea\u4e3b\u8981\u4e92\u8054\u7f51\u6d41\u91cf\u4ea4\u6362\u70b9\uff08AMS-IX\uff09\u7684\u6570\u636e\uff0c\u6211\u4eec\u4f1a\u770b\u5230\uff0c\u81f3\u5c1120\uff05\u7684\u4f20\u8f93\u4ea4\u6362\u7684\u6570\u636e\u5305\u662f\u6700\u5927\u5927\u5c0f\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u770b\u5230LAN\u7684\u603b\u6d41\u91cf\uff1a\n  \u5982\u679c\u7ec4\u5408\u8fd9\u4e24\u4e2a\u56fe\u8868\uff0c\u5219\u4f1a\u83b7\u5f97\u5927\u81f4\u5982\u6b64\u7684\u4e1c\u897f\u3002\u8fd9\u662f\u6bcf\u4e2a\u6570\u636e\u5305\u5927\u5c0f\u6876\u7684\u6d41\u91cf\u4e3a\uff1a\n  \u6216\u8005\uff0c\u5982\u679c\u6211\u4eec\u53ea\u770b\u6240\u6709\u8fd9\u4e9b\u4ee5\u592a\u7f51\u524d\u5bfc\u7801\u548c\u6807\u9898\u7684\u6d41\u91cf\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u76f8\u540c\u7684\u56fe\u5f62\uff0c\u4f46\u5177\u6709\u4e0d\u540c\u7684\u5c3a\u5ea6\uff1a\n  \u8fd9\u663e\u793a\u4e86\u6700\u5927\u7684\u6570\u636e\u5305\u7c7b\u7684\u6807\u9898\u4e2d\u7684\u5927\u91cf\u5e26\u5bbd\u3002\u7531\u4e8e\u5cf0\u503c\u6d41\u91cf\u663e\u793a\u4e86\u5927\u7ea6246Gbit / s\u7684\u9876\u90e8\u7684\u6700\u5927\u6570\u636e\u5305\u6876\u8bfb\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe\u5982\u679c\u6211\u4eec\u6709\u673a\u4f1a\u7684\u901f\u5ea6\uff0c\u6211\u4eec\u7684\u5de8\u578b\u6846\u67b6\u5728\u6211\u4eec\u6709\u673a\u4f1a\u4e0a\uff0c\u8fd9\u4e2a\u5f00\u9500\u53ea\u4f1a\u572841Gbit / s\u5de6\u53f3\u3002\n \u4f46\u6211\u60f3\u5230\u8fd9\u4e00\u70b9\uff0c\u8fd9\u8258\u8239\u5728\u66f4\u5e7f\u6cdb\u7684\u4e92\u8054\u7f51\u4e0a\u822a\u884c\u4e86\u8fd9\u4ef6\u4e8b\u3002\u867d\u7136\u4e00\u4e9b\u4e92\u8054\u7f51\u8fd0\u8f93\u8fd0\u8425\u5546\u57289000 MTU\u4e0a\u8fd0\u884c\uff0c\u4f46\u7edd\u5927\u591a\u6570\u6ca1\u6709\uff0c\u5e76\u4e14\u4e92\u8054\u7f51\u7684\u601d\u60f3\u76f8\u5e94\u5730\u5df2\u7ecf\u88ab\u89c4\u6a21\u5730\u663e\u793a\u4e86\u65f6\u95f4\u548c\u65f6\u95f4\uff0c\u4ee5\u81f3\u4e8e\u96be\u4ee5\u56f0\u96be\u3002\n  \u5982\u679c\u60a8\u57281500\u5b57\u8282\u7684\u5386\u53f2\u4e0a\u6709\u66f4\u591a\u7684\u4e0a\u4e0b\u6587\uff0c\u8bf7\u5c06\u5b83\u4eec\u7535\u5b50\u90ae\u4ef6\u5c06\u5176\u7535\u5b50\u90ae\u4ef6\u81f3ethernet1500@benjojo.co.uk\u3002\u53ef\u60b2\u7684\u662f\uff0c\u624b\u518c\uff0c\u90ae\u5bc4\u5217\u8868\u5e16\u5b50\u548c\u5176\u4ed6\u4e0a\u4e0b\u6587\u5728\u6ca1\u6709\u8ddf\u8e2a\u7684\u60c5\u51b5\u4e0b\u5feb\u901f\u6d88\u5931\u3002 \n\u5982\u679c\u4f60\u559c\u6b22\u8fd9\u79cd\u4e1c\u897f\uff0c\u4f60\u53ef\u80fd\u559c\u6b22\u535a\u5ba2\u7684\u5176\u4f59\u90e8\u5206\uff0c\u5373\u4f7f\u5b83\u901a\u5e38\u66f4\u9002\u5408\u6807\u51c6\u7684\u73b0\u4ee3\u6ee5\u7528:)\u3002 \u5982\u679c\u60a8\u60f3\u53ca\u65f6\u4e86\u89e3\u6211\u7684\u63a5\u4e0b\u6765\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u6211\u7684\u535a\u5ba2\u7684RSS Feed\uff0c\u6216\u8005\u60a8\u53ef\u4ee5\u5728Twitter\u4e0a\u5173\u6ce8\u6211 ", "note_en": "Ethernet is everywhere, tens of thousands of hardware vendors speak and implement it. However almost every ethernet link has one number in common, the MTU:\n $ ip l1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 state UNKNOWN link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:002: enp5s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 state UP link/ether xx:xx:xx:xx:xx:xx brd ff:ff:ff:ff:ff:ff\n The MTU (Maximum Transmission Unit) states how big a single packet can be. Generally speaking, when you are talking to devices on your own LAN the MTU will be around 1500 bytes and the internet runs almost universally on 1500 as well. However, this does not mean that these link layer technologies can\u2019t transmit bigger packets.\n For example, 802.11 (better known as WiFi) has a MTU of 2304 bytes, or if your network is using  FDDI then you have a MTU around 4352 bytes. Ethernet itself has the concept of \u201cjumbo frames\u201d, where the MTU can be set up to 9000 bytes (on supporting NICs, Switches and Routers).\n However, almost none of this matters on the internet. Since the backbone of the internet is now mostly made up of ethernet links, the de facto maximum size of a packet is now unofficially set to 1500 bytes to avoid packets being  fragmented down links.\n On the face of it 1500 is a weird number, we would normally expect a lot of constants in computing to be based around mathematical constants, like powers of 2. 1500, however fits none of those.\n   Ethernet\u2019s first major break into the world came in the form of 10BASE-2 (cheapernet) and 10BASE-5 (thicknet), the numbers indicating roughly how many hundred meters a single network segment could span over.\n The previous version of this post was wrong.  Click here if you still wish to read the archived version\n Since there were many competing protocols at the time, and hardware limits existed, the original creator notes this  in an email that the packet buffer memory requirements had some play in the magic 1500 number. (thanks to  @yeled for finding this)\n In retrospect, a longer maximum might have been better, but if itincreased the cost of NICs during the early days it may have preventedthe widespread acceptance of Ethernet, so I\u2019m not really concerned.\n However that is not the whole story. The  \u201cEthernet: Distributed Packet Switching for Local Computer Networks\u201d paper from 1980 is a early note of the efficiency cost analysis of larger packets on a network. This being especially important to ethernet at the time, since ethernet networks would ether be sharing the same coax cable between all systems, or there would be ethernet hubs that would only allow one packet at a time to be transmitted around all members of the ethernet segment.\n A number had to be picked that would mean that transmission latency on these shared (sometimes busy) segments would not be too high, but also that packet header overhead would not be too much. (see some of the tables on the paper linked above on page 15-16)\n It would seem at best that the engineers at the time picked 1500 bytes, or around 12000 bits as the best \u201csafe\u201d value.\n Since then various other transmission systems have come and gone, but the lowest MTU value of them has still been ethernet at 1500 bytes. Going bigger than lowest MTU on a network will either result in IP fragmentation, or the need to do path MTU detection. Both of which have their own sets of problems. Even if sometimes large OS vendors  dropped the default MTU to even lower at times.\n  So now we know that the internet\u2019s MTU is capped at 1500 mostly due to legacy latency numbers and hardware limits, how bad is this for the efficiency of the internet?\n  If we look at data from a major internet traffic exchange point (AMS-IX), we see that at least 20% of packets transiting the exchange are the maximum size. We can also see the total traffic of the LAN:\n  If you combine these two graphs, you get something that roughly looks like this. This is an estimation of how much traffic each packet size bucket is:\n  Or if we look at just the traffic that all of those ethernet preambles and headers cause, we get the same graph but with different scales:\n  This shows a great deal of bandwidth being spent on headers for the largest packet class. Since the peak traffic shows the biggest packet bucket reading at around 246GBit/s of overhead we can assume that if we had all adopted jumbo frames while we had the chance to, this overhead would only be around 41GBit/s.\n But I think at this point, the ship has sailed to do this on the wider internet. While some  internet transport carriers operate on 9000 MTU, the vast majority don\u2019t, and changing the internet\u2019s mind collectively has been shown time and time again to be  prohibitively difficult.\n  If you have more context on the history of 1500 bytes, please email them into  ethernet1500@benjojo.co.uk. Sadly the manuals, mailing list posts, and other context to this are disappearing fast without a trace.\n  If you liked this kind of stuff, you may like the  rest of the blog even if it is generally more geared towards the modern day abuses of standards :). If you want to stay up to date with what I do next you can use my blog\u2019s  RSS Feed or you can  follow me on twitter", "posttime": "2021-06-29 23:07:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,\u6210\u4e3a,mtu", "title": "1500\u5b57\u8282\u5982\u4f55\u6210\u4e3a\u4e92\u8054\u7f51\u7684MTU\uff082020\uff09 ", "title_en": "How 1500 bytes became the MTU of the Internet (2020)", "transed": 1, "url": "https://blog.benjojo.co.uk/post/why-is-ethernet-mtu-1500", "via": "", "real_tags": ["2020", "\u6210\u4e3a", "mtu"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068524, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "TL; DR\uff1a\u5728\u8fc1\u79fb\u671f\u95f4\uff0c\u4e00\u4e2a\u7834\u574f\u8005\u88ab\u5220\u9664\u7684Newsblur\u7684MongoDB\u6570\u636e\u5e93\u3002\u6ca1\u6709\u88ab\u76d7\u6216\u4e22\u5931\u7684\u6570\u636e\u3002\n \u6211\u6b63\u5728\u5c06\u65b0\u95fb\u7b56\u7565\u4e2d\u7684\u4e00\u5207\u79fb\u52a8\u5230Depcker\u5bb9\u5668\uff0c\u4ee5\u4fbf\u5728\u4e0b\u5468\u63a8\u51fa\u7684\u5927\u91cd\u65b0\u8bbe\u8ba1\u3002\u8fd9\u662f\u7ef4\u62a4\u7684\u4e00\u5e74\uff0c\u6211\u4eab\u53d7\u4e86Ansible + Docker\u7684\u679c\u5b9e\uff0c\u7528\u4e8eNewsblur\u76845\u4e2a\u6570\u636e\u5e93\u670d\u52a1\u5668\uff08PostgreSQL\uff0cMongoDB\uff0cRedis\uff0cElasticsearch\u548cSoon ML Models\uff09\u3002\u8fd9\u4e00\u5929\u6b63\u5728\u5305\u88c5\uff0c\u5f53\u6211\u5728\u624b\u673a\u4e0a\u6536\u5230\u4e00\u4e2a\u5947\u602a\u7684\u65b0\u95fb\u535a\u5c14\u9519\u8bef\u65f6\uff0c\u6211\u4f1a\u878d\u5165\u4e00\u672c\u5173\u4e8e\u5982\u4f55\u9a6f\u670d\u673a\u5668\u7684\u65b0\u4e66\u3002\n  \u8bda\u5b9e\u7684\u662f\uff0c\u5728\u6211\u60f3\u518d\u6b21\u770b\u5230\u7684\u90a3\u4e9b\u9519\u8bef\u6d88\u606f\u4e2d\u6ca1\u6709\u4e00\u5957\u5355\u8bcd\u3002\u5728\u90a3\u6761\u9519\u8bef\u6d88\u606f\u4e2d\u5220\u9664\u4e86\u4ec0\u4e48\uff1f\u66f4\u597d\u5730\u627e\u51fa\u7b54\u6848\u3002\n \u767b\u5f55MongoDB\u673a\u5668\u4ee5\u67e5\u770bDB\u6240\u5728\u7684\u72b6\u6001\uff0c\u6211\u9047\u5230\u4ee5\u4e0b\u5185\u5bb9......\n nbset\uff1aprimary\uff06gt; Show DBS Read_to_To_Recover_your_data 0.000 GB NewsBlur 0.718 GB NBset\uff1aPrimary\uff06Gt;\u4f7f\u7528read__me_to_recover_your_data\u5207\u6362\u5230db read_to_to_recover_your_data nbset\uff1aprimary\uff06gt; D b \u3002\u81ea\u8ff0\u3002 find\uff08\uff09{\uff06\uff0334; _id\uff06\uff0334; \uff1aObjectID\uff08\uff06\uff0334; 60d3e112ac48d82047aab95d\uff06\uff0334;\uff09\uff0c\uff06\uff0334;\u5185\u5bb9\uff06\uff0334; \uff1a\uff06\uff0334;\u60a8\u7684\u6240\u6709\u6570\u636e\u90fd\u662f\u5907\u4efd\u3002\u60a8\u5fc5\u987b\u652f\u4ed80.03 BTC\u5230XXXXXXXXXX 48\u5c0f\u65f6\u4ee5\u8fdb\u884c\u6062\u590d\u3002\u572848\u5c0f\u65f6\u540e\u5230\u671f\u540e\uff0c\u6211\u4eec\u5c06\u6cc4\u9732\u5e76\u66b4\u9732\u6240\u6709\u6570\u636e\u3002\u5728\u62d2\u7edd\u652f\u4ed8\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u8054\u7cfb\u4e00\u822c\u6570\u636e\u4fdd\u62a4\u89c4\u5219\uff0cGDPR\u5e76\u901a\u77e5\u4ed6\u4eec\u4ee5\u6253\u5f00\u7684\u5f62\u5f0f\u5b58\u50a8\u7528\u6237\u6570\u636e\uff0c\u5e76\u4e0d\u5b89\u5168\u3002\u5728\u6cd5\u5f8b\u89c4\u5219\u4e0b\uff0c\u60a8\u9762\u4e34\u6c89\u91cd\u6216\u902e\u6355\uff0c\u60a8\u7684\u57fa\u7840\u8f6c\u50a8\u5c06\u4ece\u6211\u4eec\u7684\u670d\u52a1\u5668\u4e2d\u5220\u9664\uff01\u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u8d2d\u4e70\u6bd4\u7279\u5e01\uff0c\u4e0d\u9700\u8981\u82b1\u8d39\u5f88\u591a\u65f6\u95f4\u8d2d\u4e70https://localbitoins.com\u6216https://buy.moonpay.io/\u5728\u7528db ip\u7684\u90ae\u4ef6\u4e2d\u5411\u6211\u5199\u4fe1\u540e\uff1afthisguy@recoverme.one\u548c\u60a8\u5c06\u6536\u5230\u4e00\u4e2a\u94fe\u63a5\u4ee5\u4e0b\u8f7d\u6570\u636e\u5e93\u8f6c\u50a8\u3002 \uff06\uff0334; }\n   \u53d1\u751f\u5728\u6b64\u4e4b\u524d\u4e09\u4e2a\u534a\u5c0f\u65f6\uff0c\u6211\u5c06MongoDB\u96c6\u7fa4\u5207\u6362\u5230\u65b0\u670d\u52a1\u5668\u3002\u5f53\u6211\u8fd9\u6837\u505a\u65f6\uff0c\u6211\u5173\u95ed\u4e86\u539f\u59cb\u6863\u6b21\uff0c\u4ee5\u4fbf\u5728\u51e0\u5929\u5185\u5220\u9664\u5b83\u3002\u5e76\u4e14\u8c22\u5929\u8c22\u5730\uff0c\u6211\u786e\u5b9e\u5982\u6b64\uff0c\u56e0\u4e3a\u5b83\u5728\u51e0\u4e2a\u5c0f\u65f6\u4e4b\u540e\u8fdb\u5165\u3002\u77e5\u9053\u8fd9\u4e00\u70b9\uff0c\u6211\u610f\u8bc6\u5230\u9ed1\u5ba2\u65e0\u6cd5\u5728\u8fd9\u4e48\u5c11\u7684\u65f6\u95f4\u5185\u62ff\u8d70\u6240\u6709\u8fd9\u4e9b\u6570\u636e\u3002\n \u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u60f3\u56de\u7b54\u4e00\u4e9b\u5173\u4e8e\u8fd9\u91cc\u53d1\u751f\u7684\u4e8b\u60c5\u7684\u95ee\u9898\u3002 \n\u8ba9\u6211\u4eec\u9996\u5148\u8c08\u8bba\u6700\u91cd\u8981\u7684\u95ee\u9898\uff0c\u8fd9\u662f\u4f60\u7684\u6570\u636e\u53d1\u751f\u7684\u4e8b\u60c5\u3002\n  \u6211\u53ef\u4ee5\u660e\u786e\u5730\u5199\u4e0b\uff0c\u5728\u9ed1\u5ba2\u65f6\u6ca1\u6709\u6cc4\u9732\u4efb\u4f55\u6570\u636e\u3002\u6211\u77e5\u9053\u8fd9\u4e00\u70b9\u662f\u56e0\u4e3a\u4e24\u7ec4\u4e0d\u540c\u7684\u65e5\u5fd7\uff0c\u663e\u793a\u81ea\u52a8\u653b\u51fb\u8005\u53ea\u53d1\u5e03\u5220\u9664\u547d\u4ee4\uff0c\u5e76\u4e14\u6ca1\u6709\u4f20\u8f93MongoDB\u670d\u52a1\u5668\u7684\u4efb\u4f55\u6570\u636e\u3002\n   \u60a8\u53ef\u4ee5\u60f3\u8c61\u6211\u57289:35\u7684\u56db\u5341\u5206\u949f\u5185\u7ecf\u5386\u7684\u538b\u529b\uff0c\u5f53\u9ed1\u5ba2\u5f00\u59cb\u65f6\uff0c10\uff1a15p\uff0c\u5f53\u8bc6\u522b\u51fa\u65b0\u9c9c\u5907\u4efd\u5feb\u7167\u5e76\u6295\u5165\u9f7f\u8f6e\u65f6\u3002\u8ba9\u6211\u4eec\u51fb\u7a7f\u6bcf\u4e00\u523b\uff1a\n 6\uff1a10P\uff1a\u65b0\u7684DB-Mongo1\u670d\u52a1\u5668\u4f5c\u4e3aMongoDB\u4e3b\u670d\u52a1\u5668\u8fdb\u884c\u65cb\u8f6c\u3002\u8fd9\u53f0\u673a\u5668\u662f\u7b2c\u4e00\u4e2a\u65b0\u7684\uff0c\u5373\u5c06\u79c1\u4e0b\u7684\u4e91\u3002\n  9\uff1a35P\uff1a\u4e09\u5c0f\u65f6\u540e\uff0c\u81ea\u52a8\u9ed1\u5ba2\u5c1d\u8bd5\u6253\u5f00\u4e0eDB-Mongo1\u670d\u52a1\u5668\u7684\u8fde\u63a5\uff0c\u5e76\u7acb\u5373\u4e22\u5f03\u6570\u636e\u5e93\u3002\u505c\u673a\u65f6\u95f4\u3002\n  10\uff1a15P\uff1a\u5728\u524d\u4e3b\u670d\u52a1\u5668\u53ef\u4ee5\u65cb\u8f6c\u4e4b\u524d\uff0c\u8fdb\u884c\u4e86\u4e00\u4e2a\u670d\u52a1\u5668\u7684\u5feb\u7167\uff0c\u4ee5\u786e\u4fdd\u5907\u4efd\u5728\u91cd\u65b0\u8fde\u63a5\u65f6\u4e0d\u4f1a\u5220\u9664\u3002\u8fd9\u82b1\u4e86\u51e0\u4e2a\u5c0f\u65f6\u7684\u505c\u673a\u65f6\u95f4\uff0c\u4f46\u901a\u8fc7\u4e0d\u5f3a\u8feb\u6211\u8fdb\u5165\u65e5\u5e38\u5907\u4efd\u6863\u6848\u7684\u4e00\u5929\u7684\u6570\u636e\u5360\u636e\u4e86\u8fd118\u5c0f\u65f6\u7684\u6570\u636e\u3002\n  3\uff1a00a\uff1a\u5feb\u7167\u5b8c\u6210\uff0c\u4ece\u539f\u59cb\u670d\u52a1\u5668\u5230\u65b0DB-Mongo1\u7684\u590d\u5236\u5f00\u59cb\u3002\u60a8\u5728\u4e0b\u4e2a\u5c0f\u65f6\u5185\u770b\u5230\u7684\u662f\u5728\u5e26\u5bbd\u65b9\u9762\u8f6c\u79fbDB\u7684\u8f6c\u79fb\u3002 \n4\uff1a30A\uff1a\u590d\u5236\uff0c\u8be5\u590d\u5236\u6765\u81ea\u65e7\u4e3b\u670d\u52a1\u5668\uff0c\u5b8c\u6210\uff0c\u73b0\u5728\u590d\u5236\u5728\u65b0\u4ecb\u7ecd\u65f6\u5f00\u59cb\u51fa\u7ad9\u3002 Newsblur\u73b0\u5728\u5907\u4efd\u4e86\u3002\n \u4e0a\u56fe\u6700\u91cd\u8981\u7684\u4fe1\u606f\u8868\u660e\u6211\u4eec\u662f\u5728\u5e26\u5bbd\u65b9\u9762\u7684\u5b8c\u6574\u6570\u636e\u5e93\u4f20\u8f93\u7684\u6837\u5b50\u3002\u4ece6p\u52309\uff1a30p\uff0c\u6570\u636e\u91cf\u662f\u6765\u81ea\u5de5\u4f5c\u4e3b\u670d\u52a1\u5668\u7684\u9884\u671f\u91d1\u989d\uff0c\u5176\u4e2d\u5305\u542b\u591a\u4e2a\u501f\u8c03\u5b83\u3002\u57283A\u65f6\uff0c\u60a8\u4f1a\u770b\u5230\u8f6c\u79fb\u5927\u91cf\u6570\u636e\u3002\n \u8fd9\u544a\u8bc9\u6211\u4eec\uff0c\u9ed1\u5ba2\u662f\u4e00\u79cd\u81ea\u52a8\u5316\u7684\u6570\u5b57\u7834\u574f\uff0c\u800c\u4e0d\u662f\u4e00\u56e2\u4e00\u6b21\u7684\u9ed1\u5ba2\u5c1d\u8bd5\u3002\u5982\u679c\u6211\u4eec\u8981\u652f\u4ed8\u8d4e\u91d1\uff0c\u90a3\u5c31\u4e0d\u4f1a\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u56e0\u4e3a\u7834\u574f\u8005\u6ca1\u6709\u6570\u636e\u5e76\u6ca1\u6709\u4efb\u4f55\u53ef\u91ca\u653e\u3002\n \u6211\u4eec\u4e5f\u53ef\u4ee5\u63a8\u7406\u56e0\u5728\u7801\u5934\u5bb9\u5668\u4e2d\u4f7f\u7528\u6700\u8fd1\u7248\u672c\u7684MongoDB\uff0c\u56e0\u6b64\u65e0\u6cd5\u8bbf\u95eeMongoDB\u4e4b\u5916\u7684\u670d\u52a1\u5668\u5916\u7684\u4efb\u4f55\u6587\u4ef6\u3002\u9664\u975e\u653b\u51fb\u8005\u53ef\u4ee5\u8bbf\u95eeMongoDB\u548cDocker\u4e24\u5929\uff0c\u5426\u5219\u5b83\u4eec\u975e\u5e38\u4e0d\u53ef\u80fd\u7a81\u7834MongoDB\u670d\u52a1\u5668\u8fde\u63a5\u3002\n \u5f53\u670d\u52a1\u5668\u662f\u5feb\u7167\u65f6\uff0c\u6211\u4f7f\u7528\u90a3\u4e2a\u65f6\u95f4\u6765\u5f04\u6e05\u695a\u9ed1\u5ba2\u5982\u4f55\u8fdb\u5165\u3002\n  \u62d2\u7eddUFW\u9632\u706b\u5899\uff0c\u6211\u542f\u7528\u5e76\u52aa\u529b\u4fdd\u6301\u4e25\u683c\u7684allowlist\uff0c\u53ea\u6709\u6211\u7684\u5185\u90e8\u670d\u52a1\u5668\u7531\u4e8e\u7801\u5934\u4eea\u800c\u5728\u65b0\u670d\u52a1\u5668\u4e0a\u6ca1\u6709\u5de5\u4f5c\u3002\u5f53\u6211\u96c6\u88c5\u7bb1MongoDB\u65f6\uff0cDocker\u6709\u52a9\u4e8e\u5c06\u5141\u8bb8\u89c4\u5219\u63d2\u5165iptables\uff0c\u5411\u4e16\u754c\u5f00\u653eMongoDB\u3002\u6240\u4ee5\uff0c\u867d\u7136\u6211\u7684\u9632\u706b\u5899\u662f\u201c\u6d3b\u8dc3\u201d\u7684\uff0c\u4f46\u505a\u4e00\u4e2asudo iptables -l | Grep 27017\u8868\u660eMongoDB\u5f00\u653e\u4e86\u4e16\u754c\u3002\u81ea2014\u5e74\u4ee5\u6765\uff0c\u8fd9\u662f\u4e00\u4e2a\u7801\u5934\u811a\u67aa\u3002\n \u8981\u8bda\u5b9e\uff0c\u6211\u6709\u70b9\u60ca\u8bb6\uff0c\u5f53\u6211\u7ffb\u8f6c\u5f00\u5173\u65f6\uff0c\u5b83\u8d85\u8fc7\u4e863\u4e2a\u5c0f\u65f6\uff0c\u5f53\u4e00\u4e2a\u9ed1\u5ba2/\u7834\u574f\u8005\u7684MongoDB\u96c6\u5408\u65f6\uff0c\u5b83\u4f1a\u5047\u88c5\u8d4e\u91d1\u7ea6250GB\u7684\u6570\u636e\u3002\u8fd9\u662f\u81ea\u52a8\u9ed1\u5ba2\u7684\u5de5\u4f5c\uff0c\u4ee5\u53ca\u6211\u51c6\u5907\u7684\u3002\u4e00\u65e6\u5907\u4efd\u6062\u590d\uff0c\u5907\u7528\u5907\u7528\u5b54\u88ab\u4fee\u8865\u4e86\uff0c\u65b0\u95fb\u535a\u5c14\u5728\u7f51\u4e0a\u56de\u6765\u4e86\u3002 \nWarning: Can only detect less than 5000 characters\n\u7b2c\u4e00\u6b21\u6539\u53d8\u662f\u4e00\u79cd\u8bbd\u523a\u610f\u5473\u7684\u662f\uff0c\u6211\u4eec\u6b63\u5728\u642c\u5230\u7684\u8fc7\u7a0b\u4e2d\u3002 VPC\u662f\u865a\u62df\u79c1\u6709\u4e91\uff0c\u53ef\u8ba9\u5173\u952e\u670d\u52a1\u5668\u514d\u53d7\u4e13\u7528\u7f51\u7edc\u4e2d\u7684\u5176\u4ed6\u670d\u52a1\u5668\u53ef\u8bbf\u95ee\u3002\u4f46\u5728\u79fb\u52a8\u5230\u79c1\u4eba\u7f51\u7edc\u65f6\uff0c\u6211\u9700\u8981\u8fc1\u79fb\u516c\u5f00\u53ef\u8bbf\u95ee\u7684\u673a\u5668\u7684\u6240\u6709\u6570\u636e\u3002\u8fd9\u662f\u8be5\u8fc7\u7a0b\u7684\u7b2c\u4e00\u6b65\u3002\n \u7b2c\u4e8c\u4e2a\u53d8\u5316\u662f\u5728\u6240\u6709\u6570\u636e\u5e93\u4e0a\u4f7f\u7528\u6570\u636e\u5e93\u7528\u6237\u8eab\u4efd\u9a8c\u8bc1\u3002\u6211\u4eec\u4e00\u76f4\u4f9d\u9760\u9632\u706b\u5899\u6765\u4fdd\u62a4\u9632\u6b62\u5a01\u80c1\uff0c\u4f46\u662f\u5f53\u9632\u706b\u5899\u9ed8\u9ed8\u5730\u5931\u8d25\u65f6\uff0c\u6211\u4eec\u88ab\u63ed\u9732\u4e86\u3002\u73b0\u5728\u8c01\u8bf4\uff0c\u5982\u679c\u9632\u706b\u5899\u5931\u8d25\u4f46\u662f\u8eab\u4efd\u9a8c\u8bc1\u5df2\u7ecf\u5230\u4f4d\uff0c\u8fd9\u5c06\u88ab\u6355\u83b7\u3002\u6211\u6000\u7591\u5bc6\u7801\u9700\u8981\u957f\u65f6\u95f4\u8db3\u4ee5\u4e0d\u88ab\u5f3a\u5236\u5f3a\u5236\uff0c\u56e0\u4e3a\u6700\u7ec8\u77e5\u9053\u4e00\u4e2a\u6253\u5f00\u4f46\u5bc6\u7801\u53d7\u5230\u4fdd\u62a4\u7684\u6570\u636e\u5e93\uff0c\u5b83\u53ef\u80fd\u6700\u7ec8\u5728\u5217\u8868\u4e0a\u3002\n \u6700\u540e\uff0c\u9700\u8981\u8fdb\u884c\u66f4\u6539\uff0c\u6839\u636e\u54ea\u4e2a\u6570\u636e\u5e93\u7528\u6237\u6709\u6743\u5220\u9664\u6570\u636e\u5e93\u3002\u5927\u591a\u6570\u6570\u636e\u5e93\u7528\u6237\u53ea\u9700\u8981\u8bfb\u5199\u6743\u9650\u3002\u7406\u60f3\u5c06\u662f\u4ec5\u5141\u8bb8\u5141\u8bb8\u7684\u552f\u4e00\u7528\u6237\u6267\u884c\u6f5c\u5728\u7684\u7834\u574f\u6027\u52a8\u4f5c\u3002\u5982\u679crogue\u6570\u636e\u5e93\u7528\u6237\u5f00\u59cb\u5220\u9664\u6545\u4e8b\uff0c\u5219\u4f1a\u6bd4\u7acb\u5373\u4e22\u5f03\u7684\u6570\u636e\u5e93\u901f\u5ea6\u66f4\u5feb\u5730\u6ce8\u610f\u5230\u8fd9\u4e00\u70b9\u3002\n \u4f46\u8fd9\u4e9b\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u53ea\u662f\u4e00\u7247\u9632\u5fa1\u6218\u7565\u3002\u6b63\u5982\u8fd9\u826f\u597d\u7684\u9ed1\u5ba2\u65b0\u95fb\u7ebf\u8def\u4ece\u9ed1\u5ba2\u53d1\u5e03\u6240\u6e05\u695a\u7684\u90a3\u4e00\u5929\uff0c\u4e00\u4e2a\u9002\u5f53\u7684\u9632\u5fa1\u7b56\u7565\u6c38\u8fdc\u4e0d\u4f1a\u4f9d\u8d56\u4e00\u4e2a\u826f\u597d\u7684\u8bbe\u7f6e\u5c42\u3002\u5bf9\u4e8eNewsblur\uff0c\u8fd9\u5c42\u56fe\u5c42\u662f\u4e00\u4e2a\u53ea\u6709\u5141\u8bb8\u7684\u9632\u706b\u5899\uff0c\u76f4\u5230\u5b83\u6ca1\u6709\u5b8c\u7f8e\u5730\u8fd0\u4f5c\u3002\n \u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u771f\u6b63\u7684\u82f1\u96c4\u662f\u5907\u4efd\u3002\u5e38\u89c4\uff0c\u7ecf\u8fc7\u826f\u597d\u7684\u5907\u4efd\u662f\u4efb\u4f55Web\u670d\u52a1\u7684\u5fc5\u8981\u7ec4\u4ef6\u3002\u56e0\u6b64\uff0c\u6211\u5c06\u51c6\u5907\u5728\u672c\u5468\u665a\u4e9b\u65f6\u5019\u63a8\u51fa\u5927\u578b\u65b0\u95fb\u535a\u5c14\u91cd\u65b0\u8bbe\u8ba1\u3002 ", "note_en": "tl;dr: A vandal deleted NewsBlur\u2019s MongoDB database during a migration. No data was stolen or lost.\n I\u2019m in the process of moving everything on NewsBlur over to Docker containers in prep for a  big redesign launching next week. It\u2019s been a great year of maintenance and I\u2019ve enjoyed the fruits of Ansible + Docker for NewsBlur\u2019s 5 database servers (PostgreSQL, MongoDB, Redis, Elasticsearch, and soon ML models). The day was wrapping up and I settled into  a new book on how to tame the machines once they\u2019re smarter than us when I received a strange NewsBlur error on my phone.\n  There is honestly no set of words in that error message that I ever want to see again. What is  drop doing in that error message? Better go find out.\n Logging into the MongoDB machine to check out what state the DB is in and I come across the following\u2026\n nbset : PRIMARY &gt;  show  dbs READ__ME_TO_RECOVER_YOUR_DATA  0.000 GB newsblur  0.718 GB nbset : PRIMARY &gt;  use  READ__ME_TO_RECOVER_YOUR_DATA switched  to  db  READ__ME_TO_RECOVER_YOUR_DATA  nbset : PRIMARY &gt;  db . README . find () {  &#34; _id &#34;  :  ObjectId ( &#34; 60d3e112ac48d82047aab95d &#34; ),  &#34; content &#34;  :  &#34; All your data is a backed up. You must pay 0.03 BTC to XXXXXXFTHISGUYXXXXXXX 48 hours for recover it. After 48 hours expiration we will leaked and exposed all your data. In case of refusal to pay, we will contact the General Data Protection Regulation, GDPR and notify them that you store user data in an open form and is not safe. Under the rules of the law, you face a heavy fine or arrest and your base dump will be dropped from our server! You can buy bitcoin here, does not take much time to buy https://localbitcoins.com or https://buy.moonpay.io/ After paying write to me in the mail with your DB IP: FTHISGUY@recoverme.one and you will receive a link to download your database dump. &#34;  }\n   Three and a half hours before this happened, I switched the MongoDB cluster over to the new servers. When I did that, I shut down the original primary in order to delete it in a few days when all was well. And thank goodness I did that as it came in handy a few hours later. Knowing this, I realized that the hacker could not have taken all that data in so little time.\n With that in mind, I\u2019d like to answer a few questions about what happened here.\n  Let\u2019s start by talking about the most important question of all which is what happened to your data.\n  I can definitively write that no data was leaked during the hack. I know this because of two different sets of logs showing that the automated attacker only issued deletion commands and did not transfer any data off of the MongoDB server.\n   You can imagine the stress I experienced in the forty minutes between 9:35p, when the hack began, and 10:15p, when the fresh backup snapshot was identified and put into gear. Let\u2019s breakdown each moment:\n 6:10p: The new db-mongo1 server was put into rotation as the MongoDB primary server. This machine was the first of the new, soon-to-be private cloud.\n  9:35p: Three hours later an automated hacking attempt opened a connection to the db-mongo1 server and immediately dropped the database. Downtime ensued.\n  10:15p: Before the former primary server could be placed into rotation, a snapshot of the server was made to ensure the backup would not delete itself upon reconnection. This cost a few hours of downtime, but saved nearly 18 hours of a day\u2019s data by not forcing me to go into the daily backup archive.\n  3:00a: Snapshot completes, replication from original primary server to new db-mongo1 begins. What you see in the next hour and a half is what the transfer of the DB looks like in terms of bandwidth.\n  4:30a: Replication, which is inbound from the old primary server, completes, and now replication begins outbound on the new secondaries. NewsBlur is now back up.\n The most important bit of information the above chart shows us is what a full database transfer looks like in terms of bandwidth. From 6p to 9:30p, the amount of data was the expected amount from a working primary server with multiple secondaries syncing to it. At 3a, you\u2019ll see an enormous amount of data transfered.\n This tells us that the hacker was an automated digital vandal rather than a concerted hacking attempt. And if we were to pay the ransom, it wouldn\u2019t do anything because the vandals don\u2019t have the data and have nothing to release.\n We can also reason that the vandal was not able to access any files that were on the server outside of MongoDB due to using a recent version of MongoDB in a Docker container. Unless the attacker had access to a 0-day to both MongoDB and Docker, it is highly unlikely they were able to break out of the MongoDB server connection.\n While the server was being snapshot, I used that time to figure out how the hacker got in.\n  Turns out the ufw firewall I enabled and diligently kept on a strict allowlist with only my internal servers didn\u2019t work on a new server because of Docker. When I containerized MongoDB, Docker helpfully inserted an allow rule into iptables, opening up MongoDB to the world. So while my firewall was \u201cactive\u201d, doing a  sudo iptables -L | grep 27017 showed that MongoDB was open the world. This has been  a Docker footgun since 2014.\n To be honest, I\u2019m a bit surprised it took over 3 hours from when I flipped the switch to when a hacker/vandal dropped NewsBlur\u2019s MongoDB collections and pretended to ransom about 250GB of data. This is the work of an automated hack and one that I was prepared for. NewsBlur was back online a few hours later once the backups were restored and the Docker-made hole was patched.\n It would make for a much more dramatic read if I was hit through a vulnerability in Docker instead of a footgun. By having Docker silently override the firewall, Docker has made it easier for developers who want to open up ports on their containers at the expense of security. Better would be for Docker to issue a warning when it detects that the most popular firewall on Linux is active and filtering traffic to a port that Docker is about to open.\n  The second reason we know that no data was taken comes from looking through the MongoDB access logs. With these rich and verbose logging sources we can invoke a pretty neat command to find everybody who is not one of the 100 known NewsBlur machines that has accessed MongoDB.\n $ cat /var/log/mongodb/mongod.log | egrep -v &#34;159.65.XX.XX|161.89.XX.XX|&lt;&lt; SNIP: A hundred more servers &gt;&gt;&#34;2021-06-24T01:33:45.531+0000 I NETWORK [listener] connection accepted from 171.25.193.78:26003 #63455699 (1189 connections now open)2021-06-24T01:33:45.635+0000 I NETWORK [conn63455699] received client metadata from 171.25.193.78:26003 conn63455699: { driver: { name: &#34;PyMongo&#34;, version: &#34;3.11.4&#34; }, os: { type: &#34;Linux&#34;, name: &#34;Linux&#34;, architecture: &#34;x86_64&#34;, version: &#34;5.4.0-74-generic&#34; }, platform: &#34;CPython 3.8.5.final.0&#34; }2021-06-24T01:33:46.010+0000 I NETWORK [listener] connection accepted from 171.25.193.78:26557 #63455724 (1189 connections now open)2021-06-24T01:33:46.092+0000 I NETWORK [conn63455724] received client metadata from 171.25.193.78:26557 conn63455724: { driver: { name: &#34;PyMongo&#34;, version: &#34;3.11.4&#34; }, os: { type: &#34;Linux&#34;, name: &#34;Linux&#34;, architecture: &#34;x86_64&#34;, version: &#34;5.4.0-74-generic&#34; }, platform: &#34;CPython 3.8.5.final.0&#34; }2021-06-24T01:33:46.500+0000 I NETWORK [conn63455724] end connection 171.25.193.78:26557 (1198 connections now open)2021-06-24T01:33:46.533+0000 I NETWORK [conn63455699] end connection 171.25.193.78:26003 (1200 connections now open)2021-06-24T01:34:06.533+0000 I NETWORK [listener] connection accepted from 185.220.101.6:10056 #63456621 (1266 connections now open)2021-06-24T01:34:06.627+0000 I NETWORK [conn63456621] received client metadata from 185.220.101.6:10056 conn63456621: { driver: { name: &#34;PyMongo&#34;, version: &#34;3.11.4&#34; }, os: { type: &#34;Linux&#34;, name: &#34;Linux&#34;, architecture: &#34;x86_64&#34;, version: &#34;5.4.0-74-generic&#34; }, platform: &#34;CPython 3.8.5.final.0&#34; }2021-06-24T01:34:06.890+0000 I NETWORK [listener] connection accepted from 185.220.101.6:21642 #63456637 (1264 connections now open)2021-06-24T01:34:06.962+0000 I NETWORK [conn63456637] received client metadata from 185.220.101.6:21642 conn63456637: { driver: { name: &#34;PyMongo&#34;, version: &#34;3.11.4&#34; }, os: { type: &#34;Linux&#34;, name: &#34;Linux&#34;, architecture: &#34;x86_64&#34;, version: &#34;5.4.0-74-generic&#34; }, platform: &#34;CPython 3.8.5.final.0&#34; }2021-06-24T01:34:08.018+0000 I COMMAND [conn63456637] dropDatabase config - starting2021-06-24T01:34:08.018+0000 I COMMAND [conn63456637] dropDatabase config - dropping 1 collections2021-06-24T01:34:08.018+0000 I COMMAND [conn63456637] dropDatabase config - dropping collection: config.transactions2021-06-24T01:34:08.020+0000 I STORAGE [conn63456637] dropCollection: config.transactions (no UUID) - renaming to drop-pending collection: config.system.drop.1624498448i1t-1.transactions with drop optime { ts: Timestamp(1624498448, 1), t: -1 }2021-06-24T01:34:08.029+0000 I REPL [replication-14545] Completing collection drop for config.system.drop.1624498448i1t-1.transactions with drop optime { ts: Timestamp(1624498448, 1), t: -1 } (notification optime: { ts: Timestamp(1624498448, 1), t: -1 })2021-06-24T01:34:08.030+0000 I STORAGE [replication-14545] Finishing collection drop for config.system.drop.1624498448i1t-1.transactions (no UUID).2021-06-24T01:34:08.030+0000 I COMMAND [conn63456637] dropDatabase config - successfully dropped 1 collections (most recent drop optime: { ts: Timestamp(1624498448, 1), t: -1 }) after 7ms. dropping database2021-06-24T01:34:08.032+0000 I REPL [replication-14546] Completing collection drop for config.system.drop.1624498448i1t-1.transactions with drop optime { ts: Timestamp(1624498448, 1), t: -1 } (notification optime: { ts: Timestamp(1624498448, 5), t: -1 })2021-06-24T01:34:08.041+0000 I COMMAND [conn63456637] dropDatabase config - finished2021-06-24T01:34:08.398+0000 I COMMAND [conn63456637] dropDatabase newsblur - starting2021-06-24T01:34:08.398+0000 I COMMAND [conn63456637] dropDatabase newsblur - dropping 37 collections&lt;&lt; SNIP: It goes on for a while... &gt;&gt;2021-06-24T01:35:18.840+0000 I COMMAND [conn63456637] dropDatabase newsblur - finished\n The above is a lot, but the important bit of information to take from it is that by using a subtractive filter, capturing everything that doesn\u2019t match a known IP, I was able to find the two connections that were made a few seconds apart. Both connections from these unknown IPs occured only moments before the database-wide deletion. By following the connection ID, it became easy to see the hacker come into the server only to delete it seconds later.\n Interestingly, when I visited the IP address of the  two  connections above, I found a Tor exit router:\n  This means that it is virtually impossible to track down who is responsible due to the anonymity-preserving quality of Tor exit routers.  Tor exit nodes have poor reputations due to the havoc they wreak. Site owners are split on whether to block Tor entirely, but some see the value of allowing anonymous traffic to hit their servers. In NewsBlur\u2019s case, because NewsBlur is a home of free speech, allowing users in countries with censored news outlets to bypass restrictions and get access to the world at large, the continuing risk of supporting anonymous Internet traffic is worth the cost.\n  Of course, being in support of free speech and providing enhanced ways to access speech comes at a cost. So for NewsBlur to continue serving traffic to all of its worldwide readers, several changes have to be made.\n The first change is the one that, ironically, we were in the process of moving to. A VPC, a virtual private cloud, keeps critical servers only accessible from others servers in a private network. But in moving to a private network, I need to migrate all of the data off of the publicly accessible machines. And this was the first step in that process.\n The second change is to use database user authentication on all of the databases. We had been relying on the firewall to provide protection against threats, but when the firewall silently failed, we were left exposed. Now who\u2019s to say that this would have been caught if the firewall failed but authentication was in place. I suspect the password needs to be long enough to not be brute-forced, because eventually, knowing that an open but password protected DB is there, it could very possibly end up on a list.\n Lastly, a change needs to be made as to which database users have permission to drop the database. Most database users only need read and write privileges. The ideal would be a localhost-only user being allowed to perform potentially destructive actions. If a rogue database user starts deleting stories, it would get noticed a whole lot faster than a database being dropped all at once.\n But each of these is only one piece of a defense strategy.  As this well-attended Hacker News thread from the day of the hack made clear, a proper defense strategy can never rely on only one well-setup layer. And for NewsBlur that layer was a allowlist-only firewall that worked perfectly up until it didn\u2019t.\n As usual the real heros are backups. Regular, well-tested backups are a necessary component to any web service. And with that, I\u2019ll prepare to  launch the big NewsBlur redesign later this week.", "posttime": "2021-06-29 23:07:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "mongodb,docker,\u6570\u636e\u5e93,database,footgun", "title": "Docker Footgun\u5bfc\u81f4\u4e86\u4e00\u4e2a\u7834\u574f\u7684\u5220\u9664Newsblur\u7684MongoDB\u6570\u636e\u5e93 ", "title_en": "A Docker footgun led to a vandal deleting NewsBlur's MongoDB database", "transed": 1, "url": "https://blog.newsblur.com/2021/06/28/story-of-a-hacking/", "via": "", "real_tags": ["mongodb", "docker", "\u6570\u636e\u5e93", "database", "footgun"]}, {"category": "", "categoryclass": "", "imagename": "47a1d84cf500ce222a50d6c7fa6d0c7f.jpg", "infoid": 1068523, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u6211\u5173\u4e8eDIY\u667a\u80fd\u5bb6\u7535\u7684\u6700\u540e\u4e00\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5199\u4e86\u5173\u4e8e\u6052\u6e29\u5668\u3002 Chipotherm\u73b0\u5728\u5df2\u7ecf\u5728\u8857\u673a\u4e00\u5e74\u591a\u8fd0\u884c\uff0c\u5b83\u4ecd\u7136\u5f88\u68d2\uff01\u5bf9\u6211\u7684DIY\u667a\u80fd\u6052\u6e29\u5668\u6b66\u88c5\u70ed\u60c5\uff0c\u521a\u642c\u8fdb\u4e86\u4e00\u4e2a\u5e26\u6709\u6212\u6307\u95e8\u94c3\u7684\u65b0\u623f\u5b50\u91cc\uff0c\u6211\u4ee5\u4e3a\u6211\u53ef\u80fd\u4f1a\u5c1d\u8bd5\u6784\u5efa\u81ea\u5df1\u7684DIY\u95e8\u94c3\u6765\u53d6\u4ee3\u5b83\u3002\n \u6211\u5bf9\u8fd9\u4e2a\u9879\u76ee\u7684\u52a8\u673a\u53ea\u662f\u5e0c\u671b\u5efa\u7acb\u65b0\u7684\u548c\u4e50\u8da3\u3002\u73af\u5f62\u95e8\u94c3\u73b0\u5728\u7531\u5e7f\u544aMegacorp\u4e9a\u9a6c\u900a\u62e5\u6709\uff0c\u906d\u53d7\u4e86\u5173\u4e8e\u5de2\u6052\u6e29\u5668\u7684\u5e16\u5b50\u4e2d\u63cf\u8ff0\u7684\u6240\u6709\u76f8\u540c\u9690\u79c1\u95ee\u9898\uff0c\u4f46\u66f4\u7cdf\u7cd5\u7684\u662f\u3002\u50cf\u5de2\u6052\u6e29\u5668\u4e00\u6837\uff0c\u5ba2\u6237\u7aef\u8f6f\u4ef6\u662f\u4e00\u4e2a\u603b\u201c\u7ade\u4e89\u5230\u5e95\u201d\u4e00\u5c3a\u5bf8\u9002\u5408 - \u6240\u6709\u5783\u573eIOS\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e0d\u4ec5\u770b\u8d77\u6765\u5f88\u7cdf\u7cd5\uff0c\u800c\u4e14\u5145\u6ee1\u4e86\u9519\u8bef\u3002\u4e5f\u559c\u6b22\u5de2\uff0c\u6240\u6709\u6570\u636e\u90fd\u6258\u7ba1\u5728\u201c\u4e91\u201d\u4e2d\uff0c\u5e76\u4e14\u5728\u60a8\uff08\u201c\u5ba2\u6237\u201d\uff09\u4e4b\u524d\u9700\u8981\u6bcf\u6708\u8d4e\u91d1\uff08\u201c\u5ba2\u6237\u201d\uff09\u3002\u7136\u800c\uff0c\u6bd4\u5de2\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u6212\u6307\u95e8\u94c3\u5b9e\u9645\u4e0a\u62e5\u6709\u76f8\u673a\u548c\u9ea6\u514b\u98ce\u5185\u7f6e\uff0c\u6240\u4ee5\u89c6\u9891\u548c\u97f3\u9891\u6e90\u4e5f\u5728\u201c\u4e91\u201d\u4e2d\u8d4e\u91d1\uff0c\u5e76\u4e0e\u4efb\u4f55\u5174\u8da3\u7684\u5dde\u5171\u4eab\uff0c\u6709\u65f6\u751a\u81f3\u5171\u4eab\u672a\u7ecf\u60a8\u7684\u8bb8\u53ef\u3002\n \u5c31\u50cf\u8bb8\u591a\u5176\u4ed6\u7269\u8d28\u4ea7\u54c1\u4e00\u6837\uff0c\u6212\u6307\u4e5f\u53d7\u5230\u591a\u79cd\u707e\u96be\u6027\u7684\u6570\u636e\u6cc4\u9732\uff0c\u8fd9\u610f\u5473\u7740\u9664\u6267\u6cd5\u673a\u6784\u548c\u5e7f\u544a\u5408\u4f5c\u4f19\u4f34\u4e4b\u5916\uff0c\u8bb8\u591a\u6212\u6307\u5ba2\u6237\u7684\u79c1\u4eba\u6570\u636e\u73b0\u5728\u4e5f\u5728\u6076\u610f\u9ed1\u5ba2\u624b\u4e2d\uff0c\u53ef\u80fd\u5728\u672a\u6765\u63d0\u4f9b\u6bd4\u4e9a\u9a6c\u900a\u63d0\u4f9b\u7684\u66f4\u96be\u62d2\u7edd\u7684\u8d4e\u91d1\u3002\u6765\u81eaARS Technica\u7684\u8fd9\u7bc7\u6587\u7ae0\u4f3c\u4e4e\u8868\u660e\uff0c\u95ee\u9898\u4e5f\u5373\u5c06\u53d8\u5f97\u66f4\u52a0\u5dee\uff0c\u5728\u4f5c\u54c1\u4e2d\u81ea\u52a8\u8f66\u724c\u68c0\u6d4b\u548c\u66f4\u591a\u7684\u8b66\u5bdf\u4f19\u4f34\u5173\u7cfb\u3002\n \u5728\u4eca\u5929\u7684\u4f01\u4e1a\u76d1\u63a7\u4e16\u754c\u4e2d\uff0c\u5efa\u7acb\u81ea\u5df1\u7684DIY\u667a\u80fd\u5bb6\u7535\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u8d85\u7ea7\u5927\u56fd - \u4e5f\u5f88\u6709\u8da3\uff01\u6211\u6700\u521d\u8ba1\u5212\u53ea\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u6309\u94ae\uff0c\u4e5f\u8bb8\u9644\u52a0\u5230ESP8266\uff0c\u8fd9\u662f\u4e00\u4e2a\u7f8e\u5999\u7684\u65b0WiFi\u5fae\u63a7\u5236\u5668\uff0c\u8fd9\u4e9b\u5929\u6c14\u968f\u7740\u5bb6\u5ead\u81ea\u52a8\u5316\u7231\u597d\u8005\u800c\u53d8\u5f97\u975e\u5e38\u6d41\u884c\u3002\u5f53\u6211\u51b3\u5b9a\u52a0\u4e0a\u4e00\u4e2a\u5f88\u9177\u7684LED\u548c\u76f8\u673a\uff08\u5176\u9972\u6599\u5b8c\u5168\u5728\u6258\u7ba1\u65f6\uff0c\u8be5\u9879\u76ee\u8fc5\u901f\u589e\u957f\u4e86\u8303\u56f4\u3002\n  \u5bf9\u4e8e\u786c\u4ef6\uff0c\u6240\u81f4\u601d\u60f3\u7684\u7b2c\u4e00\u4ef6\u4e8b\u663e\u7136\u662f\u6309\u94ae\u3002\u6211\u51b3\u5b9a\u5148\u8d2d\u4e70\u4e00\u4e2a\u9177\u7684\u201c\u53d1\u52a8\u673a\u542f\u52a8\u5668\u201d\u6c7d\u8f66\u6309\u94ae1\uff0c\u5e76\u5728\u6b64\u5904\u8bbe\u8ba1\u5176\u4f59\u7684\u95e8\u94c3\u3002\u56f4\u7ed5\u6309\u94ae\u7684LED\u4e5f\u901a\u8fc712VDC\u4f9b\u7535\uff0c\u56e0\u6b64\u5982\u679c\u6211\u5e0c\u671b\u80fd\u591f\u901a\u8fc7\u8f6f\u4ef6\u63a7\u5236\u5b83\uff0c\u6211\u8fd8\u9700\u8981\u83b7\u5f97MOSFET\u5e76\u6784\u5efa\u4e00\u4e2a\u5c0f\u7535\u8def\u3002\n  \u4e3a\u4e86\u63a7\u5236\u4e00\u5207\uff0c\u6211\u51b3\u5b9a\u4f7f\u7528\u8986\u76c6\u5b50PI\u96f6\u70b9\uff0c\u56e0\u4e3a\u5b83\u5177\u6709\u8db3\u591f\u7684GPIO\u5f15\u811a\uff0c\u7528\u4e8e\u68c0\u6d4b\u5f00\u5173\u538b\u529b\u673a\uff0c\u4e00\u4e2a\u7528\u4e8e\u8c03\u5236\u6309\u94ae\u5185\u90e8\u7684LED\u7684PWM\u5f15\u811a\uff0c\u4ee5\u53ca\u7279\u6b8a\u7684\u76f8\u673a\u603b\u7ebf\u3002\u8986\u76c6\u5b50PI Zero\u7684\u8d85\u5c0f\u5c3a\u5bf8\u4e5f\u610f\u5473\u7740\u6211\u53ef\u80fd\u4f1a\u5c06\u5176\u878d\u5408\u5728\u51e0\u4e4e\u4efb\u4f55\u5185\u5bb9\u4e2d\uff0c\u8fd9\u975e\u5e38\u4e0d\u592a\u53ef\u80fd\u8981\u6c42\u975e\u5e38\u591a\u7684\u7535\u529b\u6216\u51b7\u5374\u8d44\u6e90\u3002\n \u5bf9\u4e8e\u63a5\u7ebf\u6765\u8bf4\uff0c\u5e78\u8fd0\u7684\u662f\uff0c\u6211\u7684\u5bb6\u56ed\u7684\u524d\u4e00\u4f4d\u62e5\u6709\u8005\u5df2\u7ecf\u5728\u4ee5\u592a\u7f51\u4e0a\u6709\u7ebf\uff08\u5176\u4e2d\u8981\u5b89\u88c5\u7684\u4f4d\u7f6e\uff09\uff0c\u53ef\u80fd\u662f\u67d0\u79cd\u547c\u53eb\u6846\u6216\u5b89\u5168\u7cfb\u7edf\u3002\u8fd9\u610f\u5473\u7740\u4f7f\u7528over-over-okernet\uff08PoE\uff09\uff0c\u6211\u53ef\u4ee5\u4ece\u8f66\u5e93\u8fd0\u884c\u7535\u6e90\u548c\u7f51\u7edc\uff0c\u5176\u4e2d\u6211\u7684\u8def\u7531\u5668/\u670d\u52a1\u5668\u4f4d\u4e8e\u8981\u5b89\u88c5\u95e8\u94c3\u7684\u95e8\u53e3\u3002\u8fd9\u9700\u8981\u4e00\u4e2a\u57fa\u672c\u7684PoE\u5206\u79bb\u5668/\u63a5\u6536\u5668\uff0c\u4ee5\u53ca\u7528\u4e8e\u8986\u76c6\u5b50PI\u96f6\u7684\u4ee5\u592a\u7f51\u9002\u914d\u5668\uff08\u56e0\u4e3a\u5b83\u6ca1\u6709\u50cf\u5168\u5c3a\u5bf8\u8986\u76c6\u5b50PI\u8fd9\u6837\u7684\u8239\u4e0a\u4ee5\u592a\u7f51\uff09\u3002 \n\u6700\u540e\uff0c\u6848\u4ef6\u5c06\u4e00\u5207\u90fd\u653e\u5165\u3002\u6211\u4ee5\u4e3a\u8fd9\u5c06\u5f88\u5bb9\u66133D\u6253\u5370\uff0c\u56e0\u4e3a\u5b83\u53ea\u662f\u4e00\u4e2a\u5e26\u6709\u524d\u65b9\u548c\u80cc\u90e8\u6d1e\u7684\u5957\u4ef6\uff0c\u4f46\u4e8b\u5b9e\u8bc1\u660e\u5b83\u7ed3\u679c\u5f88\u96be\u5efa\u7acb\u3002\u6211\u62e5\u6709\u76843D\u6253\u5370\u673a\u662f\u7b2c\u4e00\u4ee3Makerbot Replicator\uff0c\u65e0\u6cd5\u6253\u5370\u9002\u5408\u5728\u4e00\u8d77\u7684\u96f6\u4ef6\u3002\u6700\u7ec8\u7ed3\u679c\u662f\u4e09\u4e2a\u72ec\u7acb\u7684\u5851\u6599\u4ef6\uff0c\u4e0d\u543b\u5408\u5728\u4e00\u8d77\uff0c\u6700\u7ec8\u6210\u4e3a\u771f\u6b63\u8106\u5f31\u7684\u3002\n  \u6211\u7684\u4e00\u4f4d\u670b\u53cb\u6709\u4e00\u4e2a\u66f4\u6602\u8d35\u7684\u7acb\u4f53\u58f0\u5149\u523b3D\u6253\u5370\u673a\uff0c\u6240\u4ee5\u6211\u8bd5\u7740\u5c1d\u8bd5\u6253\u5370\u6211\u6700\u521d\u63d0\u51fa\u7684\u76f8\u540c\u8bbe\u8ba1\u3002\u8fd9\u5bfc\u81f4\u4e86\u66f4\u51c6\u786e\u7684\u6253\u5370\uff0c\u788e\u7247\u975e\u5e38\u597d\u5730\u9002\u5408\u5728\u4e00\u8d77\u3002\u7136\u800c\uff0c\u4e5f\u8bb8\u7531\u4e8e\u6240\u7528\u6811\u8102\u7684\u7c7b\u578b\uff0c\u4e5f\u6700\u7ec8\u6210\u4e3a\u6781\u8106\u5f31\u7684\u3002\n   \u6211\u6700\u7ec8\u8d2d\u4e70\u4e86\u6765\u81eaDigikey\u7684\u4e00\u4e2a\u771f\u6b63\u7684\u6ce8\u5851\u6210\u578b\u673a\u7bb1\u7ea69\u7f8e\u5143\u3002\u5b83\u6700\u7ec8\u53ea\u662f\u5728\u6279\u91cf\u751f\u4ea7\u7684\u5916\u58f3\u4e2d\u94bb\u5b54\u800c\u4e0d\u662f\u94bb\u5b54\uff0c\u800c\u4e0d\u662f3D\u6253\u5370\u5b9a\u5236\u8bbe\u8ba1\u3002\u8d28\u91cf\u4e5f\u6bd4\u4efb\u4f55\u6253\u5370\u66f4\u597d\u3002\n       \u4e3a\u4e86\u590d\u5236\u6212\u6307\u529f\u80fd\u6700\u91cd\u8981\u7684\u90e8\u5206\uff0c\u9700\u8981\u5728Raspberry PI\u4e0a\u8fd0\u884c\u4e00\u4e9b\u8f6f\u4ef6\uff0c\u8be5\u8f6f\u4ef6\u5728\u6309\u94ae\u6309\u4e0b\u8f6e\u8be2\uff0c\u7136\u540e\u5728\u6211\u7684\u7f51\u7edc\u4e0a\u4e0e\u4e00\u4e9b\u8ba1\u7b97\u673a\u8054\u7cfb\uff0c\u4ee5\u901a\u77e5\u6211\u5173\u4e8e\u95e8\u94c3\u4e8b\u4ef6\u3002\u6211\u53eb\u8fd9\u4e9b\u201c\u53ee\u5f53\u201d2.\u521a\u624d\uff0c\u6211\u521a\u624d\u4e86\u89e3\u5230\u8fd9\u9879\u4f1f\u5927\u7684\u534f\u8bae\uff0c\u88abDIY IOT\u7231\u597d\u8005\u6240\u4ee4\u4eba\u94a6\u4f69\uff0c\u6216\u8005\u662fMQTT\u7684DIY IOT\u7231\u597d\u8005\uff0c\u6216\u6d88\u606f\u6392\u961f\u548c\u9065\u6d4b\u4f20\u8f93\u534f\u8bae\u3002\u5b83\u7684\u4e3b\u65e8\u662f\u5b83\u662f\u4efb\u4f55\u7c7b\u578b\u7684\u6d88\u606f\u7684Pubsub\uff08\u53d1\u5e03\u8005\uff09\u534f\u8bae\u3002\u5b83\u662f\u4e00\u79cd\u50cfNSNotificeCenter\u4e00\u6837\uff0c\u4f46\u5bf9\u4e8e\u60a8\u7684\u672c\u5730\u7f51\u7edc\u3002\u6709\u4e3b\u9898\u548c\u6d88\u606f\uff0c\u8fd9\u5c31\u662f\u5173\u4e8e\u5b83\u7684\u3002\u4e3b\u9898\u901a\u5e38\u4ee5\u57df/\u5b50\u57df/\u4e3b\u9898\u7684\u683c\u5f0f\uff0c\u4f46\u5b83\u771f\u7684\u53ef\u4ee5\u662f\u60a8\u60f3\u8981\u7684\u4efb\u4f55\u4e1c\u897f\uff0c\u53ea\u8981\u5b83\u5728\u5b9e\u73b0\u4e2d\u4e00\u81f4\u3002\n \u5728\u6211\u7684\u95e8\u94c3\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u9009\u62e9\u7684\u8bdd\u9898\u662f\u4e01\u4e8b\u4ef6\u7684\u95e8\u94c3/ ding\u3002\u8be5\u6309\u94ae\u5728\u8986\u76c6\u5b50PI\u4e0a\u7269\u7406\u8fde\u63a5\u5230GPIO\u5f15\u811a\uff0c\u56e0\u6b64\u6709\u4e00\u70b9\u4ee3\u7801\u5bf9\u6b64\u5f15\u811a\u8fdb\u884c\u8c03\u7528\u9ad8\uff0c\u800c\u4e14\u5728\u5b83\u6240\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u5728MQTT\u4e0a\u53d1\u5e03\u5230\u95e8\u94c3/ ding\u4e3b\u9898\u7684\u6d88\u606f\u3002\n \u73b0\u5728\uff0c\u95e8\u94c3\u672c\u8eab\u5c31\u662f\u901a\u77e5\u6211\u7684\u7f51\u7edc\u5173\u4e8e\u4e01\u4e8b\u4ef6\uff0c\u6211\u53ea\u9700\u8981\u4e00\u4e9b\u5173\u4e8e\u8fd9\u4e9b\u4e8b\u4ef6\u7684\u4e1c\u897f\uff0c\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5411\u6211\u901a\u77e5\u6211\u3002\u521a\u624d\uff0c\u6211\u5df2\u7ecf\u5efa\u7acb\u4e86\u4e00\u4e2a\u5c0fGNU / Linux PC\u548c\u4e00\u4e2a\u63a5\u6536\u5668\uff0c\u5c06\u4e0e\u8d77\u5c45\u5ba4\u7684\u626c\u58f0\u5668\u8fde\u63a5\u5230\u6211\u7684\u5ba2\u5385\u91cc\u4f5c\u4e3aMPD\u670d\u52a1\u5668\u8fdb\u884c\u97f3\u4e50\u3002\u6bcf\u5f53\u53d1\u5e03\u5230Ding MQTT\u4e3b\u9898\u65f6\uff0c\u5c31\u8ba9\u8fd9\u53f0\u7535\u8111\u64ad\u653e\u95e8\u94c3\u58f0\u97f3\u975e\u5e38\u5bb9\u6613\uff01\u6211\u6240\u8981\u505a\u7684\u5c31\u662f\u5199\u4e00\u4e2a\u5728\u5faa\u73af\u4e2d\u8fd0\u884c\u7684\u5c0fshell\u811a\u672c\u3002\n  \u6240\u6709\u6b64shell\u811a\u672c\u90fd\u4f7f\u7528mosquitto_sub\u8ba2\u9605hassio.nor\u4e0a\u7684\u95e8\u94c3/ ding\u4e3b\u9898\uff08\u5373\u6211\u7684MQTT\u670d\u52a1\u5668\uff0c\u53ea\u80fd\u5728\u6211\u7684LAN\u4e0a\u8bbf\u95ee\uff09\uff0c\u6bcf\u5f53\u6d88\u606f\u53d1\u9001\u5230\u8be5\u4e3b\u9898\u65f6\u64ad\u653e\u95e8\u94c3\u3002 -c 1\u9009\u9879\u8868\u793a\u7b49\u5f85\u4e00\u6761\u6d88\u606f\uff0c\u7136\u540e\u9000\u51fa\u3002\u8fd9\u662f\u6c38\u8fdc\u5728\u5faa\u73af\u4e2d\u6267\u884c\u7684\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u4e00\u76f4\u5f88\u68d2\u3002\u6211\u771f\u7684\u5f88\u559c\u6b22MQTT\u7684\u7b80\u5355\u6027\u3002 \n\u81ea\u4ece\u6211\u5728\u7535\u89c6\u4e0a\u8fd0\u884cKodi Media Center\u4ee5\u6765\uff0c\u5728\u6211\u7684\u7535\u89c6\u4e0a\u770b\u8fd9\u4e9b\u901a\u77e5\u4e5f\u975e\u5e38\u5bb9\u6613\uff01\n \u6211\u4e0d\u5f97\u4e0d\u505a\u7684\u4e0b\u4e00\u4ef6\u4e8b\u662f\u5f04\u6e05\u695a\u67d0\u79cd\u65b9\u5f0f\u6765\u901a\u77e5\u6211\u7684iPhone\u4e86\u89e3\u4e01\u4e8b\u4ef6\uff0c\u4ee5\u9632\u6709\u4eba\u5728\u79bb\u5bb6\u51fa\u8d70\u7684\u65f6\u5019\u6572\u54cd\u6211\u7684\u95e8\u94c3\u3002\u6211\u4ee5\u4e3a\u8fd9\u53ef\u80fd\u662f\u975e\u5e38\u56f0\u96be\u7684\uff0c\u56e0\u4e3a\u4e3a\u4e86\u505a\u63a8\u9001\u901a\u77e5\uff0c\u6211\u53ef\u80fd\u9700\u8981\u7f16\u5199\u4e00\u4e2aiOS\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e5f\u8fd0\u884c\u4e00\u4e2a\u670d\u52a1\u5668\u6765\u7b7e\u540d\u5e76\u53d1\u5e03\u5230Apple\u7684\u63a8\u9001\u901a\u77e5\u670d\u52a1\uff0c\u4ee5\u53ca\u4e00\u5806\u5176\u4ed6Hooey\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u6211\u6700\u8fd1\u5728\u5bb6\u4e3a\u6211\u6b63\u5728\u52aa\u529b\u7684\u5176\u4ed6\u9879\u76ee\u8bbe\u7f6e\u5bb6\u5ead\u52a9\u7406\u670d\u52a1\u5668\u3002 Home Assistant iOS\u5e94\u7528\u7a0b\u5e8f\u652f\u6301\u63a8\u9001\u901a\u77e5\uff0c\u53ef\u7528\u4e8e\u7531MQTT\u4e8b\u4ef6\u89e6\u53d1\u7684\u81ea\u52a8\u5316\u3002\u6240\u6709\u6211\u6240\u8981\u505a\u7684\u5c31\u662f\u5728\u5bb6\u5ead\u52a9\u7406\u4e2d\u8bbe\u7acb\u81ea\u52a8\u5316\uff0c\u8be5\u81ea\u52a8\u5316\u5c06\u8ba2\u9605\u95e8\u94c3/\u4e01\u4e3b\u9898\uff0c\u5e76\u4e14\u5f53\u4e00\u4e2a\u53d1\u8868\u5728\u8be5\u4e3b\u9898\u7684\u6d88\u606f\u65f6\uff0c\u5bb6\u5ead\u52a9\u624b\u5c06\u79f0\u81ea\u5df1\u7684\u201c\u901a\u77e5\u201d\u670d\u52a1\u5c06\u901a\u77e5\u63a8\u9001\u7ed9\u624b\u673a\u901a\u77e5\uff08\u5e76\u505a\u4efb\u4f55\u5176\u4ed6\u4e8b\u60c5\uff09\u3002\u5ef6\u4f38\u548c\u9ed1\u5ba2\u5bb6\u5ead\u52a9\u624b\u7684\u770b\u4f3c\u65e0\u9650\u6570\u91cf\u662f\u6211\u559c\u6b22\u4f7f\u7528\u5b83\u7684\u539f\u56e0\uff0c\u4e3aDIY IOT\u9879\u76ee\u4f7f\u7528\u5b83\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u6211\u6700\u7ec8\u5199\u4e86\u8fd9\u4e2a\u9879\u76ee\u7684\u670d\u52a1\u5668\u7aef\u7684\u4ee3\u7801\uff0c\u8fd9\u5f88\u6574\u6d01\u3002\n  \u8fd9\u4e2a\u9879\u76ee\u7684\u6700\u91cd\u8981\u90e8\u5206\u662f\u4e3a\u4e86\u8ba9\u6211\u7684\u662f\u6309\u94ae\uff0c\u4ee5\u4fbf\u4ee5\u5b8c\u5168\u7531\u6211\u63a7\u5236\u7684\u65b9\u5f0f\u901a\u77e5\u6211\u7684\u95e8\u94c3\u53ee\u5f53\uff0c\u5e76\u4ec5\u5728\u6211\u7684\u672c\u5730\u7f51\u7edc\u4e0a\u8fd0\u884c\u3002\u4e8c\u6b21\uff0c\u6211\u8ba4\u4e3a\u5c06\u76f8\u673a\u9644\u52a0\u5230\u5b83\u4e5f\u5f88\u9ad8\u5174\uff0c\u6240\u4ee5\u6211\u53ef\u4ee5\u770b\u5230\u8c01\u5728\u5916\u9762\u8fce\u63a5\u4ed6\u4eec\u4e4b\u524d\u5728\u95e8\u53e3\u3002\u518d\u6b21\uff0c\u7531\u4e8e\u6240\u6709\u8fd9\u4e00\u5207\u90fd\u662f\u672c\u5730\u7684\u5e76\u7531\u6211\u63a7\u5236\uff0c\u6211\u5bf9\u6dfb\u52a0\u76f8\u673a\u7684\u9690\u79c1\u95ee\u9898\u5f88\u5c11\u3002\n \u6211\u4e3a\u8986\u76c6\u5b50Pi\u8d2d\u4e70\u7684\u9c7c\u773c\u76f8\u673a\u975e\u5e38\u597d\uff0c\u4f46\u5b83\u5b9e\u9645\u4e0a\u7f3a\u5c11\u524d\u9762\u7684\u7ea2\u5916\u7ebf\u8fc7\u6ee4\u5668\uff0c\u6240\u4ee5\u6240\u6709\u7684\u56fe\u50cf\u90fd\u5bf9\u5b83\u4eec\u6709\u4e00\u4e2a\u771f\u6b63\u7684\u7d2b\u8272ish tint\u3002\u867d\u7136\u4e0d\u662f\u975e\u5e38\u7f8e\u89c2\uff0c\u4f46\u5b83\u81f3\u5c11\u8981\u5b8c\u6210\u5de5\u4f5c\uff0c\u5e76\u4e14\u6210\u672c\u975e\u5e38\u4f4e\u3002\u663e\u7136\u8fd9\u662f\u5546\u4e1a\u7ea7\u5b89\u5168\u6444\u50cf\u673a\u4e0a\u6700\u6602\u8d35\u7684\u96f6\u4ef6\u4e4b\u4e00\uff0c\u5176\u4e2d\u8bb8\u591a\u5177\u6709\u673a\u68b0\u7ea2\u5916\u6ee4\u6ce2\u5668\uff0c\u53ef\u4ee5\u5728\u591c\u95f4\u79fb\u52a8\u4f20\u611f\u5668\u7684\u65b9\u5f0f\uff0c\u4ee5\u4fbf\u5728\u4f4e\u5149\u573a\u666f\u4e2d\u7684\u6700\u4f73\u56fe\u7247\u5728\u767d\u5929\u3002\n  \u901a\u8fc7\u5bb6\u5ead\u52a9\u7406\u754c\u9762\u53ef\u4ee5\u8bbf\u95ee\u73b0\u573a\u6444\u50cf\u5934\uff0c\u6216\u8005\u6211\u53ef\u4ee5\u8ba2\u9605\u53e6\u4e00\u4e2aMQTT\u4e3b\u9898\uff0c\u5176\u4e2d\u5f20\u8d34\u4e86\u6309\u4e0b\u95e8\u94c3\u7684\u4eba\u7684\u7167\u7247\u3002 Raspberry PI\u901a\u8fc7\u89c6\u98914Llinux\u62bd\u8c61\u5c42\u4ece\u76f8\u673a\u83b7\u53d6\u8fd9\u4e9b\u56fe\u50cf\uff0c\u8fd9\u5728\u6211\u7684\u7a0b\u5e8f\u4e2d\u975e\u5e38\u6613\u4e8e\u4f7f\u7528\u3002\u7136\u540e\uff0c\u5e27\u5f53\u524d\u88ab\u7f16\u7801\u4e3aJPEG\u5e76\u53d1\u5e03\u5230MQTT\u3002\u5728\u4e0d\u4e45\u7684\u5c06\u6765\uff0c\u6211\u5e0c\u671b\u8986\u76c6\u5b50PI\u7f16\u7801RTSP\u6d41\uff0c\u56e0\u4e3aPI\u4e13\u95e8\u8bbe\u8ba1\u7528\u4e8e\u7f16\u7801\u89c6\u9891\u7684SOC\u4e2d\u7684\u89c6\u9891\u6838\u5fc3\uff0c\u56e0\u6b64\u5b83\u5c06\u4f7f\u7528\u5f88\u5c11\u7684\u7535\u529b/\u8d44\u6e90\u3002\n   \u4ee5\u4e0a\u662f\u6700\u7ec8\u4ea7\u54c1\uff0c\u94bb\u5b54\uff0c\u62e7\u7d27\uff0c\u5e76\u5b89\u88c5\u5728\u6211\u5bb6\u524d\u9762\u7684\u6805\u6781\u4e0a\u3002\u5728\u767d\u5929\u671f\u95f4\uff0cLED\u73af\u5e76\u4e0d\u662f\u90a3\u4e48\u660e\u663e\uff0c\u4f46\u76f8\u4fe1\u6211\uff0c\u665a\u4e0a\u975e\u5e38\u660e\u4eae\uff01\u5f53\u6020\u901f\u65f6\uff0c\u5b83\u786e\u5b9e\u6674\u95f4\u8109\u51b2\u6548\u5e94\uff0c\u5e76\u5728\u6309\u4e0b\u65f6\u95ea\u70c1\u4ee5\u786e\u8ba4\u538b\u529b\u673a\u5e76\u901a\u77e5\u67d0\u4eba\u5373\u5c06\u5230\u6765\u7684\u8bbf\u5ba2\u3002\n \u7531\u4e8e\u6211\u5b8c\u5168\u63a7\u5236\u4e86\u786c\u4ef6\uff0c\u56e0\u6b64\u5c06\u6765\u4f1a\u6709\u5f88\u591a\u6709\u8da3\u7684\u4e1c\u897f\u3002\u4e00\u4e9b\u6211\u62e5\u6709\u7684\u60f3\u6cd5\u662f\u81ea\u52a8\u9762\u90e8\u68c0\u6d4b\uff08\u4ee5\u9690\u79c1\u4e3a\u4e2d\u5fc3\u7684\u524d\u9014\u8def\u7ebf\u65b9\u5f0f\uff09\uff0c\u79d8\u5bc6\u6309\u94ae\u4ee3\u7801\u505a\u4e8b\uff0c\u4e5f\u8bb8\u751a\u81f3\u53ef\u4ee5\u662f\u4e00\u4e2a\u5185\u7f6e\u9ea6\u514b\u98ce\u548c\u626c\u58f0\u5668\uff0c\u6240\u4ee5\u6211\u53ef\u4ee5\u4e0e\u8bbf\u95ee\u8005\u8fdb\u884c\u5bf9\u8bdd\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u76d2\u5b50\u5f88\u72ed\u7a84\uff01\u81f3\u5c11\u8f6f\u4ef6\u771f\u7684\u5f88\u5bb9\u6613\u6539\u53d8\u3002 \n\u8c08\u5230\u8f6f\u4ef6\uff0c\u95e8\u94c3\u7684\u4ee3\u7801\u662f\u514d\u8d39\u548c\u5f00\u653e\u7684\u3002 \u60a8\u53ef\u4ee5\u5728Sourcehut\u9875\u9762\u4e0a\u627e\u5230\u5b83\u3002  \u662f\u7684\uff0c\u6211\u610f\u8bc6\u5230\u89e3\u5256\u6212\u6307/\u4e9a\u9a6c\u900a\u7684\u8ba4\u77e5\u4e0d\u8d77\u4f5c\u7528\uff0c\u5e76\u4ece\u4e9a\u9a6c\u900a\u8ba2\u8d2d\u90e8\u5206\u3002 \u5904\u7406\u5b83\uff01 \u21a9 ", "note_en": "In my last post about DIY smart appliances, I wrote about  thermostats. Chipotherm has been running for over a year now at the arcade, and it\u2019s still working great! Armed with enthusiasm for my DIY smart thermostat, and having just moved into a new house that came with a  Ring doorbell, I thought I might try building my own DIY doorbell to replace it.\n My motivations for this project were beyond just wanting to build something new and fun. The Ring Doorbell, which is now owned by advertising megacorp Amazon, suffers from all of the same privacy problems described in my post about the Nest thermostat, but even worse. Like the Nest thermostat, the client software is a total \u201crace to the bottom\u201d one-size-fits-all garbage iOS app that not only looks bad, but is full of bugs. Also like the Nest, all of your data is hosted in \u201cthe cloud\u201d, and a monthly ransom is required before you (\u201cthe customer\u201d) are actually allowed to access it. Worse than the Nest, however, is the fact that the Ring doorbell actually has a camera and microphone built-in, so video and audio feeds are also held for ransom in \u201cthe cloud\u201d, and are shared with any interested party, sometimes even  without your permission.\n Just like many other Internet of Things products, the Ring has also been subject to multiple disastrous  data breaches, meaning besides law enforcement agencies and advertising partners, many Ring customers\u2019 private data is now also in the hands of malicious hackers, who may in the future offer ransoms that are much harder to refuse than the one offered by Amazon. This article from  Ars Technica seems to indicate that the problem is also about to get much worse, with automatic license plate detection in the works and more police partnerships.\n In today\u2019s world of corporate surveillance, building your own DIY smart appliances is a true superpower\u2014and a lot of fun too! I originally planned to just have a simple button, perhaps attached to an  ESP8266, which is a wonderful new WiFi microcontroller that\u2019s becoming extremely popular these days with home automation enthusiasts. The project quickly grew in scope as I decided to also add a cool LED and a camera (whose feed is hosted entirely  on-prem).\n  For the hardware, the first thing that comes to mind is obviously the button. I decided to buy a cool \u201cengine starter\u201d  automotive button   1 first, and design the rest of the doorbell around that. The LED around button is powered via 12vDC as well, so if I wanted to be able to control it via software, I\u2019ll also need to get a MOSFET and build a small circuit.\n  To control everything, I decided to use a Raspberry Pi Zero, since it has ample GPIO pins for detecting the switch press, a PWM pin for modulating the LED inside of the button, and a special camera bus. The Raspberry Pi Zero\u2019s super small size also meant I can probably fit it inside of pretty much anything, and it was very unlikely to demand very much power or cooling resources.\n As for wiring, fortunately the previous owner of my homestead had already wired the front gate (where this was to be installed) with Ethernet, presumably for some kind of call box or security system. This meant that using Power-Over-Ethernet (PoE), I could run both power and networking from the garage where my router/server was located to the gate where the doorbell was to be installed. This required a basic PoE splitter/receiver, and an Ethernet adapter for the Raspberry Pi Zero (since it doesn\u2019t have onboard Ethernet like the full-size Raspberry Pi does).\n Lastly, the case to put everything in. I thought this would be easy to 3D print, since it\u2019s just an enclosure with a hole in the front and in the back, but it turned out to be rather difficult to build. The 3D printer in my possession, a first generation Makerbot Replicator, wasn\u2019t able to print parts that fit together nicely. The end result was three separate plastic pieces that didn\u2019t fit together well and ended up being really flimsy.\n  A friend of mine had a much more expensive Stereo-lithography 3D printer, so I had him try and print the same design I originally came up with. This resulted in a much more accurate print, with pieces that fit together really nicely. However, perhaps due to the type of resin that was used, also ended up being extremely flimsy.\n   I ended up buying a really great  injection molded enclosure from Digikey for about $9. It ended up being really easy just drilling holes in a mass-produced enclosure instead of 3D printing a custom design. The quality is also far better than any of my prints.\n       In order to replicate the most important part of the functionality of the Ring, there will need to be some software running on the Raspberry Pi that polls for button presses, which then contacts some computer on my network to notify me about doorbell events. I call these \u201cdings\u201d   2. Just recently, I had learned about this great protocol admired by DIY IoT enthusiasts called  MQTT, or The Message Queuing and Telemetry Transport protocol. The gist of it is that it\u2019s a PubSub (publisher-subscriber) protocol for any kind of message. It\u2019s kind of like  NSNotificationCenter, but for your local network. There are topics and messages, and that\u2019s about it. Topics are usually in the format of  domain/subdomain/topic, but it can really be anything you want, as long as it\u2019s consistent in your implementations.\n In the case of my doorbell, the topic I chose is  doorbell/ding for ding events. The button is physically connected to a GPIO pin on the Raspberry Pi, so there\u2019s a bit of code that polls for this pin to go high, and when it does, a message is published to the  doorbell/ding topic over MQTT.\n Now that the doorbell itself is notifying my network about ding events, I just need something on the other end that  subscribes to these events and notifies me somehow. Just recently, I had set up a small GNU/Linux PC and a receiver connected to the speakers in my living room as an  MPD server for playing music. Getting this computer to play a doorbell sound whenever a message was posted to the ding MQTT topic was extremely easy! All I had to do was write a small shell script that runs in a loop.\n  All this shell script does is use  mosquitto_sub to subscribe to the  doorbell/ding topic on  hassio.nor (that\u2019s my MQTT server, only accessible on my LAN) and play  doorbell.wav whenever a message is sent to that topic. The  -C 1 option says to wait for one message, then exit. This is executed in a loop forever. So far this has been working great. I really love the simplicity of MQTT.\n  Since I run  Kodi Media Center on my TV, it was also extremely easy to get these notifications to show up on my TV!\n The next thing I had to do was figure out some way to notify my iPhone about ding events as well, in case someone rings my doorbell while I\u2019m away from home. I thought this might be really difficult, since in order to do push notifications, I\u2019d probably have to write an iOS app, and also run a server to sign and publish to Apple\u2019s Push Notification service, and a bunch of other hooey. Fortunately, I had recently set up a  Home Assistant server at home for some other projects I was working on. The Home Assistant iOS app supports push notifications, which can be used in automations triggered by MQTT events. All I had to do was set up an automation in Home Assistant that subscribes to the  doorbell/ding topic, and when a message a published on that topic, Home Assistant will call its own \u201cnotify\u201d service to push the notification to my phone (and do any number of other things). The seemingly infinite number of ways to extend and hack Home Assistant is the reason why I love using it so much for DIY IoT projects. All in all, I ended up writing  no code for the server-side of this project, which is pretty neat.\n  The most important part of this project for me was getting the button to notify me about doorbell dings in a way that\u2019s entirely controlled by me, and runs only on my local network. Secondarily, I did think it would be nice to have a camera attached to it as well so I can see  who is at the door before going outside to greet them. Again, since all of this is local and controlled by me, I had very little privacy concerns about adding a camera.\n The fisheye camera I had bought for the Raspberry Pi was pretty good, but it\u2019s actually missing an infrared filter on the front, so all of the images have a really purple-ish tint to them. While not very aesthetically pleasing, it does at least get the job done, and for a very low cost. Apparently this is one of the most expensive parts on a commercial-grade security camera, many of which have a mechanical IR filter that can move out of the way of the sensor at nighttime for an optimal picture in low light scenarios in addition to working well in the daylight.\n  A live camera feed is accessible via the Home Assistant interface, or I can subscribe to another MQTT topic where photos of people who pressed the doorbell are posted to. The Raspberry Pi acquires these images from the camera via a Video4Linux abstraction layer that\u2019s pretty easy to use in my program. The frames are then currently encoded as JPEGs and posted to MQTT. In the near future, I would like to have the Raspberry Pi encode a RTSP stream instead, since the Pi has a video core in its SOC specifically designed to encode video, so it would use very little power/resources.\n   Above is the final product, drilled, screwed, and installed onto the gate in front of my house. The LED ring is not really that noticeable during the daytime, but trust me, it\u2019s very bright at night! It does a cool pulsing effect when idle, and blinks when pressed to acknowledge the press and to notify the visitor that someone is coming.\n Since I have complete control over the hardware, there\u2019s a lot more fun stuff I can do with this in the future. Some ideas I had were automatic face detection (in a privacy-centric on-prem way, of course), secret button codes to do things, and maybe even a built-in microphone and speaker so I could have a conversation with the visitor. Unfortunately that box is  quite cramped as it is! At least the software is really easy to change.\n Speaking of software, the code for the doorbell is free and open-source. You can find it on my  SourceHut page.\n  Yes, I\u2019m aware of the cognitive dissonance around dissing Ring/Amazon and ordering parts from Amazon. Deal with it!\u00a0 \u21a9", "posttime": "2021-06-29 23:07:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u667a\u80fd,diy,\u95e8\u94c3", "title": "\u5efa\u7acb\u4e00\u4e2aDIY\u667a\u80fd\u95e8\u94c3 ", "title_en": "Building a DIY Smart Doorbell", "transed": 1, "url": "https://buzzert.net/posts/2021-05-09-doorbell", "via": "", "real_tags": ["\u667a\u80fd", "diy", "\u95e8\u94c3"]}, {"category": "", "categoryclass": "", "imagename": "8d479f58cb870fe04619d7cd96a723a1.png", "infoid": 1068521, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8001\u864e\u5fc5\u987b\u8ffd\u6355\uff0c\u9e1f\u98de\u5f97\u82cd\u8747; Lisper\u5f97\u5750\u4e0b\u6765\uff0c\uff08Y\uff08Y Y\uff09\uff09\uff1f\u8001\u864e\u7761\u4e86\uff0c\u9e1f\u6765\u843d\u5730; Lisper\u5f97\u544a\u8bc9\u81ea\u5df1\u4ed6\u4e86\u89e3\u3002 -  Kurt Vonnegut\uff0c\u7531Darius Bacon\u4fee\u6539\n  \u6211\u6700\u8fd1\u5199\u4e86\u4e00\u4e2a\u5173\u4e8ey\u7ec4\u5408\u8005\u7684\u535a\u5ba2\u6587\u7ae0\u3002\u4ece\u90a3\u4ee5\u540e\uff0c\u6211\u6536\u5230\u4e86\u8bb8\u591a\u6709\u7528\u7684\u8bc4\u8bba\uff0c\u6211\u8ba4\u4e3a\u5c06\u5e16\u5b50\u6269\u5c55\u5230\u66f4\u5b8c\u6574\u7684\u6587\u7ae0\u4e2d\u662f\u5408\u9002\u7684\u3002\u672c\u6587\u5c06\u5bf9\u4e3b\u9898\u8fdb\u884c\u66f4\u6df1\u5165\u7684\u6df1\u5ea6\uff0c\u4f46\u6211\u5e0c\u671b\u5b83\u80fd\u591f\u66f4\u52a0\u53ef\u7406\u89e3\u3002\u4f60\u4e0d\u9700\u8981\u9605\u8bfb\u524d\u4e00\u7bc7\u6587\u7ae0\u4ee5\u4e86\u89e3\u8fd9\u4e00\u70b9\uff08\u5176\u5b9e\uff0c\u5982\u679c\u4f60\u6ca1\u6709\uff0c\u90a3\u4e48\u5b83\u53ef\u80fd\u66f4\u597d\uff0c\u5982\u679c\u4f60verven\uff06\uff0339;\uff09\u6211\u6240\u9700\u8981\u7684\u552f\u4e00\u80cc\u666f\u77e5\u8bc6\u662f\u5bf9\u8be5\u65b9\u6848\u7684\u5fae\u5c0f\u4e86\u89e3\u7f16\u7a0b\u8bed\u8a00\u5305\u62ec\u9012\u5f52\u548c\u4e00\u6d41\u7684\u529f\u80fd\uff0c\u6211\u5c06\u5ba1\u67e5\u3002\u8bc4\u8bba\uff08\u518d\u6b21\uff09\u6b22\u8fce\u3002\n   \u5728\u6211\u8fdb\u5165y\u5b9e\u9645\u4e0a\u7684\u7ec6\u8282\u4e4b\u524d\uff0c\u6211\u60f3\u89e3\u51b3\u4e3a\u4ec0\u4e48\u4f60\u4f5c\u4e3a\u7a0b\u5e8f\u5458\u7684\u95ee\u9898\u5e94\u8be5\u70e6\u607c\u5730\u4e86\u89e3\u5b83\u3002\u8bda\u5b9e\u7684\uff0c\u90a3\u91ccan\uff06\uff0339;\u5854\u5f88\u591a\u597d\u87ba\u6bcd - \u87ba\u6813\u7684\u5b9e\u9645\u539f\u56e0\uff0c\u5373\u4f7f\u5b83\u786e\u5b9e\u5b58\u5728\u4e86\u4e00\u4e9b\u5b9e\u9645\u5e94\u7528\uff0c\u5927\u90e8\u5206\u90fd\u662f\u8ba1\u7b97\u673a\u8bed\u8a00\u7406\u8bba\u5bb6\u7684\u5174\u8da3\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u6211\u89c9\u5f97\u5b83\uff06\uff0339;\u503c\u5f97\u4f60\u7684\u867d\u7136\u662f\u5173\u4e8e\u4f60\u7684\u60f3\u6cd5\uff1a\n \u5b83\uff06\uff0339;\u5728\u6240\u6709\u7f16\u7a0b\u4e2d\u6700\u7f8e\u4e3d\u7684\u60f3\u6cd5\u4e4b\u4e00\u3002\u5982\u679c\u60a8\u6709\u4efb\u4f55\u7f16\u7a0b\u7f8e\u5b66\u7684\u611f\u89c9\uff0c\u5219\uff06\uff0339; Quecate\u5c06\u88abY\u6109\u5feb\u5730\u9ad8\u5174\u3002\n \u5b83\u4ee5\u4e00\u79cd\u975e\u5e38\u663e\u7740\u7684\u65b9\u5f0f\u663e\u793a\u4e86\u529f\u80fd\u6027\u7f16\u7a0b\u7684\u7b80\u5355\u601d\u60f3\u3002\n 1959\u5e74\uff0c\u82f1\u56fd\u79d1\u5b66\u5bb6C. P. Snow\u7ed9\u4e86\u4e00\u4e2a\u7740\u540d\u7684\u8bb2\u5ea7\uff0c\u79f0\u4e3a\u4e24\u79cd\u6587\u5316\uff0c\u4ed6\u8ba8\u8bba\u4e86\u8bb8\u591a\u667a\u80fd\u548c\u53d7\u8fc7\u826f\u597d\u7684\u4eba\u4eec\u7684\u65f6\u95f4\u51e0\u4e4e\u6ca1\u6709\u79d1\u5b66\u77e5\u8bc6\u3002\u4ed6\u4f7f\u7528\u4e86\u5bf9\u90a3\u4e9b\u79d1\u5b66\u8bc6\u5b57\u7684\u4eba\u4e4b\u95f4\u7684\u7b2c\u4e8c\u79cd\u70ed\u529b\u5b66\u5b9a\u5f8b\uff0c\u4ee5\u53ca\u90a3\u4e9b\u6e29\u548c\u7684\u4eba\u4e4b\u95f4\u7684\u5206\u754c\u7ebf\u548c\uff06\uff0339; t\u3002\u6211\u8ba4\u4e3a\u6211\u4eec\u53ef\u4ee5\u7c7b\u4f3c\u5730\u4f7f\u7528Y\u7ec4\u5408\u8005\u7684\u77e5\u8bc6\u4f5c\u4e3a\uff06\uff0334\u7684\u7a0b\u5e8f\u5458\u4e4b\u95f4\u7684\u5206\u754c\u7ebf;\u529f\u80fd\u8bc6\u5b57\uff06\uff0334; \uff08\u5373\u5bf9\u529f\u80fd\u89c4\u5212\u7684\u5408\u7406\u77e5\u8bc6\uff09\u548c\u90a3\u4e9baren\u7684\u4eba\u548c\uff0339; t\u3002\u8fd8\u6709\u5176\u4ed6\u8bae\u9898\u53ef\u4ee5\u670d\u52a1\uff0c\u4e5f\u53ef\u4ee5\uff08\u7279\u522b\u662fMONADS\uff09\uff0c\u4f46y\u4f1a\u5f88\u597d\u3002\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u6e34\u671b\u62e5\u6709\u771f\u6b63\u7684\u5170\u5e03 - \u6027\u8d28\uff0c\u8bf7\u9605\u8bfb\u3002\n \u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0cPaul Graham\uff08Lisp\u9ed1\u5ba2\uff0cLisp Book Authory\uff0cEssayist\u548c\u73b0\u5728\u98ce\u9669\u8d44\u672c\u4e3b\u4e49\uff09\u663e\u7136\u975e\u5e38\u91cd\u8981\uff0c\u4ed6\u5c06\u4ed6\u547d\u540d\u4e3a\u4ed6\u7684\u542f\u52a8\u5b75\u5316\u5668\u516c\u53f8Y Combinator\u3002\u4fdd\u7f57\u4ece\u4ed6\u7684\u60f3\u6cd5\u77e5\u8bc6\u4e2d\u5bcc\u6709\u4e30\u5bcc;\u4e5f\u8bb8\u5176\u4ed6\u4eba\u4e5f\u4f1a\u3002\u4e5f\u8bb8\u751a\u81f3\u4f60\u3002 \n\u6211\u4eec\uff06\uff0339; ll\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e9b\u51fd\u6570\u6765\u8ba1\u7b97\u9636\u6bb5\u6765\u5f00\u59cb\u63a2\u7d22Y\u7ec4\u5408\u5668\u3002\u975e\u8d1f\u6574\u6570N\u7684\u6e90\u6781\u662f\u4ece1\u5f00\u59cb\u7684\u6240\u6709\u6574\u6570\u7684\u4e58\u79ef\uff0c\u5e76\u5ef6\u957f\u5230\u548c\u5305\u62ecn\u3002\u56e0\u6b64\u6211\u4eec\u6709\uff1a\n \u56e0\u5b501 = 1\u56e0\u5b502 = 2 * 1 = 2\u56e0\u5b503 = 3 * 2 * 1 = 6\u56e0\u5b504 = 4 * 3 * 2 * 1 = 24\n \u7b49\u7b49\u3002 \uff08i\uff06\uff0339; m\u4f7f\u7528\u6ca1\u6709\u62ec\u53f7\u7684\u51fd\u6570\u8868\u793a\u6cd5\uff0c\u6240\u4ee5armential 3\u4e0e\u901a\u5e38\u5199\u5165\u7684\u56e0\u5b50\uff083\uff09\u3002\u5e7d\u9ed8\u6211\u3002\uff09\u56e0\u5b50\u8d8a\u6765\u8d8a\u591a\u5730\u589e\u52a0; 20\u7684\u56e0\u5b50\u4e3a2432902008176640000\u30020\u7684\u56e0\u5b50\u662f1;\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5bf9\u4e8e\u5b9e\u9645\u7528\u4e8e\u9020\u7968\u7684\u79cd\u7c7b\u7684\u9002\u5f53\u5b9a\u4e49\uff08\u5982\u89e3\u51b3\u95ee\u9898\uff0c\u8bae\u9898\u86cb\u767d\uff09\u3002\n  \u5b83\u6613\u4e8e\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7f16\u5199\u529f\u80fd\uff0c\u4ee5\u4f7f\u7528\u67d0\u79cd\u5faa\u73af\u63a7\u5236\u6784\u9020\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u51fd\u6570\uff0c\u4f8b\u5982\u5faa\u73af\u6216\u5faa\u73af\uff08\u4f8b\u5982\uff0c\u5728C\u6216Java\u4e2d\uff09\u3002\u4f46\u662f\uff0c\u5b83\u4e5f\u5f88\u5bb9\u6613\u7f16\u5199\u9012\u5f52\u51fd\u6570\u6765\u8ba1\u7b97\u9636\u4e58\uff0c\u56e0\u4e3a\u9636\u4e58\u6709\u4e00\u4e2a\u975e\u5e38\u81ea\u7136\u7684\u9012\u5f52\u5b9a\u4e49\uff1a\n  \u7b2c\u4e8c\u884c\u9002\u7528\u4e8e\u5927\u4e8e\u96f6\u7684\u6240\u6709n\u3002 Infact\uff0c\u5728\u8ba1\u7b97\u673a\u8bed\u8a00Haskell\uff0c\u90a3\u5c31\u662f\u60a8\u5b9e\u9645\u5b9a\u4e49\u56e0\u5b50\u51fd\u6570\u7684\u65b9\u5f0f\u3002\u5728\u65b9\u6848\u4e2d\uff0c\u6211\u4eec\uff06\uff0339\u7684\u8bed\u8a00; ll\u5728\u8fd9\u91cc\u4f7f\u7528\uff0c\u8fd9\u4e2a\u51fd\u6570\u5c06\u5199\u7c7b\u4f3c\uff1a\n  \u65b9\u6848\u4f7f\u7528\u62ec\u53f7\u524d\u7f00\u7b26\u53f7\u4e3a\u6240\u6709\u5185\u5bb9\uff0c\u56e0\u6b64\u7c7b\u4f3c\u4e8e\uff08 -  n 1\uff09\u8868\u793a\u901a\u5e38\u5728\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5199\u5165\u7684n  -  1\u3002\u8fd9\u7684\u539f\u56e0\u8d85\u51fa\u4e86\u672c\u6587\u7684\u8303\u56f4\uff0c\u4f46\u4e60\u60ef\u4e86\u8fd9\u4e2a\u7b26\u53f7\uff0c\u975e\u5e38\u52aa\u529b\u3002\n \u4e8b\u5b9e\u4e0a\uff0c\u4e0a\u8ff0\u65b9\u6848\u4e2d\u7684\u9636\u4e58\u51fd\u6570\u7684\u5b9a\u4e49\u4e5f\u53ef\u4ee5\u4ee5\u7a0d\u5fae\u660e\u786e\u7684\u65b9\u5f0f\u7f16\u5199\u5982\u4e0b\uff1a \n\uff08\u5b9a\u4e49\u56e0\u5b50\uff08lambda\uff08n\uff09\uff08\u5982\u679c\uff08= n 0\uff091\uff08* n\uff08armborial\uff08 -  n 1\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff09\n \u5173\u952e\u5b57Lambda\u7b80\u5355\u5730\u8868\u660e\u4e86\u6211\u4eec\uff06\uff0339\u7684\u4e1c\u897f;\u91cd\u65b0\u5b9a\u4e49\uff08\u5373\uff0c\u7531\u6253\u5f00\u7684\u62ec\u53f7\u5c01\u95ed\u5230Lambda\u7684\u5de6\u4fa7\u548c\u5176\u76f8\u5e94\u7684\u8863\u670d\u5185\u90e8\uff09\u662f\u4e00\u4e2a\u529f\u80fd\u3002\u5728Lambda\u4e2d\uff0c\u5728\u62ec\u53f7\u4e2d\u7684\u8bdd\u662f\u4ec0\u4e48\u4e4b\u540e\uff0c\u662fFunction\u7684\u6b63\u5f0f\u8bba\u70b9;\u8fd9\u91cc\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u8fd9\u662fn\u3002\u8be5\u51fd\u6570\u7684\u4e3b\u4f53\u5728\u6b63\u5f0f\u53c2\u6570\u4e4b\u540e\uff0c\u4ee5\u53ca\u8868\u8fbe\u5f0f\u7684\u79d8\u4e66\u4e3b\u4e49\u8005\uff08\u5982\u679c\uff08= n 0\uff091\uff08* n\uff08armborial\uff08 -  n1\uff09\uff09\uff09\uff09\uff09\uff09\u3002\u8fd9\u79cd\u529f\u80fd\u662f\u533f\u540d\u529f\u80fd\u3002\u5728\u8fd9\u91cc\uff0c\u4f60\u7ed9\u4e86\u4f60\u533f\u540d\u51fd\u6570\u4f60\uff06\uff0339\u4e4b\u540e\u7684\u59d3\u540d\u56e0\u5b50; vedefined\u5b83\uff0c\u4f46\u4f60\u4e0d\u5fc5\uff0c\u5e76\u4e14\u7ecf\u5e38\u5b83\uff06\uff0339; s handy\u4e0d\u662f\u5982\u679c\u4f60\uff06\uff0339;\u91cd\u65b0\u4f7f\u7528\u5b83\u4e00\u6b21\u3002\u5728\u65b9\u6848\u548c\u4e00\u4e9b\u5176\u4ed6\u8bed\u8a00\u4e2d\uff0c\u533f\u540d\u529f\u80fd\u4e5f\u79f0\u4e3aLambda\u8868\u8fbe\u5f0f\u3002\u9664\u4e86\u65b9\u6848\u4e4b\u5916\u7684\u8bb8\u591a\u7f16\u7a0b\u89c4\u7a0b\u5141\u8bb8\u60a8\u5b9a\u4e49\u533f\u540d\u51fd\u6570\uff0c\u5305\u62ecPyThon\uff0cRuby\uff0cJavaScript\uff0cOCAML\u548cHaskell\uff08\u4f46\u4e0d\u9057\u61be\u7684\u662fC\uff0cC ++\u6216Java\uff09\u3002\u6211\u4eec\uff06\uff0339; ll\u5728\u4e0b\u9762\u4f7f\u7528lambda\u8868\u8fbe\u5f0f\u3002\n \u5728\u65b9\u6848\u8bed\u8a00\u4e2d\uff0c\u56e0\u5b50\u7684\u5b9a\u4e49\u4ec5\u4ec5\u4e0e\u4e4b\u76f8\u540c;\u65b9\u6848\u5728\u8bc4\u4f30\u4e4b\u524d\u7b80\u5355\u5730\u5c06FirstDefinition\u8f6c\u6362\u4e3a\u7b2c\u4e8c\u4e2a\u3002\u6240\u4ee5\u6240\u6709\u529f\u80fd\u672f\u8bed\u90fd\u662f\u771f\u6b63\u7684lambda\u8868\u8fbe\u3002\n \u8bf7\u6ce8\u610f\uff0c\u8be5\u51fd\u6570\u7684\u4e3b\u4f53\u5bf9\u5176\u4e2d\u7684FactorialFunction\uff08\uff06\uff0339;\u5728\u5b9a\u4e49\u8fc7\u7a0b\u4e2d\u7684\u8fc7\u7a0b\u4e2d\u7684\u8c03\u7528\uff0c\u8fd9\u4f7f\u5f97\u8be5\u9012\u5f52\u5b9a\u4e49\u3002\u6211\u4f1a\u8c03\u7528\u8fd9\u79cd\u5b9a\u4e49\uff0c\u5176\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u7684\u540d\u79f0\u7528\u4e8e\u51fd\u6570\u7684\u4e3b\u4f53\uff0c\u4e00\u4e2a\u660e\u786e\u7684\u9012\u5f52\u5b9a\u4e49\u3002 \uff08\u4f60\u53ef\u80fd\u60f3\u77e5\u9053\u4e00\u4e2a\uff06\uff0334;\u9690\u5f0f\u7684\u526f\u987e\u5fcc\uff06\uff0334;\u529f\u80fd\u662f\u3002\u6211\u4e0d\u4f1a\u4f7f\u7528\u90a3\u79cd\u8868\u8fbe\uff0c\u4f46\u6211\u60f3\u5230\u7684\u662f\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\uff0c\u5b83\u662f\u901a\u8fc7\u672a\u7ecf\u9012\u5f52\u624b\u6bb5\u751f\u6210\u7684\u9012\u5f52\u51fd\u6570 - \u7ee7\u7eed\u9605\u8bfb\uff01\uff09\n \u4e3a\u4e86\u53c2\u4e0e\u4e89\u8bba\uff0c\u6211\u4eec\u5c06\u5047\u8bbe\u6211\u4eec\u7684Schemedoesn\u548c\uff0339; t\u7684\u7248\u672c\u6709\u76f8\u5f53\u4e8e\u5faa\u73afInc\u6216Java\uff08\u4f46\u5b9e\u9645\u4e0a\uff0c\u5b9e\u9645\u65b9\u6848\u5b9e\u73b0\u786e\u5b9e\u6709\u8fd9\u6837\u7684\u7ed3\u6784\uff0c\u4f46\u5728\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\u540d\u79f0\uff09\uff0c\u4ee5\u4fbf\u4e3a\u4e86\u5b9a\u4e49\u51fd\u6570\u51fd\u6570\uff0c\u6211\u4eec\u51e0\u4e4e\u5fc5\u987b\u4f7f\u7528\u9012\u5f52\u3002\u8ba1\u5212\u4ee5\u5916\u7528\u4f5c\u6559\u5b66\u8bed\u8a00\u7684\u539f\u56e0\uff1a\u5b83\u8feb\u4f7f\u5b66\u751f\u5b66\u4e60\u8005\u5b66\u4f1a\u9012\u5f52\u601d\u8003\u3002\n  \u65b9\u6848\u662f\u4e00\u79cd\u5f88\u591a\u539f\u56e0\u7684\u9177\u8bed\u8a00\uff0c\u4f46\u662f\u4e00\u4e2a\u4e0e\u4e4b\u76f8\u5173\u7684\u8bed\u8a00\u662f\u5b83\u5141\u8bb8\u60a8\u4f7f\u7528\uff06\uff0334;\u5934\u7b49\u8231\uff06\uff0334;\u6570\u636e\u5bf9\u8c61\uff08\u901a\u5e38\u901a\u8fc7\u8bf4\u65b9\u6848\u652f\u6301\u7b2c\u4e00\u7c7b\u529f\u80fd\uff09\u6765\u8868\u793a\u3002\u8fd9\u610f\u5473\u7740\u5728\u65b9\u6848\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u51fd\u6570\u4f20\u9012\u7ed9\u53e6\u4e00\u4e2a\u529f\u80fd\u4f5c\u4e3a\u53c2\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff0c\u56e0\u4e3a\u5e94\u7528\u4e8e\u5176\u53c2\u6570\u7684\u8bc4\u4f30another\u51fd\u6570\u7684\u7ed3\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6211\u4eec\u9700\u8981\u65f6\u521b\u5efaCombourcyOn-Fly\uff08\u4f7f\u7528lambda\u7b26\u53f7\u8868\u793a\uff09\u3002\u8fd9\u662f\u529f\u80fd\u89c4\u5212\u7684\u672c\u8d28\uff0c\u5b83\u5c06\u5728\u968f\u540e\u7684\u8ba8\u8bba\u4e2d\u62ec\u8d77\u6765\u3002\u4f7f\u7528\u5176\u4ed6\u529f\u80fd\u7684\u51fd\u6570\u548c/\u6216\u5c06\u5176\u4ed6\u51fd\u6570\u8fd4\u56de\u5176\u7ed3\u679c\uff0c\u901a\u5e38\u662f\u66f4\u9ad8\u9636\u51fd\u6570\u7684\u3002\n  \u73b0\u5728\uff0c\u8fd9\u91cc\uff06\uff0339;\u62fc\u56fe\uff1a\u5982\u679c\u8981\u6c42\u60a8\u5728\u65b9\u6848\u4e2d\u5b9a\u4e49\u9636\u4e58\u51fd\u6570\uff0c\u5219\u4f55\u65f6\u624d\u80fd\u544a\u77e5\u60a8\u53ef\u4ee5\u5728\u5b9a\u4e49\u4e2d\u901a\u77e5\u9012\u5f52\u51fd\u6570\u8c03\u7528\uff08\u4f8b\u5982\uff0c\u5728\u4e0a\u9762\u7ed9\u51fa\u7684\u56e0\u5b50\u51fd\u6570\u4e2d\uff0c\u60a8\u65e0\u6cd5\u4f7f\u7528\u8bcd\u56e0\u5b50\u5728\u51fd\u6570\u7684\u8eab\u4f53\u4e2d\u7684\u4efb\u4f55\u5730\u65b9\uff09\u3002\u4f46\u662f\uff0c\u65e0\u8bba\u5982\u4f55\uff0c\u5141\u8bb8\u60a8\u4f7f\u7528\u4e00\u6d41\u7684\u529f\u80fd\u548c\u9ad8\u9636\u51fd\u6570\uff0c\u60a8\u8ba4\u4e3a\u60a8\u4f1a\u770b\u5230\u5408\u9002\u3002\u901a\u8fc7\u8fd9\u79cd\u77e5\u8bc6\uff0c\u60a8\u80fd\u5b9a\u4e49\u56e0\u5b50\u51fd\u6570\u5417\uff1f \n\u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u662f\u80af\u5b9a\u7684\uff0c\u5b83\u5c06\u76f4\u63a5\u5411\u6211\u4eec\u5e26\u5230Ycombinator\u3002\n   Y\u7ec4\u5408\u5668\u662f\u4e00\u4e2a\u9ad8\u9636\u51fd\u6570\u3002\u5b83\u9700\u8981\u4e00\u4e2a\u53c2\u6570\uff0c\u8fd9\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5373\u9012\u5f52\u3002\u5b83\u8fd4\u56de\u9012\u5f52\u7684\u529f\u80fd\u7248\u672c\u3002\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u4f7f\u7528y\u8be6\u7ec6\u4ecb\u7ecd\u4ece\u975e\u9012\u5f52\u4eba\u751f\u6210\u9012\u5f52\u529f\u80fd\u7684\u8fc7\u7a0b\uff0c\u4f46\u662f\u57fa\u672c\u60f3\u6cd5\u3002\n \u66f4\u4e00\u822c\u5730\u8bf4\uff0cY\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u6cd5\u6765\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\u83b7\u5f97\u9012\u5f52\uff0c\u652f\u6301\u4e00\u6d41\u7684\u529f\u80fd\uff0c\u4f46\u5b83\u6ca1\u6709\u5185\u7f6e\u9012\u5f52\u3002\u6240\u4ee5\u4f60\u4eec\u8868\u660e\u6211\u4eec\u7684\u662f\u8fd9\u79cd\u8bed\u8a00\u5df2\u7ecf\u5141\u8bb8\u6211\u4eec\u5141\u8bb8\u6211\u4eec\u8fc7\u671f\u51fd\u6570\uff0c\u5373\u4f7f\u8bed\u8a00\u5b9a\u4e49\u672c\u8eab\u8868\u793a\u7f3a\u70b9\u9012\u5f52\u3002\u8fd9\u662f\u4e00\u4ef6\u7f8e\u4e3d\u7684\u4e8b\u60c5\uff1a\u5b83\u5411\u6211\u4eec\u5c55\u793a\u4e86\u5355\u72ec\u7684\u529f\u80fd\u6027\u80fd\u53ef\u4ee5\u8ba9\u6211\u4eec\u505a\u6211\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u671f\u671bBeable\u7684\u4e8b\u60c5\uff08\u800c\u4e14\u5b83\u4e0d\u662f\u8fd9\u4e2a\u95ee\u9898\u7684\u552f\u4e00\u4f8b\u5b50\uff09\u3002\n  \u6211\u4eec\u5c06\u770b\u4e00\u4e0b\u4e24\u79cd\u5e7f\u6cdb\u7684\u8ba1\u7b97\u673a\u8bed\u8a00\uff1a\u90a3\u4e9b\u4f7f\u7528\u61d2\u60f0\u8bc4\u4f30\u7684\u4eba\u548c\u4f7f\u7528\u4e25\u683c\u8bc4\u4f30\u7684\u4eba\u3002 lazyevaluation\u610f\u5473\u7740\u4e3a\u4e86\u8bc4\u4f30\u8bed\u8a00\u4e2d\u7684\u8868\u8fbe\uff0c\u60a8\u53ef\u4ee5\u8bc4\u4f30\u6700\u7ec8\u7ed3\u679c\u6240\u9700\u7684\u8868\u8fbe\u5f0f\u3002\u7b49\uff08\u4f8b\u5982\uff09\u5982\u679c\u6709\u4e00\u90e8\u5206\u8868\u8fbe\u5f0f\uff0c\u5219\u9700\u8981\u5fd8\u8bb0\u8bc4\u4f30\uff08\u56e0\u4e3a\u7ed3\u679c\u4e0d\u4f9d\u8d56\u4e8e\u5b83\uff09\u5b83\u8d62\u5f97\u4e86\uff06\uff0339; t beevalated\u3002\u76f8\u53cd\uff0c\u4e25\u683c\u7684\u8bc4\u4f30\u610f\u5473\u7740\u5728\u786e\u5b9aASA\u6574\u4f53\u7684\u8868\u8fbe\u5f0f\u7684\u4ef7\u503c\u4e4b\u524d\uff0c\u5c06\u5728\u8868\u8fbe\u5f0f\u7684\u503c\uff08\u5177\u6709\u4e00\u4e9b\u5fc5\u8981\u7684\u4f8b\u5916\uff09\u4e4b\u524d\u5b8c\u5168\u8bc4\u4f30\u6240\u6709\u90e8\u5206\uff0c\u4f8b\u5982\u8868\u8fbe\u5f0f\uff0c\u8fd9\u5fc5\u987b\u61d2\u5f97\u6b63\u5e38\u5de5\u4f5c\uff09\u3002\u61d2\u60f0\u8bc4\u4f30\u66f4\u4e3a\u4e00\u822c\uff0c\u4f46\u4e25\u683c\u7684\u8bc4\u4f30\u662f\u66f4\u4e3a\u9884\u6d4b\u548c\u5f80\u5f80\u66f4\u6709\u6548\u7684\u3002\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u4f7f\u7528\u4e25\u683c\u7684\u8bc4\u4f30\u3002\u7f16\u7a0b\u8bed\u8a00Haskell\u4f7f\u7528\u61d2\u60f0\u7684\u8bc4\u4f30\uff0c\u8fd9\u662f\u5173\u4e8e\u8be5\u8bed\u8a00\u6700\u6709\u8da3\u7684\u4e8b\u60c5\u3002\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u4f7f\u7528\u4e24\u79cd\u7c7b\u578b\u7684\u8bc4\u4f30\u3002\n  \u5c3d\u7ba1\u6211\u4eec\u7ecf\u5e38\u6307Y\u548c\uff0334;\uff06\uff0334; y\u7ec4\u5408\u5668\uff0c\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u65e0\u9650\u6570\u91cf\u7684y\u7ec4\u5408\u5668\u3002\u6211\u4eec\u53ea\u4f1a\u5173\u6ce8\u4e24\u4e2a\u4eba\uff0c\u4e00\u4e2a\u61d2\u60f0\u548c\u4e00\u4e2a\u4e25\u683c\u7684\u3002\u6211\u4eec\u9700\u8981\u4e24\u4e2ay\u7ec4\u5408\u5668\uff0c\u56e0\u4e3aYcombinator\u6211\u4eec\u4e3a\u61d2\u4eba\u8bed\u8a00\u5b9a\u4e49\u4e0d\u9002\u7528\u4e8e\u4e25\u683c\u7684\u8bed\u8a00\u3002\u61d2\u60f0\u7684Y\u7ec4\u5408\u5668\u901a\u5e38\u88ab\u79f0\u4e3a\u6b63\u5e38\u9636Ycombinator\uff0c\u4e25\u683c\u7684\u7ec4\u5408\u5668\u88ab\u79f0\u4e3a\u9002\u7528\u4e8eApplicated-Order Ycombinator\u3002\u57fa\u672c\u4e0a\uff0c\u6b63\u5e38\u987a\u5e8f\u662f\u53e6\u4e00\u79cd\u8bf4\u6cd5\u7684\u65b9\u5f0f\uff06\uff0334;\u61d2\u60f0\uff06\uff0334;\u548c\u7533\u8bf7\u8ba2\u5355\u662f\u53e6\u4e00\u79cd\u8bf4\u6cd5\u7684\u65b9\u5f0f\uff06\uff0334;\u4e25\u683c\uff06\uff0334;\n  \u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u53e6\u4e00\u4e2a\u5927\u5212\u5206\u7ebf\u662f\u7edf\u8ba1\u5b66\u548c\u52a8\u6001\u952e\u5165\u4e4b\u95f4\u3002\u9759\u6001\u7c7b\u578b\u7684\u8bed\u8a00\u662f\u5728\u7f16\u8bd1\u65f6\u786e\u5b9a\u6240\u6709\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\uff0c\u5e76\u4e14\u4efb\u4f55\u7c7b\u578b\u7684\u9519\u8bef\u90fd\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25\u3002\u52a8\u6001\u7c7b\u578b\u7684\u8bed\u8a00\u4e0d\u4f1a\uff06\uff0339; t doany\u578b\u68c0\u67e5\u76f4\u5230\u8fd0\u884c\u65f6\u95f4\uff0c\u5e76\u4e14\u5982\u679c\u51fd\u6570\u5e94\u7528\u4e8e\u67d0\u79cd\u7c7b\u578b\u7684\u53c2\u6570\uff08\u4f8b\u5982\uff0c\u901a\u8fc7\u5c1d\u8bd5\u5c06\u6574\u6570\u548c\u5b57\u7b26\u4e32\u6dfb\u52a0\u5728\u4e00\u8d77\uff09\uff0c\u5219\u62a5\u544a\u9519\u8bef\u3002\u5728\u5e38\u7528\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0cC\uff0cC ++\u548cJava\u662f\u9759\u6001\u952e\u5165\u7684\uff0c\u800cPerl\uff0cPython\u548cRuby\u662f\u52a8\u6001\u7684\u3002\u65b9\u6848\uff08\u6211\u4eec\u7684\u8bed\u8a00\u6211\u4eec\u548c\u6211\u4eec\u7684\u4f8b\u5b50\u4f7f\u7528\u7684\u8bed\u8a00\uff09\u662f\u72ec\u594f\u52a8\u529b\u5b66\u7684\u3002 \uff08\u4e5f\u6709\u8bed\u8a00\u8de8\u8d8a\u8fb9\u754c\u4e4b\u95f4\u7684\u5178\u578b\u548c\u52a8\u6001\u7c7b\u578b\uff0c\u4f46\u6211\u8d62\u5f97\u4e86\uff06\uff0339; T\u8ba8\u8bba\u4e86\u8fd9\u4ef6\u4e8b\u3002\uff09\n \u4eba\u4eec\u7ecf\u5e38\u542c\u5230\u9759\u6001\u6253\u5b57\uff0c\u79f0\u4e3a\u5f3a\u952e\u5165\u7684\u66f2\u6298\u6253\u5b57\uff0c\u8fd9\u662f\u4e00\u79cd\u5f31\u6253\u5b57\uff0c\u4f46\u8fd9\u662f\u6ee5\u7528\u7684\u3002\u5f3a\u7684\u6253\u5b57\u7b80\u5355\u610f\u5473\u7740\u8bed\u8a00\u4e2d\u7684\u6bcf\u4e2a\u503c\u90fd\u6709\u4e00\u4e2a\u7c7b\u578b\uff0c\u800c\u53ea\u6709\u4e00\u79cd\u7c7b\u578b\uff0c\u800c\u5f31\u6253\u5b57\u610f\u5473\u7740\u67d0\u4e9b\u503c\u53ef\u4ee5\u83b7\u5f97\u4efb\u4f55\u7c7b\u578b\u7684\u7c7b\u578b\u3002\u56e0\u6b64\uff0c\u52a8\u6001\u7c7b\u578b\u7684\u65b9\u6848\u4e5f\u88ab\u5f3a\u70c8\u6253\u5b57\uff0c\u800cC\u9759\u6001\u952e\u5165\u7684C\u662f\u5f31\u952e\u5165\u7684\uff08\u56e0\u4e3a\u60a8\u53ef\u4ee5\u5c06\u4e00\u4e2a\u7269\u4f53\u6295\u5c04\u5230\u6307\u5411\u53e6\u4e00\u7c7b\u578b\u5bf9\u8c61\u7684\u6307\u9488\u4e2d\u7684\u6307\u9488\uff06\uff0339; s\u4ef7\u503c\uff09\u3002\u6211\u5c06\u53ea\u5173\u6ce8\u8fd9\u91cc\u7684\u5f3a\u70c8\u6253\u5b57\u8bed\u8a00\u3002 \n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u4ee5\u52a8\u6001\u7684\u8bed\u8a00\u5b9a\u4e49y\u7ec4\u5408\u5668\u66f4\u7b80\u5355\uff0c\u6240\u4ee5\uff06\uff0339; s\u6211\uff06\uff0339; ll\u505a\u3002\u53ef\u4ee5\u4ee5\u8bb8\u591a\u9759\u6001\u7c7b\u578b\u7684\u8bed\u8a00\u5b9a\u4e49Ycombinator\uff0c\u4f46\uff08\u81f3\u5c11\u5728\u793a\u4f8b\u4e2d\u548c\uff0339; ve\u770b\u5230\uff09\u8fd9\u4e9b\u5b9a\u4e49\u901a\u5e38\u9700\u8981\u4e00\u4e9b\u975e\u660e\u663e\u7684\u7c7b\u578b\u7684\u9ed1\u63a9\u9970\uff0c\u56e0\u4e3aY\u7ec4\u5408\u5668\u672c\u8eab\u5e76\u4e0d\u662f\u76f4\u622a\u4e86\u5f53\u7684\u9759\u6001\u7c7b\u578b\u3002\u9664\u4e86\u672c\u6587\u7684\u8303\u56f4\u4e4b\u5916\uff0c\u6211\u8d62\u5f97\u4e86\uff06\uff0339;\u6211\u8fdb\u4e00\u6b65\u63d0\u5230\u5b83\u3002\n  \u7ec4\u5408\u8005\u53ea\u662f\u4e00\u4e2a\u03bb\u8868\u8fbe\u5f0f\uff0c\u6ca1\u6709\u81ea\u7531\u504f\u79bb\u3002\u6211\u4eec\u770b\u5230\u4e86\u03bb\u8868\u8fbe\u5f0f\uff08\u5b83\u4eec\uff06\uff0339; justanonymous\u51fd\u6570\uff09\uff0c\u4f46\u662f\u4e00\u4e2a\u514d\u8d39\u53d8\u91cf\uff06\uff0339;\u5b83\uff06\uff0339; s\u4e00\u4e2a\u53d8\u91cf\uff08\u5373\u8bed\u8a00\u4e2d\u7684\u540d\u79f0\u6216\u6807\u8bc6\u7b26\uff09\uff0c\u54ea\u4e2a\u662f\u59d3\u540d\u7684\u3002\u73b0\u5728\u5f00\u5fc3\uff1f\u4e0d\uff1f\u597d\u7684\uff0c\u8ba9\u6211\u89e3\u91ca\u4e00\u4e0b\u3002\n \u7ed1\u5b9a\u53d8\u91cf\u7b80\u76f4\u662f\u4e00\u4e2a\u53d8\u91cf\uff0c\u8be5\u53d8\u91cf\u5305\u542b\u5728Lambda\u8868\u8fbe\u5f0f\u7684\u4e3b\u4f53\u5185\uff0c\u8be5\u03bb\u8868\u8fbe\u5f0f\u5177\u6709\u8be5\u53d8\u91cf\u540d\u79f0\u4f5c\u4e3a\u5176\u53c2\u6570\u4e4b\u4e00\u3002\n   \u8fd9\u4e9blambda\u8868\u8fbe\u5f0f\u7684\u4f53\u53d8\u91cf\u662f\u514d\u8d39\u53d8\u91cf\u8fd8\u662f\u7ed1\u5b9a\u53d8\u91cf\uff1f\u6211\u4eec\uff06\uff0339; ll\u5ffd\u7565\u4e86lambda\u8868\u8fbe\u5f0f\u7684\u5f62\u5f0f\u53c2\u6570\uff0c\u56e0\u4e3a\u03bb\u8868\u8fbe\u7684\u8eab\u4f53\u4e2d\u53ea\u80fd\u88ab\u89c6\u4e3a\u81ea\u7531\u6216\u7ed1\u5b9a\u7684\u53d8\u91cf\u3002\u81f3\u4e8e\u5176\u4ed6\u53d8\u91cf\uff0c\u8fd9\u91cc\u6709\u7b54\u6848\uff1a\n \u03bb\u8868\u8fbe\u4f53\u5185\u7684X\u662f\u4e00\u4e2a\u8fb9\u754c\uff0c\u56e0\u4e3a\u03bb\u8868\u8fbe\u7684\u6b63\u5f0f\u53c2\u6570\u4e5f\u662fx\u3002\u8fd9\u79cd\u03bb\u8868\u8fbe\u6ca1\u6709\u5176\u4ed6\u53d8\u91cf\uff0c\u56e0\u6b64\u6ca1\u6709\u81ea\u7531\u53d8\u91cf\uff0c\u56e0\u6b64\uff06\uff0339; s\u7ec4\u5408\u5668\u3002\n  Lambda\u8eab\u4f53\u4e2d\u7684Y\u662f\u4e00\u4e2a\u81ea\u7531\u53d8\u91cf\u3002\u56e0\u6b64\uff0c\u8fd9\u79cd\u03bb\u8868\u8fbe\u4e0d\u662f\u7ec4\u5408\u8005\u3002\n  \u9664\u4e86Lambda\u8868\u8fbe\u7684\u5f62\u5f0f\u53c2\u6570\u4e4b\u5916\uff0c\u53ea\u6709\u4e00\u4e2a\u53d8\u91cf\uff0c\u6700\u7ec8x\uff0c\u8fd9\u662f\u4e00\u4e2a\u7ed1\u5b9a\u53d8\u91cf\uff08\u7531\u5916\u90e8\u03bb\u8868\u8fbe\u7684\u6b63\u5f0f\u53c2\u6570\u7ed1\u5b9a\uff09\u3002\u56e0\u6b64\uff0c\u8fd9\u4e2aLambda\u8868\u8fbe\u5f0f\u6574\u4f53\u6ca1\u6709\u81ea\u7531\u53d8\u91cf\uff0c\u6240\u4ee5\u8fd9\u662f\u4e00\u4e2a\u7ec4\u5408\u8005\u3002 \n\u9664\u4e86Lambda\u8868\u8fbe\u5f0f\u7684\u5f62\u5f0f\u53c2\u6570\u4e4b\u5916\uff0c\u8fd8\u6709\u4e24\u4e2a\u53d8\u91cf\uff0c\u6700\u7ec8x\u548cy\uff0c\u4e24\u4e2a\u7ed1\u5b9a\u53d8\u91cf\u3002\u8fd9\u662f\u4e00\u4e2a\u7ec4\u5408\u8005\u3002\n  \u6574\u4e2a\u8868\u8fbe\u4e0d\u662f\u03bb\u8868\u8fbe\uff0c\u6240\u4ee5\u5b83\u6839\u636e\u5b9a\u4e49\u800c\u4e0d\u662f\u7ec4\u5408\u8005\u3002\u7136\u800c\uff0cX\u662f\u4e00\u4e2a\u81ea\u7531\u53d8\u91cf\uff0c\u6700\u7ec8y\u662f\u7ed1\u5b9a\u53d8\u91cf\u3002\n  \u518d\u6b21\uff0c\u6574\u4e2a\u8868\u8fbe\u662f\uff06\uff0339; t\u4e00\u4e2a\u03bb\u8868\u8fbe\uff08\u5b83\uff06\uff0339; s\u51fd\u6570\u5e94\u7528\u7a0b\u5e8f\uff09\uff0c\u6240\u4ee5\u8fd9\u662f\u4e00\u4e2a\u7ec4\u5408\u8005\u3002\u7b2c\u4e8cx\u662f\u7ed1\u5b9a\u53d8\u91cf\uff0c\u800cY\u662f\u81ea\u7531\u53d8\u91cf\u3002\n  \uff08\u5b9a\u4e49\u56e0\u5b50\uff08lambda\uff08n\uff09\uff08\u5982\u679c\uff08= n 0\uff091\uff08* n\uff08armborial\uff08 -  n 1\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff09\n \u662f\u4e00\u4e2a\u7ec4\u5408\u8005\uff0c\u4f60\u4e0d\u8003\u8651\u5b9a\u4e49\u90e8\u5206\uff0c\u6240\u4ee5\u4f60\uff06\uff0339;\u91cd\u65b0\u8be2\u95ee\u662f\u4ec0\u4e48\n  \u662f\u4e00\u4e2a\u7ec4\u5408\u8005\u3002\u7531\u4e8e\u5728\u8be5Lambda\u8868\u8fbe\u5f0f\u4e2d\uff0c\u540d\u79f0\u9636\u4e58\u4ee3\u8868\u4e00\u4e2a\u81ea\u7531\u53d8\u91cf\uff08\u540d\u79f0\u9636\u4e58\u4e0d\u662fLambda\u8868\u8fbe\u5f0f\u7684\u6b63\u5f0f\u53c2\u6570\uff09\uff0c\u8fd9\u4e0d\u662f\u7ec4\u5408\u8005\u3002\u8fd9\u5c06\u662f\u91cd\u8981\u7684\u3002\u4e8b\u5b9e\u4e0a\uff0c\u540d\u79f0=\uff0c*\uff0c\u548c - \u4e5f\u662f\u514d\u8d39\u53d8\u91cf\uff0c\u6240\u4ee5\u5373\u4f7f\u6ca1\u6709\u540d\u79f0\u56e0\u5b50\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u7ec4\u5408\u8005\uff08\u8bf4\u4e0d\u51fa\u6570\u5b57\uff01\uff09\u3002\n     \uff08\u5b9a\u4e49\u56e0\u5b50\uff08lambda\uff08n\uff09\uff08\u5982\u679c\uff08= n 0\uff091\uff08* n\uff08armborial\uff08 -  n 1\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff09 \n\u6211\u4eec\u60f3\u8981\u505a\u7684\u5c31\u662f\u63d0\u51fa\u8fd9\u4e00\u7248\u672c\uff0c\u8fd9\u662f\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u4f46\u5e76\u4e0d\u662f\uff06\uff0339; t\u5728\u51fd\u6570\u4f53\u5185\u6709\u8ba8\u538c\u7684\u9012\u5f52\u8c03\u7528\u9636\u4e58\u547c\u53eb\u3002\n \u6211\u4eec\u5728\u54ea\u91cc\u5f00\u59cb\uff1f\u5982\u679c\u60a8\u53ef\u4ee5\u4fdd\u5b58\u6240\u6709\u529f\u80fd\uff0c\u9664\u4e86\u8fdd\u89c4\u9012\u5f52\u8c03\u7528\u4e4b\u5916\uff0c\u5b83\u4f1a\u5f88\u597d\uff0c\u5e76\u5728\u90a3\u91cc\u653e\u4e00\u4e9b\u4e1c\u897f\u3002\u8fd9\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1a\n \uff08\u5b9a\u4e49\u5c40\u90e8\u6392\u5e8f\uff08\u5982\u679c\uff08= n 0\uff091\uff08* n\uff08\uff06lt ;??\uff06gt;\uff08 -  n 1\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff09\n \u8fd9\u4ecd\u7136\u8ba9\u6211\u4eec\u7559\u4e0b\u4e86\u6807\u6709\u6807\u8bb0\u7684\u5730\u65b9\u7684\u95ee\u9898\u3002\u5b83\uff06\uff0339;\u5982\u679c\u60a8\u4e0d\u77e5\u9053\u60a8\u60f3\u8981\u5728\u4e00\u6bb5\u4ee3\u7801\u4e2d\u7684\u67d0\u4e2a\u5730\u65b9\u7a76\u7adf\u77e5\u9053\u60a8\u60f3\u8981\u653e\u5165\u67d0\u4e2a\u4ee3\u7801\u7684\u67d0\u4e2a\u5730\u65b9\uff0c\u8bf7\u5c06\u5176\u6458\u5f55\u5e76\u4f7f\u5176\u6210\u4e3a\u51fd\u6570\u7684\u53c2\u6570\uff0c\u8fd9\u662f\u4e00\u4e2a\u9a8c\u8bc1\u548c\u771f\u6b63\u7684\u529f\u80fd\u7f16\u7a0b\u539f\u5219\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5982\u4e0b\uff1a\n \uff08\u5b9a\u4e49\u51e0\u4e4e - \u56e0\u5b50\uff08Lambda\uff08F\uff09\uff08\u5982\u679c\uff08= n 0\uff091\uff08* n\uff08f\uff08 -  n 1\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff09\n \u6211\u4eec\u5728\u8fd9\u91cc\u5b8c\u6210\u4e86\u4ec0\u4e48\u662f\u5c06\u9012\u5f52\u8c03\u7528\u91cd\u547d\u540d\u4e3aF\u7684\u9012\u5f52\u8c03\u7528\uff0c\u5e76\u4f7fF Anargument\u4e0e\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u8c03\u7528\u8fd1\u6781\u67d0\u7684\u51fd\u6570\u3002\u5dee\u5f02\u5dee\u5f02\u4e0d\u662f\u6240\u6709\u7684\u56e0\u5b50\u51fd\u6570\u3002\u76f8\u53cd\uff0c\u5b83\uff06\uff0339;\u4e00\u4e2a\u9ad8\u9636\u51fd\u6570\uff0c\u5b83\u91c7\u7528\u4e00\u4e2a\u53c2\u6570f\uff0c\u5b83\u66f4\u597d\u5730\u662f\u4e00\u4e2a\u51fd\u6570\uff08\u6216f\uff08 -  n1\uff09\uff09won\uff06\uff0339; t\u6709\u610f\u4e49\uff09\uff0c\u5e76\u8fd4\u56de\u53e6\u4e00\u4e2a\u51fd\u6570\uff08\uff08\u5982\u679c\u6211\u4eec\u4e3aF\u9009\u62e9\u5408\u9002\u7684\u4ef7\u503c\uff0c\u90a3\u4e48\uff08\u5e0c\u671b\uff09\u5c06\u662f\u4e00\u4e2a\uff08\u5e0c\u671b\uff09\u7684\u90e8\u5206\uff09\u3002\n \u5b83\u5f88\u91cd\u8981\uff0c\u610f\u8bc6\u5230\u8fd9\u4e2a\u6280\u5de7\u4e0d\u662f\u4ee5\u4efb\u4f55\u65b9\u5f0f\u7279\u5b9a\u4e8e\u9636\u4e58\u51fd\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u4efb\u4f55\u9012\u5f52\u51fd\u6570\u505a\u51fa\u5b8c\u5168\u76f8\u540c\u7684\u6280\u5de7\u3002\u4f8b\u5982\uff0c\u8003\u8651\u9012\u5f52\u51fd\u6570\u6765\u8ba1\u7b97FibonAcci\u6570\u5b57\u3002 Fibonacci\u53f7\u7801\u7684\u9012\u5f52\u5b9a\u4e49\u5982\u4e0b\uff1a \nfibonacci 0 = 0 fibonacci 1 = 1 fibonacci n = fibonacci\uff08n  -  1\uff09+ fibonacci\uff08n  -  2\uff09\n \uff08\u4e8b\u5b9e\u4e0a\u200b\u200b\uff0c\uff06\uff0339;\u5728Haskell\u4e2d\u7684Fibonacci\u51fd\u6570\u7684\u5b9a\u4e49\u3002\uff09\u5728\u65b9\u6848\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u7f16\u5199\u529f\u80fd\uff1a\n \uff08\u5b9a\u4e49Fibonacci\uff08lambda\uff08n\uff09\uff08cond\uff08= n 0\uff090\uff09\uff08\uff08= n 1\uff091\uff09\uff08else\uff08+\uff08fibonacci\uff08 -  n 1\uff09\uff09\uff08fibonacci\uff08 -  n 2\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff09 \uff09\n \uff08COND\u53ea\u662f\u5d4c\u5957\u5982\u679c\u8868\u8fbe\u5f0f\u7684\u901f\u8bb0\u8868\u8fbe\u5f0f\uff09\u3002\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u6211\u4eec\u4e3a\u56e0\u7d20\u505a\u7684\u90a3\u6837\u5220\u9664\u663e\u5f0f\u9012\u5f52\uff1a\n \uff08\u5b9a\u4e49\u51e0\u4e4e - \u6590\u6ce2\u7eb3\uff08Lambda\uff08F\uff09\uff08Lambda\uff08n\uff09\uff08cond\uff08\uff08= n 0\uff090\uff09\uff08\uff08= n 1\uff091\uff09\uff08\u5426\u5219\uff08+\uff08f\uff08 -  n 1\uff09\uff09\uff08f\uff08 -  n 2\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff09\n \u6b63\u5982\u60a8\u6240\u89c1\uff0c\u4ece\u9012\u5f52\u51fd\u6570\u5230\u975e\u9012\u5f52\u51e0\u4e4e\u7b49\u6548\u51fd\u6570\u7684\u8f6c\u6362\u662f\u7eaf\u673a\u68b0\u552f\u4e00\u7684\uff1a\u60a8\u5c06\u51fd\u6570\u51fd\u6570\u7684\u540d\u79f0\u91cd\u547d\u540d\u4e3af\u5230f\uff0c\u5e76\u4e14\u60a8\u5305\u88c5a\uff08lambda\uff08f \uff09......\uff09\u5728\u8eab\u4f53\u5468\u56f4\u3002\n \u5982\u679c\u4f60\uff06\uff0339;\u6211\u8ddf\u7740\u6211\u521a\u521a\u505a\u4e86\u4ec0\u4e48\uff08\u4ece\u4e0d\u4ecb\u610f\u4e3a\u4ec0\u4e48\u6211\u505a\u5230\u4e86;\u6211\u4eec\u7a0d\u540e\u4f1a\u770b\u5230\u90a3\u4e2a\uff09\uff0c\u7136\u540e\u795d\u8d3a\uff01\u6b63\u5982\u5c24\u8fbe\u6240\u8bf4\uff0c\u4f60\u521a\u521a\u8d70\u8fdb\u4e86\u4e00\u4e2a\u66f4\u5927\u7684\u4e16\u754c\u3002 \n\u6211\u53ef\u80fd\u4e0d\u5e94\u8be5\u8fd9\u6837\u505a\uff0c\u4f46\u662f\u6211\u4f1a\u7ed9\u4f60\u4e00\u4e2a\u5077\u5077\u6478\u7684\u9884\u89c8\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u8fdb\u5165\u7684\u5730\u65b9\u3002\u4e00\u65e6\u6211\u4eec\u5b9a\u4e49\u4e86Y\u7ec4\u5408\u5668\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u51e0\u4e2a\u5dee\u5f02\u5b9a\u4e49\u5dee\u5f02\u51fd\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n  \u5176\u4e2dy\u662fy\u7ec4\u5408\u5668\u3002\u8bf7\u6ce8\u610f\uff0c\u6b64\u56e0\u5b50\u7684\u5b9a\u4e49\u4e0d\u5177\u6709\u4efb\u4f55\u660e\u786e\u7684\u9012\u5f52\u3002\u540c\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u4f7f\u7528\u8fd1\u4f3c - \u6590\u6ce2\u7eb3\u5951\u5b9a\u4e49Fibonacci\u51fd\u6570\uff1a\n  \u56e0\u6b64\uff0c\u53ea\u8981\u6211\u4eec\u62e5\u6709\u9002\u5f53\u7684\u51e0\u4e4e\u51fd\u6570\uff08\u5373\uff0c\u901a\u8fc7\u62bd\u51fa\u9012\u5f52\u51fd\u6570\u8c03\u7528\uff0c\u6211\u4eec\u5c06\u5728\u4f55\u65f6\u4f55\u65f6\u4f55\u65f6\u4f55\u5730\u63d0\u4f9b\u989d\u5916\u7684\u6b21\u6570\n   \u4e3a\u4e86\u8bba\u8ff0\uff0c\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u62e5\u6709\u4e86\u4e00\u4e2a\u5de5\u4f5c\u9636\u4e58\u51fd\u6570\uff08\u9012\u5f52\u6216\u4e0d\uff0c\u6211\u4eec\u4e0d\u5c0f\u5fc3\uff09\u3002\u6211\u4eec\uff06\uff0339; ll\u81f4\u7535\u8be5\u5047\u8bbe\u7684\u9636\u4e58\u51fd\u6570\u56e0\u5b50\u3002\u73b0\u5728\u8ba9\uff06\uff0339; s\u8003\u8651\u4ee5\u4e0b\u5185\u5bb9\uff1a\n    \uff08\u5b9a\u4e49FactoriaNB\uff08\uff08\u03bb\uff08\u03bb\uff08n\uff09\uff08\u5982\u679c\uff08= n 0\uff091\uff08* n\uff08f\uff08 -  n 1\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff09\n \u73b0\u5728\uff0c\u901a\u8fc7\u5728\u6211\u4eec\u5f97\u5230\u7684Lambda\u8868\u8fbe\u5f0f\u8eab\u4f53\u5185\u4ee3\u66fff\u7684facoriala\uff1a\n \uff08\u5b9a\u4e49FactorizerB\uff08lambda\uff08n\uff09\uff08\u5982\u679c\uff08= n 0\uff091\uff08* n\uff08factoriala\uff08 -  n 1\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff09 \n\u8fd9\u770b\u8d77\u6765\u5f88\u50cf\u9012\u5f52\u9636\u6bb5\u51fd\u6570\uff0c\u4f46\u5b83\u662f\uff06\uff0339; t\uff1afactoriala\u4e0efactorizerb.so\uff06\uff0339; s\u4e00\u4e2a\u975e\u9012\u5f52\u51fd\u6570\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5047\u8bbe\u7684\u4e8b\u9879a\u51fd\u6570\u3002\u5b83\u5b9e\u9645\u4e0a\u6709\u6548\u5417\uff1f\u55ef\uff0c\u5b83\uff06\uff0339; Spretty\u663e\u7136\uff0c\u5b83\u5e94\u8be5\u4e3an = 0\u5de5\u4f5c\uff0c\u56e0\u4e3a\uff08FactorizerB 0\uff09\u5c06\u53ea\u662f\u8fd4\u56de1\uff08\u62400\u7684\u56e0\u5b50\uff09\u3002\u5982\u679c\u662fN\uff06gt; 0\uff0c\u7136\u540e\uff08FactorialBn\uff09\u7684\u503c\u5c06\u662f\uff08* n\uff08factoriala\uff08 -  n 1\uff09\uff09\uff09\uff09\u3002\u73b0\u5728\uff0c\u6211\u4eec\u5047\u8bbe\u4e8b\u9879\u662f\u6b63\u786e\u8ba1\u7b97\u9636\u4e58\u7684\u5f71\u54cd\uff0c\u56e0\u6b64\uff08\u56e0\u6b64\uff08 -  n 1\uff09\uff09\u662fn  -  1\u7684\u56e0\u5b50\uff0c\u56e0\u6b64\uff08* n\uff08factoriala\uff08 -  n 1\uff09\uff09\uff09\u662fn\u7684\u56e0\u5b50\uff08\u901a\u8fc7\u5b9a\u4e49\u9636\u4e58\uff09\uff0c\u4ece\u800c\u8bc1\u660e\uff0c\u53ea\u8981\u5404\u79cd\u60c5\u51b5\uff0c\u5c31\u53ef\u4ee5\u6b63\u786e\u8ba1\u7b97\u56e0\u5b50\u51fd\u6570\u3002\u6240\u4ee5\u8fd9\u662f\u6709\u6548\u7684\u3002\u552f\u4e00\u7684\u95ee\u9898\u662f\u6211\u4eec\u4e0d\uff06\uff0339;\u667a\u80fd\u5730\u6709\u4e00\u4e2a\u6492\u8c0e\u7684\u5c40\u52bf\u3002\n \u73b0\u5728\uff0c\u5982\u679c\u4f60\u771f\u7684\u5f88\u806a\u660e\uff0c\u4f60\u53ef\u80fd\u4f1a\u95ee\u81ea\u5df1\u662f\u5426\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a\n  \u8fd9\u4e00\u60f3\u6cd5\u662f\uff1a\u5047\u8bbeSfaciala\u662f\u4e00\u4e2a\u6709\u6548\u7684\u56e0\u5b50\u51fd\u6570\u3002\u7136\u540e\n...... ", "note_en": "Tiger got to hunt, Bird got to fly; Lisper got to sit and wonder, (Y (Y Y))?  Tiger got to sleep, Bird got to land; Lisper got to tell himself he understand.  \u00a0\u00a0\u00a0\u00a0\u2014 Kurt Vonnegut, modified by Darius Bacon\n  I recently wrote a blog post about the Y combinator. Since then, I&#39;ve received so many useful comments that I thought it was appropriate to expand the post into a more complete article. This article will go into greater depth on the subject, but I hope it&#39;ll be more comprehensible as well. You don&#39;t need to have read the previous post to understand this one (in fact, it&#39;s probably better if you haven&#39;t.) The only background knowledge I require is a tiny knowledge of the Scheme programming language including recursion and first-class functions, which I will review. Comments are (again) welcome.\n   Before I get into the details of what Y actually is, I&#39;d like to addressthe question of why you, as a programmer, should bother to learn about it. Tobe honest, there aren&#39;t a lot of good nuts-and-bolts practical reasons forlearning about Y. Even though it does have a few practical applications, forthe most part it&#39;s mainly of interest to computer language theorists.Nevertheless, I do think it&#39;s worth your while to know something about Y forthe following reasons:\n It&#39;s one of the most beautiful ideas in all of programming. If you have any sense of programming aesthetics, you&#39;re sure to be delighted by Y.\n It shows in a very stark way how amazingly powerful the simple ideas of functional programming are.\n In 1959, the British scientist C. P. Snow gave a famous lecture called  The Two Cultures where he bemoaned the fact that many intelligent and well-educated people of the time had almost no knowledge of science. He used knowledge of the Second Law of Thermodynamics as a kind of dividing line between those who were scientifically literate and those who weren&#39;t. I think we can similarly use knowledge of the Y combinator as a dividing line between programmers who are &#34;functionally literate&#34; ( i.e. have a reasonably deep knowledge of functional programming) and those who aren&#39;t. There are other topics that could serve just as well as Y (notably monads), but Y will do nicely. So if you aspire to have the True Lambda-Nature, read on.\n By the way,  Paul Graham (the Lisp hacker, Lisp book author, essayist, and now venture capitalist) apparently thinks so highly of Y that he named his startup incubator company  Y Combinator. Paul got rich from his knowledge of ideas like these; maybe someone else will too. Maybe even you.\n    We&#39;ll start our exploration of the Y combinator by defining some functions to compute factorials. The factorial of a non-negative integer  n is the product of all integers starting from  1 and going up to and including  n. Thus we have:\n factorial 1 = 1 factorial 2 = 2 * 1 = 2 factorial 3 = 3 * 2 * 1 = 6 factorial 4 = 4 * 3 * 2 * 1 = 24\n and so on. (I&#39;m using a function notation without parentheses here, so\u00a0 factorial 3\u00a0 is the same as what is usually written as\u00a0 factorial(3).\u00a0 Humor me.) Factorials increase veryrapidly with increasing  n; the factorial of  20 is 2432902008176640000. The factorial of  0 is definedto be  1; this turns out to be the appropriate definition for the kinds of things factorials are actually used for (like solving problems incombinatorics).\n  It&#39;s easy to write a function in a programming language to compute factorials using some kind of a looping control construct like a  while or  for loop ( e.g. in C or Java). However, it&#39;s also easy to write a recursive function to compute factorials, because factorials have a very natural recursive definition:\n  where the second line applies for all  n greater than zero. Infact, in the computer language  Haskell,that&#39;s the way you actually define the factorial function. In  Scheme, the language we&#39;ll be using here,this function would be written like this:\n  Scheme uses a parenthesized prefix notation for everything, so something like  \u00a0(- n 1)\u00a0 represents what is usually written  \u00a0n - 1\u00a0 in most programming languages. The reasons for this are beyond the scope of this article, but getting used to this notation isn&#39;t very hard.\n In fact, the above definition of the factorial function in Scheme could also be written in a slightly more explicit way as follows:\n (define factorial (lambda (n) (if (= n 0) 1 (* n (factorial (- n 1))))))\n The keyword  lambda simply indicates that the thing we&#39;redefining ( i.e. whatever is enclosed by the open parenthesis to theimmediate left of the  lambda and its corresponding closeparenthesis) is a function. What comes immediately after the word lambda, in parentheses, are the  formal arguments of thefunction; here there is just one argument, which is  n. The body of the function comes after the formal arguments, and hereconsists of the expression  (if (= n 0) 1 (* n (factorial (- n1)))). This kind of function is an  anonymous function. Here youdo give the anonymous function the name  factorial after you&#39;vedefined it, but you don&#39;t have to, and often it&#39;s handy not to if you&#39;re onlygoing to be using it once. In Scheme and some other languages, anonymousfunctions are also called  lambda expressions. Many programminglanguages besides Scheme allow you to define anonymous functions, includingPython, Ruby, Javascript, Ocaml, and Haskell (but not C, C++, or Java,unfortunately). We&#39;ll be using lambda expressions a lot below.\n In the Scheme language, the definition of  factorial just givenis identical to the one before it; Scheme simply translates the firstdefinition into the second one before evaluating it. So all functions inScheme are really lambda expressions.\n Note that the body of the function has a call to the  factorialfunction (which we&#39;re in the process of defining) inside it, which makes thisa recursive definition. I will call this kind of definition, where the name ofthe function being defined is used in the body of the function, an explicitly recursive definition. (You might wonder what an &#34;implicitlyrecursive&#34; function would be. I&#39;m not going to use that expression, but thenotion I have in mind is a recursive function which is generated throughnon-recursive means \u2014 keep reading!)\n For the sake of argument, we&#39;re going to assume that our version of Schemedoesn&#39;t have the equivalent of  for or  while loops inC or Java (although in fact, real Scheme implementations do have suchconstructs, but under a different name), so that in order to define a functionlike  factorial, we pretty much have to use recursion. Scheme isoften used as a teaching language partly for this reason: it forces studentsto learn to think recursively.\n  Scheme is a cool language for many reasons, but one that is relevant to ushere is that it allows you to use functions as &#34;first class&#34; data objects(this is often expressed by saying that Scheme supports  first-classfunctions). This means that in Scheme, we can pass a function to anotherfunction as an argument, we can return a function as the result of evaluatinganother function applied to its arguments, and we can create functionson-the-fly as we need them (using the  lambda notation shownabove). This is the essence of functional programming, and it will featureprominently in the ensuing discussion. Functions which take other functions asarguments, and/or which return other functions as their results, are usuallyreferred to as  higher-order functions.\n  Now, here&#39;s the puzzle: what if you were asked to define the factorial function in Scheme, but were told that you could notuse recursive function calls in the definition (for instance, in the factorial function given above you cannot use the word factorial anywhere in the body of the function). However, you are allowed to use first-class functions and higher-order functions anyway you see fit. With this knowledge, can you define the factorial function?\n The answer to this question is yes, and it will lead us directly to the Ycombinator.\n   The Y combinator is a higher-order function. It takes a single argument,which is a function that isn&#39;t recursive. It returns a version of the functionwhich is recursive. We will walk through this process of generating recursivefunctions from non-recursive ones using Y in great detail below, but that&#39;sthe basic idea.\n More generally, Y gives us a way to get recursion in a programming languagethat supports first-class functions but that doesn&#39;t have recursion built into it. So what Y shows us is that such a language already allows us to definerecursive functions, even though the language definition itself says nothingabout recursion. This is a Beautiful Thing: it shows us that functionalprogramming alone can allow us to do things that we would never expect to beable to do (and it&#39;s not the only example of this).\n  We will be looking at two broad classes of computer languages: those that use  lazy evaluation and those that use  strict evaluation. Lazyevaluation means that in order to evaluate an expression in the language, youonly evaluate as much of the expression as is needed to get the final result.So (for instance) if there is a part of the expression that doesn&#39;t need toget evaluated (because the result will not depend on it) it won&#39;t beevaluated. In contrast, strict evaluation means that all parts of anevaluation will be evaluated completely before the value of the expression asa whole is determined (with some necessary exceptions, such as if expressions, which have to be lazy to work properly). Inpractice, lazy evaluation is more general, but strict evaluation is morepredictable and often more efficient. Most programming languages use strictevaluation. The programming language  Haskell uses lazy evaluation, and this isone of the most interesting things about that language. We will use both kindsof evaluation in what follows.\n  Even though we often refer to Y as &#34;the&#34; Y combinator, in actual fact thereare an infinite number of Y combinators. We will only be concerned with two ofthese, one lazy and one strict. We need two Y combinators because the Ycombinator we define for lazy languages will not work for strict languages.The lazy Y combinator is often referred to as the  normal-order Ycombinator and the strict one is referred to as the  applicative-order Ycombinator. Basically,  normal-order is another way of saying &#34;lazy&#34;and  applicative-order is another way of saying &#34;strict&#34;.\n  Another big dividing line in programming languages is between  statictyping and  dynamic typing. A statically-typed language is one wherethe types of all expressions are determined at compile time, and any typeerrors cause the compilation to fail. A dynamically-typed language doesn&#39;t doany type checking until run time, and if a function is applied to arguments ofinvalid types ( e.g. by trying to add together an integer and a string),then an error is reported. Among commonly-used programming languages, C, C++and Java are statically typed, and Perl, Python and Ruby are dynamicallytyped. Scheme (the language we&#39;ll be using for our examples) is alsodynamically typed. (There are also languages that straddle the border betweenstatically-typed and dynamically-typed, but I won&#39;t discuss thisfurther.)\n One often hears static typing referred to as  strong typing anddynamic typing referred to as  weak typing, but this is an abuse ofterminology. Strong typing simply means that every value in the language hasone and only one type, whereas weak typing means that some values can havemultiple types. So Scheme, which is dynamically typed, is also strongly typed,while C, which is statically typed, is weakly typed (because you can cast apointer to one kind of object into a pointer to another type of object withoutaltering the pointer&#39;s value). I will only be concerned with strongly typedlanguages here.\n It turns out to be much simpler to define the Y combinator in dynamicallytyped languages, so that&#39;s what I&#39;ll do. It is possible to define a Ycombinator in many statically typed languages, but (at least in the examplesI&#39;ve seen) such definitions usually require some non-obvious type hackery,because the Y combinator itself doesn&#39;t have a straightforward static type.That&#39;s beyond the scope of this article, so I won&#39;t mention it further.\n  A combinator is just a  lambda expression with no  freevariables. We saw above what lambda expressions are (they&#39;re justanonymous functions), but what&#39;s a free variable? It&#39;s a variable ( i.e. a name or identifier in the language) which isn&#39;t a  boundvariable. Happy now? No? OK, let me explain.\n A bound variable is simply a variable which is contained inside the body of a lambda expression that has that variable name as one of its arguments.\n   Are the variables in the body of these lambda expressions free variables or bound variables? We&#39;ll ignore the formal arguments of the lambda expressions, because only variables in the body of the lambda expression can be considered free or bound. As for the other variables, here are the answers:\n The  x in the body of the lambda expression is a boundvariable, because the formal argument of the lambda expression is also x. This lambda expression has no other variables, therefore ithas no free variables, therefore it&#39;s a combinator.\n  The  y in the lambda body is a free variable. This lambda expression is therefore not a combinator.\n  Aside from the formal arguments of the lambda expression, there is only one variable, the final  x, which is a bound variable (it&#39;s bound by the formal argument of the outer lambda expression). Therefore, this lambda expression as a whole has no free variables, so this is a combinator.\n  Aside from the formal arguments of the lambda expression, there are two variables, the final  x and  y, both bound variables. This is a combinator.\n  The entire expression is not a lambda expression, so it&#39;s by definition not a combinator. Nevertheless, the  x is a free variable and the final  y is a bound variable.\n  Again, the entire expression isn&#39;t a lambda expression (it&#39;s a function application), so this isn&#39;t a combinator either. The second  x is a bound variable while the  y is a free variable.\n  (define factorial (lambda (n) (if (= n 0) 1 (* n (factorial (- n 1))))))\n is a combinator, you don&#39;t consider the  define part, so what you&#39;re really asking is if\n  is a combinator. Since in this lambda expression, the name factorial represents a free variable (the name factorial is not a formal argument of the lambda expression), this is not a combinator. This will be important below. In fact, the names  =,  *, and  - are also free variables, so even without the name  factorial this would not be a combinator (to say nothing of the numbers!).\n     (define factorial (lambda (n) (if (= n 0) 1 (* n (factorial (- n 1))))))\n What we want to do is to come up with a version of this that does the same thing but doesn&#39;t have that pesky recursive call to  factorial in the body of the function.\n Where do we start? It would be nice if you could save all of the function except for the offending recursive call, and put something else there. That might look like this:\n (define sort-of-factorial (lambda (n) (if (= n 0) 1 (* n (&lt;???&gt; (- n 1))))))\n This still leaves us with the problem of what to put in the place marked  &lt;???&gt;. It&#39;s a tried-and-true principle of functional programming that if you don&#39;t know exactly what you want to put somewhere in a piece of code, just abstract it out and make it a parameter of a function. The easiest way to do this is as follows:\n (define almost-factorial (lambda (f) (lambda (n) (if (= n 0) 1 (* n (f (- n 1)))))))\n What we&#39;ve done here is to rename the recursive call to factorial to  f, and to make  f anargument to a function which we&#39;re calling  almost-factorial.Notice that  almost-factorial is not at all the factorialfunction. Instead, it&#39;s a higher-order function which takes a single argument f, which had better be a function (or else  (f (- n1)) won&#39;t make sense), and  returns another function (the (lambda (n) ...) part) which (hopefully) will be a factorialfunction if we choose the right value for  f.\n It&#39;s important to realize that this trick is not in any way specific to the  factorial function. We can do exactly the same trick with any recursive function. For instance, consider a recursive function to compute fibonacci numbers. The recursive definition of fibonacci numbers is as follows:\n fibonacci 0 = 0 fibonacci 1 = 1 fibonacci n = fibonacci (n - 1) + fibonacci (n - 2)\n (In fact, that&#39;s the definition of the fibonacci function in Haskell.) In Scheme, we can write the function this way:\n (define fibonacci (lambda (n) (cond ((= n 0) 0) ((= n 1) 1) (else (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))))\n (where  cond is just a shorthand expression for nested  if expressions). We can then remove the explicit recursion just like we did for  factorial:\n (define almost-fibonacci (lambda (f) (lambda (n) (cond ((= n 0) 0) ((= n 1) 1) (else (+ (f (- n 1)) (f (- n 2))))))))\n As you can see, the transformation from a recursive function to a non-recursive  almost- equivalent function is a purely mechanical one: you rename the name of the recursive function inside the body of the function to  f and you wrap a  (lambda (f) ...) around the body.\n If you&#39;ve followed what I just did (never mind  why I did it; we&#39;ll see that later), then congratulations! As Yoda says, you&#39;ve just taken the first step into a larger world.\n  I probably shouldn&#39;t do this yet, but I&#39;m going to give you a sneak preview of where we&#39;re going. Once we define the Y combinator, we&#39;ll be able to define the factorial function using  almost-factorial as follows:\n  where  Y is the Y combinator. Note that this definition of factorial doesn&#39;t have any explicit recursion in it. Similarly,we can define the  fibonacci function using almost-fibonacci in the same way:\n  So the Y combinator will give us recursion wherever we need it as long as we have the appropriate  almost- function available ( i.e. the non-recursive function derived from the recursive one by abstracting out the recursive function calls).\n   Let&#39;s assume, for the sake of argument, that we already had a working factorial function lying around (recursive or not, we don&#39;t care). We&#39;ll call that hypothetical factorial function  factorialA. Now let&#39;s consider the following:\n    (define factorialB ((lambda (f) (lambda (n) (if (= n 0) 1 (* n (f (- n 1)))))) factorialA))\n Now, by substituting  factorialA for  f inside the body of the lambda expression we get:\n (define factorialB (lambda (n) (if (= n 0) 1 (* n (factorialA (- n 1))))))\n This looks a lot like the recursive factorial function, but it isn&#39;t: factorialA is not the same function as  factorialB.So it&#39;s a non-recursive function that depends on a hypothetical factorialA function to work. Does it actually work? Well, it&#39;spretty obvious that it should work for  n = 0, since (factorialB 0) will just return  1 (the factorial of 0). If  n &gt; 0, then the value of  (factorialBn) will be  (* n (factorialA (- n 1))). Now, we assumedthat  factorialA would correctly compute factorials, so (factorialA (- n 1)) is the factorial of  n - 1, andtherefore  (* n (factorialA (- n 1))) is the factorial of n (by the definition of factorial), thus proving that factorialB computes the factorial function correctly as long as factorialA does. So this works. The only problem is that we don&#39;tactually have a  factorialA lying around.\n Now, if you&#39;re really clever, you might be asking yourself whether we can just do this:\n  The idea is this: let&#39;s assume that  factorialA is a valid factorial function. Then \n......", "posttime": "2021-06-29 23:06:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7ec4\u5408,combinator,\u51fd\u6570", "title": "Y\u7ec4\u5408\u8005 ", "title_en": "The Y Combinator", "transed": 1, "url": "https://mvanier.livejournal.com/2897.html", "via": "", "real_tags": ["\u7ec4\u5408", "\u51fd\u6570"]}]