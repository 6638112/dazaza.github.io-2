[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1073522, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "1995\u5e74\uff0c\u76ae\u514b\u65af\u52a8\u753b\u5de5\u4f5c\u5ba4\uff08Pixar Animation Studio\uff09\u548c\u8fea\u58eb\u5c3c\uff08Disney\uff09\u63a8\u51fa\u4e86\u4e00\u90e8\u5f7b\u5e95\u6539\u53d8\u4e86\u52a8\u753b\u6e38\u620f\u7684\u7535\u5f71\u3002\u300a\u73a9\u5177\u603b\u52a8\u5458\u300b\u662f\u7b2c\u4e00\u90e8\u5b8c\u5168\u7531\u7535\u8111\u52a8\u753b\u5236\u4f5c\u7684\u7535\u5f71\uff0c\u8bb2\u8ff0\u4e86\u5f53\u4f60\u7684\u73a9\u5177\u88ab\u653e\u5728\u81ea\u5df1\u7684\u8bbe\u5907\u4e0a\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u8fd9\u90e8\u7535\u5f71\u6253\u7834\u4e86\u969c\u788d\u548c\u7968\u623f\u8bb0\u5f55\uff0c\u6210\u4e3a\u76ae\u514b\u65af\u6700\u8457\u540d\u3001\u6700\u6c38\u6052\u7684\u6545\u4e8b\u4e4b\u4e00\u3002\n\u4e09\u5e74\u540e\uff0c\u8fea\u58eb\u5c3c\u51c6\u5907\u53d1\u884c\u5907\u53d7\u671f\u5f85\u7684\u7eed\u96c6\u300a\u73a9\u5177\u603b\u52a8\u54582\u300b\u3002\u8fd9\u90e8\u7535\u5f71\u51e0\u4e4e\u5b8c\u6210\u4e86\uff0c\u6b63\u5728\u8fdb\u884c\u6700\u540e\u7684\u7f16\u8f91\u548c\u4fee\u6539\u3002\u7136\u540e\uff0c\u4e0d\u53ef\u601d\u8bae\u7684\u4e8b\u60c5\u53d1\u751f\u4e86\uff0c\u6709\u4eba\u6309\u4e0b\u6309\u94ae\uff0c\u5728\u65e0\u52a9\u7684\u76ae\u514b\u65af\u6280\u672f\u603b\u76d1\u7684\u6ce8\u89c6\u4e0b\uff0c\u7535\u5f71\u6587\u4ef6\u88ab\u5220\u9664\u3002\n\u5965\u4f26\u00b7\u96c5\u5404\u5e03\uff08Oren Jacob\uff09\u73b0\u5728\u662f\u76ae\u514b\u65af\uff08Pixar\uff09\u7684\u9996\u5e2d\u6280\u672f\u5b98\uff0c\u4ed6\u662f\u8fd9\u90e8\u7535\u5f71\u7684\u52a9\u7406\u6280\u672f\u603b\u76d1\uff0c\u4ed6\u56de\u5fc6\u8d77\u5f53\u4ed6\u770b\u7740\u6587\u4ef6\u6d88\u5931\u65f6\u6240\u611f\u53d7\u5230\u7684\u7edd\u5bf9\u6050\u60e7\u3002\u4ed6\u5bf9\u4e0b\u4e00\u4e2a\u7f51\u7ad9\u8bf4\uff0c\u4ed6\u8bd5\u56fe\u963b\u6b62\u5b83\uff0c\u4f46\u4ec0\u4e48\u4e5f\u505a\u4e0d\u4e86\u3002\n\u201c\u4ed6\u6709\u4e00\u4e2a\u9519\u8bef\uff0c\u6211\u5fd8\u8bb0\u4e86\u786e\u5207\u7684\u90a3\u4e2a\u3002\u5c31\u50cf\u662f\uff0c\u201c\u76ee\u5f55\u4e0d\u518d\u6709\u6548\u201d\uff0c\u56e0\u4e3a\u4ed6\u5728\u4e00\u4e2a\u521a\u521a\u88ab\u5220\u9664\u7684\u5730\u65b9\u3002\u7136\u540e\u4ed6\u60f3\u8d70\u4e0a[\u76ee\u5f55]\uff0c\u7136\u540e\u4ed6\u8d70\u4e86\u56de\u6765\uff0c\u7136\u540e\u6211\u4eec\u770b\u5230\u4e86\u54c8\u59c6\u3001\u571f\u8c46\u5934\u548c\u96f7\u514b\u65af\u3002\u7136\u540e\u6211\u4eec\u518d\u6b21\u770b\u4e86\u770b\uff0c\u53ea\u6709\u54c8\u59c6\uff0c\u7136\u540e\u4ec0\u4e48\u4e5f\u6ca1\u6709\u3002\n\u201c\u4e3b\u673a\u5668\u574f\u4e86\uff0c\u201d\u96c5\u5404\u5e03\u8bf4\u6709\u4e9b\u4eba\u6b63\u5728\u5236\u4f5c\u4e00\u4e2a\u955c\u5934\u7684\u52a8\u753b\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5de5\u4f5c\u4e00\u5206\u949f\u6216\u4e94\u5206\u949f\uff0c\u4f46\u6700\u7ec8\u4f60\u5c06\u4e0d\u5f97\u4e0d\u51fa\u4e8e\u67d0\u79cd\u539f\u56e0\u4ece\u4e3b\u8ba1\u7b97\u673a\u4e2d\u63d0\u53d6\u6570\u636e\uff0c\u4f60\u7684\u8ba1\u7b97\u673a\u5c06\u51bb\u7ed3\u8fd9\u4e9b\u6570\u636e\u3002\"\n\u201c\u6700\u7ec8\uff0c\u6bcf\u4e00\u4f4d\u52a8\u753b\u5e08\uff0c\u6bcf\u4e00\u4f4dTD\uff0c\u6bcf\u4e00\u4f4d\u5728\u8282\u76ee\u4e2d\u5de5\u4f5c\u7684\u4eba\u90fd\u4f1a\u8bf4\uff0c\u201c\u54e6\uff0c\u6240\u6709\u7684\u673a\u5668\u90fd\u574f\u4e86\u3002\u201d\u3002\u6211\u4eec\u53bb\u5403\u5348\u996d\u5427\u3002\u54c8\u54c8\u3002\"\n\u96c5\u5404\u5e03\u8bf4\uff0c\u5f53\u4ed6\u4eec\u540e\u6765\u68c0\u67e5\u673a\u5668\u4ee5\u68c0\u67e5\u4fdd\u5b58\u7684\u7535\u5f71\u5907\u4efd\u65f6\uff0c\u53ea\u5269\u4e0b10%\u7684\u7535\u5f71\u6587\u4ef6\u3002\u5907\u4efd\u673a\u51fa\u4e86\u95ee\u9898\uff0c\u6587\u4ef6\u4e5f\u4e0d\u89c1\u4e86\u3002\u6240\u6709\u7684\u5e0c\u671b\u4f3c\u4e4e\u90fd\u7834\u706d\u4e86\uff0c\u4f46\u8c22\u5929\u8c22\u5730\uff0c\u6709\u4e00\u4e2a\u5a74\u513f\u62ef\u6551\u4e86\u8fd9\u4e00\u5929\u3002\n\u76ae\u514b\u65af\u516c\u53f8\u7684\u4e00\u4f4d\u540d\u53eb\u52a0\u6797\u00b7\u82cf\u65af\u66fc\u7684\u5458\u5de5\u662f\u300a\u73a9\u5177\u603b\u52a8\u54582\u300b\u7684\u6280\u672f\u603b\u76d1\uff0c\u5979\u5728\u5b69\u5b50\u51fa\u751f\u540e\u4e00\u76f4\u5728\u5bb6\u5de5\u4f5c\u3002\u8fd9\u90e8\u7535\u5f71\u7684\u6587\u4ef6\u6bcf\u5468\u81ea\u52a8\u53d1\u9001\u7ed9\u5979\uff0c\u5979\u628a\u6240\u6709\u6587\u4ef6\u90fd\u4fdd\u5b58\u5728\u81ea\u5df1\u7684\u5bb6\u5ead\u7535\u8111\u4e0a\u3002\n\u6587\u4ef6\u662f\u4ece\u82cf\u65af\u66fc\u7684\u623f\u5b50\u91cc\u53d6\u56de\u7684\uff0c\u7535\u5f71\u4e5f\u4fdd\u5b58\u4e86\u4e0b\u6765\uff01\u51e0\u4e4e\u96c5\u5404\u5e03\u627f\u8ba4\uff0c\u8fd9\u90e8\u7535\u5f71\u5927\u7ea610%\u7684\u6587\u4ef6\u4ece\u672a\u88ab\u68c0\u7d22\u5230\uff0c\u5e76\u4e14\u6c38\u8fdc\u6d88\u5931\u4e86\uff0c\u4f46\u4ed6\u4eec\u80fd\u591f\u8ba9\u7535\u5f71\u5728\u6ca1\u6709\u573a\u666f\u7684\u60c5\u51b5\u4e0b\u5de5\u4f5c\u3002\n\u4f60\u8ba4\u4e3a\u300a\u73a9\u5177\u603b\u52a8\u54582\u300b\u51e0\u4e4e\u6c38\u8fdc\u6d88\u5931\u4e86\u5417\uff1f\u8bf7\u5728\u8bc4\u8bba\u4e2d\u544a\u8bc9\u6211\u4eec\uff01", "note_en": "In 1995, Pixar Animation Studio and Disney came out with a movie that completely changed the animation game.\u00a0  Toy Story \u2014 a story about what happens when your toys are left to their own devices \u2014 was the first movie made that was completely by computer animation. The film broke both barriers and box office records and become one of Pixar\u2019s most famous and timeless stories.\n  Three years later, Disney was getting ready to release the highly  anticipated sequel,\u00a0 Toy Story 2 . The movie was nearly complete and final edits and changes were being made. Then, the unthinkable happened, someone hit a button and the film\u2019s files were being deleted as helpless Pixar technical directors looked on.\n  Oren Jacob, now Chief Technical Officer at Pixar, was an assistant technical director on the movie and recalls the absolute dread that he felt as he watched the files disappear. He  spoke to  The Next Web and said that he tried to stop it, but couldn\u2019t do anything.\n \u201cHe had an error, I forget the exact [one]. It was like, \u201cDirectory no longer valid,\u201d because he\u2019s in a place that had just been deleted. Then he thought to walk up [a directory] and he walked back up and then we saw Hamm, Potato Head, and Rex. Then we looked at it again and there was just Hamm and then nothing.\n The master machine goes down,\u201d says Jacob. \u201cSome people are animating a shot and they can work for like a minute or five minutes, but eventually you\u2019ll have to pull data from the master machine for some reason or another, which your machine will freeze.\u201d\n \u201cEventually every animator and, every TD, everyone working on the show goes, \u201cOh, all machines down. Let\u2019s go to lunch. Ha, ha.\u201d\n  Jacob said that when they checked the machines later to check on the film\u2019s backups that were saved, only 10% of all of the film\u2019s files remained. Something had gone wrong with the backup machines and the files were gone from there as well. All hope looked lost, but thankfully, there was a baby who saved the day.\n A Pixar employee named Galyn Susman, who was the supervising technical director on\u00a0  Toy Story 2 had been working from home after the birth of her baby. The film\u2019s files were automatically sent to her on a weekly basis, and she kept all of the files on her personal home computer.\n  The files were retrieved from Susman\u2019s house and the film was saved! Almost. Jacob admits that about 10% of the film\u2019s files were never retrieved and are gone forever, but they were able to make the film work without the scenes.\n What do you think about  Toy Story 2 almost being lost forever? Let us know in the comments!", "posttime": "2022-02-15 21:02:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u73a9\u5177,saved,\u7535\u5f71", "title": "\u4e00\u4e2a\u5a74\u513f\u5c06\u300a\u73a9\u5177\u603b\u52a8\u54582\u300b\u4ece\u8fd1\u4e4e\u5b8c\u5168\u7684\u5220\u9664\u4e2d\u62ef\u6551\u51fa\u6765\uff082021\u5e74\uff09", "title_en": "A baby saved \u2018Toy Story 2\u2019 from near complete deletion (2021)", "transed": 1, "url": "https://insidethemagic.net/2021/09/toy-story-2-saved-from-deletion-ks1/", "via": "", "real_tags": ["\u73a9\u5177", "saved", "\u7535\u5f71"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073521, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0a\u5468\uff0c\u9996\u6279\u5546\u7528\u9502\u79bb\u5b50\u7535\u6c60\u51fa\u8d27\u540e\uff0c\u5b89\u666e\u745e\u65af\u79d1\u6280\u516c\u53f8\u88ab\u79f0\u4e3a&#34\uff1b\u9886\u5148\u7684\u9ad8\u80fd\u91cf\u5bc6\u5ea6\u7535\u6c60\u4f9b\u5e94\u5546&#34;\n450 Wh/kg\u30011150 Wh/L\u7684\u9502\u79bb\u5b50\u7535\u6c60\u7ec4\u2014\u2014\u8fd9\u662f\u7b2c\u4e00\u4e2a\u6309Amprius\u6807\u51c6\u5546\u4e1a\u5316\u90e8\u7f72\u7684\u9502\u79bb\u5b50\u7535\u6c60\u7ec4\u2014\u2014\u88ab\u8fd0\u9001\u7ed9\u4e86\u65b0\u4e00\u4ee3\u9ad8\u7a7a\u4f2a\u536b\u661f\uff08HAPS\uff09\u7684\u884c\u4e1a\u9886\u5bfc\u8005\uff0c\u4f46\u6ca1\u6709\u63d0\u4f9b\u786e\u5207\u540d\u79f0\u3002\n&#34;\u8fd9\u662f\u4ece405 Wh/kg\u4ea7\u54c1[\u2026]\u7684\u8fdb\u6b65\uff0c\u91cd\u70b9\u4ecb\u7ecd\u4e86\u6211\u4eec\u7684\u8def\u7ebf\u56fe\u7684\u52a0\u901f\uff0c\u4ee5\u63d0\u4f9b\u65e0\u4e0e\u4f26\u6bd4\u7684\u6027\u80fd\u548c#34\uff1bAmprius Technologies\u9996\u5e2d\u8fd0\u8425\u5b98\u4e54\u6069\u00b7\u4f2f\u6069\u65af\u5766\uff08Jon Bornstein\uff09\u8bf4\u3002\n&#34;\u6211\u4eec\u4e13\u6709\u7684Si\u7eb3\u7c73\u7ebfTM\u5e73\u53f0\u548c\u6211\u4eec\u5f00\u53d1\u7684\u7efc\u5408\u89e3\u51b3\u65b9\u6848\u5b9e\u73b0\u4e86\u65e0\u4e0e\u4f26\u6bd4\u7684\u6027\u80fd\uff0c\u5e76\u7ee7\u7eed\u4fdd\u6301\u6211\u4eec\u7684\u4ea7\u54c1\u9886\u5148\u5730\u4f4d\uff1b\u4ed6\u63a5\u7740\u8bf4\u3002\n\u6b63\u5982\u300a\u81ea\u7136\u300b\u6742\u5fd7\u6307\u51fa\u7684\u90a3\u6837\uff0c&#34\uff1b\u7845\uff08Si\uff09\u56e0\u5176\u9ad8\u91cd\u91cf\u7406\u8bba\u50a8\u9502\u5bb9\u91cf\uff083579 mAh g\uff09\u800c\u88ab\u8ba4\u4e3a\u662f\u6700\u6709\u524d\u9014\u7684\u9502\u79bb\u5b50\u7535\u6c60\u8d1f\u6781\u6750\u6599\u4e4b\u4e00\u22121\uff09 1\uff0c\u4e0e\u5e38\u89c4\u4f7f\u7528\u7684\u77f3\u58a8\u9633\u6781\uff08372 mAh g\uff09\u76f8\u6bd4\u22121\uff09 2\uff0c\u540c\u65f6\u5177\u6709\u76f8\u5bf9\u8f83\u4f4e\u7684\u653e\u7535\u7535\u538b&#34;\n\u8bb0\u4f4f\u8fd9\u4e00\u70b9\uff0c\u5b89\u666e\u91cc\u4e4c\u65af&#39\uff1b\u7845\u7eb3\u7c73\u7ebf\u6280\u672f\u4f7f\u7528100%\u7684\u7845\u7eb3\u7c73\u7ebf\u9633\u6781\uff0c\u5e76\u76f4\u63a5\u53d6\u4ee3\u77f3\u58a8\u9633\u6781\u3002Amprius\u89e3\u91ca\u8bf4\uff0c\u7535\u6c60\u7684\u5176\u4ed6\u7ec4\u4ef6\u7531\u5df2\u7ecf\u5efa\u7acb\u7684\u9502\u79bb\u5b50\u7535\u6c60\u5168\u7403\u4f9b\u5e94\u94fe\u7ec4\u6210\u3002\n\u901a\u8fc7\u4ec5\u4f7f\u7528\u7845\uff0cAmprius\u80fd\u591f\u63d0\u4f9b\u9502\u79bb\u5b50\u7535\u6c60\uff0c\u8be5\u516c\u53f8\u79f0\u5176\u5177\u6709\u6700\u9ad8\u7684\u80fd\u91cf\u5bc6\u5ea6\u3002\u6700\u91cd\u8981\u7684\u662f\uff0c\u7845\u7eb3\u7c73\u7ebf\u4f7f\u7535\u6c60\u5177\u6709\u6700\u9ad8\u7684\u80fd\u91cf\u4e0e\u529f\u7387\u6bd4\uff0c\u56e0\u4e3a\u5b83\u4eec&#39\uff1b\u4e0d\u4f7f\u7528\u4efb\u4f55\u7c98\u5408\u5242\u76f4\u63a5\u91cd\u65b0\u8fde\u63a5\u5230\u57fa\u677f\u4e0a\u3002\u6700\u540e\uff0c\u751f\u547d\u5468\u671f\u66f4\u957f\u3002\n\u98de\u884c\u65f6\u95f4\u6bd4\u666e\u901a\u77f3\u58a8\u9633\u6781\u589e\u52a0\u4e86\u8fd1\u4e09\u500d\uff0c\u7535\u52a8\u6c7d\u8f66\u7684\u7eed\u822a\u91cc\u7a0b\u51e0\u4e4e\u7ffb\u4e86\u4e00\u756a\u3002\nEnpower\u6307\u51fa\uff0c\u5728\u6570\u5b57\u4e0a\uff0c\u7279\u65af\u62c9&#39\uff1bs\u76ee\u524d\u7684\u6a21\u578b3\u7535\u6c60\uff08\u8fc4\u4eca\u4e3a\u6b62\u6700\u597d\u7684\u6bd4\u8f83\uff09\u7684\u5bb9\u91cf\u7ea6\u4e3a260 Wh/kg\u548c730 Wh/l\uff0c\u800cAmprius\u548c#39\uff1b\u65b0\u7535\u6c60\u7684\u5bb9\u91cf\u5206\u522b\u4e3a450 Wh/kg\u548c1150 Wh/l\uff0c\u8fd9\u662f\u4e00\u4e2a\u663e\u8457\u7684\u98de\u8dc3\u3002", "note_en": "After the first batch of commercially available lithium-ion battery cells were shipped out last week,  Amprius Technologies is being called the &#34;leading provider of the highest energy density cells available.&#34;\n The \u00a0450 Wh/kg, 1150 Wh/L lithium-ion battery cells\u00a0\u2014 the first of their kind to be deployed commercially, per Amprius, \u2014 were shipped to an \u00a0industry leader of a new generation of High-Altitude Pseudo Satellites (HAPS), but no exact name was provided.\n &#34;This advancement from the 405 Wh/kg product, [...], highlights the acceleration of our roadmap towards delivering products with unrivaled performance,&#34; said\u00a0 Jon Bornstein , COO of Amprius Technologies.\n &#34;Our proprietary Si-Nanowire TM \u00a0platform and the comprehensive solutions we have developed enable unparalleled performance and continue to sustain our product leadership,&#34; he continued.\n  As the journal   Nature points out, &#34;Silicon (Si) has been recognized as one of the most promising anode materials for Li-ion batteries due to its high gravimetric theoretical lithium storage capacity (3,579 mAh g \u22121)  1, compared to conventionally used graphite anodes (372 mAh g \u22121)  2, while also having a relatively low discharge voltage.&#34;\n  Bearing that in mind, Amprius&#39;  Silicon nanowire technology uses 100 percent silicon nanowire anodes and directly replaces graphite anodes. The other components of the battery are made up of the already-established global supply chain for lithium-ion batteries,  explains Amprius.\n By using only silicon, Amprius is able to provide lithium-ion batteries which have what the company claims are the highest energy density available. On top of that, silicon nanowires enable the batteries to have\u00a0the highest ratio of energy to power, because they&#39;re connected directly to the substrate without any binders. And finally, the life cycle is longer.\n Flight time increases nearly three times more than regular graphite anodes and electric vehicle range nearly doubles.\n In numbers,   Enpower points out that Tesla&#39;s current Model 3 cells (the best comparison to date) hold\u00a0around 260 Wh/kg and 730 Wh/l, whereas Amprius&#39; new cells hold\u00a0\u00a0450 Wh/kg and 1,150 Wh/l \u2014 a significant jump up.", "posttime": "2022-02-15 21:00:10", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,\u7279\u65af\u62c9,\u7535\u6c60,battery", "title": "\u4e00\u79cd\u65b0\u7684\u7845\u7535\u6c60\u8bbe\u8ba1\u8d85\u8fc7\u4e86\u7279\u65af\u62c9\u7684\u80fd\u91cf\u5bc6\u5ea6\uff0c\u5e76\u4e14\u5df2\u7ecf\u4e0a\u5e02", "title_en": "A new silicon battery design beat Tesla's energy density and it's shipping", "transed": 1, "url": "https://interestingengineering.com/silicon-battery-energy-density", "via": "", "real_tags": ["\u8bbe\u8ba1", "\u7279\u65af\u62c9", "\u7535\u6c60", "battery"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073520, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6bcf\u4e2a\u4eba\u90fd\u542c\u8bf4\u8fc7\u80a1\u5e02\uff0c\u4f46\u5f88\u5c11\u6709\u4eba\u77e5\u9053\u5b83\u4e3a\u4ec0\u4e48\u6709\u6548\u3002\u4f60\u77e5\u9053\u6bcf\u53ea\u80a1\u7968\u6709\u4e24\u4e2a\u4ef7\u683c\u5417\uff1f\u4f60\u4e0d\u80fd\u4ee5\u540c\u6837\u7684\u4ef7\u683c\u4e70\u5356\u5417\uff1f\u201c\u80a1\u7968\u5e02\u573a\u201d\u6bd4\u201c\u80a1\u7968\u5546\u5e97\u201d\u66f4\u6709\u6548\u3001\u66f4\u5f00\u653e\uff1f\n\u5982\u679c\u4f60\u548c\u6211\u4eec\u5927\u591a\u6570\u4eba\u4e00\u6837\uff0c\u53ef\u80fd\u4e0d\u662f\u3002\u4ee5\u4e0b\u662f\u80a1\u5e02\u6ce2\u52a8\u7684\u539f\u56e0\uff1a\n\u4f60\u9009\u62e9\u81ea\u5df1\u7684\u4ef7\u683c\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u613f\u610f\u7684\u5408\u4f5c\u4f19\u4f34\uff0c\u4f60\u4f1a\u5f97\u5230\u8fd9\u4e2a\u91d1\u989d\n\u5927\u591a\u6570\u89e3\u91ca\u90fd\u4f1a\u6d89\u53ca\u4e00\u4e9b\u5c0f\u7ec6\u8282\u2014\u2014\u8fd9\u91cc\u6ca1\u6709\u3002\u4eca\u5929\u6211\u4eec\u6765\u770b\u770b\u80a1\u5e02\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u8fd0\u4f5c\u3002\n\u6211\u542c\u8bf4iPhone\u572818-35\u5c81\u7684\u4eba\u7fa4\u4e2d\u5f88\u53d7\u6b22\u8fce\u3002\u4e00\u5bb6\u5e02\u573a\u8c03\u67e5\u516c\u53f8\u8ba9\u6211\u627e\u5230\u4e00\u4e2a\u597d\u7684\u9500\u552e\u4ef7\u683c\uff0c\u6240\u4ee5\u6211\u5c06\u628a\u8fd9\u4e2a\u95ee\u9898\u4f20\u9012\u7ed9\u4f60\uff1a\n\u6211\uff1a\u4f60\uff0c\u8fd9\u4e2a\u4ee4\u4eba\u5782\u6d8e\u768418-35\u5c81\u4eba\u53e3\uff0c\u60f3\u8981\u4e00\u90e8iPhone\u3002\u5b83\u503c\u591a\u5c11\u94b1\uff1f\n\u4f60\u770b\uff0c\u4e70\u5bb6\u548c\u5356\u5bb6\u5fc3\u4e2d\u90fd\u6709\u4ef7\u683c\u3002\u5f53\u4ef7\u683c\u5339\u914d\uff0cWhabumo\uff0c\u5c31\u6709\u4e86\u4ea4\u6613\uff08\u6ca1\u6709\u5339\u914d\uff0c\u6ca1\u6709Whabumo\uff09\u3002\n\u6bcf\u4e2a\u5546\u54c1\u90fd\u6709\u4e24\u4e2a\u4ef7\u683c\uff0c\u8fd9\u662f\u7406\u89e3\u4efb\u4f55\u5e02\u573a\u7684\u5173\u952e\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u80a1\u7968\u3002\u6bcf\u4ef6\u4e8b\u90fd\u6709\u4e00\u4e2a\u51fa\u4ef7\u548c\u4e00\u4e2a\u8981\u6c42\uff0c\u6bcf\u79cd\u8d2d\u7269\u6a21\u5f0f\u90fd\u6709\u4e0d\u540c\u7684\u5904\u7406\u65b9\u5f0f\u3002\u8fd9\u7ed9\u4e70\u5bb6\u548c\u5356\u5bb6\u5e26\u6765\u4e86\u4e0d\u540c\u7684\u4f18\u52bf\u3002\n\u5047\u8bbe\u6211\u4eec\u60f3\u4ece\u4e9a\u9a6c\u900a\u8d2d\u4e70iPhone\u3002\u4f60\u770b\u5230\\$200\u7684\u552e\u4ef7\uff08\u4e9a\u9a6c\u900a\u7684\u8981\u6c42\uff09\uff0c\u5e76\u4eb2\u81ea\u51b3\u5b9a\u5b83\u662f\u5426\u201c\u503c\u5f97\u201d\uff08\u5373\u4f4e\u4e8e\u6216\u7b49\u4e8e\u4f60\u7684\u51fa\u4ef7\uff09\uff1a\n\u5728\u5546\u5e97\u6a21\u578b\u4e2d\uff0c\u4e9a\u9a6c\u900a\u5c55\u793a\u4e86\u4e00\u4e2a\u516c\u5f00\u7684\u8981\u4ef7\uff08\\$200\uff09\u3002\u6bcf\u4e2a\u4e70\u5bb6\u90fd\u6709\u4e00\u4e2a\u79d8\u5bc6\u7684\u7ade\u4ef7\uff0c\u6709\u4e9b\u4e70\u5bb6\u6bd4\u5176\u4ed6\u4e70\u5bb6\u51fa\u4ef7\u9ad8\u3002\u613f\u610f\u51fa\u4ef7200\u7f8e\u5143\u6216\u4ee5\u4e0a\u8d2d\u4e70iPhone\u7684\u4e70\u5bb6\uff1b\u5176\u4f59\u7684\u5219\u63a8\u8fdf\uff08199\u7f8e\u5143\u53ca\u4ee5\u4e0b\uff09\u3002\n\u4e9a\u9a6c\u900a\u9009\u62e9\u7684\u4ef7\u683c\u5438\u5f15\u4e86\u6700\u591a\u7684\u7ade\u6807\u8005\uff0c\u4f46\u4ecd\u7136\u4fdd\u6301\u76c8\u5229\u3002\u5728\u5546\u5e97\u6a21\u5f0f\u4e2d\uff1a\n\u5356\u65b9\u7f3a\u70b9\uff1a\u5356\u65b9\u4e0d\u77e5\u9053\u6bcf\u4e2a\u4e70\u65b9\u613f\u610f\u652f\u4ed8\u591a\u5c11\uff1b\u5b9a\u4ef7\u5f88\u96be\u786e\u5b9a\u3002\u4f4e\u9500\u552e\u989d\u610f\u5473\u7740\u574f\u4ef7\u683c\u8fd8\u662f\u574f\u4ea7\u54c1\uff1f\n\u5c3d\u7ba1\u4e70\u5bb6\u201c\u638c\u63a7\u201d\u4e86\u5c40\u9762\uff0c\u4f46\u4ed6\u4eec\u53ef\u80fd\u5fc5\u987b\u56db\u5904\u641c\u7d22\uff0c\u624d\u80fd\u627e\u5230\u7b26\u5408\u4ed6\u4eec\u51fa\u4ef7\u7684\u5546\u5e97\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u3002\u8fd9\u592a\u6ca1\u6548\u7387\u4e86\u3002\n\u73b0\u5728\u5047\u8bbe\u6211\u4eec\u60f3\u51fa\u552e\u6211\u4eec\u65b0\u7684\u3001\u672a\u5f00\u5c01\u7684\u5c0f\u73a9\u610f\uff08\u4f60\u8fd9\u4e2a18-35\u5c81\u7684\u4eba\u5c31\u662f\u8fd9\u6837\u53d8\u5316\u65e0\u5e38\uff0c\u8c03\u67e5\u4e5f\u8fd9\u4e48\u8bf4\uff09\u3002\u5f53\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u5728\u4e9a\u9a6c\u900a\u4e0a\u9500\u552e\u2014\u2014\u73b0\u5728\u6211\u4eec\u662f\u81ea\u5df1\u7684\u5546\u5e97\uff0c\u9700\u8981\u4e00\u4e2a\u6211\u4eec\u8ba4\u4e3a\u4eba\u4eec\u4f1a\u652f\u4ed8\u7684\u4ef7\u683c\u3002\u6211\u4eec\u548c\u4e9a\u9a6c\u900a\u5904\u4e8e\u540c\u4e00\u6761\u8239\u4e0a\uff0c\u53ef\u80fd\u4f1a\u628a\u4ef7\u683c\u5b9a\u5f97\u592a\u4f4e\u3002\u90a3\u53ef\u4e0d\u597d\u73a9\u3002\n\u5728eBay\u6a21\u5f0f\u4e2d\uff0c\u4e70\u5bb6\u4f1a\u516c\u5f00\u7ade\u4ef7\u5e76\u7ade\u4e89\u4ea7\u54c1\u3002\u5356\u5bb6\u5bf9\u4ed6\u4eec\u7684\u6700\u4f4e\u4ef7\u683c\u4fdd\u5bc6\uff0c\u5e76\u5e0c\u671b\u901a\u8fc7\u8ba9\u522b\u4eba\u201c\u591a\u4ed8\u201d\u6765\u83b7\u5229\u3002\u5728\u62cd\u5356\u6a21\u5f0f\u4e2d\uff1a\n\u5356\u65b9\u4e13\u4e1a\uff1a\u5356\u65b9\u6709\u4e00\u4e2a\u79d8\u5bc6\u8981\u6c42\uff08\u4fdd\u7559\u4ef7\u6216\u6700\u4f4e\u4ef7\u683c\uff09\uff0c\u53ef\u4ee5\u5f97\u5230\u9ad8\u4e8e\u8fd9\u4e2a\u4ef7\u683c\u7684\u62a5\u916c\u3002\n\u5356\u65b9\u4e13\u4e1a\u4eba\u58eb\uff1a\u4e70\u65b9\u7684\u9700\u6c42\u662f\u900f\u660e\u7684\u3002\u4ed6\u4eec\u5f88\u5bb9\u6613\u770b\u51fa\u81ea\u5df1\u7684\u5b9a\u4ef7\u662f\u5426\u8fc7\u9ad8\u3002\n\u6613\u8da3\u5bf9\u5356\u5bb6\u6765\u8bf4\u5f88\u597d\u2014\u2014\u4f60\u6709\u673a\u4f1a\u83b7\u5f97\u989d\u5916\u5229\u6da6\u3002\u5bf9\u4e8e\u4e70\u5bb6\u6765\u8bf4\uff0c\u8fd9\u5e76\u4e0d\u662f\u4ec0\u4e48\u597d\u4e8b\uff1a\u4f60\u53ef\u80fd\u4f1a\u4ee5\\$1\u7684\u4ef7\u683c\u8f93\u6389\u62cd\u5356\uff08202\u662f\u6700\u9ad8\u51fa\u4ef7\u65f6\u652f\u4ed8201\uff09\uff0c\u5373\u4f7f\u5356\u5bb6\u4f1a\u5bf9201\u611f\u5230\u6ee1\u610f\u3002\u4f60\u53ef\u4ee5\u7528201\u7f8e\u5143\u53c2\u52a0\u591a\u6b21\u62cd\u5356\uff0c\u4f46\u8981\u5192\u7740\u4e70\u4e24\u90e8iPhone\u7684\u98ce\u9669\u3002\n\u62db\u8058\u5e7f\u544a\uff1a\u516c\u5f00\u5ba3\u5e03\u4f60\u5bf9iPhone\u7684\u6e34\u671b\uff0c\u5e76\u8ba9\u5356\u5bb6\u6765\u4e89\u53d6\u3002\n\u8ba8\u4ef7\u8fd8\u4ef7\uff1a\u627e\u4e00\u4e2a\u6709iPhone\u7684\u4eba\uff0c\u5728\u4e0d\u77e5\u9053\u552e\u4ef7\u7684\u60c5\u51b5\u4e0b\uff0c\u51fa\u4ef7\u3002\u4f60\u4eec\u4e24\u4e2a\u6765\u56de\u8ba8\u4ef7\u8fd8\u4ef7\uff0c\u8bd5\u56fe\u4ece\u5bf9\u65b9\u8eab\u4e0a\u69a8\u53d6\u51e0\u5757\u94b1\u3002\u5982\u679c\u4f60\u4e70\u8fc7\u8f66\uff0c\u4f60\u5c31\u4f1a\u77e5\u9053\u8fd9\u6709\u591a\u6709\u8da3\u3002\n\u5728\u62db\u8058\u5e7f\u544a\u4e2d\uff0c\u8981\u6c42\u662f\u900f\u660e\u7684\uff0c\u800c\u51fa\u4ef7\uff08\u4f60\u7684\u4ef7\u503c\uff09\u662f\u9690\u85cf\u7684\u3002\u8ba8\u4ef7\u8fd8\u4ef7\u65f6\uff0c\u4e24\u79cd\u4ef7\u683c\u90fd\u662f\u9690\u85cf\u7684\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7d27\u5f20\u7684\u5c40\u9762\u3002\n\u201c\u6d41\u52a8\u6027\u201d\u4e00\u8bcd\u6307\u7684\u662f\u4f60\u4ea4\u6613\u7684\u6548\u7387\uff1b\u73b0\u91d1\u6d41\u6709\u591a\u5bb9\u6613\u3002\u5f53\u4e70\u5356\u53cc\u65b9\u4e0d\u5f97\u4e0d\u4e89\u8bba\u6216\u8ba8\u4ef7\u8fd8\u4ef7\u65f6\uff0c\u4ea4\u6613\u5c31\u4f1a\u51bb\u7ed3\u3002\u7279\u522b\u662f\uff0c\u4e0a\u8ff0\u5e02\u573a\u5b58\u5728\u4e00\u4e2a\u5e38\u89c1\u95ee\u9898\uff1a\n\u5f53\u4e70\u5bb6\u548c\u5356\u5bb6\u9700\u8981\u5bfb\u627e\u5bf9\u65b9\uff0c\u5e76\u5728\u5230\u8fbe\u65f6\u8ba8\u4ef7\u8fd8\u4ef7\u65f6\uff0c\u4ea4\u6613\u4f1a\u653e\u7f13\u3002\n\u4f46\u5e0c\u671b\u5e76\u6ca1\u6709\u4e27\u5931\uff01\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u8d44\u672c\u4e3b\u4e49\u7684\u8c61\u5f81\u5c31\u662f\u201c\u5f00\u6e90\u201d\u6a21\u5f0f\uff1a\n\u6709\u4e00\u4e2a\u5730\u65b9\u53ef\u4ee5\u4e70\u5230\u7279\u5b9a\u7684\u80a1\u7968\uff1b\u6ca1\u6709\u641c\u7d22\n\u6bcf\u4e2aiPhone\u5356\u5bb6\u90fd\u4f1a\u5217\u51fa\u4ed6\u4eec\u7684\u8981\u4ef7\uff08210205201200\uff09\u3002\u6bcf\u4e2aiPhone\u4e70\u5bb6\u90fd\u4f1a\u5217\u51fa\u4ed6\u4eec\u7684\u8d2d\u4e70\u4ef7\u683c\uff08190195199200\uff09\u3002\u5f53\u4ef7\u683c\u5339\u914d\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u4ea4\u6613\uff1a\u60f3\u8981\u652f\u4ed8200\u7f8e\u5143\u7684\u4e70\u5bb6\u4e0e\u60f3\u8981\u652f\u4ed8200\u7f8e\u5143\u7684\u5356\u5bb6\u5339\u914d\u3002\u4ed6\u4eec\u5f88\u9ad8\u5174\u3002\n\u4ea4\u6613\u4e0d\u4f1a\u6c38\u8fdc\u6301\u7eed\u4e0b\u53bb\uff1a\u4f1a\u51fa\u73b0\u50f5\u5c40\u548c\u5c34\u5c2c\u7684\u505c\u987f\u3002\u6700\u4f4e\u7684\u5356\u5bb6\u60f3\u8981201\u7f8e\u5143\uff0c\u6700\u9ad8\u7684\u51fa\u4ef7\u8005\u60f3\u8981199\u7f8e\u5143\uff1b\u8fd9\u4e2a2\u7f8e\u5143\u7684\u5dee\u8ddd\u88ab\u79f0\u4e3a\u4ef7\u5dee\u3002\u6700\u540e\u4e00\u7b14\u4ea4\u6613\u7684\u4ef7\u683c\u662f200\u7f8e\u5143\u3002\n\u5f53\u4f60\u4e0b\u9650\u4ef7\u8ba2\u5355\uff08\u201c\u4ee5195\u201d\u7684\u4ef7\u683c\u8d2d\u4e70iPhone\uff09\u65f6\uff0c\u4f60\u7684\u8ba2\u5355\u4f1a\u88ab\u6dfb\u52a0\u5230\u7ade\u4ef7\u961f\u5217\u4e2d\uff08\u7c7b\u4f3c\u4e8e\u8be2\u95ee\uff09\u3002\n\u5982\u679c\u4f60\u73b0\u5728\u9700\u8981\u4ea4\u6613\uff08\u201c\u73b0\u5728\u5c31\u4e70\uff01\u201d\u6216\u8005\u201c\u73b0\u5728\u5c31\u5356\uff01\u201d\uff0c\u7136\u540e\u4f60\u4f7f\u7528\u5e02\u573a\u6307\u4ee4\u3002\u60a8\u5c06\u83b7\u5f97\u6700\u4f18\u60e0\u7684\u4ef7\u683c\uff1a\n\u5e02\u573a\u9500\u552e\u8ba2\u5355\uff1a\u4f60\u53ef\u4ee5\u4ee5199\u7f8e\u5143\uff08\u6700\u9ad8\u51fa\u4ef7\uff09\u7684\u4ef7\u683c\u5378\u8f7d\u4f60\u7684iPhone\u3002\u201c\u6700\u540e\u201d\u4ef7\u683c\u73b0\u5728\u662f199\u7f8e\u5143\u3002\n\u5e02\u573a\u8ba2\u5355\u8d2d\u4e70\uff1a\u60a8\u53ef\u4ee5\u4ee5\\$201\uff08\u6700\u4f4e\u4ef7\u683c\uff09\u8d2d\u4e70\u3002\u201c\u6700\u540e\u201d\u4ef7\u683c\u73b0\u5728\u662f201\u3002\n\u8fd9\u5f88\u6709\u8da3\u3002\u8bf7\u6ce8\u610f\u5e02\u573a\u8ba2\u5355\u5982\u4f55\u5c06\u5546\u54c1\u4ece\u961f\u5217\u4e2d\u79fb\u9664\u5e76\u66f4\u6539\u6700\u540e\u7684\u4ef7\u683c\u3002\u5f53\u4eba\u4eec\u4e0b\u8ba2\u5355\u65f6\uff0c\u80a1\u7968\u4ef7\u683c\u5c31\u4f1a\u6ce2\u52a8\u3002\u662f\u7684\uff0c\u8fd9\u53ea\u662f\u4f9b\u6c42\u5173\u7cfb\uff0c\u4f46\u77e5\u9053\u5b83\u5728\u80a1\u5e02\u5b9e\u65f6\u53d1\u751f\u662f\u5f88\u9177\u7684\u3002\n\u5982\u679c\u6709\u5f88\u591a\u4e70\u5bb6\uff0c\u4ed6\u4eec\u4f1a\u201c\u7528\u5b8c\u201d\u8be2\u95ee\u961f\u5217\uff0c\u4ef7\u683c\u5c31\u4f1a\u4e0a\u6da8\u3002\u5982\u679c\u6709\u5f88\u591a\u5356\u5bb6\uff0c\u4ed6\u4eec\u4f1a\u201c\u7528\u5b8c\u201d\u7ade\u4ef7\u961f\u5217\uff0c\u4ef7\u683c\u5c31\u4f1a\u4e0b\u964d\u3002\n\u8fd9\u5c31\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u5f88\u96be\u4ee5\u540c\u6837\u7684\u4ef7\u683c\u4e70\u5356\u3002\u5982\u679c\u4f60\u4ee5201\u7684\u4ef7\u683c\u8d2d\u4e70\uff0c\u800c\u6ca1\u6709\u65b0\u7684\u51fa\u4ef7\uff0c\u4f60\u53ea\u80fd\u4ee5199\u7684\u4ef7\u683c\u51fa\u552e\u3002\n\u4f60\u53ef\u4ee5\u770b\u5230\u51fa\u4ef7\u3001\u8981\u6c42\u3001\u6570\u91cf\u548c\u540d\u79f0\u3002\u8fd9\u91cc\u7684\u51fa\u4ef7\u662f204.91\uff08\u6709\u4eba\u5c06\u652f\u4ed8\u7684\u6700\u9ad8\u4ef7\u683c\uff09\uff0c\u800c\u8981\u4ef7\u662f204.92\uff08\u6709\u4eba\u5c06\u51fa\u552e\u7684\u6700\u4f4e\u4ef7\u683c\uff09\u3002\u5f53\u4e70\u5bb6\u6216\u5356\u5bb6\u4e0d\u5b89\u65f6\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u51b3\u5b9a\u7acb\u5373\u4e70\u5165/\u5356\u51fa\uff0c\u8fd9\u4f1a\u5f71\u54cd\u4ef7\u683c\u3002\u8fd9\u4e9b\u8be6\u7ec6\u6570\u636e\u79f0\u4e3a\u4e8c\u7ea7\u62a5\u4ef7\u3002\n\u7ebd\u7ea6\u8bc1\u5238\u4ea4\u6613\u6240\u548c\u7eb3\u65af\u8fbe\u514b\u662f\u7f8e\u56fd\u4e24\u5927\u4ea4\u6613\u6240\u3002\u867d\u7136\u5b58\u5728\u5dee\u5f02\uff0c\u4f46\u5176\u6838\u5fc3\u662f\uff1a\n\u4e00\u4e2a\u5355\u4e00\u7684\u4ea4\u6613\u5e02\u573a\u3002\u5fae\u8f6f\uff08Microsoft\uff09\u7684\u6240\u6709\u80a1\u7968\u90fd\u5728\u7eb3\u65af\u8fbe\u514b\u4ea4\u6613\u6240\u4ea4\u6613\u3002\u798f\u7279\uff08F\uff09\u7684\u6240\u6709\u80a1\u7968\u90fd\u5728\u7ebd\u7ea6\u8bc1\u5238\u4ea4\u6613\u6240\u4e0a\u5e02\u3002\n\u505a\u5e02\u5546\u6216\u201c\u4e13\u5bb6\u201d\uff08\u4e0d\u662f\u6740\u4eba\u7684\u90a3\u79cd\uff09\u3002\u8fd9\u4e9b\u4eba\u4f7f\u5e02\u573a\u6d41\u52a8\uff1a\u4ed6\u4eec\u5e2e\u52a9\u6536\u96c6\u548c\u5339\u914d\u51fa\u4ef7\u548c\u8bf7\u6c42\u3002\u7ebd\u7ea6\u8bc1\u5238\u4ea4\u6613\u6240\u6bcf\u53ea\u80a1\u7968\u6709\u4e00\u4e2a\u7279\u4ef7\uff1b\u7eb3\u65af\u8fbe\u514b\u6709\u51e0\u5bb6\u505a\u5e02\u5546\uff08\u4ea4\u6613\u5546\uff09\u5728\u4ef7\u683c\u4e0a\u5c55\u5f00\u7ade\u4e89\u3002\n\u5728\u7ebd\u7ea6\u8bc1\u5238\u4ea4\u6613\u6240\uff0c88%\u7684\u4ea4\u6613\u662f\u5728\u516c\u4f17\u4e4b\u95f4\u8fdb\u884c\u7684\uff0c\u4e0d\u9700\u8981\u4e13\u4e1a\u4eba\u58eb\uff08\u8fd8\u8bb0\u5f97\u90a3\u4e9b\u5bb6\u4f19\u6325\u821e\u7740\u6587\u4ef6\uff0c\u4e92\u76f8\u5c16\u53eb\u5417\uff1f\u6211\u4e5f\u4e0d\u60f3\u548c\u4ed6\u4eec\u626f\u4e0a\u5173\u7cfb\uff09\u3002\n\u4f46\u6709\u65f6\u5b83\u4eec\u662f\u9700\u8981\u7684\u3002\u505a\u5e02\u5546\u901a\u8fc7\u63d0\u4f9b\u6d41\u52a8\u6027\u6765\u201c\u521b\u9020\u4e00\u4e2a\u5e02\u573a\u201d\uff1a\u4f60\u53ef\u4ee5\u6309\u4e70\u5356\u4ef7\u683c\u5411\u4ed6\u4eec\u4e70\u5356\u80a1\u7968\u3002\u53d7\u9700\u6c42\u548c\u6210\u4ea4\u91cf\u7684\u5f71\u54cd\uff0c\u70ed\u95e8\u80a1\u7684\u4ef7\u5dee\u8f83\u5c0f\u3002\n\u55ef\uff0c\u8fd9\u6709\u70b9\u50cf\u94f6\u884c\u7684\u8d27\u5e01\u5151\u6362\uff0c\u90a3\u91cc\u6709\u4e0d\u540c\u7684\u4e70\u5356\u6c47\u7387\u3002\u5047\u8bbe\u82cf\u6709\u4e00\u90e8iPhone\u8981\u5356\uff0c\u9c8d\u52c3\u60f3\u4e70\u4e00\u90e8iPhone\u3002\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1a\n\u770b\u5230\u53d1\u751f\u4ec0\u4e48\u4e86\u5417\uff1f\u8fd9\u5bb6\u505a\u5e02\u5546\u4ee5199\u7f8e\u5143\u7684\u4ef7\u683c\u8d2d\u4e70\u4e86\u4e00\u90e8iPhone\uff0c\u4ee5201\u7f8e\u5143\u7684\u4ef7\u683c\u552e\u51fa\uff1a\u5b83\u7684\u4ef7\u5dee\u4e3a2\u7f8e\u5143\u3002\u7ecf\u9500\u5546\u6839\u636e\u51fa\u4ef7\u548c\u8981\u4ef7\u4e0d\u65ad\u6539\u53d8\u4ef7\u683c\uff1b\u4ed6\u4eec\u751a\u81f3\u53ef\u80fd\u4f1a\u56e0\u4e3a\u4ea4\u6613\u800c\u8d54\u94b1\u3002\u4f46\u901a\u5e38\u8fd9\u662f\u4e00\u573a\u4e0d\u9519\u7684\u6f14\u51fa\u3002\n\u4f5c\u4e3a\u6295\u8d44\u8005\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4e0b\u8fbe\u9650\u4ef7\u6307\u4ee4\u4ee5\u7279\u5b9a\u4ef7\u683c\u51fa\u552e\u6216\u8d2d\u4e70\u6765\u907f\u514d\u652f\u4ed8\u201c\u5dee\u4ef7\u201d\u3002\u4f46\u4f60\u4e5f\u4e0d\u80fd\u4fdd\u8bc1\u4ea4\u6613\u6210\u529f\u3002\n\u6bd4\u5c14\u00b7\u76d6\u8328\u62e5\u6709\u5fae\u8f6f\u7684\u5927\u91cf\u80a1\u4efd\u3002\u4eba\u4eec\u5929\u771f\u5730\u628a\u8fd9\u7b14\u8d22\u5bcc\u79f0\u4e3a\u201c\u80a1\u7968\u4e58\u4ee5\u4ef7\u683c\u201d\uff0c\u4f46\u4f60\u77e5\u9053\u8fd9\u5e76\u6ca1\u6709\u771f\u6b63\u8d77\u4f5c\u7528\u3002\u5982\u679c\u4ed6\u60f3\u5356\u6389\u6240\u6709\u7684\u80a1\u4efd\uff0c\u51fa\u4ef7\u5c31\u4f1a\u7528\u5b8c\u3002\n\u6bcf\u4e00\u5757\u80a1\u7968\u90fd\u4f1a\u4ee5\u8d8a\u6765\u8d8a\u4f4e\u7684\u4ef7\u683c\u51fa\u552e\u2014\u2014\u6f5c\u5728\u4e70\u5bb6\u4f1a\u611f\u5230\u6050\u614c\uff0c\u8ba4\u4e3a\u6709\u4ec0\u4e48\u4e0d\u5bf9\u52b2\uff0c\u4ece\u800c\u964d\u4f4e\u51fa\u4ef7\u3002\u5356\u5bb6\u4f1a\u5bb3\u6015\u6700\u574f\u7684\u60c5\u51b5\uff0c\u964d\u4f4e\u7ade\u4e89\u8981\u6c42\u3002\u968f\u4e4b\u800c\u6765\u7684\u662f\u4e00\u7247\u6df7\u4e71\u3002\u56e0\u6b64\uff0c\u4ed6\u7684\u80a1\u7968\u7684\u5b9e\u9645\u6e05\u7b97\u4ef7\u503c\u5b9e\u9645\u4e0a\u53ea\u662f\u62a5\u544a\u91d1\u989d\u7684\u4e00\u5c0f\u90e8\u5206\u3002\u4f46\u8fd8\u662f\u6ca1\u4ec0\u4e48\u597d\u6253\u55b7\u568f\u7684\u3002\n\u7c7b\u4f3c\u5730\uff0c\u5927\u578b\u673a\u6784\u5fc5\u987b\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u5206\u6563\u5176\u80a1\u7968\u4ea4\u6613\uff0c\u4ee5\u514d\u6270\u4e71\u5e02\u573a\uff08\u5e76\u84b8\u53d1\u5229\u6da6\uff09\u3002\n\u5e02\u573a\u4e0a\u6709\u5185\u7f6e\u7684\u51cf\u9707\u5668\uff1a\u968f\u7740\u4f60\u5356\u51fa\u66f4\u591a\uff0c\u4f60\u5f97\u5230\u7684\u4ef7\u683c\u8d8a\u6765\u8d8a\u5c0f\uff0c\u6240\u4ee5\u4f60\u5356\u51fa\u7684\u66f4\u5c11\u3002\u5f53\u4f60\u4e70\u7684\u8d8a\u591a\uff0c\u4f60\u4ed8\u51fa\u7684\u4ef7\u683c\u5c31\u8d8a\u9ad8\uff0c\u6240\u4ee5\u4f60\u4e70\u7684\u5c31\u8d8a\u5c11\u3002\u6240\u4ee5\u6162\u6162\u6765\u662f\u6709\u9053\u7406\u7684\u3002\u6f02\u4eae\u3002\n\u6211\u7b80\u5316\u4e86\u5f88\u591a\u4e8b\u60c5\uff0c\u53ea\u89e6\u53ca\u4e86\u8868\u9762\u3002\u6bcf\u4e2a\u5e02\u573a\u90fd\u6709\u81ea\u5df1\u7684\u89c4\u5219\u6765\u521b\u9020\u4e00\u4e2a\u6709\u5229\u4e8e\u4ea4\u6613\u7684\u73af\u5883\u3002\u8bf7\u5728\u6b64\u5904\u9605\u8bfb\u66f4\u591a\u5185\u5bb9\uff1a\n\u5728\u7eb3\u65af\u8fbe\u514b\u548c\u7ebd\u7ea6\u8bc1\u5238\u4ea4\u6613\u6240\u6295\u8d44\u5e38\u89c1\u95ee\u9898\u89e3\u7b54\u3002\u7ebd\u7ea6\u8bc1\u5238\u4ea4\u6613\u6240\u662f\u4e00\u4e2a\u201c\u62cd\u5356\u5e02\u573a\u201d\uff0c\u5728\u8fd9\u91cc\u51fa\u4ef7\u548c\u8981\u4ef7\u90fd\u662f\u516c\u5f00\u7684\uff08\u8fd9\u4e0eeBay\u62cd\u5356\u4e0d\u540c\uff0c\u5728eBay\u62cd\u5356\u4e2d\uff0c\u53ea\u6709\u51fa\u4ef7\u8005\u5728\u7ed9\u5b9a\u7684\u62cd\u5356\u4e2d\u7ade\u4e89\uff09\u3002\u7eb3\u65af\u8fbe\u514b\u662f\u4e00\u4e2a\u201c\u4ea4\u6613\u5546\u5e02\u573a\u201d\uff0c\u4f60\u53ef\u4ee5\u4ece\u4ea4\u6613\u5546\u7684\u4e2a\u4eba\u5e93\u5b58\u4e2d\u8fdb\u884c\u4e70\u5356\u3002\n\u67e5\u770b\u5fae\u8f6f\u6216\u8c37\u6b4c\u7684\u5f53\u524d\u51fa\u4ef7/\u8981\u4ef7\uff08\u4ee5\u53ca\u4ee5\u8be5\u4ef7\u683c\u51fa\u552e\u7684\u80a1\u4efd\uff09\n\u4f46\u662f\uff0c\u6211\u7684\u76ee\u6807\u4e0d\u662f\u8ba9\u4f60\u8111\u5b50\u91cc\u5145\u6ee1\u7ec6\u8282\u3002\u6211\u60f3\u5206\u4eab\u6211\u7684\u89c1\u89e3\uff1a\n\u60f3\u8981\u80a1\u7968\u5c0f\u8d39\u5417\uff1f\u4e0d\u8981\u542c\u80a1\u7968\u63d0\u793a\u3002\uff08\u4ece\u67e5\u5c14\u65af\u00b7\u65bd\u74e6\u5e03\u7684\u5e7f\u544a\u4e2d\u5077\u6765\uff09\u3002\u672c\u6587\u5c06\u7cfb\u7edf\u89c6\u4e3a\u89e3\u51b3\u66f4\u5927\u95ee\u9898\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u5feb\u4e50\u6295\u8d44\u3002\n\u559c\u6b22\u8fd9\u7bc7\u6587\u7ae0\u5417\uff1f\u90a3\u91cc&#39\uff1b\u8fd8\u6709\u5f88\u591a\u4e1c\u897f\u53ef\u4ee5\u5e2e\u52a9\u4f60\u5efa\u7acb\u5bf9\u6570\u5b66\u7684\u6301\u4e45\u3001\u76f4\u89c2\u7684\u7406\u89e3\u3002\u52a0\u5165\u65f6\u4e8b\u901a\u8baf\u4e86\u89e3\u5956\u91d1\u5185\u5bb9\u548c\u6700\u65b0\u66f4\u65b0\u3002", "note_en": "Everyone\u2019s heard of the stock market \u2014 but few know why it works. Were you aware that each stock has two prices? That you can\u2019t buy and sell for the same amount? That a \u201cstock market\u201d works better and is more open than a \u201cstock store\u201d?\n If you\u2019re like most of us, probably not. Here\u2019s why stock markets rock:\n You  pick your own price and will get that amount if there\u2019s a willing partner\n Most explanations jump into the minor details \u2014 not here. Today we\u2019ll see why the stock market works as it does.\n  I\u2019m told iPhones are popular with the 18-35 demographic. A market research firm asked me to find a good selling price, so I\u2019ll pass the question onto you:\n Me: You, the coveted 18-35 year old demographic, want an iPhone. What\u2019s it worth?\n    You see, buyers and sellers each have prices in mind. When prices match, whablamo, there\u2019s a transaction (no match,  no whablamo).\n The idea of  two prices for every item is key to understanding any market, not just stocks. Everything has a bid and an ask, and each shopping model has a different way of handling them. This leads to different advantages for buyers and sellers.\n  Suppose we want to buy an iPhone from Amazon. You see the selling price of \\$200 (Amazon\u2019s ask), and personally decide if it\u2019s \u201cworth it\u201d (i.e. less than or equal to your bid):\n  In the store model, Amazon shows a public asking price (\\$200). Each buyer has a secret bidding price, some more than others. Buyers willing to bid \\$200 or more purchase the iPhone; the rest hold off (\\$199 and below).\n Amazon picks a price that attracts the most bidders yet still keeps a profit. In the store model:\n Seller con: Sellers don\u2019t know what each buyer is willing to pay; it\u2019s difficult to set the pricing. Do low sales mean a bad price or a bad product?\n Even though buyers are \u201cin control\u201d, they may have to search around to find a store that meets their bid (if any). That\u2019s inefficient.\n  Now suppose we want to sell our new, unopened gadget (you, the 18-35 demographic, are fickle like that; the survey said so). Sure, we could try to sell it on Amazon \u2014 now we\u2019re our own store and need a price we  think people will pay. We\u2019re in the same boat as Amazon, and could set the price too low. That\u2019s no fun.\n   In the eBay model, buyers have public bids and compete for the product. The seller keeps their minimum price secret and hopes to make a profit by having someone \u201coverpay\u201d. In the auction model:\n Seller pro: Sellers have a secret ask (reserve or minimum price) and can get paid above this.\n Seller pro: Buyers\u2019 demand is transparent. They can easily see if they are pricing too high.\n eBay is great for sellers \u2014 you have the chance of making extra profit. For buyers, it\u2019s not so great: you can lose auctions by \\$1 (paying 201 when 202 was the highest bid), even though the seller would have been happy with 201. You could enter multiple auctions with \\$201 but risk getting two iPhones.\n   Want ad: Publicly announce your desire for an iPhone and let sellers fight it out.\n Haggle: Find someone with an iPhone, and without knowing a selling price, make an offer. You both haggle back and forth, trying to eke the other person out of a few bucks. If you\u2019ve gone car shopping you know how fun this is.\n In want ads, the asks are transparent while the bids (your value) are hidden. When haggling, both prices are hidden which can lead to a stressful situation.\n    The phrase  liquidity refers to how effectively you can trade; how easily cash can  flow. When buyers and sellers have to argue or haggle, trading freezes up. In particular, there\u2019s a common problem in the market above:\n  When buyers and sellers need to search to find each other, and haggle when they get there, trading slows down.\n  But hope is not lost! Surprisingly, the very symbol of capitalism is an \u201copen source\u201d model:\n There\u2019s  one location to get a particular stock; there\u2019s no searching\n   Every iPhone seller lists their asking price (210, 205, 201, 200). Every iPhone buyer lists their buying price (190, 195, 199, 200). When prices match, a transaction happens: the buyer who wants to pay 200 gets matched with the seller who wants 200. They\u2019re happy.\n   Trades don\u2019t last forever: there\u2019s a standoff and an awkward pause. The lowest sellers want \\$201, and the highest bidder wants \\$199; this \\$2 gap is called  the spread. The  last price of a transaction was \\$200.\n   When you place a limit order (\u201cBuy an iPhone for 195\u2033), your order gets added to the bid queue (similar for asks).\n If you need to trade  right now (\u201cbuy it now!\u201d or \u201csell it now!\u201d), then you use a market order. You\u2019ll get the best price available:\n Market order to sell: You can unload your iPhone for \\$199 (the highest bid). The \u201clast\u201d price is now 199.\n Market order to buy: You can buy for \\$201 (the lowest price). The \u201clast\u201d price is now 201.\n Now this is interesting. Notice how market orders  take items off the queue and  change the last price. When people place market orders, the stock price fluctuates. Yes, it\u2019s \u201cjust\u201d supply and demand, but it\u2019s pretty cool to know it\u2019s happening real-time in the stock market.\n If there\u2019s a lot of buyers, they\u2019ll \u201cuse up\u201d the ask queue and the price will rise. If there\u2019s a lot of sellers, they\u2019ll \u201cuse up\u201d the bid queue and the price will fall.\n This explains why it\u2019s hard to buy and sell for the same price. If you buy for 201, and no new bids come in, you\u2019ll only be able to sell for 199.\n   You see the bids, asks, quantities, and names. Here the bid is 204.91 (max someone will pay) and the ask is 204.92 (min someone will sell). When a buyer or seller gets restless, they may decide to immediately buy/sell, which moves the price. This detailed data is called a Level II quote.\n  The  NYSE and  NASDAQ are the two major American exchanges. There are differences, but at the core they provide:\n A  single market to trade. All stocks for Microsoft (MSFT), are traded on the  NASDAQ exchange. All stocks for Ford (F) are on the  NYSE.\n A  market maker or \u201cspecialist\u201d (not the kind that  kills people). These people make the market liquid: they help collect and match bids and asks. The  NYSE has one specialst per stock;  NASDAQ has several market makers (dealers) who compete on price.\n  Well, often they don\u2019t. In the  NYSE, 88% of the trades happen between the public without needing the specialist (remember those guys waving papers and screaming at each other? I wouldn\u2019t want to get involved with them either).\n But sometimes they are needed. The market makers literally \u201ccreate a market\u201d by providing liquidity: you can buy and sell stocks to them at the bid and ask prices. Popular stocks have a small spread due to the demand and volume.\n   Well, it\u2019s a bit like a currency exchange at a bank, where\u2019s there\u2019s a different rate for buying and selling. Let\u2019s say Sue has an iPhone to sell, and Bob wants to buy an iPhone. It might go like this:\n  See what happened? The market maker bought an iPhone for 199 and sold it for 201: it pocketed the spread of \\$2. Dealers constantly change their prices based on the bids and asks; they can even lose money depending on the trades coming in. But usually it\u2019s a pretty good gig.\n You, the investor, can avoid paying \u201cthe spread\u201d by placing limit orders to sell or buy at a certain price. But then you aren\u2019t guaranteed to make a trade.\n  Bill Gates has a  lot of shares of Microsoft. People naively put this wealth as \u201cshares times price\u201d, but you know that doesn\u2019t really work. If he tried to sell all his shares, he\u2019d use up the bids.\n Each block of shares would be sold for a lower and lower value \u2014 and potential buyers would panic and reduce their bids, thinking something was amiss. Sellers would fear the worst and lower their asks to compete. Pandemonium would ensue. So the actual liquidation value of his shares is really some fraction of the reported amount. But it\u2019s still nothing to sneeze at.\n Similarly, large institutions must spread their stock trades over time so they don\u2019t disrupt the market (and evaporate their profits).\n The market has built-in shock absorbers: as you sell more, the price you get is smaller and smaller, so you sell less. As you buy more, the price you pay gets higher and higher, so you buy less. So it makes sense to take things slow. Nifty.\n  I\u2019ve simplified a lot of things and only scratched the glossed-over surface. Each market has its own rules to create a trading-friendly environment. Read more here:\n Invest-faq on the   NASDAQ and   NYSE. The  NYSE is an \u201cauction market\u201d where bids and asks are public (this is different from eBay auctions, where only bidders compete in a given auction). The  NASDAQ is a \u201cdealer market\u201d where you buy/sell from a dealer\u2019s personal inventory.\n  See the current bid/ask for  Microsoft or  Google (and # of shares at that price)\n But, my goal wasn\u2019t to fill your head with details. I want to share insight:\n  Want a stock tip? Don\u2019t listen to stock tips. (Stolen from a Charles Schwab ad). This article is about looking at a system as  one way to solve a larger problem. Happy investing.\n  Enjoy the article? There&#39;s plenty more to help you build a lasting, intuitive understanding of math. Jointhe newsletter for bonus content and the latest updates.", "posttime": "2022-02-15 20:50:25", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u80a1\u5e02,stock,\u4ef7\u683c", "title": "\u5173\u4e8e\u80a1\u5e02\u7684\u77e5\u8bc6\uff082007\uff09", "title_en": "What to know about the stock market (2007)", "transed": 1, "url": "https://betterexplained.com/articles/what-you-should-know-about-the-stock-market/", "via": "", "real_tags": ["\u80a1\u5e02", "stock", "\u4ef7\u683c"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073519, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u4e2a\u6708\u524d\uff0c\u6211\u521b\u5efa\u4e86\u5bf9\u8c61\u6587\u4ef6\u89e3\u6790\u5305\uff0c\u6bd4\u5982debug/macho\uff0c\u4f5c\u4e3a\u6bcf\u4e2a\u5305\u7684\u6d4b\u8bd5\u6570\u636e\uff0c\u6211\u7b7e\u5165\u4e86\u4e00\u4e2a\u4ece\u4e00\u4e2a\u5fae\u4e0d\u8db3\u9053\u7684\u201chello\uff0cworld\u201d\u7a0b\u5e8f\u7f16\u8bd1\u7684\u5bf9\u8c61\u6587\u4ef6\uff0c\u4ee5\u53ca\u5b83\u4eec\u7684\u6e90\u4ee3\u7801\uff1acommit BF69025825FD2B8E7AAC01F27D5C974BD30AF542 author:Russ Cox&lt\uff1brsc@golang.org&gt\uff1b\u4f5c\u8005\uff1aFri Sep 18 11:49:22 2009-0700\u63d0\u4ea4\uff1aRuss Cox&lt\uff1brsc@golang.org&gt\uff1b\u63d0\u4ea4\u65e5\u671f\uff1a2009\u5e749\u670818\u65e5\u661f\u671f\u4e9411:49:22-0700 Mach-O\u6587\u4ef6\u8bfb\u53d6R=R DELTA=784\uff08\u6dfb\u52a0784\uff0c\u5220\u96640\uff0c\u66f4\u65390\uff09OCL=34715 CL=34788 src/pkg/debug/macho/Makefile | 12+src/pkg/debug/macho/file\u3002\u8fdb\u884c| 374\uff0b\uff0b\uff0b\uff0b\uff0b\uff0b\uff0b\uff0b\uff0b\uff0b\uff0b\uff0b\uff0b\uff0b\uff0b\uff0bsrc/pkg/debug/macho/file_\u6d4b\u8bd5\u3002\u53bb| 159+src/pkg/debug/macho/macho\u3002go | 230+src/pkg/debug/macho/testdata/gcc-386-darwin-exec | Bin 0-&gt\uff1b12588\u5b57\u8282src/pkg/debug/macho/testdata/gcc-amd64-darwin-exec | Bin 0-&gt\uff1b8512\u5b57\u8282/macho/testdata/gcc-amd64-darwin-exec-debug | Bin 0-&gt\uff1b4540\u5b57\u82827\u4e2a\u6587\u4ef6\u66f4\u6539775\u4e2a\u63d2\u5165\uff08+\uff09\n\u8fd9\u662f\u6700\u521d\u5f15\u5165src/pkg/debug/macho/testdata/hello\u7684\u63d0\u4ea4\u3002c\u3001 \u5f53\u7136\u3002\u5f53\u6211\u5728\u6587\u4ef6\u4e2d\u6dfb\u52a0\u7248\u6743\u58f0\u660e\u65f6\uff0c\u5728hello\u4e2d\u6dfb\u52a0\u7248\u6743\u58f0\u660e\u4f3c\u4e4e\u662f\u9519\u8bef\u7684\u3002c\u6587\u4ef6\u3002\u76f8\u53cd\uff0c\u7531\u4e8e\u6211\u5c06\u56de\u8d2d\u534f\u8bae\u62c6\u5206\u4e3a\u6bcf\u4e2a\u63d0\u4ea4\u8868\u5355\u7684\u8865\u4e01\u6587\u4ef6\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u521b\u5efa\u4e00\u4e9b\u81f3\u5c11\u663e\u793a\u8be5\u7a0b\u5e8f\u771f\u5b9e\u5386\u53f2\u4e00\u90e8\u5206\u7684\u5047\u63d0\u4ea4\uff0c\u4f5c\u4e3a\u4ed4\u7ec6\u67e5\u770b\u7684\u4eba\u7684\u590d\u6d3b\u8282\u5f69\u86cb\uff1a\u63d0\u4ea47D7C6A97F815E9279D08CFAEA7D5EFB5E90695A8\u4f5c\u8005\uff1a\u5e03\u83b1\u6069\u00b7\u514b\u5c3c\u6839&lt\uff1bbwk&gt\uff1b\u4f5c\u8005\u65e5\u671f\uff1a\u5468\u4e8c7\u670818\u65e519:05:45 1972-0500\u793e\u533a\uff1a\u5e03\u83b1\u6069\u00b7\u514b\u5c3c\u6839&lt\uff1bbwk&gt\uff1b\u63d0\u4ea4\u65e5\u671f\uff1a1972\u5e747\u670818\u65e5\u661f\u671f\u4e8c19:05:45-0500\u60a8\u597d\uff0cworld R=ken DELTA=7\uff08\u6dfb\u52a07\u4e2a\uff0c\u5220\u96640\u4e2a\uff0c\u66f4\u65390\u4e2a\uff09src/pkg/debug/macho/testdata/hello\u3002b | 7+1\u6587\u4ef6\u66f4\u6539\uff0c7\u6b21\u63d2\u5165\uff08+\uff09\u63d0\u4ea40BB0B61D6A85B2A1A33DCBC418089656F2754D32\u4f5c\u8005\uff1a\u5e03\u83b1\u6069\u00b7\u514b\u5c3c\u6839&lt\uff1bbwk&gt\uff1b\u4f5c\u8005\uff1aSun Jan 20 01:02:03 1974-0400\u793e\u533a\uff1aBrian Kernighan&lt\uff1bbwk&gt\uff1b\u63d0\u4ea4\u65e5\u671f\uff1aSun Jan 20 01:02:03 1974-0400\u8f6c\u6362\u4e3aC R=dmr DELTA=6\uff080\u6dfb\u52a0\uff0c3\u5220\u9664\uff0c3\u66f4\u6539\uff09src/pkg/debug/macho/testdata/hello\u3002b | 7------src/pkg/debug/macho/testdata/hello\u3002c | 3+++2\u4e2a\u6587\u4ef6\u66f4\u6539\uff0c3\u4e2a\u63d2\u5165\uff08+\uff09\uff0c7\u4e2a\u5220\u9664\uff08-\uff09\u63d0\u4ea40744ac969119db8a0ad3253951d375eb77cfce9eAuthor:Brian Kernighan&lt\uff1b\u7814\u7a76bwk&gt\uff1b\u4f5c\u8005\uff1aFri Apr 1 02:02:04 1988-0500\u793e\u533a\uff1aBrian Kernighan&lt\uff1b\u7814\u7a76bwk&gt\uff1b\u63d0\u4ea4\u65e5\u671f\uff1a1988\u5e744\u67081\u65e5\u661f\u671f\u4e9402:02:04-0500\u8f6c\u6362\u4e3a\u62df\u8bae\u7684ANSI C R=dmr DELTA=5\u8349\u6848\uff08\u589e\u52a02\u4e2a\uff0c\u5220\u96640\u4e2a\uff0c\u66f4\u65393\u4e2a\uff09src/pkg/debug/macho/testdata/hello\u3002c | 7++--1\u4e2a\u6587\u4ef6\u66f4\u6539\uff0c5\u4e2a\u63d2\u5165\uff08+\uff09\uff0c2\u4e2a\u5220\u9664\uff08-\uff09\u63d0\u4ea4D82B11E4A46307F1415024F33263E819C222B8\u4f5c\u8005\uff1aBrian Kernighan&lt\uff1bbwk@research.att.com&gt\uff1b\u4f5c\u8005\uff1aFri Apr 1 02:03:04 1988-0500\u793e\u533a\uff1aBrian Kernighan&lt\uff1bbwk@research.att.com&gt\uff1b\u63d0\u4ea4\u65e5\u671f\uff1a1988\u5e744\u67081\u65e5\u661f\u671f\u4e9402:03:04-0500\u6700\u540e\u4e00\u523b\u4fee\u590d\uff1a\u8f6c\u6362\u4e3aANSI C R=dmr DELTA=3\uff08\u6dfb\u52a02\u4e2a\uff0c\u5220\u96640\u4e2a\uff0c\u66f4\u65391\u4e2a\uff09src/pkg/debug/macho/testdata/hello\u3002c | 4++-1\u4e2a\u6587\u4ef6\u66f4\u6539\uff0c3\u4e2a\u63d2\u5165\uff08+\uff09\uff0c1\u4e2a\u5220\u9664\uff08-\uff09\n1972\u5e747\u6708\u7684\u63d0\u4ea4\u5c55\u793a\u4e86\u7b2c\u4e00\u4e2a\u201chello\uff0cworld\u201d\u7a0b\u5e8f\uff0c\u5b83\u662f\u4eceBrian Kernighan\u7684\u201c\u8bed\u8a00B\u6559\u7a0b\u4ecb\u7ecd\u201d\u4e2d\u590d\u5236\u800c\u6765\u7684\uff1amain\uff08\uff09{extrn A\uff0cB\uff0cc\uff1bputchar\uff08A\uff09\uff1bputchar\uff08B\uff09\uff1bputchar\uff08c\uff09\uff1bputchar\uff08'\uff01*n'\uff09\uff1b}\u201c\u5730\u72f1\u201d\uff1bb'o\uff0cw'\uff1bc\u2018\u4e16\u754c\u2019\uff1b\n\u5404\u79cd\u7f51\u4e0a\u6765\u6e90\u79f0\u8fd9\u662f\u4e00\u672c\u201c\u4e66\u201d\uff0c\u4f46\u5b83\u7edd\u5bf9\u4e0d\u662f\u3002\u8fd9\u662f\u4e00\u4efd17\u9875\u7684\u5370\u5237\u6587\u4ef6\uff0c\u540e\u6765\u88ab\u4f5c\u4e3a1973\u5e741\u6708\u300a\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u8ba1\u7b97\u79d1\u5b66\u6280\u672f\u62a5\u544a#8\uff1a\u7f16\u7a0b\u8bed\u8a00B\u300b\u7684\u4e00\u534a\u6536\u5f55\uff08\u751a\u81f3\u8fd8\u6ca1\u6709\u63a5\u8fd1\u4e00\u672c\u4e66\uff01\uff09\u3002\u201chello\uff0cworld\u201d\u8282\u76ee\u51fa\u73b0\u5728\u7b2c7\u8282\u4e2d\uff0c\u524d\u9762\u662f\u4e0d\u90a3\u4e48\u5438\u5f15\u4eba\u7684\u201chi\uff01\u201d\u7b2c6\u8282\u4e2d\u7684\u7a0b\u5e8f\u3002\u5f53\u6211\u57282022\u5e74\u5199\u8fd9\u7bc7\u535a\u6587\u65f6\uff0c\u6211\u627e\u4e0d\u5230\u4efb\u4f55\u5173\u4e8eB\u6559\u7a0b\u6700\u521d\u65e5\u671f\u4e3a1972\u5e747\u6708\u7684\u5728\u7ebf\u53c2\u8003\u8d44\u6599\uff0c\u4f46\u6211\u76f8\u4fe1\u6211\u4e00\u5b9a\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u7406\u7531\u30021974\u5e741\u6708\u7684\u59d4\u5458\u4f1a\u5c06\u8be5\u7a0b\u5e8f\u8f6c\u6362\u4e3aC\u8bed\u8a00\uff0c\u5982\u514b\u5c3c\u6c49\u7684\u300aC\u8bed\u8a00\u7f16\u7a0b\u6559\u7a0b\u300b\u6240\u8ff0\u3002\u94fe\u63a5\u7684PDF\u662f\u4e39\u5c3c\u65af\u00b7\u91cc\u5947\uff08Dennis Ritchie\uff09\u91cd\u65b0\u6253\u5370\u7684\u526f\u672c\uff0c\u6ca1\u6709\u65e5\u671f\uff0c\u4f46\u91cc\u5947\uff08Ritchie\uff091974\u5e741\u670815\u65e5\u7684\u300aC\u53c2\u8003\u624b\u518c\u300b\u6280\u672f\u5907\u5fd8\u5f55\u5c06\u514b\u5c3c\u6839\uff08Kernighan\uff09\u7684\u6559\u7a0b\u79f0\u4e3a\u201c\u672a\u51fa\u7248\u7684\u5185\u90e8\u5907\u5fd8\u5f55\uff0c\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\uff0c1974\u5e74\u201d\uff0c\u8fd9\u610f\u5473\u7740\u8be5\u6559\u7a0b\u4e5f\u5fc5\u987b\u57281\u6708\u4efd\u7f16\u5199\u3002C\u7a0b\u5e8f\u6bd4\u6211\u4eec\u73b0\u5728\u4f7f\u7528\u7684\u7a0b\u5e8f\u77ed\uff0c\u4f46\u6bd4B\u7a0b\u5e8f\u597d\u5f97\u591a\uff1a\u6211\u8df3\u8fc7\u4e86C\u7f16\u7a0b\u8bed\u8a00\u7b2c\u4e00\u7248\u4e2d\u7684\u6f14\u793a\uff0c\u8fd9\u770b\u8d77\u6765\u50cf\u662f\uff1a1988\u5e744\u6708\u7684\u59d4\u5458\u4f1a\u5c55\u793a\u4e86C\u7f16\u7a0b\u8bed\u8a00\u7b2c\u4e8c\u7248\u7684\u201c\u62df\u8bae\u7684ANSI C\u8349\u6848\u201d\u7248\u672c\u7684\u7a0b\u5e8f\uff1a1988\u5e744\u6708\u7684\u7b2c\u4e8c\u59d4\u5458\u4f1a\u5c55\u793a\u4e86\u6211\u4eec\u4eca\u5929\u77e5\u9053\u7684\u6700\u7ec8\u5b8c\u6574\u7684ANSI C\u7248\u672c\uff1a\u7ef4\u57fa\u767e\u79d1\u8bf4\u7b2c\u4e8c\u7248\u4e8e1988\u5e744\u6708\u51fa\u7248\u3002\u6211\u6ca1\u6709\u65f6\u95f4\uff0c\u4f464\u67081\u65e5\u4f3c\u4e4e\u5f88\u5408\u9002\u3002\u6211\u6ca1\u6709\u65f6\u95f4\u505a\u8fd9\u4e24\u4ef6\u4e8b\uff0c\u6240\u4ee5\u6211\u752802:03:04\u505a\u7b2c\u4e8c\u4ef6\u4e8b\uff0c\u6240\u4ee5\u752802:02:04\u505a\u7b2c\u4e00\u4ef6\u4e8b\u3002\u63d0\u4ea4\u4e2d\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u4e5f\u9002\u7528\u4e8e\u53e5\u70b9\uff0c\u5c3d\u7ba1Mondrian\u7684R=\u548cDELTA=\u6807\u8bb0\u663e\u7136\u4e0d\u9002\u7528\uff1a\u5f53\u65f6\u6ca1\u6709\u4ee3\u7801\u5ba1\u67e5\uff01\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u6211\u4ece\u8bb8\u591a\u4eba\u90a3\u91cc\u542c\u8bf4\uff0c\u4e0e\u5176\u4ed6\u9879\u76ee\u76f8\u6bd4\uff0c1972\u5e74\u7684\u65e5\u671f\u6253\u7834\u4e86\u4ed6\u4eec\u5728\u79fb\u52a8\u5b58\u50a8\u5e93\u4e2d\u6240\u505a\u7684\u5404\u79cd\u6f14\u793a\u548c\u5206\u6790\u3002\u54ce\u5440\uff01\u62b1\u6b49\u3002\uff08\u6211\u8fd8\u542c\u8bf4\u6709\u4eba\u5728\u5206\u6790Mercurialrepos\u7684\u201cbranchiness\u201d\uff0c\u5e76\u51b3\u5b9a\u5c06Gorepo\u7528\u4f5c\u4e00\u4e2a\u5927\u578b\u6d4b\u8bd5\u7528\u4f8b\u3002\u4ed6\u4eec\u7684\u7a0b\u5e8f\u5728\u8c03\u8bd5\u4ed6\u4eec\u7684\u7a0b\u5e8f\u65f6\u8bf4\u5b83\u7684branchiness\u4e3a0\uff0c\u4ed6\u4eec\u82b1\u8d39\u4e86\u4e00\u6bb5\u65f6\u95f4\uff0c\u7136\u540e\u624d\u610f\u8bc6\u5230\uff0c\u7531\u4e8e\u6211\u4eec\u7684\u201c\u91cd\u8bbe\u57fa\u7840\u548c\u5408\u5e76\u201d\u653f\u7b56\uff0crepo\u5b9e\u9645\u4e0a\u662f\u5b8c\u5168\u7ebf\u6027\u7684\u3002\uff09\u6211\u4eec\u57282009\u5e7411\u670810\u65e5\u53d1\u5e03\u4e86\u8c37\u6b4c\u4ee3\u7801Mercurial\u56de\u8d2d\u534f\u8bae\uff0c\u4e3a\u4e86\u7eaa\u5ff5\u8fd9\u4e00\u65f6\u523b\uff0c\u6211\u4eec\u53c8\u6dfb\u52a0\u4e86\u4e00\u4e2a\u590d\u6d3b\u8282\u5f69\u86cb\u3002Brian Kernighan\u548cRob Pike\u57281984\u5e74\u51fa\u7248\u7684\u300aUnix\u7f16\u7a0b\u73af\u5883\u300b\u4e00\u4e66\u4e2d\u7684\u4e00\u4e2a\u811a\u6ce8\u5199\u9053\uff1aKen Thompson\u66fe\u88ab\u95ee\u53ca\u5982\u679c\u91cd\u65b0\u8bbe\u8ba1\u7cfb\u7edf\uff0c\u4ed6\u4f1a\u505a\u4ec0\u4e48\u4e0d\u540c\u7684\u4e8b\u60c5\u3002\u4ed6\u7684\u56de\u7b54\u662f\uff1a\u201c\u6211\u4f1a\u7528e\u62fc\u5199create\u3002\u201d\n\u8fd9\u662f\u6307creat\uff082\uff09\u7cfb\u7edf\u8c03\u7528\u548cO_creat file open\u6807\u5fd7\u3002\u53d1\u5e03\u540e\uff0cKen\u7acb\u5373\u7ed9\u6211\u53d1\u4e86\u4e00\u5c01\u4fee\u6539\u90ae\u4ef6\uff0c\u4fee\u590d\u4e86\u8fd9\u4e2a\u9519\u8bef\uff1acommit c90d392ce3d3203e0c32b3f98d1e68c4c2b4c49bAuthor:Ken Thompson&lt\uff1bken@golang.org&gt\uff1b\u4f5c\u8005\uff1a2009\u5e7411\u670810\u65e5\u661f\u671f\u4e8c15:05:15-0800\u793e\u533a\uff1a\u80af\u00b7\u6c64\u666e\u68ee&lt\uff1bken@golang.org&gt\uff1b\u63d0\u4ea4\u65e5\u671f\uff1a2009\u5e7411\u670810\u65e5\u661f\u671f\u4e8c15:05:15-0800\u7528&#34\u62fc\u5199\uff1be&#34\uff1bR=rschttp://go/go-review/1025037src/pkg/os/file\u3002go | 1+1\u6587\u4ef6\u66f4\u6539\uff0c1\u6b21\u63d2\u5165\uff08+\uff09\n\u53ef\u60b2\u7684\u662f\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u5b8c\u7f8e\u5730\u6267\u884c\u8fd9\u4e2a\u7b11\u8bdd\uff0c\u56e0\u4e3a\u4ee3\u7801\u5ba1\u67e5\u8fdb\u5165\u4e86\u6211\u4eec\u7684\u5185\u90e8Rietveld\u670d\u52a1\u5668\uff0c\u800c\u4e0d\u662f\u516c\u5171\u670d\u52a1\u5668\u3002\u56e0\u6b64\uff0c\u5c31\u5728\u4e0b\u4e00\u6b21\u4f1a\u8bae\u4e0a\uff0c\u6211\u4eec\u5728\u914d\u7f6e\u4e2d\u542f\u7528\u4e86\u4ee3\u7801\u5ba1\u67e5\u670d\u52a1\u5668\u3002\u4f46\u5bf9\u4e8e\u5b50\u5b59\u540e\u4ee3\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u7bc7\u4fdd\u7559\u5728\u6211\u7684\u7535\u5b50\u90ae\u4ef6\u4e2d\u7684\u8bc4\u8bba\uff1a\u4ece2009\u5e7411\u6708\u52302014\u5e74\u5e95\uff0c\u60c5\u51b5\u4e00\u76f4\u5982\u6b64\uff0c\u5f53\u65f6\u6211\u4eec\u77e5\u9053\u8c37\u6b4c\u4ee3\u7801\u9879\u76ee\u6258\u7ba1\u5373\u5c06\u5173\u95ed\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u65b0\u5bb6\u3002\u5728\u7814\u7a76\u4e86\u51e0\u4e2a\u9009\u9879\u4e4b\u540e\uff0c\u6211\u4eec\u6700\u7ec8\u4f7f\u7528\u4e86Gerrit Code Review\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u68d2\u7684\u9009\u62e9\u3002\u8bb8\u591a\u4eba\u8ba4\u4e3aGo\u6258\u7ba1\u5728GitHub\u4e0a\uff0c\u4f46GitHub\u53ea\u662f\u6211\u4eec\u7684\u95ee\u9898\u8ffd\u8e2a\u5668\u7684\u4e3b\u7248\u672c\uff1a\u6e90\u4ee3\u7801\u7684\u6b63\u5f0f\u4e3b\u526f\u672c\u6b63\u5728\u8fd0\u884c\u4e2d\u3002\u8c37\u6b4c\u8d44\u6e90\u3002\u901a\u7528\u57df\u540d\u683c\u5f0f\u3002\u5f53R=\u884c\u7ed3\u675f\u65f6\uff0c\u60a8\u53ef\u4ee5\u5728\u65e5\u5fd7\u4e2d\u770b\u5230\u4eceMercurial\u5230Git\u7684\u8f6c\u6362\uff0c\u968f\u540e\u662f\u4e00\u4e9b\u5b8c\u5168\u672a\u67e5\u770b\u7684\u63d0\u4ea4\uff0c\u7136\u540e\u7531\u4ee5\u4e0b\u4eba\u5458\u67e5\u770b\uff1a\u884c\u5f00\u59cb\uff1a\u63d0\u4ea494151eb2799809ece7e44ce3212aa3cbb9520849Author:Russ Cox&lt\uff1brsc@golang.org&gt\uff1b\u4f5c\u8005\uff1aFri Dec 5 21:33:07 2014-0500\u793e\u533a\uff1aRuss Cox&lt\uff1brsc@golang.org&gt\uff1b\u63d0\u4ea4\u65e5\u671f\uff1aFri Dec 5 21:33:07 2014-0500 encoding/xml:\u5220\u9664\u8bed\u6cd5\u9519\u8bef\u3002\u5b57\u8282\u5b83\u662f\u672a\u4f7f\u7528\u7684\u3002\u5b83\u662f\u5728CL\u4e2d\u5f15\u5165\u7684\uff0c\u589e\u52a0\u4e86InputOffset\u3002\u6211\u6000\u7591\u8fd9\u662f\u4e00\u4e2a\u7f16\u8f91\u9519\u8bef\u3002LGTM=bradfitz R=bradfitz CC=golang codereviewshttps://golang.org/cl/182580043src/encoding/xml/xml\u3002go | 1-1\u4e2a\u6587\u4ef6\u66f4\u6539\uff0c1\u4e2a\u5220\u9664\uff08-\uff09\u63d0\u4ea4258F53Dee33B9055EA168CB186F8C076EDEE5905\u4f5c\u8005\uff1aDavid Symonds&lt\uff1bdsymonds@golang.org&gt\uff1b\u4f5c\u8005\uff1aMon Dec 8 13:50:49 2014+1100Commit:David Symonds&lt\uff1bdsymonds@golang.org&gt\uff1b\u63d0\u4ea4\u65e5\u671f\uff1a\u5468\u4e00\u81f3\u5341\u4e8c\u67088\u65e513:50:49 2014+1100\u79fb\u9664\u3002hgtags\u3002hgtags | 140--------------------------------------------1\u4e2a\u6587\u4ef6\u66f4\u6539\uff0c140\u4e2a\u5220\u9664\uff08-\uff09\u63d0\u4ea4369873C6E5D00314AE30276363F58E5AF11B149CAUTOR:David Symonds&lt\uff1bdsymonds@golang.org&gt\uff1b\u4f5c\u8005\uff1aMon Dec 8 13:50:49 2014+1100Commit:David Symonds&lt\uff1bdsymonds@golang.org&gt\uff1b\u627f\u8bfa\u65e5\u671f\uff1a\u5468\u4e00\u81f3\u5341\u4e8c\u67088\u65e513:50:49 2014+1100\u8f6c\u6362\u3002\u5ffd\u7565\u3002\u5409\u7279\u5ffd\u7565\u3002hgignore=&gt\u3002gitignore | 9+-----1\u4e2a\u6587\u4ef6\u66f4\u6539\uff0c1\u4e2a\u63d2\u5165\uff08+\uff09\uff0c8\u4e2a\u5220\u9664\uff08-\uff09\u63d0\u4ea4F33FC0EB95BE84F0A688A62E25361A117E5B995\u4f5c\u8005\uff1aDavid Symonds&lt\uff1bdsymonds@golang.org&gt\uff1b\u4f5c\u8005\uff1aMon Dec 8 13:53:11 2014+1100Commit:David Symonds&lt\uff1bdsymonds@golang.org&gt\uff1b\u63d0\u4ea4\u65e5\u671f\uff1aMon Dec 8 13:53:11 2014+1100 cmd/dist\uff1a\u5c06dist\u4eceHg\u8f6c\u6362\u4e3aGit\u3002src/cmd/dist/build\u3002c | 100++++++++++++++++++++--------------1\u4e2a\u6587\u4ef6\u66f4\u6539\uff0c59\u4e2a\u63d2\u5165\uff08+\uff09\uff0c41\u4e2a\u5220\u9664\uff08-\uff09\u63d0\u4ea426399948E3402D3512 CB14FE5901AFAEF54482FAA\u4f5c\u8005\uff1aDavid Symonds&lt\uff1bdsymonds@golang.org&gt\uff1b\u4f5c\u8005\uff1aMon Dec 8 11:39:11 2014+1100Commit:David Symonds&lt\uff1bdsymonds@golang.org&gt\uff1b\u63d0\u4ea4\u65e5\u671f\uff1a\u5468\u4e00\u81f3\u5341\u4e8c\u67088\u65e504:42:22 2014+0000\u6dfb\u52a0bin/to\u3002\u5409\u7279\uff0c\u522b\u7406\u6211\u3002\u53d8\u66f4Id:I5c788d324e56ca88366fb54b67240cebf5dced2c\u5ba1\u6838\u65e5\u671f\uff1ahttps://go-review.googlesource.com/1171\u5ba1\u6838\u4eba\uff1a\u5b89\u5fb7\u9c81\u00b7\u683c\u5170\u5fb7&lt\uff1badg@golang.org&gt\u3002gitignore | 1+1\u6587\u4ef6\u5df2\u66f4\u6539\uff0c1\u6b21\u63d2\u5165\uff08+\uff09\n\u4f5c\u4e3a\u4eceMercurial\u5230Git\u8f6c\u6362\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u6ca1\u6709\u5728\u63d0\u4ea4\u4f53\u4e2d\u6dfb\u52a0\u663e\u793a\u65e7Mercurial\u54c8\u5e0c\u7684\u53ef\u89c1\u884c\uff0c\u4f46\u6211\u4eec\u5728\u5e95\u5c42Git\u63d0\u4ea4\u5bf9\u8c61\u4e2d\u8bb0\u5f55\u4e86\u5b83\u4eec\u3002\u4f8b\u5982\uff1a%git cat\u6587\u4ef6-p 7d7c6a97f815e9279d08cfaea7d5efb5e90695a8tree e06bd601885e16ad3d72c2a8c9b411889b2e478eauthor Brian Kernighan&lt\uff1bbwk&gt\uff1b80352345-0500\u793e\u533aBrian Kernighan&lt\uff1bbwk&gt\uff1b80352345-0500golang hg F6182E5ABF5EB0C762DDBB18F8854B7E350EAEBhello\uff0cworldR=kenDELTA=7\uff08\u589e\u52a07\u4e2a\uff0c\u5220\u96640\u4e2a\uff0c\u66f4\u65390\u4e2a\uff09%\ngolang hg\u884c\u8bb0\u5f55\u539f\u59cbMercurial\u63d0\u4ea4\u54c8\u5e0c\u3002\u8fd9\u5c31\u662f\u6545\u4e8b\u7684\u7ed3\u675f\uff0c\u76f4\u5230\u6211\u4eec\u5728\u672a\u6765\u7684\u67d0\u4e2a\u65f6\u5019\u8f6c\u5411\u7b2c\u4e94\u7248\u672c\u7684\u63a7\u5236\u7cfb\u7edf\u3002", "note_en": "A month earlier, I had created object file parsing packageslike  debug/macho,and as test data for each of those packages I  checked in an objectfile compiled from a trivial \u201chello, world\u201d program, along with thesource code for them: commit bf69025825fd2b8e7aac01f27d5c974bd30af542Author: Russ Cox &lt;rsc@golang.org&gt;AuthorDate: Fri Sep 18 11:49:22 2009 -0700Commit: Russ Cox &lt;rsc@golang.org&gt;CommitDate: Fri Sep 18 11:49:22 2009 -0700 Mach-O file reading R=r DELTA=784 (784 added, 0 deleted, 0 changed) OCL=34715 CL=34788 src/pkg/debug/macho/Makefile | 12 + src/pkg/debug/macho/file.go | 374 +++++++++++++++++++++ src/pkg/debug/macho/file_test.go | 159 +++++++++ src/pkg/debug/macho/macho.go | 230 +++++++++++++ src/pkg/debug/macho/testdata/gcc-386-darwin-exec | Bin 0 -&gt; 12588 bytes src/pkg/debug/macho/testdata/gcc-amd64-darwin-exec | Bin 0 -&gt; 8512 bytes .../macho/testdata/gcc-amd64-darwin-exec-debug | Bin 0 -&gt; 4540 bytes 7 files changed, 775 insertions(+)\n This was the original commit that introduced  src/pkg/debug/macho/testdata/hello.c, of course.As I added copyright notices to files, it seemed wrong toadd a copyright notice to that  hello.c file.Instead, since I had the repo split into this patch-file-per-commit form,it was easy to create a few fake commits that showed at least part ofthe real history of that program, as an Easter egg for people who looked that closely: commit 7d7c6a97f815e9279d08cfaea7d5efb5e90695a8Author: Brian Kernighan &lt;bwk&gt;AuthorDate: Tue Jul 18 19:05:45 1972 -0500Commit: Brian Kernighan &lt;bwk&gt;CommitDate: Tue Jul 18 19:05:45 1972 -0500 hello, world R=ken DELTA=7 (7 added, 0 deleted, 0 changed) src/pkg/debug/macho/testdata/hello.b | 7 +++++++ 1 file changed, 7 insertions(+)commit 0bb0b61d6a85b2a1a33dcbc418089656f2754d32Author: Brian Kernighan &lt;bwk&gt;AuthorDate: Sun Jan 20 01:02:03 1974 -0400Commit: Brian Kernighan &lt;bwk&gt;CommitDate: Sun Jan 20 01:02:03 1974 -0400 convert to C R=dmr DELTA=6 (0 added, 3 deleted, 3 changed) src/pkg/debug/macho/testdata/hello.b | 7 ------- src/pkg/debug/macho/testdata/hello.c | 3 +++ 2 files changed, 3 insertions(+), 7 deletions(-)commit 0744ac969119db8a0ad3253951d375eb77cfce9eAuthor: Brian Kernighan &lt;research!bwk&gt;AuthorDate: Fri Apr 1 02:02:04 1988 -0500Commit: Brian Kernighan &lt;research!bwk&gt;CommitDate: Fri Apr 1 02:02:04 1988 -0500 convert to Draft-Proposed ANSI C R=dmr DELTA=5 (2 added, 0 deleted, 3 changed) src/pkg/debug/macho/testdata/hello.c | 7 +++++-- 1 file changed, 5 insertions(+), 2 deletions(-)commit d82b11e4a46307f1f1415024f33263e819c222b8Author: Brian Kernighan &lt;bwk@research.att.com&gt;AuthorDate: Fri Apr 1 02:03:04 1988 -0500Commit: Brian Kernighan &lt;bwk@research.att.com&gt;CommitDate: Fri Apr 1 02:03:04 1988 -0500 last-minute fix: convert to ANSI C R=dmr DELTA=3 (2 added, 0 deleted, 1 changed) src/pkg/debug/macho/testdata/hello.c | 4 +++- 1 file changed, 3 insertions(+), 1 deletion(-)\n The  July 1972 commit shows the very first \u201chello, world\u201d program,copied from Brian Kernighan\u2019s\u201c A Tutorial Introduction to the Language B\u201d: main( ) { extrn a, b, c; putchar(a); putchar(b); putchar(c); putchar(\u2019!*n\u2019);}a \u2019hell\u2019;b \u2019o, w\u2019;c \u2019orld\u2019;\n Various online sources refer to this as a \u201cbook\u201d, but it definitely was not.It was a printed, 17-page document that was later included as half of January 1973\u2019s\u201c Bell Laboratories Computing Science Technical Report #8: The Programming Language B\u201d(still not even close to a book!).The \u201chello, world\u201d program appears in section 7,preceded by the less catchy \u201chi!\u201d program in section 6.As I write this blog post in 2022, I cannot find any onlinereference for the B tutorial being originally dated July 1972,but I believe I must have had a good reason. The  January 1974 commitconverts the program to C, as found in Kernighan\u2019s \u201c Programming in C \u2014 A Tutorial\u201d.The linked PDF is a retyped copy from Dennis Ritchie, without a date,but Ritchie\u2019s \u201c C Reference Manual\u201d technical memodated January 15, 1974 cites Kernighan\u2019s tutorial as \u201cUnpublished internal memorandum, Bell Laboratories, 1974\u201d,implying that the tutorial must have been written in January as well. That C program was shorter thanwhat we are used to today, but much nicer than the B program:  I skipped over the presentation in the first edition of  The C Programming Language, which looks like:  The  April 1988 commitshows the program from the \u201cDraft-Proposed ANSI C\u201d version of the second edition of  The C Programming Language:  The  second April 1988 commitshows the final full ANSI C version we know today:  Wikipedia says the second edition was published in April 1988.I didn\u2019t have a day, but April 1 seemed appropriate.I didn\u2019t have a time for either one of these, so I used 02:03:04 forthe second commit and therefore 02:02:04 for the first. The email addresses in the commits are also period-appropriate,although Mondrian\u2019s  R= and  DELTA= tags clearly are not:there was no code review happening back then! For what it\u2019s worth, I\u2019ve since heard from many people abouthow the 1972 dates have broken various presentations andanalyses they\u2019ve done on the Go repository as compared toother projects. Oops! My apologies.(I also heard from someone who was analyzing Mercurialrepos for \u201cbranchiness\u201d and decided to use the Gorepo as a large test case.Their program said it had branchiness 0 and theyspent a while debugging their program beforerealizing that the repo really was completely linear,thanks to our \u201crebase and merge\u201d policy.)   We published the Google Code Mercurial repo on November 10, 2009,and to mark the occasion we added one more Easter egg.A footnote in Brian Kernighan and Rob Pike\u2019s 1984 book  The Unix Programming Environmentsays: Ken Thompson was once asked what he would do differentlyif he were redesigning the   system.His reply: \u201cI\u2019d spell  creat with an  e.\u201d\n This refers to the  creat(2) system calland the  O_CREAT file open flag. Immediately once the release was public, Ken mailed me a change fixing this mistake: commit c90d392ce3d3203e0c32b3f98d1e68c4c2b4c49bAuthor: Ken Thompson &lt;ken@golang.org&gt;AuthorDate: Tue Nov 10 15:05:15 2009 -0800Commit: Ken Thompson &lt;ken@golang.org&gt;CommitDate: Tue Nov 10 15:05:15 2009 -0800 spell it with an &#34;e&#34; R=rsc http://go/go-review/1025037 src/pkg/os/file.go | 1 + 1 file changed, 1 insertion(+)\n Sadly, we didn\u2019t execute the joke perfectly, in that the code review went toour internal Rietveld server instead of the public one.So the  very next commitupdated the code review server in our configuration. But here, for posterity, is the review, preserved in my email: So things stood from November 2009 until late 2014,when we knew that Google Code Project Hosting wasgoing to shut down and we needed a new home.After investigating a few options, we ended up using Gerrit Code Review, which has been a fantastic choice.Many people think of Go as being hosted on GitHub,but GitHub is only primary for our issue tracker:the official primary copy of the sources is on  go.googlesource.com. You can see the transition from Mercurial to Gitin the logs when the  R= lines end, followed bya few completely unreviewed commits, and then Reviewed-by: lines begin: commit 94151eb2799809ece7e44ce3212aa3cbb9520849Author: Russ Cox &lt;rsc@golang.org&gt;AuthorDate: Fri Dec 5 21:33:07 2014 -0500Commit: Russ Cox &lt;rsc@golang.org&gt;CommitDate: Fri Dec 5 21:33:07 2014 -0500 encoding/xml: remove SyntaxError.Byte It is unused. It was introduced in the CL that added InputOffset. I suspect it was an editing mistake. LGTM=bradfitz R=bradfitz CC=golang-codereviews https://golang.org/cl/182580043 src/encoding/xml/xml.go | 1 - 1 file changed, 1 deletion(-)commit 258f53dee33b9055ea168cb186f8c076edee5905Author: David Symonds &lt;dsymonds@golang.org&gt;AuthorDate: Mon Dec 8 13:50:49 2014 +1100Commit: David Symonds &lt;dsymonds@golang.org&gt;CommitDate: Mon Dec 8 13:50:49 2014 +1100 remove .hgtags. .hgtags | 140 ---------------------------------------------------------------- 1 file changed, 140 deletions(-)commit 369873c6e5d00314ae30276363f58e5af11b149cAuthor: David Symonds &lt;dsymonds@golang.org&gt;AuthorDate: Mon Dec 8 13:50:49 2014 +1100Commit: David Symonds &lt;dsymonds@golang.org&gt;CommitDate: Mon Dec 8 13:50:49 2014 +1100 convert .hgignore to .gitignore. .hgignore =&gt; .gitignore | 9 +-------- 1 file changed, 1 insertion(+), 8 deletions(-)commit f33fc0eb95be84f0a688a62e25361a117e5b995bAuthor: David Symonds &lt;dsymonds@golang.org&gt;AuthorDate: Mon Dec 8 13:53:11 2014 +1100Commit: David Symonds &lt;dsymonds@golang.org&gt;CommitDate: Mon Dec 8 13:53:11 2014 +1100 cmd/dist: convert dist from Hg to Git. src/cmd/dist/build.c | 100 ++++++++++++++++++++++++++++++--------------------- 1 file changed, 59 insertions(+), 41 deletions(-)commit 26399948e3402d3512cb14fe5901afaef54482faAuthor: David Symonds &lt;dsymonds@golang.org&gt;AuthorDate: Mon Dec 8 11:39:11 2014 +1100Commit: David Symonds &lt;dsymonds@golang.org&gt;CommitDate: Mon Dec 8 04:42:22 2014 +0000 add bin/ to .gitignore. Change-Id: I5c788d324e56ca88366fb54b67240cebf5dced2c Reviewed-on: https://go-review.googlesource.com/1171 Reviewed-by: Andrew Gerrand &lt;adg@golang.org&gt; .gitignore | 1 + 1 file changed, 1 insertion(+)\n As part of the conversion from Mercurial to Git, we didnot add visible lines to the commit bodies showing theold Mercurial hashes, but we did record them in theunderlying Git commit objects. For example: % git cat-file -p 7d7c6a97f815e9279d08cfaea7d5efb5e90695a8tree e06bd601885e16ad3d72c2a8c9b411889b2e478eauthor Brian Kernighan &lt;bwk&gt; 80352345 -0500committer Brian Kernighan &lt;bwk&gt; 80352345 -0500golang-hg f6182e5abf5eb0c762dddbb18f8854b7e350eaebhello, worldR=kenDELTA=7 (7 added, 0 deleted, 0 changed)%\n The  golang-hg line records the original Mercurial commit hash. And that\u2019s the end of the story, until we move to a fifthversion control system at some point in the future.", "posttime": "2022-02-15 20:48:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7248\u672c\u63a7\u5236,control,\u63d0\u4ea4", "title": "Go\u7684\u7248\u672c\u63a7\u5236\u5386\u53f2\u8bb0\u5f55", "title_en": "Go\u2019s Version Control History", "transed": 1, "url": "https://research.swtch.com/govcs", "via": "", "real_tags": ["\u7248\u672c\u63a7\u5236", "control", "\u63d0\u4ea4"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073518, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6d77\u6c34\u6de1\u5316\u6b63\u5728\u88ab\u63a2\u7d22\u4f5c\u4e3a\u4e00\u79cd\u89e3\u51b3\u56f0\u6270\u4e16\u754c\u5927\u90e8\u5206\u5730\u533a\u7684\u996e\u7528\u6c34\u77ed\u7f3a\u7684\u65b9\u6cd5\uff0c\u4f46\u5b83\u8fd8\u6709\u4e00\u4e9b\u95ee\u9898\u9700\u8981\u89e3\u51b3\u3002\u4e00\u79cd\u592a\u9633\u80fd\u6d77\u6c34\u6de1\u5316\u88c5\u7f6e\u7684\u65b0\u8bbe\u8ba1\u53ef\u9632\u6b62\u76d0\u7684\u79ef\u805a\uff0c\u4ece\u800c\u5f62\u6210\u4e00\u4e2a\u9ad8\u6548\u4e14\u4ef7\u683c\u5408\u7406\u7684\u7cfb\u7edf\u3002\u53ea\u8981\u56db\u7f8e\u5143&#39\uff1b\u5bf9\u4e8e\u4e00\u4e2a\u80fd\u591f\u63d0\u4f9b\u4e00\u4e2a\u5bb6\u5ead\u7684\u8bbe\u5907\u6765\u8bf4\uff0c\u6750\u6599\u7684\u4ef7\u503c\u5e94\u8be5\u8db3\u591f\u4e86\uff1b\u8fd9\u662f\u65e5\u5e38\u996e\u7528\u6c34\u3002\n\u6c61\u57a2\u662f\u6d77\u6c34\u6de1\u5316\u7cfb\u7edf\u7684\u4e3b\u8981\u95ee\u9898\u4e4b\u4e00\u3002\u5f53\u76d0\u548c\u5176\u4ed6\u6742\u8d28\u4ece\u6c34\u4e2d\u8fc7\u6ee4\u51fa\u6765\u65f6\uff0c\u8fd9\u4e9b\u7269\u8d28\u5f80\u5f80\u4f1a\u5806\u79ef\u5728\u819c\u6216\u8bbe\u5907\u7684\u5176\u4ed6\u8868\u9762\u4e0a\uff0c\u9700\u8981\u5b9a\u671f\u6e05\u6d01\u96f6\u4ef6\uff0c\u6216\u8005\u66f4\u7cdf\u7684\u662f\uff0c\u66f4\u6362\u96f6\u4ef6\u3002\u82af\u5438\u6750\u6599\u662f\u6700\u5e38\u89c1\u7684\u6c61\u67d3\u90e8\u4ef6\u4e4b\u4e00\uff0c\u56e0\u6b64\uff0c\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u548c\u4e0a\u6d77\u4ea4\u901a\u5927\u5b66\u7684\u79d1\u5b66\u5bb6\u4eec\u5f00\u59cb\u4e3a\u65b0\u9879\u76ee\u8bbe\u8ba1\u4e00\u79cd\u65e0\u82af\u592a\u9633\u80fd\u8131\u76d0\u88c5\u7f6e\u3002\n\u8be5\u7cfb\u7edf\u65e8\u5728\u6f02\u6d6e\u5728\u6d77\u6c34\u8868\u9762\uff0c\u7531\u51e0\u5c42\u7ec4\u6210\u3002\u4e00\u79cd\u5e26\u67092.5\u6beb\u7c73\u7a7f\u5b54\u7684\u6750\u6599\u5c06\u6c34\u4ece\u4e0b\u9762\u7684\u84c4\u6c34\u6c60\u4e2d\u5438\u4e0a\u6765\uff0c\u5728\u9876\u90e8\u5f62\u6210\u4e00\u5c42\u8584\u8584\u7684\u6c34\u3002\u5728\u5438\u6536\u9633\u5149\u70ed\u91cf\u7684\u6df1\u8272\u6750\u6599\u7684\u5e2e\u52a9\u4e0b\uff0c\u8fd9\u5c42\u8584\u8584\u7684\u6c34\u88ab\u52a0\u70ed\u76f4\u5230\u84b8\u53d1\uff0c\u56e0\u6b64\u53ef\u4ee5\u51b7\u51dd\u5230\u4e00\u4e2a\u503e\u659c\u7684\u8868\u9762\u4e0a\uff0c\u4f5c\u4e3a\u7eaf\u51c0\u6c34\u6536\u96c6\u3002\n\u76d0\u7559\u5728\u5269\u4e0b\u7684\u6c34\u91cc\uff0c\u4f46\u8fd9\u5c31\u662f\u56e2\u961f\u7684\u65b0\u60f3\u6cd5\u5f00\u59cb\u7684\u5730\u65b9\u3002\u591a\u5b54\u6750\u6599\u4e2d\u7684\u5b54\u5927\u5c0f\u521a\u597d\u9002\u5408\u81ea\u7136\u5bf9\u6d41\u5faa\u73af\u7684\u53d1\u751f\u3002\u7269\u8d28\u4e0a\u65b9\u8f83\u6e29\u6696\u7684\u6c34\u2014\u2014\u73b0\u5728\u542b\u76d0\u6d53\u5ea6\u66f4\u9ad8\u2014\u2014\u88ab\u62c9\u56de\u5230\u4e0b\u65b9\u8f83\u51b7\u7684\u6c34\u4f53\u4e2d\u3002\u4e00\u5c42\u65b0\u7684\u6c34\u88ab\u5438\u5f15\u5230\u6750\u6599\u7684\u9876\u90e8\uff0c\u5faa\u73af\u518d\u6b21\u5f00\u59cb\u3002\n\u5728\u6d4b\u8bd5\u8bbe\u5907\u4e2d\uff0c\u8be5\u56e2\u961f\u8868\u793a\uff0c\u8fd9\u79cd\u6280\u672f\u5728\u5c06\u592a\u9633\u80fd\u8f6c\u5316\u4e3a\u6c34\u84b8\u6c14\u65b9\u9762\u53ef\u4ee5\u8fbe\u523080%\u4ee5\u4e0a\u7684\u6548\u7387\uff0c\u5373\u4f7f\u8d77\u59cb\u6c34\u7684\u76d0\u6d53\u5ea6\u6309\u91cd\u91cf\u8ba1\u9ad8\u8fbe20%\u3002\u5728\u8fd0\u884c\u4e00\u5468\u540e\uff0c\u8bbe\u5907\u4e2d\u672a\u68c0\u6d4b\u5230\u76d0\u6676\u4f53\u3002\n\u91cd\u8981\u7684\u662f\uff0c\u8be5\u7cfb\u7edf\u662f\u7531\u65e5\u5e38\u6750\u6599\u5236\u6210\u7684\uff0c\u56e0\u6b64\u5b83\u5e94\u8be5\u662f\u53ef\u6269\u5c55\u7684\uff0c\u800c\u4e14\u4ef7\u683c\u4f4e\u5ec9\u3002\u8be5\u56e2\u961f\u8ba1\u7b97\u51fa\uff0c\u4e00\u4e2a\u6536\u96c6\u9762\u79ef\u4ec5\u4e3a1\u5e73\u65b9\u7c73\uff0810.8\u5e73\u65b9\u82f1\u5c3a\uff09\u7684\u7cfb\u7edf\u53ef\u4ee5\u4e3a\u4e00\u4e2a\u5bb6\u5ead\u7684\u65e5\u5e38\u9700\u6c42\u63d0\u4f9b\u8db3\u591f\u7684\u996e\u7528\u6c34\uff0c\u5efa\u9020\u8be5\u7cfb\u7edf\u7684\u6750\u6599\u53ea\u9700\u7ea64\u7f8e\u5143\u3002\n\u7ecf\u8fc7\u8fdb\u4e00\u6b65\u6539\u8fdb\uff0c\u8be5\u56e2\u961f\u8868\u793a\uff0c\u8fd9\u79cd\u8131\u76d0\u8bbe\u8ba1\u6709\u52a9\u4e8e\u5c06\u996e\u7528\u6c34\u5e26\u5230\u504f\u8fdc\u6216\u53d1\u5c55\u4e2d\u5730\u533a\uff0c\u5e76\u5728\u5e38\u89c4\u4f9b\u6c34\u4e2d\u65ad\u540e\u7528\u4f5c\u4e34\u65f6\u8bbe\u65bd\uff0c\u4ee5\u63d0\u4f9b\u6551\u707e\u3002", "note_en": "Desalination is being explored as a way to solve the  shortages of drinking water that plague much of the world, but it has a few issues to iron out. A new design for a solar-powered desalination device prevents the build-up of salt, making for an efficient and affordable system. Just four dollars&#39; worth of materials should be enough for a device that can provide a family&#39;s daily drinking water.\n Fouling is one of the main problems in desalination systems. As salt and other impurities are being filtered out of water, that material tends to build up on membranes or other surfaces in the device, requiring parts to be regularly cleaned, or worse, replaced. Wicking materials are among the most commonly fouled parts, so for the new project, scientists from MIT and Shanghai Jiao Tong University set out to design a wick-free solar desalination device.\n Intended to float on the surface of a body of saltwater, the system is comprised of several layers. A material with 2.5-mm perforations draws water up from the reservoir below, forming a thin layer of water on top. With the help of a dark material that absorbs heat from sunlight, this thin layer of water is heated until it evaporates, so it can then be condensed onto a sloped surface for collection as pure water.\n The salt stays behind in the remaining water, but this is where the team\u2019s new idea kicks in. The holes in the perforated material are just the right size to allow for a natural convective circulation to occur. The warmer water above the material \u2013 which is now far more dense with salt \u2013 is drawn back down into the colder body of water below. A new layer of water is drawn up to the top of the material and the cycle begins again.\n  In test devices, the team says that this technique can achieve over 80 percent efficiency in converting solar energy to water vapor, even when the starting water had salt concentrations up to 20 percent by weight. No salt crystals were detected in the device after a week of operation.\n Importantly, the system is made of everyday materials, so it should be scalable and inexpensive. The team calculates that a system with a collecting area of just 1 m2 (10.8 ft2) could provide enough drinking water for a family\u2019s daily needs, and the materials to build it would only cost about US$4.\n With more refinement, the team says that this desalination design could help bring drinking water to remote or developing areas, and be used as temporary setups to provide disaster relief after regular supplies are interrupted.", "posttime": "2022-02-15 20:46:57", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6d77\u6c34,desalination,\u6750\u6599", "title": "4\u7f8e\u5143\u7684\u592a\u9633\u80fd\u6d77\u6c34\u6de1\u5316\u7cfb\u7edf\u751f\u4ea7\u5bb6\u5ead\u65e5\u5e38\u996e\u7528\u6c34", "title_en": "$4 solar desalination system produces a family's daily drinking water", "transed": 1, "url": "https://newatlas.com/materials/desalination-family-drinking-water/", "via": "", "real_tags": ["\u6d77\u6c34", "\u6750\u6599"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073517, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7b2c\u4e00\u6b21Android 13\u5f00\u53d1\u8005\u9884\u89c8\u7248\u53ef\u80fd\u611f\u89c9\u6709\u70b9\u4ee4\u4eba\u5931\u671b\uff0c\u4f46\u5728\u8c37\u6b4cPixel 6\u667a\u80fd\u624b\u673a\u7b49\u786c\u4ef6\u4e0a\u6709\u4e00\u5757\u9690\u85cf\u7684\u5b9d\u77f3\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5b8c\u5168\u865a\u62df\u5316\u3002\n\u8fd9\u610f\u5473\u7740\uff0c\u73b0\u5728\u51e0\u4e4e\u53ef\u4ee5\u5728\u8c37\u6b4cTensor\u624b\u673a\u4e0a\u8fd0\u884c\u4efb\u4f55\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5305\u62ecWindows 11\u3001Linux\u53d1\u884c\u7248\uff0c\u5982Ubuntu\u6216Arch Linux Arm\uff0c\u5e76\u4ee5\u63a5\u8fd1\u672c\u673a\u7684\u901f\u5ea6\u8fd0\u884c\u3002\n\u5b89\u5353&amp\uff1bweb\u5f00\u53d1\u4eba\u5458\u201ckdrag0n\u201d\u4f7f\u7528\u201cPixel 6+Android 13 DP1\u4e0a\u7684KVM\u865a\u62df\u673a\u76d1\u63a7\u7a0b\u5e8f\u201d\u5728Pixel 6\u4e0a\u4f7f\u7528Ubuntu21.10\u3001Arch Linux Arm\u3001Void Linux\u548cAlpine Linux\u6d4b\u8bd5\u4e86\u4e3aAarch64\u7f16\u8bd1\u7684\u51e0\u4e2aLinux\u53d1\u884c\u7248\u3002\u4ed6/\u5979\u8fdb\u4e00\u6b65\u89e3\u91ca\u8bf4\uff1a\n\u636e\u6211\u6240\u77e5\uff0c\u6211\u4eec\u73b0\u5728\u51e0\u4e4e\u53ef\u4ee5\u5728\u751f\u4ea7\u8bbe\u5907\u4e0a\u83b7\u5f97\u5b8c\u6574\u7684EL2\u3002\u53d7\u4fdd\u62a4\u7684KVM\u662f\u53ef\u9009\u7684\uff0c\u53ef\u4ee5\u5728\u6bcf\u4e2a\u865a\u62df\u673a\u7684\u57fa\u7840\u4e0a\u542f\u7528\uff0c\u4f46\u5bf9\u4e8e\u4e0d\u53d7\u4fdd\u62a4\u7684\u865a\u62df\u673a\uff0c\u4f3c\u4e4e\u53ef\u4ee5\u4f7f\u7528\u5b8c\u6574\u7684KVM\u529f\u80fd\u3002\nEL2\u6307\u7684\u662fArm\u5f00\u53d1\u8005\u7f51\u7ad9\u4e0a\u89e3\u91ca\u7684Arm\u5f02\u5e38\u7ea7\u522b\u3002kdrag0n\u5e76\u6ca1\u6709\u5c31\u6b64\u6b62\u6b65\uff0c\u800c\u662f\u901a\u8fc7\u540c\u6837\u7684Android 13\u865a\u62df\u5316\uff0c\u8ba9Windows 11\u5728Pixel 6\u4e0a\u8fd0\u884c\u3002\nWindows phone\u53c8\u56de\u6765\u4e86\uff01\u66f4\u4e25\u91cd\u7684\u662f\uff0c\u6211\u4eec\u5fc5\u987b\u770b\u770b\u662f\u5426\u4e00\u5207\u90fd\u6309\u9884\u671f\u8fdb\u884c\uff0c\u4f46\u8fd9\u770b\u8d77\u6765\u786e\u5b9e\u5f88\u6709\u5e0c\u671b\u3002\n\u4f46\u8c37\u6b4c\u4e3a\u4ec0\u4e48\u8981\u5728\u5b89\u5353\u7cfb\u7edf\u4e2d\u542f\u7528\u865a\u62df\u5316\uff1f\u4ed6\u4eec\u4e0d\u592a\u53ef\u80fd\u53ea\u60f3\u8ba9\u7528\u6237\u5728\u624b\u673a\u4e0a\u5b89\u88c5Linux\u6216Windows\u3002\u7c73\u6c99\u5c14\u00b7\u62c9\u8d6b\u66fc\u5927\u7ea6\u5728\u4e24\u4e2a\u6708\u524d\u63d0\u51fa\u4e86\u8fd9\u4e2a\u95ee\u9898\uff1a\n\u2026\u8fd9\u662f\u56e0\u4e3a\u865a\u62df\u673a\u76d1\u63a7\u7a0b\u5e8f\u53ef\u80fd\u5b58\u5728\u4e8e\u8bbe\u5907\u4e0a\uff0c\u4e5f\u53ef\u80fd\u4e0d\u5b58\u5728\u4e8e\u8bbe\u5907\u4e0a\uff0c\u800c\u5f53\u865a\u62df\u673a\u76d1\u63a7\u7a0b\u5e8f\u5b58\u5728\u65f6\uff0c\u5b83\u4eec\u901a\u5e38\u751a\u81f3\u4e0d\u7528\u4e8e\u5176\u9884\u671f\u76ee\u7684\uff0c\u5373\u5728\u865a\u62df\u673a\u4e2d\u8fd0\u884c\u64cd\u4f5c\u7cfb\u7edf\uff01\u76f8\u53cd\uff0c\u5b83\u4eec\u88ab\u7528\u4e8e\u589e\u5f3a\u5185\u6838\u7684\u5b89\u5168\u6027\uff08\u6216\u8005\u81f3\u5c11\u5c1d\u8bd5\uff09\u4ee5\u53ca\u5728Android\u64cd\u4f5c\u7cfb\u7edf\u4e4b\u5916\u8fd0\u884c\u5176\u4ed6\u4ee3\u7801\uff08\u4f8b\u5982\u7528\u4e8eDRM\u3001\u52a0\u5bc6\u548c\u5176\u4ed6\u5c01\u95ed\u6e90\u4ee3\u7801\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u7b2c\u4e09\u65b9\u4ee3\u7801\uff09\u3002\n\u8fd9\u4e3b\u8981\u662f\u4e3a\u4e86\u5b89\u5168\u548c\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u6bd4\u5982DRM\u3002Mishaal\u7684\u6587\u7ae0\u8fd8\u63d0\u5230\u4e86\u865a\u62df\u5316\u6a21\u5757\u7684\u6e90\u4ee3\u7801\u548c\u4e00\u4e2a\u6307\u5357\uff0c\u89e3\u91ca\u4e86\u5982\u4f55\u5f00\u59cb\u4f7f\u7528\u53d7\u4fdd\u62a4\u7684\u865a\u62df\u673a\u3002\nJean Luc\u57282010\u5e74\u5f00\u59cb\u4ece\u4e8bCNX\u8f6f\u4ef6\u7684\u517c\u804c\u5de5\u4f5c\uff0c\u540e\u6765\u8f9e\u53bb\u4e86\u8f6f\u4ef6\u5de5\u7a0b\u7ecf\u7406\u7684\u5de5\u4f5c\uff0c\u5e76\u57282011\u5e74\u665a\u4e9b\u65f6\u5019\u5f00\u59cb\u64b0\u5199\u6bcf\u65e5\u65b0\u95fb\u548c\u5168\u804c\u8bc4\u8bba\u3002\n\u652f\u6301CNX\u8f6f\u4ef6\uff01\u901a\u8fc7PayPal\u6216\u52a0\u5bc6\u8d27\u5e01\u6350\u6b3e\uff0c\u6210\u4e3aPatreon\u7684\u8d5e\u52a9\u4eba\uff0c\u6216\u8d2d\u4e70\u8bc4\u8bba\u6837\u672c", "note_en": "The first  Android 13 developer preview may have felt a bit underwhelming, but there\u2019s a hidden gem with full virtualization possible on hardware such as the Google Pixel 6 smartphone.\n What that means is that it is now possible to run virtually any operating system including Windows 11, Linux distributions such as Ubuntu or Arch Linux Arm on the Google Tensor-powered phone, and do so at near-native speed.\n  Android &amp; web developer \u201c kdrag0n\u201d tested several Linux distributions compiled for Aarch64 on the Pixel 6 with Ubuntu 21.10, Arch Linux Arm, Void Linux, and Alpine Linux using \u201cthe KVM hypervisor on Pixel 6 + Android 13 DP1\u201d. He/she further explains:\n As far as I can tell, we can pretty much get full EL2 on production devices now. Protected KVM is optional and can be enabled on a per-VM basis, but for non-protected VMs, it looks like full KVM functionality is available.\n EL2 refers to Arm Exception levels as explained  on Arm developer website. kdrag0n did not stop here and managed to get Windows 11 running on the Pixel 6 as well through the same Android 13 virtualization.\n  The Windows phone is back! More seriously, we\u2019ll have to see if everything is working as expected, but this does look promising.\n But why did Google enable virtualization in Android? It\u2019s unlikely they just wanted to let users install Linux or Windows on the phone.  Mishaal Rahman addressed this issue about two months ago:\n \u2026 This is because hypervisors may or may not be present on a device, and when they are, they\u2019re often not even used for their intended purpose, which is to run an operating system in a virtual machine! Instead, they\u2019re used  for things like enhancing the security of the kernel (or at least trying to) and  running miscellaneous code (such as third-party code for DRM, cryptography, and other closed-source binaries) outside of the Android OS.\n So that\u2019s mostly for security and binaries like DRM. Mishaal\u2019s article also points to the  Virtualization module source code and a  guide explaining how to get started with Protected Virtual Machines.\n   Jean-Luc started CNX Software in 2010 as a part-time endeavor, before quitting his job as a software engineering manager, and starting to write daily news, and reviews full time later in 2011.\n   Support CNX Software! Donate via    PayPal or    cryptocurrencies,    become a Patron on Patreon, or    buy review samples", "posttime": "2022-02-15 20:44:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u865a\u62df\u5316,linux,windows,android,\u5141\u8bb8", "title": "Android 13\u865a\u62df\u5316\u5141\u8bb8Pixel 6\u8fd0\u884cWindows 11\u548cLinux\u53d1\u884c\u7248", "title_en": "Android 13 virtualization lets Pixel 6 run Windows 11, Linux distributions", "transed": 1, "url": "https://www.cnx-software.com/2022/02/14/android-13-virtualization-lets-pixel-6-run-windows-11-linux-distributions/", "via": "", "real_tags": ["\u865a\u62df\u5316", "linux", "windows", "android", "\u5141\u8bb8"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073516, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2019\u5e748\u6708\uff0cMikroTik\u53d1\u5e03\u4e866.45.1\u7248RouterOS\u8f6f\u4ef6\u66f4\u65b0\uff0c\u5220\u9664\u4e86\u5347\u7ea7\u5230\u65b0\u56fa\u4ef6\u7684\u6240\u6709\u8def\u7531\u5668\u4e0a\u7684\u660e\u6587\u5bc6\u7801\u5b58\u50a8\u3002\u5728\u589e\u5f3a\u8def\u7531\u5668\u5b89\u5168\u6027\u7684\u540c\u65f6\uff0c\u8fd9\u5bf9\u4f7f\u7528MikroTik\u4e13\u6709\u534f\u8bae\uff08\u5982MAC Telnet\u548cWinbox\uff09\u7684\u5b9a\u5236\u5de5\u5177\u7684\u7814\u7a76\u4eba\u5458\u3001\u7f51\u7edc\u7ba1\u7406\u5458\u548c\u4fee\u8865\u8005\u6765\u8bf4\u662f\u4e00\u4e2a\u6253\u51fb\u3002\u5c3d\u7ba1\u7528\u6237\u8bf7\u6c42\u534f\u52a9\uff0cMikroTik\u4ecd\u672a\u80fd\u8be6\u7ec6\u8bf4\u660e\u65b0\u7684\u8ba4\u8bc1\u7a0b\u5e8f\u3002Margin Research\u5f88\u9ad8\u5174\u80fd\u591f\u9610\u660e\u8eab\u4efd\u9a8c\u8bc1\u8fc7\u7a0b\uff0c\u5e76\u4e3aWinbox\u548cMAC Telnet\u8eab\u4efd\u9a8c\u8bc1\u63d0\u4f9bPython\u6982\u5ff5\u9a8c\u8bc1\uff08POC\uff09\u5b9e\u73b0\u3002\n\u7c73\u514b\u7f57\u8482\u514b&#39\uff1bs\u7684\u65b0\u8eab\u4efd\u9a8c\u8bc1\u8fc7\u7a0b\u4f7f\u7528\u4e86\u5b89\u5168\u8fdc\u7a0b\u5bc6\u7801\uff08SRP\uff09\u7684\u53d8\u4f53\u3002SRP\u662f\u4e00\u79cd\u5bc6\u7801\u8ba4\u8bc1\u5bc6\u94a5\u4ea4\u6362\u534f\u8bae\uff0c\u5b83\u5c06\u5bc6\u7801\u5408\u5e76\u5230\u5bc6\u94a5\u4ea4\u6362\u8ba1\u7b97\u4e2d\u3002\u8ba1\u7b97\u5171\u4eab\u673a\u5bc6\u9700\u8981\u77e5\u9053\u6b63\u786e\u7684\u5bc6\u7801\uff0c\u56e0\u6b64\u76f8\u540c\u7684\u673a\u5bc6\u8868\u793a\u8eab\u4efd\u9a8c\u8bc1\u6210\u529f\u3002SRP\u89c4\u8303\u53ef\u4ee5\u8ffd\u6eaf\u523020\u591a\u5e74\u524d\uff0c\u5728\u6700\u8fd1\u7684\u8fc7\u53bb\uff0c\u4e3b\u6d41\u4f7f\u7528\u83b7\u5f97\u4e86\u7275\u5f15\u529b\uff0c\u5176\u5728OpenSSL\u4e2d\u7684\u4f7f\u7528\u7a81\u51fa\u4e86\u8fd9\u4e00\u70b9\u3002\u7136\u800c\uff0cMikroTik\u6ca1\u6709\u5b9e\u73b0\u8fd9\u4e2aSRP\u534f\u8bae\u3002\u76f8\u53cd\uff0cRouterOS\u4f7f\u7528\u692d\u5706\u66f2\u7ebfSRP\uff08EC-SRP\uff09\uff0c\u7279\u522b\u662fEC-SRP5\u3002\u8be5\u534f\u8bae\u7684\u6d41\u884c\u7a0b\u5ea6\u8981\u4f4e\u5f97\u591a\uff0c\u5176\u5b9a\u4e49\u987a\u5e8f\u5982\u4e0b\uff1a\n\u8def\u7531\u5668\u751f\u6210\u4e00\u4e2a16\u5b57\u8282\u7684\u7528\u6237salt\uff0c\u5e76\u6839\u636e\u7b49\u5f0fv=ECDH\uff08SHA2\uff08salt | SHA2\uff08username |\u201c\uff1a\u201c| password\uff09\uff09[1]\u8ba1\u7b97\u7528\u6237\u7684\u5bc6\u7801\u9a8c\u8bc1\u5668v\n\u8def\u7531\u5668\u5c06\u7528\u6237\u540dsalt\u548cv\u7684x\u5750\u6807vx\u5b58\u50a8\u5728/rw/store/user\u7684\u5185\u5b58\u4e2d\u3002dat\n\u5ba2\u6237\u7aef\u751f\u6210\u4e34\u65f6\u79c1\u94a5Tc\uff0c\u5e76\u8ba1\u7b97\u5176\u4e34\u65f6\u516c\u94a5Wc=ECDH\uff08Tc\uff09\u3002\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u4e2a\u8eab\u4efd\u9a8c\u8bc1\u8bf7\u6c42\uff0c\u5305\u62ec\u7528\u6237\u540d\u548c\u70b9\u7684x\u5750\u6807Wc x\uff0c\u4f5c\u4e3a\u5176\u4e34\u65f6\u516c\u94a5\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u692d\u5706\u66f2\u7ebfx\u5750\u6807\u6709\u4e24\u4e2ay\u89e3\uff08x\uff0cy\uff09\u548c\uff08x\uff0c-y\uff09\uff0c\u5ba2\u6237\u7aef\u8fd8\u4f20\u8f93\u751f\u6210\u70b9\u7684y\u5750\u6807Wc y\u7684\u5947\u5076\u6821\u9a8c\uff0c\u4ee5\u786e\u4fdd\u670d\u52a1\u5668\u8ba1\u7b97\u76f8\u540c\u7684\u70b9\uff0c\u800c\u4e0d\u662f\u5176\u5426\u5b9a\n\u670d\u52a1\u5668\u68c0\u7d22\u76f8\u5173\u5ba2\u6237\u7aef\u7684salt\u548cVx\u3002\u7136\u540e\uff0c\u670d\u52a1\u5668\u751f\u6210\u4e34\u65f6\u79c1\u94a5Ts\uff0c\u5e76\u8ba1\u7b97\u5bc6\u7801\u7ea0\u7f20\u7684\u516c\u94a5\u70b9Ws=ECDH\uff08Ts\uff09+plot\uff08SHA2\uff08Vx\uff09\uff09[2]\u3002\u6700\u540e\uff0c\u670d\u52a1\u5668\u7528Ws-x\u548csalt\u8fdb\u884c\u54cd\u5e94\u3002\u670d\u52a1\u5668\u540c\u6837\u8ba1\u7b97\u5e76\u4f20\u8f93\u5176\u516c\u5171\u70b9\u7684y\u5750\u6807Ws-y\u7684\u5947\u5076\u6027\n\u5ba2\u6237\u673a\u73b0\u5728\u77e5\u9053\u4e86\u7528\u6237\u7684salt\u548c\u670d\u52a1\u5668\u7684\u516c\u94a5\uff0c\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u8ba1\u7b97\u5171\u4eab\u5bc6\u94a5\u548c\u786e\u8ba4\u7801\uff1a\u8ba1\u7b97v&#39\uff1bs\u79c1\u94a5\uff0cvp=SHA2\uff08salt | SHA2\uff08\u7528\u6237\u540d|\u201c\uff1a\u201c|\u5bc6\u7801\uff09\uff09\n\u8ba1\u7b97\u5171\u4eab\u70b9z\uff0c\u4f7f\u7528\u692d\u5706\u66f2\u7ebf\u4e0e\u4e4b\u524d\u8ba1\u7b97\u7684u\u70b9\u76f8\u4e58\uff0c\u4ee5\u627e\u5230z=u\uff08Tc+h.v\uff09\n\u670d\u52a1\u5668\u8ba1\u7b97\u5171\u4eab\u79d8\u5bc6\u70b9z\uff0c\u5982\u4e0b\u6240\u793a\uff1a\u4f7f\u7528\u670d\u52a1\u5668\u7684\u79c1\u94a5\u6267\u884c\u6700\u7ec8\u7684\u692d\u5706\u66f2\u7ebf\u6807\u91cf\u4e58\u6cd5\uff0c\u4ee5\u4ea7\u751fz=Ts\uff08Wc+h.v\uff09\n\u670d\u52a1\u5668\u901a\u8fc7\u7c7b\u4f3c\u5730\u8ba1\u7b97Cc\u5e76\u68c0\u67e5\u5ba2\u6237\u7aef\u63d0\u4f9b\u7684\u503c\u6765\u9a8c\u8bc1\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002[3]\n\u4e00\u65e6\u786e\u8ba4\u4e86\u4e00\u4e2a\u7b49\u6548\u7684\u5171\u4eab\u79d8\u5bc6\uff0c\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u5c31\u53ef\u4ee5\u5bf9\u6570\u636e\u8fdb\u884c\u52a0\u5bc6\u3002MikroTik\u91c7\u7528MAC-then\u52a0\u5bc6\u7b56\u7565\uff0c\u5229\u7528AES-CBC\u4f5c\u4e3a\u52a0\u5bc6\u7b97\u6cd5\uff0cHMAC\u4f5c\u4e3a\u8eab\u4efd\u9a8c\u8bc1\u7b97\u6cd5\u3002RouterOS\u8fd8\u4e3aHMAC\u548cAES\u4f7f\u7528\u5355\u72ec\u7684\u53d1\u9001\u548c\u63a5\u6536\u5bc6\u94a5\uff0c\u4e0b\u9762\u6807\u8bb0\u4e3aAES s\u3001AES r\u3001HMAC s\u3001HMAC r\u3002\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u90fd\u4f7f\u7528\u201c\u9b54\u672f\u201d\u5b57\u7b26\u4e32\u548cHMAC\u5bc6\u94a5\u6d3e\u751f\u51fd\u6570HKDF\u751f\u6210\u8fd9\u4e9b\u5bc6\u94a5\u3002\u6d88\u606f\u4f7f\u7528AES-CBC\u6a21\u5f0f\u4e2d\u4f7f\u7528\u7684\u552f\u4e00\u968f\u673a\u521d\u59cb\u5316\u5411\u91cfIV\u9884\u5148\u53d1\u9001\u52a0\u5bc6\u6570\u636e\u3002\n\u8fd9\u65e0\u7591\u662f\u4e00\u4e2a\u590d\u6742\u7684\u8fc7\u7a0b\uff0c\u6d89\u53ca\u7684\u6b65\u9aa4\u6bd4\u6807\u51c6\u7684\u692d\u5706\u66f2\u7ebfDiffie-Hellman\u6216\u4ee5\u524d\u7684RouterOS\u534f\u8bae\uff08\u5b83\u4eec\u53ea\u662f\u68c0\u67e5\u5bc6\u7801\u6563\u5217\uff09\u591a\u5f97\u591a\u3002\u4f46\u56f0\u96be\u5e76\u4e0d\u6b62\u4e8e\u6b64\uff1b\u8fd9\u4e2a\u534f\u8bae\u7531\u4e8eMikroTik\u7684\u692d\u5706\u66f2\u7ebf\u9009\u62e9\u800c\u53d8\u5f97\u66f4\u52a0\u590d\u6742\u3002RouterOS\u8eab\u4efd\u9a8c\u8bc1\u4f7f\u7528\u6807\u51c6\u7684\u8499\u54e5\u9a6c\u5229\u66f2\u7ebf\uff08\u5982\u6d41\u884c\u7684Donna2519\u5e93\uff09\u8fdb\u884c\u67d0\u4e9b\u8ba1\u7b97\uff0c\u4f46\u4e0d\u662f\u5168\u90e8\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u6ca1\u6709\u4f7f\u7528NaCl/LiB\u9ed8\u8ba4\u7684Ed25519 Edwards\u66f2\u7ebf\u3002\u76f8\u53cd\uff0c\u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\u6216\u6a21\u7cca\u5ea6\uff08\u6216\u4e24\u8005\u517c\u800c\u6709\u4e4b\uff09\uff0cRouterOS\u5728\u6807\u51c6Weierstrass\u66f2\u7ebf\u4e0a\u6267\u884c\u5927\u591a\u6570\u8ba1\u7b97\uff1aY 2=X 3+aX+b\u3002\u6b64\u5916\uff0c\u5b83\u8ba1\u7b97\u52a0\u6743\u6295\u5f71\u7a7a\u95f4P\uff082,3,1\uff09\u4e2d\u7684\u70b9\uff0c\u4ee5\u83b7\u5f97\u66f4\u9ad8\u7684\u8ba1\u7b97\u6548\u7387\u3002\u8fd9\u5c31\u4ea7\u751f\u4e86Weierstrass\u65b9\u7a0b\uff1ay2=x3+axz4+bz6\uff0c\u5176\u4e2dy=y/z3\u548cx=x/z2\u3002\n\u56f0\u60d1\u7684\u8fd9\u662f\u53ef\u4ee5\u7406\u89e3\u7684\u3002\u524d\u9762\u8be6\u7ec6\u4ecb\u7ecd\u7684\u6240\u6709\u5185\u5bb9\u7684\u7ed3\u679c\u90fd\u662f\u4e00\u4e2a\u8ba4\u8bc1\u534f\u8bae\uff0c\u5176\u4e2d\u5305\u542b\u4e09\u79cd\u4e0d\u540c\u66f2\u7ebf\u7c7b\u578b\u7684\u5927\u91cf\u692d\u5706\u66f2\u7ebf\u8ba1\u7b97\uff1a\u8499\u54e5\u9a6c\u5229\u66f2\u7ebf\u3001\u4eff\u5c04\u5f62\u5f0f\u7684Weierstrass\u66f2\u7ebf\uff08Z=1\uff09\u548c\u52a0\u6743\u6295\u5f71\u7a7a\u95f4\u4e2d\u7684Weierstrass\u66f2\u7ebf\u3002\u8fd9\u9700\u8981\u5728\u4e0d\u540c\u7684\u66f2\u7ebf\u548c\u6295\u5f71\u7a7a\u95f4\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\uff0c\u8fd9\u4f7f\u5f97\u9075\u5faa\u8eab\u4efd\u9a8c\u8bc1\u6d41\u7a0b\u975e\u5e38\u56f0\u96be\u3002Python POC\u793a\u4f8b\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u8be5\u5e8f\u5217\uff0c\u4e0d\u8fc7\u4e0b\u9762\u7684\u9ad8\u7ea7\u6982\u8ff0\u53ef\u80fd\u66f4\u9002\u5408\u4e00\u4e9b\u611f\u5174\u8da3\u7684\u8bfb\u8005\uff1a\nECDH\uff08\uff09\u65b9\u7a0b\u901a\u8fc7\u5c06\u79c1\u94a5priv\u4e58\u4ee5\u52a0\u6743\u5c04\u5f71\u7a7a\u95f4\u4e2dWeierstrass\u66f2\u7ebf\u4e0a\u7684\u57fa\u70b9g\u6765\u751f\u6210\u516c\u94a5pub\u3002\u8fd9\u5c06\u8fd4\u56de\u70b9\uff08xw:yw:zw\uff09\u3002\u7136\u540e\uff0c\u8be5\u51fd\u6570\u5c06\u70b9\u8f6c\u6362\u4e3aWeierstrass\u4eff\u5c04\u5f62\u5f0f\uff0c\u5e76\u8fdb\u4e00\u6b65\u8f6c\u6362\u4e3aMontgomery\u5f62\u5f0f\uff1b\u5177\u4f53\u6765\u8bf4\uff0c\u8be5\u51fd\u6570\u8ba1\u7b97Weierstrass\u4eff\u5c04\u5750\u6807X=X/z 2\uff0c\u5e76\u5c06X\u8f6c\u6362\u4e3a\u8499\u54e5\u9a6c\u5229\u5f62\u5f0f\u3002\u8fd9\u5f88\u5947\u602a\uff0c\u56e0\u4e3a\u79c1\u94a5\u5728Weierstrass\u66f2\u7ebf\u4e0a\u76f8\u4e58\uff0c\u4f46\u8fd4\u56de\u7684\u516c\u94a5\u662f\u8499\u54e5\u9a6c\u5229\u5f62\u5f0f\u7684X\u5750\u6807\n\u51fd\u6570\u7684\u4f5c\u7528\u662f\uff1a\u5728Weierstrass\u66f2\u7ebf\u4e0a\u4ee5\u4eff\u5c04\u5f62\u5f0f\u7ed8\u5236\u7ed9\u5b9a\u7684x\u5750\u6807\u3002\u56e0\u6b64\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2aWeierstrass\u70b9\uff08X:Y:1\uff09\u3002\u6709\u8da3\u7684\u662f\uff0c\u5b83\u5b9e\u9645\u4e0a\u662f\u901a\u8fc7\u9996\u5148\u5728\u8499\u54e5\u9a6c\u5229\u66f2\u7ebf\u4e0a\u7ed8\u5236\u8be5\u70b9\u5e76\u901a\u8fc7\u6dfb\u52a0\u5e38\u6570a/3\uff08\u5176\u4e2da\u662f\u66f2\u7ebf\u65b9\u7a0bY 2=X 3+aX 2+X\u4e2d\u7684\u8499\u54e5\u9a6c\u5229\u66f2\u7ebf\u5e38\u6570\uff09\u6765\u8f6c\u6362X\u5750\u6807\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u7684\nWeierstrass\u66f2\u7ebf\u4e0a\u7684\u6240\u6709\u70b9\u4e58\u548c\u52a0\u6cd5\u90fd\u662f\u5728\u52a0\u6743\u6295\u5f71\u7a7a\u95f4\u4e2d\u8fdb\u884c\u7684\u3002\u56e0\u6b64\uff0c\u4efb\u4f55\u8fd4\u56de\u7684\u53c2\u6570\uff08\u4f8b\u5982\uff0c\u5171\u4eab\u79d8\u5bc6\u70b9z\u3001\u516c\u94a5Wc\u548cWs\uff09\u90fd\u5fc5\u987b\u8f6c\u6362\u4e3aWeierstrass\u4eff\u5c04\u5f62\u5f0f\n\u8003\u8651\u5230\u8fd9\u4e9b\u56e0\u7d20\uff0c\u60c5\u51b5\u53d8\u5f97\u66f4\u6e05\u695a\u4e86\u3002\u4f7f\u7528Weierstrass\u66f2\u7ebf\u8fdb\u884c\u516c\u94a5\u8ba1\u7b97\u7684\u5fae\u5999\u9009\u62e9\u4f7f\u5f97\u4e00\u4e2a\u6a21\u7cca\u7684\u534f\u8bae\u66f4\u96be\u590d\u5236\u3002\u8003\u8651\u5230\u6240\u6982\u8ff0\u7684\u6240\u6709\u590d\u6742\u6027\uff0c\u6beb\u4e0d\u5947\u602a\uff0c\u76f4\u5230\u73b0\u5728\uff0c\u8fd9\u79cd\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\u8fd8\u6ca1\u6709\u5728\u516c\u5171\u5b9e\u73b0\u4e2d\u590d\u5236\u3002\n\u6211\u4eec\u5e0c\u671b\u5982\u6b64\u3002\u8fd9\u9879\u52a0\u5bc6\u9006\u5411\u5de5\u7a0b\u7684\u5de5\u4f5c\u5305\u542b\u4e86\u4e00\u70b9\u6240\u6709\u5185\u5bb9\uff1a\u4e00\u4e2a\u6a21\u7cca\u7684\u534f\u8bae\u3001\u591a\u4e2a\u692d\u5706\u66f2\u7ebf\u5b9a\u4e49\uff0c\u4ee5\u53ca\u4ece\u52a0\u6743\u6295\u5f71\u7a7a\u95f4\u8fdb\u884c\u7684\u8f6c\u6362\u3002\u5982\u679c\u4f60\u6e34\u671b\u5f97\u5230\u66f4\u591a\uff0c\u6216\u8005\u60f3\u8ba9\u81ea\u5df1\u7ecf\u53d7\u8fdb\u4e00\u6b65\u7684\u6280\u672f\u6298\u78e8\uff0c\u8bf7\u53c2\u9605\u6211\u4eecGitHub repo\u4e2d\u7684\u6e90\u4ee3\u7801\u548c\u9644\u52a0\u6ce8\u91ca\u3002\u4f46\u662f\u7b49\u7b49\uff01\u5bf9\u4e8e\u90a3\u4e9b\u771f\u6b63\u8d2a\u5f97\u65e0\u538c\u7684\u4eba\u6765\u8bf4&#39\uff1b\u8fd8\u6709\u66f4\u591a\u3002\u6211\u4eec\u5728\u9006\u5411\u5de5\u7a0b\u4e2d\u4f7f\u7528\u7684\u6700\u597d\u7684\u8d44\u6e90\u662f\u4e00\u4e2a\u672a\u5b8c\u6210\u7684IEEE\u63d0\u4ea4\u8349\u6848\uff0c\u8fd9\u662f\u7531\u56de\u7a0b\u673a\u5668\u63d0\u4f9b\u7684\u3002\u4e8b\u5b9e\u4e0a\uff0c\u7c73\u514b\u7f57\u8482\u514b&#39\uff1b\u5176\u6267\u884c\u60c5\u51b5\u4e0e\u8349\u6848\u51e0\u4e4e\u76f8\u540c&#39\uff1b\u4ed6\u63d0\u8bae\u7684\u534f\u8bae\u3002\u770b\u770b\u4f60\u662f\u5426\u80fd\u53d1\u73b0\u7ec6\u5fae\u7684\u5dee\u522b\uff0c\u5e76\u60ca\u53f9\uff08\u5c31\u50cf\u6211\u4eec\u6240\u505a\u7684\u90a3\u6837\uff09\u5171\u4eab\u7684\u79d8\u5bc6\u4ecd\u7136\u662f\u4e00\u6837\u7684\u3002\n[1] ECDH\uff08\uff09\u63a5\u53d7\u79c1\u94a5\u4f5c\u4e3a\u8f93\u5165\uff0c\u5e76\u8fd4\u56de\u76f8\u5173\u7684\u692d\u5706\u66f2\u7ebf\u516c\u94a5\uff0c\u5982\u692d\u5706\u66f2\u7ebfDiffie-Hellman\u3002\u8fd9\u662f\u901a\u8fc7\u692d\u5706\u66f2\u7ebf\u4e2d\u7684gen_\u516c\u94a5\u65b9\u6cd5\u590d\u5236\u7684\u3002py\u7684WCurve\u8bfe\u7a0b\n[2] plot\uff08\uff09\u63a5\u53d7x\u5750\u6807\u5e76\u8fd4\u56de\u692d\u5706\u66f2\u7ebf\u4e0a\u7684\u5bf9\u5e94\u70b9\u3002\u5728\u692d\u5706\u66f2\u7ebf\u4e2d\uff0clift_x\u65b9\u6cd5\u53ef\u4ee5\u590d\u5236\u8fd9\u4e00\u70b9\u3002py\u7684WCurve\u8bfe\u7a0b\n[3] \u670d\u52a1\u5668\u53ef\u4ee5\u901a\u8fc7\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u670d\u52a1\u5668\u786e\u8ba4\u7801Cs\u6765\u5b8c\u6210\u8ba4\u8bc1\u63e1\u624b\uff0c\u4ee5\u9a8c\u8bc1\u670d\u52a1\u5668\u7684\u771f\u5b9e\u6027\u3002\u5728Winbox\u534f\u8bae\u7684\u60c5\u51b5\u4e0b\uff0cCs=SHA2\uff08h+Cc+zx\uff09", "note_en": "In August 2019, MikroTik issued a RouterOS software update to version 6.45.1 which removed plaintext password storage on all routers that upgraded to the new firmware. While enhancing router security, this came as a blow for researchers, network administrators, and tinkerers who used customized tooling with MikroTik proprietary protocols such as MAC Telnet and Winbox. MikroTik has since failed to detail the new authentication procedure  despite user requests for assistance. Margin Research is excited to illuminate the authentication procedure and offer Python  proof of concept (POC) implementations for Winbox and MAC Telnet authentication.\n  MikroTik&#39;s new authentication process uses a variation of Secure Remote Password (SRP). SRP is a type of Password Authentication Key Exchange protocol which incorporates the password within key exchange calculations. Knowledge of the correct password is required to compute the shared secret, so identical secrets indicate successful authentication. The SRP specification dates back over two decades and mainstream use gained traction in the recent past, highlighted by its use in OpenSSL. However, MikroTik does not implement this SRP protocol. Rather, RouterOS employs elliptic curve SRP (EC-SRP), specifically EC-SRP5. This protocol, which is much less prevalent, is defined by the following sequence:\n  The router generates a 16-byte user  salt and calculates the user\u2019s password verifier,  v, according to the equation  v = ECDH(SHA2(salt | SHA2(username | \u201c:\u201d | password)))  [1]\n The router stores  username,  salt, and  v\u2019s x coordinate,  v x, in memory in  /rw/store/user.dat\n   The client generates an ephemeral private key,  Tc, and computes its ephemeral public key point  Wc = ECDH(Tc). The client sends an authentication request including  username and the point\u2019s x coordinate,  Wc x, as its ephemeral public key Since each elliptic curve x coordinate has two y solutions,  (x, y) and  (x, -y), the client also transmits the parity of the generated point\u2019s y coordinate,  Wc y, to ensure the server calculates the identical point and not its negation\n The server retrieves the associated client\u2019s  salt and  v x. The server then generates an ephemeral private key,  Ts, and computes a password-entangled public key point,  Ws = ECDH(Ts) + plot(SHA2(v x))  [2]. Finally, the server responds with  Ws x and  salt The server similarly calculates and transmits the parity of its public point\u2019s y coordinate,  Ws y\n  The client, now knowing the user\u2019s  salt and the server\u2019s public key, can compute the shared secret and confirmation code as follows: Calculates  v&#39;s private key,  vp = SHA2(salt | SHA2(username | \u201c:\u201d | password))\n       Calculates the shared point,  z, using elliptic curve multiplication with the previously calculated  u point to find  z = u(Tc + h.v)\n  The server computes the shared secret point,  z, as follows: Performs a final elliptic curve scalar multiplication using the server\u2019s private key to yield  z = Ts(Wc + h.v)\n The server validates the username and password by similarly calculating  Cc and checking against the client provided value.  [3]\n   The server and client can encrypt data once confirming an equivalent shared secret. MikroTik employs a MAC-then-encrypt strategy, leveraging AES-CBC as the encryption algorithm and HMAC as the authentication algorithm. RouterOS also uses separate send and receive keys for both HMAC and AES, labeled below as  AES s, AES r, HMAC s, HMAC r. Both server and client generate these keys using \u201cmagic\u201d strings and the HMAC key derivation function, HKDF. Messages prepend encrypted data with the unique random initialization vector,  IV, used in AES-CBC mode.\n     This is undoubtedly a complicated procedure, and involves many more steps than standard elliptic curve Diffie Hellman or previous RouterOS protocols that simply checked password hashes. But the difficulty does not end there; this protocol is additionally complicated by MikroTik\u2019s elliptic curve choices. RouterOS authentication uses a standard Montgomery curve, such as the popular donna25519 library, for some calculations,  but not all. And it unfortunately does not use the NaCl/libsodium default Ed25519 Edwards curve. Rather, for either added efficiency or obscurity (or a bit of both), RouterOS performs most calculations over the standard Weierstrass curve:  Y 2=X 3+aX+b. Furthermore, it calculates points in weighted projective space  P(2,3,1) for even greater computation efficiency. This yields the Weierstrass equation:  y 2=x 3+axz 4+bz 6, where  Y=y/z 3 and  X=x/z 2.\n   Confused? Understandably so. The result of everything previously detailed is an authentication protocol with copious elliptic curve calculations across three different curve varieties: Montgomery curves, Weierstrass curves in affine form ( Z=1), and Weierstrass curves in weighted projective space. This requires conversions to and from different curves and projective spaces, which makes following the authentication flow extremely difficult. The  Python POC examples detail the sequence specifically, though the following high-level overview might be better suited for some interested readers:\n The  ECDH() equation generates a public key,  pub, by multiplying private key,  priv, by base point  g on the Weierstrass curve in  weighted projective space. This returns the point  (xw : yw : zw). The function then converts the point to Weierstrass affine form and further converts to Montgomery form; specifically, the function calculates the Weierstrass affine coordinate\u00a0  X=x/z 2 and converts  X to Montgomery form This is odd because the private key is multiplied over the Weierstrass curve, but the public key returned is the x coordinate in Montgomery form\n The  plot() function plots a given x coordinate on the Weierstrass curve in affine form. Therefore, it returns a Weierstrass point  (X : Y : 1) Interestingly, it actually performs this operation by first plotting the point on the Montgomery curve and converting the x coordinate by adding constant  a/3 (where  a is the Montgomery curve constant from the curve\u2019s equation  Y 2=X 3+aX 2+X)\n All point multiplication and addition over the Weierstrass curve are performed in weighted projective space. Thus, any returned parameters (e.g., shared secret point  z, public keys  Wc and  Ws) must be converted to Weierstrass affine form\n The picture becomes a bit clearer with those considerations in mind. The subtle choice of using Weierstrass curves for public key calculations makes an obscure protocol even more challenging to replicate. Considering all the intricacies outlined, it is no surprise that this authentication scheme was not reproduced in a public implementation until now.\n  We hope so. This cryptographic reverse engineering effort had a little bit of everything: an obscure protocol, multiple elliptic curve definitions, and conversions from weighted projective space. If you are hungry for more, or want to put yourself through further technical torture, please see the source code and additional commentary in our  GitHub repo. But wait! For those who are truly insatiable, there&#39;s more. The single best resource we used in reverse engineering was an unfinished  IEEE submission draft courtesy of the WayBack Machine. In fact, MikroTik&#39;s implementation is  nearly identical to the draft&#39;s proposed protocol. See if you can spot the minor nuances and marvel (as we did) that the shared secret remains the same.\n  [1]  ECDH() accepts a private key as input and returns the associated elliptic curve public key, as in elliptic curve Diffie Hellman. This is replicated by the  gen_public_key method in  elliptic_curves.py\u2019s  WCurve class\n [2]  plot() accepts an x coordinate and returns the corresponding point on the elliptic curve. This is replicated by the  lift_x method in  elliptic_curves.py\u2019s  WCurve class\n [3] The server may complete the authentication handshake by sending a server confirmation code,  Cs, for the client to validate the server\u2019s authenticity. In the case of the Winbox protocol,  Cs = SHA2(h + Cc + zx)", "posttime": "2022-02-15 20:40:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8ba4\u8bc1,authentication,\u66f2\u7ebf", "title": "MikroTik\u8ba4\u8bc1\u88ab\u63ed\u53d1", "title_en": "MikroTik authentication revealed", "transed": 1, "url": "https://margin.re/blog/mikrotik-authentication-revealed.aspx", "via": "", "real_tags": ["\u8ba4\u8bc1", "\u66f2\u7ebf"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073514, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6e32\u67d3\u6587\u672c\uff0c\u6709\u591a\u56f0\u96be\uff1f\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u975e\u5e38\u96be\uff01\u636e\u6211\u6240\u77e5\uff0c\u51e0\u4e4e\u6ca1\u6709\u4efb\u4f55\u7cfb\u7edf\u80fd\u201c\u5b8c\u7f8e\u5730\u201d\u5448\u73b0\u6587\u672c\u3002\u8fd9\u90fd\u662f\u6700\u597d\u7684\u52aa\u529b\uff0c\u5c3d\u7ba1\u6709\u4e9b\u52aa\u529b\u6bd4\u5176\u4ed6\u52aa\u529b\u66f4\u91cd\u8981\u3002\n\u6211\u5047\u8bbe\u60a8\u5e0c\u671b\u652f\u6301\u7528\u6237\u63d0\u4f9b\u7684\u4efb\u610f\u6587\u672c\uff0c\u8fd9\u4e9b\u6587\u672c\u5177\u6709\u81ea\u5b9a\u4e49\u5b57\u4f53\u3001\u989c\u8272\u548c\u5e26\u6709\u6362\u884c\u548c\u652f\u6301\u6587\u672c\u9009\u62e9\u7684\u6837\u5f0f\u3002\u57fa\u672c\u4e0a\u662f\u6b63\u786e\u663e\u793a\u7b80\u5355\u7684\u5bcc\u6587\u672c\u6587\u6863\u3001\u7ec8\u7aef\u3001\u7f51\u9875\u6216\u5176\u4ed6\u4efb\u4f55\u5185\u5bb9\u6240\u9700\u7684\u6700\u4f4e\u8981\u6c42\u3002\n\u8fd9\u91cc\u6700\u91cd\u8981\u7684\u4e3b\u9898\u662f\uff1a\u6ca1\u6709\u4e00\u81f4\u7684\u6b63\u786e\u7b54\u6848\uff0c\u6bcf\u4ef6\u4e8b\u90fd\u6bd4\u4f60\u60f3\u8c61\u7684\u91cd\u8981\u5f97\u591a\uff0c\u6bcf\u4ef6\u4e8b\u90fd\u4f1a\u5f71\u54cd\u5176\u4ed6\u4e00\u5207\u3002\n\u6211\u5728\u8fd9\u91cc\u5173\u6ce8\u7684\u4e3b\u9898\u6ca1\u6709\u7279\u522b\u7684\u97f5\u5473\u6216\u7406\u7531\uff0c\u5b83\u4eec\u53ea\u662f\u5728Firefox\u4e2d\u6e32\u67d3\u51e0\u5e74\u540e\u51fa\u73b0\u5728\u6211\u8111\u6d77\u4e2d\u7684\u4e3b\u9898\u3002\u4f8b\u5982\uff0c\u6211\u4e0d\u4f1a\u82b1\u592a\u591a\u65f6\u95f4\u8ba8\u8bba\u6587\u672c\u5206\u5272\u6216\u7ba1\u7406\u4e0d\u540c\u5e73\u53f0\u7279\u5b9a\u6587\u672c\u5e93\u7684\u6311\u6218\uff0c\u56e0\u4e3a\u6211\u4e0d\u4f1a\u770b\u592a\u591a\u3002\n\u6587\u672c\u5f88\u590d\u6742\uff0c\u82f1\u8bed\u4e0d\u5584\u4e8e\u8868\u8fbe\u8fd9\u4e9b\u7ec6\u5fae\u5dee\u522b\u3002\u5c31\u672c\u6587\u4ef6\u800c\u8a00\uff0c\u6211\u5c06\u5c3d\u91cf\u9075\u5b88\u4ee5\u4e0b\u6761\u6b3e\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e9b\u8bcd\u4e0d\u662f\u201c\u6b63\u786e\u7684\u201d\uff0c\u6211\u53ea\u662f\u89c9\u5f97\u5b83\u4eec\u5bf9\u5411\u6ca1\u6709\u8bed\u8a00\u5b66\u80cc\u666f\u7684\u82f1\u8bed\u6bcd\u8bed\u4eba\u58eb\u4f20\u8fbe\u5173\u952e\u6982\u5ff5\u5f88\u6709\u7528\u3002\n\u6807\u91cf\uff1aUnicode\u6807\u91cf\uff0cUnicode\u63cf\u8ff0\u7684\u201c\u6700\u5c0f\u5355\u4f4d\u201d\uff08\u53c8\u540d\u4ee3\u7801\u70b9\uff09\u3002\n\u5b57\u7b26\uff1a\u4e00\u4e2aUnicode\u6269\u5c55\u5b57\u96c6\u96c6\u7fa4\uff08EGC\uff09\uff0cUnicode\u63cf\u8ff0\u7684\u201c\u6700\u5927\u5355\u5143\u201d\uff08\u53ef\u80fd\u7531\u591a\u4e2a\u6807\u91cf\u7ec4\u6210\uff09\u3002\n\u5b57\u5f62\uff1a\u7531\u5b57\u4f53\u4ea7\u751f\u7684\u4e00\u79cd\u539f\u5b50\u5448\u73b0\u5355\u4f4d\u3002\u901a\u5e38\uff0c\u5b57\u4f53\u4e2d\u4f1a\u6709\u4e00\u4e2a\u552f\u4e00\u7684ID\u3002\n\u8fde\u5b57\uff1a\u7531\u51e0\u4e2a\u6807\u91cf\uff0c\u751a\u81f3\u53ef\u80fd\u662f\u51e0\u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u5f62\uff08\u6bcd\u8bed\u4eba\u58eb\u53ef\u80fd\u8ba4\u4e3a\u8fde\u5b57\u662f\u591a\u4e2a\u201c\u5b57\u7b26\u201d\uff0c\u4e5f\u53ef\u80fd\u4e0d\u8ba4\u4e3a\u8fde\u5b57\u662f\u591a\u4e2a\u201c\u5b57\u7b26\u201d\uff0c\u4f46\u5bf9\u4e8e\u5b57\u4f53\u6765\u8bf4\uff0c\u5b83\u53ea\u662f\u4e00\u4e2a\u201c\u5b57\u7b26\u201d\uff09\u3002\n\u811a\u672c\uff1a\u7ec4\u6210\u67d0\u79cd\u8bed\u8a00\u7684\u4e00\u7ec4\u5b57\u5f62\uff08\u5b57\u4f53\u503e\u5411\u4e8e\u5b9e\u73b0\u7279\u5b9a\u7684\u811a\u672c\uff09\u3002\n\u989c\u8272\uff1a\u5b57\u4f53\u7684RGB\u548cAlpha\u503c\uff08\u6709\u4e9b\u7528\u4f8b\u4e0d\u9700\u8981Alpha\uff0c\u4f46\u5f88\u6709\u8da3\uff09\u3002\n\u6837\u5f0f\uff1a\u5b57\u4f53\u7684\u7c97\u4f53\u548c\u659c\u4f53\u4fee\u9970\u7b26\uff08\u6697\u793a\u3001\u522b\u540d\u548c\u5176\u4ed6\u8bbe\u7f6e\u5728\u5b9e\u9645\u5b9e\u73b0\u4e2d\u4e5f\u4f1a\u88ab\u585e\u6ee1\uff09\u3002\n\u4e3a\u4e86\u8ba9\u60a8\u4e86\u89e3\u5178\u578b\u7684\u6587\u672c\u6e32\u67d3\u7ba1\u9053\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u610f\u56fe\uff1a\n\u5927\u591a\u6570\u5b57\u4f53\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u63d0\u4f9b\u6240\u6709\u73b0\u5b58\u7684\u5b57\u5f62\u3002\u5b57\u5f62\u592a\u591a\uff0c\u6240\u4ee5\u5b57\u4f53\u901a\u5e38\u8bbe\u8ba1\u4e3a\u53ea\u5b9e\u73b0\u7279\u5b9a\u7684\u811a\u672c\u3002\u6700\u7ec8\u7528\u6237\u901a\u5e38\u4e0d\u77e5\u9053\u6216\u4e0d\u5173\u5fc3\u8fd9\u4e00\u70b9\uff0c\u56e0\u6b64\u5f53\u5b57\u7b26\u4e0d\u53ef\u7528\u65f6\uff0c\u4e00\u4e2a\u5065\u58ee\u7684\u7cfb\u7edf\u5fc5\u987b\u7ea7\u8054\u5230\u5176\u4ed6\u5b57\u4f53\u4e2d\u3002\n\u4f8b\u5982\uff0c\u5c3d\u7ba1\u4ee5\u4e0b\u6587\u672c\u7684\u6807\u8bb0\u5e76\u4e0d\u8868\u793a\u5b58\u5728\u591a\u79cd\u5b57\u4f53\uff0c\u4f46\u5728\u6240\u6709\u7cfb\u7edf\u4e0a\u6b63\u786e\u7ed8\u5236\u5b83\u7edd\u5bf9\u9700\u8981\uff1ahello\ud83d\ude3a \u092e\u0928\u0940\u0937 \u0628\u0633\u0645 \u597d. \u8fd9\u4e0e\u6b65\u9aa41\uff08\u9020\u578b\uff09\u975e\u5e38\u63a5\u8fd1\uff0c\u8fd9\u53d6\u51b3\u4e8e\u6b65\u9aa43\uff08\u9020\u578b\uff09\u7684\u7ed3\u679c\uff01\n\uff08\u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u91c7\u7528Noto\u65b9\u6cd5\uff0c\u4f7f\u7528\u4e00\u79cd\u5305\u542b\u6240\u6709\u5b57\u7b26\u7684Uber\u5b57\u4f53\u3002\u5c3d\u7ba1\u8fd9\u610f\u5473\u7740\u7528\u6237\u65e0\u6cd5\u914d\u7f6e\u5b57\u4f53\uff0c\u4e5f\u65e0\u6cd5\u5728\u6240\u6709\u5e73\u53f0\u4e0a\u4e3a\u7528\u6237\u63d0\u4f9b\u201c\u539f\u751f\u201d\u6587\u672c\u4f53\u9a8c\u3002\u4f46\u5047\u8bbe\u4f60\u60f3\u8981\u66f4\u5f3a\u5927\u7684\u89e3\u51b3\u65b9\u6848\u3002\uff09\n\u540c\u6837\uff0c\u5e03\u5c40\u8981\u6c42\u60a8\u77e5\u9053\u6587\u672c\u7684\u6bcf\u4e2a\u90e8\u5206\u5360\u7528\u4e86\u591a\u5c11\u7a7a\u95f4\uff0c\u4f46\u8fd9\u53ea\u6709\u5728\u60a8\u5851\u9020\u6587\u672c\u4e4b\u540e\u624d\u80fd\u77e5\u9053\uff01\u7b2c\u4e8c\u6b65\u53d6\u51b3\u4e8e\u7b2c\u4e09\u6b65\u7684\u7ed3\u679c\uff1f\n\u9020\u578b\u5b8c\u5168\u53d6\u51b3\u4e8e\u4f60\u5bf9\u81ea\u5df1\u7684\u5e03\u5c40\u548c\u9020\u578b\u7684\u4e86\u89e3\uff0c\u6240\u4ee5\u6211\u4eec\u4f3c\u4e4e\u88ab\u5361\u4f4f\u4e86\u3002\u6211\u4eec\u8be5\u600e\u4e48\u529e\uff1f\n\u9996\u5148\uff0c\u9020\u578b\u4f1a\u4f5c\u5f0a\u3002\u867d\u7136\u6211\u4eec\u771f\u6b63\u60f3\u8981\u7684\u5b57\u4f53\u662f\u5b8c\u6574\u7684\u5b57\u5f62\uff0c\u4f46\u6837\u5f0f\u8bbe\u8ba1\u53ea\u9700\u8981\u8be2\u95ee\u6807\u91cf\u3002\u5982\u679c\u5b57\u4f53\u4e0d\u80fd\u6b63\u786e\u652f\u6301\u811a\u672c\uff0c\u5b83\u5c31\u4e0d\u5e94\u8be5\u58f0\u79f0\u77e5\u9053\u7ec4\u6210\u811a\u672c\u7684\u6807\u91cf\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u627e\u5230\u201c\u6700\u4f73\u201d\u5b57\u4f53\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u5bf9\u4e8e\u6587\u672c\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\uff08EGC\uff09\uff0c\u4e0d\u65ad\u8be2\u95ee\u7ea7\u8054\u4e2d\u7684\u6bcf\u4e2a\u5b57\u4f53\u662f\u5426\u77e5\u9053\u7ec4\u6210\u8be5\u5b57\u7b26\u7684\u6240\u6709\u6807\u91cf\uff0c\u5982\u679c\u77e5\u9053\uff0c\u5c31\u4f7f\u7528\u5b83\u3002\u5982\u679c\u6211\u4eec\u5728\u6ca1\u6709\u4f9b\u5e94\u5546\u7684\u60c5\u51b5\u4e0b\u8d70\u5230\u6700\u540e\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4f1a\u751f\u4ea7\u8c46\u8150\uff08\udbff\udffd, \u7f3a\u5c11\u56fe\u793a\u7b26\u6307\u793a\u5668\uff09\u3002\n\u5728\u8868\u60c5\u7b26\u53f7\u7684\u4f8b\u5b50\u4e2d\uff0c\u4f60\u53ef\u80fd\u5df2\u7ecf\u89c1\u8fc7\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u5931\u8d25\u6a21\u5f0f\u4e86\uff01\u56e0\u4e3a\u4e00\u4e9b\u8868\u60c5\u7b26\u53f7\u5b9e\u9645\u4e0a\u662f\u51e0\u4e2a\u7b80\u5355\u8868\u60c5\u7b26\u53f7\u7684\u8fde\u5b57\uff0c\u6240\u4ee5\u5b57\u4f53\u53ef\u80fd\u4f1a\u6210\u529f\u5730\u62a5\u544a\u5bf9\u8be5\u5b57\u7b26\u7684\u652f\u6301\uff0c\u540c\u65f6\u53ea\u751f\u6210\u7ec4\u4ef6\u3002\u6240\u4ee5\ud83e\udd26\ud83c\udfff\u200d\u2640\ufe0f \u53ef\u80fd\u770b\u8d77\u6765\u50cf\ud83e\udd26 \ud83c\udfff\u200d \u2640 \u5982\u679c\u5b57\u4f53\u201c\u592a\u65e7\u201d\uff0c\u65e0\u6cd5\u4e86\u89e3\u65b0\u7684\u8fde\u5b57\u3002\u5982\u679cunicode\u5b9e\u73b0\u201c\u592a\u65e7\u201d\uff0c\u65e0\u6cd5\u4e86\u89e3\u5b57\u7b26\uff0c\u5bfc\u81f4\u6837\u5f0f\u7cfb\u7edf\u63a5\u53d7\u5b57\u4f53\u4e2d\u7684\u90e8\u5206\u5339\u914d\uff0c\u4e5f\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002\n\u56e0\u6b64\uff0c\u73b0\u5728\u6211\u4eec\u4e0d\u9700\u8981\u67e5\u770b\u5e03\u5c40\u6216\u5f62\u72b6\uff0c\u5c31\u53ef\u4ee5\u786e\u5207\u5730\u77e5\u9053\u6211\u4eec\u5c06\u4f7f\u7528\u4ec0\u4e48\u5b57\u4f53\uff08\u5c3d\u7ba1\u5f62\u72b6\u53ef\u80fd\u4f1a\u6539\u53d8\u6211\u4eec\u7684\u989c\u8272\uff0c\u540e\u9762\u7684\u90e8\u5206\u5c06\u5bf9\u6b64\u8fdb\u884c\u8be6\u7ec6\u4ecb\u7ecd\uff09\u3002\u6211\u4eec\u80fd\u540c\u65f6\u89e3\u5f00\u5e03\u5c40\u548c\u5f62\u72b6\u5417\uff1f\u4e0d\uff01\u50cf\u6bb5\u843d\u5206\u9694\u7b26\u8fd9\u6837\u7684\u4e1c\u897f\u4f1a\u8ba9\u4f60\u5728\u884c\u4e0a\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u786c\u4e2d\u65ad\uff0c\u4f46\u662f\u8fdb\u884c\u5305\u88c5\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u8fed\u4ee3\u5730\u8fdb\u884c\u9020\u578b\uff01\n\u4f60\u5fc5\u987b\u5047\u8bbe\u4f60\u7684\u6587\u672c\u53ea\u9002\u5408\u4e00\u884c\uff0c\u5e76\u5851\u9020\u5b83\uff0c\u76f4\u5230\u4f60\u7528\u5b8c\u7a7a\u95f4\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u60a8\u53ef\u4ee5\u6267\u884c\u5e03\u5c40\u64cd\u4f5c\uff0c\u5e76\u786e\u5b9a\u5728\u4f55\u5904\u6253\u65ad\u6587\u672c\u5e76\u5f00\u59cb\u4e0b\u4e00\u884c\u3002\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u6240\u6709\u7684\u4e1c\u897f\u90fd\u6210\u578b\u5e76\u5e03\u7f6e\u597d\u3002\n\u6765\u81ea\u82f1\u8bed\uff0c\u4f60\u53ef\u80fd\u4f1a\u8ba4\u4e3a\u8fde\u5b57\u53ea\u662f\u82b1\u54e8\u7684\u7ed2\u6bdb\u3002\u6211\u7684\u610f\u601d\u662f\uff0c\u8c01\u771f\u7684\u5728\u4e4e\u201c\u00e6\u201d\u662f\u5426\u5199\u4e3a\u201cae\u201d\uff1f\u4e8b\u5b9e\u8bc1\u660e\uff0c\u6709\u4e9b\u8bed\u8a00\u57fa\u672c\u4e0a\u5b8c\u5168\u662f\u8fde\u5b57\u3002\u4f8b\u5982\u201c\u0921\u094d\u0921 \u0628\u0633\u0645\u201c\u5177\u6709\u201d\u7684\u4e2a\u6027\u0921\u094d \u0921 \u0628\u0633\u0645\u201d\u3002\u5982\u679c\u60a8\u5728\u4e00\u4e2a\u6709\u80fd\u529b\u7684\u6587\u672c\u5448\u73b0\u7cfb\u7edf\uff08\u4efb\u4f55\u4e3b\u8981\u6d4f\u89c8\u5668\uff09\u4e2d\u67e5\u770b\u6b64\u5185\u5bb9\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u770b\u8d77\u6765\u5e94\u8be5\u975e\u5e38\u4e0d\u540c\u3002\n\u4e0d\uff1a\u8fd9\u4e0d\u662funicode\u6807\u91cf\u548c\u6269\u5c55\u7684grapheme\u96c6\u7fa4\u4e4b\u95f4\u7684\u533a\u522b\u3002\u5982\u679c\u4f60\u5411\u4e00\u4e2aunicode\u5065\u58ee\u7684\u7cfb\u7edf\uff08\u6bd4\u5982Swift\uff09\u8be2\u95ee\u8be5\u5b57\u7b26\u4e32\u7684\u6269\u5c55\u5b57\u7b26\u96c6\uff0c\u5b83\u4f1a\u5410\u51fa\u8fd95\u4e2a\u5b57\u7b26\uff01\n\u4e00\u4e2a\u5b57\u7b26\u7684\u5f62\u72b6\u53d6\u51b3\u4e8e\u5b83\u7684\u90bb\u57df\uff1a\u4f60\u4e0d\u80fd\u4e00\u4e2a\u5b57\u7b26\u4e00\u4e2a\u5b57\u7b26\u5730\u6b63\u786e\u7ed8\u5236\u6587\u672c\u3002\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f60\u5fc5\u987b\u4f7f\u7528\u4e00\u4e2a\u6210\u5f62\u5e93\u3002\u8fd9\u65b9\u9762\u7684\u884c\u4e1a\u6807\u51c6\u662fHarfBuzz\uff0c\u8981\u5b9e\u73b0\u81ea\u5df1\u7684\u6807\u51c6\u975e\u5e38\u56f0\u96be\u3002\u4f7f\u7528\u54c8\u592b\u5e03\u5179\u3002\n\u8349\u4e66\u7684\u5b57\u5f62\u7ecf\u5e38\u76f8\u4ea4\u4ee5\u907f\u514d\u63a5\u7f1d\uff0c\u8fd9\u53ef\u80fd\u4f1a\u7ed9\u60a8\u5e26\u6765\u95ee\u9898\u3002\n\u8ba9\u6211\u4eec\u770b\u770b\u201c\u092e\u0928\u0940\u0937 \u201c\u53c8\u6765\u4e86\u3002\u770b\u8d77\u6765\u4e0d\u9519\u5427\uff1f\u8ba9\u6211\u4eec\u628a\u5b83\u70b8\u4e86\u5427\uff1a\n\u5982\u679c\u4f60\u5728\u72e9\u730e\u6216\u8fb9\u7f18\uff0c\u8fd9\u53ef\u80fd\u4ecd\u7136\u770b\u8d77\u6765\u4e0d\u9519\uff01\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662fFirefox\u6216Chrome\uff0c\u5b83\u770b\u8d77\u6765\u5f88\u7cdf\u7cd5\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u95ee\u9898\u662fChrome\u548cFirefox\u6b63\u5728\u8bd5\u56fe\u4f5c\u5f0a\u3002\u4ed6\u4eec\u5403\u852c\u83dc\uff0c\u5e76\u6b63\u786e\u5730\u5851\u9020\u6587\u5b57\uff0c\u4f46\u4e00\u65e6\u4ed6\u4eec\u6709\u4e86\u5b57\u5f62\uff0c\u4ed6\u4eec\u4ecd\u7136\u8bd5\u56fe\u5355\u72ec\u7ed8\u5236\u3002\u9664\u4e86\u900f\u660e\u548c\u91cd\u53e0\u4e4b\u5916\uff0c\u8fd9\u57fa\u672c\u4e0a\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\u3002\u7136\u540e\u5728\u91cd\u53e0\u5904\u53d8\u6697\u3002\n\u201c\u6b63\u786e\u201d\u7684\u5b9e\u73b0\u4f1a\u5c06\u6587\u672c\u7ed8\u5236\u5230\u6ca1\u6709\u900f\u660e\u5ea6\u7684\u4e34\u65f6\u66f2\u9762\u4e0a\uff0c\u7136\u540e\u5c06\u8be5\u66f2\u9762\u5408\u6210\u5230\u5177\u6709\u900f\u660e\u5ea6\u7684\u573a\u666f\u4e2d\u3002Firefox\u548cChrome\u4e0d\u8fd9\u4e48\u505a\uff0c\u56e0\u4e3a\u5b83\u5f88\u6602\u8d35\uff0c\u800c\u4e14\u5bf9\u4e8e\u4e3b\u8981\u7684\u897f\u65b9\u8bed\u8a00\u6765\u8bf4\u901a\u5e38\u662f\u4e0d\u5fc5\u8981\u7684\u3002\u6709\u8da3\u7684\u662f\uff0c\u4ed6\u4eec\u786e\u5b9e\u7406\u89e3\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5b9e\u9645\u4e0a\u4f1a\u7aed\u5c3d\u5168\u529b\u4e13\u95e8\u5904\u7406emoji\uff08\u4f46\u6211\u4eec\u5c06\u5728\u540e\u9762\u8ba8\u8bba\uff09\u3002\n\u597d\u7684\uff0c\u8fd9\u4e00\u4e2a\u4e3b\u8981\u662f\u4e00\u4e2a\u597d\u5947\uff0c\u56e0\u4e3a\u6211\u4e0d\u77e5\u9053\u6709\u4efb\u4f55\u8d85\u5408\u7406\u7684\u60c5\u51b5\u4e0b\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f46\u5b83\u81ea\u7136\u4f1a\u4e0b\u964d\u7684\u52a0\u4ef7\u3002\u4ee5\u4e0b\u662f\u4e24\u6bb5\u5185\u5bb9\u76f8\u540c\u4f46\u989c\u8272\u6837\u5f0f\u4e0d\u540c\u7684\u6587\u672c\uff1a\n\u092a\u0928\u094d\u0939  \u092a\u0928\u094d\u0939  \u0924\u094d\u0930  \u0930\u094d\u091a  \u0915\u0943\u0915 \u0943  \u0921 \u094d\u0921  \u0928 \u094d\u0939 \u0943 \u0947  \u0625\u0644 \u0627  \u0628 \u0633 \u0645  \u0627 \u0644 \u0644 \u0647\n\u092a\u0928\u094d\u0939 \u092a\u0928\u094d\u0939 \u0924\u094d\u0930 \u0930\u094d\u091a \u0915\u0943\u0915\u0943 \u0921\u094d\u0921 \u0928\u094d\u0939\u0943\u0947 \u0625\u0644\u0627 \u0628\u0633\u0645 \u0627\u0644\u0644\u0647\n\u4ee5\u4e0b\u662f\u5b83\u4eec\u5728Chrome\u4e2d\u7684\u5916\u89c2\uff08\u5982\u679c\u4f7f\u7528\u65b0\u7684\u5e03\u5c40\u5b9e\u73b0\uff09\uff1a\n\u6211\u60f3\u6bcf\u4e2a\u4eba\u90fd\u5e94\u8be5\u50cfFirefox\u90a3\u6837\u505a\uff0c\u5bf9\u5427\uff1f\u4f46\u5982\u679c\u6211\u4eec\u653e\u5927\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5b83\u6b63\u5728\u505a\u4e00\u4e9b\u975e\u5e38\u523a\u8033\u7684\u4e8b\u60c5\uff1a\n\u95ee\u9898\u662f\uff0c\u8fd9\u91cc\u771f\u7684\u6ca1\u6709\u5408\u7406\u7684\u7b54\u6848\u3002\u6211\u4eec\u5df2\u7ecf\u7528\u4e0d\u540c\u7684\u6837\u5f0f\u5206\u89e3\u4e86\u4e00\u4e2a\u8fde\u5b57\uff0c\u7531\u4e8e\u8fde\u5b57\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\u662f\u4e00\u4e2a\u5448\u73b0\u201c\u5355\u5143\u201d\uff0c\u6240\u4ee5\u62d2\u7edd\u652f\u6301\u5b83\u662f\u5408\u7406\u7684\uff08\u5c31\u50cf\u5927\u591a\u6570\u4eba\u90a3\u6837\uff09\u3002\n\u4e0d\u7ba1\u51fa\u4e8e\u4ec0\u4e48\u539f\u56e0\uff0cFirefox\u4e0a\u7684\u5de5\u4f5c\u4eba\u5458\u975e\u5e38\u70ed\u8877\u4e8e\u5c1d\u8bd5\u66f4\u4f18\u96c5\u5730\u5904\u7406\u5b83\u3002\u4e00\u822c\u7684\u65b9\u6cd5\u662f\u7528\u6700\u4f73\u731c\u6d4b\u9762\u5177\u548c\u4e0d\u540c\u7684\u989c\u8272\u591a\u6b21\u753b\u8fde\u5b57\uff0c\u6548\u679c\u51fa\u4eba\u610f\u6599\u5730\u597d\uff01\n\u5c1d\u8bd5\u652f\u6301\u8fd9\u4e9b\u201c\u90e8\u5206\u8fde\u5b57\u201d\u6709\u4e00\u4e9b\u597d\u5904\uff1a\u53ea\u6709\u6574\u5f62\u624d\u80fd\u77e5\u9053\u662f\u5426\u4f1a\u53d1\u751f\u8fde\u5b57\uff0c\u800c\u4e14\u5b83\u53ef\u4ee5\u53d6\u51b3\u4e8e\u7cfb\u7edf\u7279\u5b9a\u7684\u5b57\u4f53\uff0c\u6240\u4ee5\u8fde\u5b57\u53ef\u80fd\u4f1a\u51fa\u73b0\u5728\u6ca1\u6709\u4eba\u9884\u6599\u5230\u7684\u5730\u65b9\uff01\u8fd9\u91cc\u7684\u7ecf\u5178\u82f1\u6587\u793a\u4f8b\u662f\u7528\u6237\u5b89\u88c5\u7684\u5b57\u4f53\u8de8\u8d8a\u8d85\u94fe\u63a5\u8fb9\u754c\u7684\u00e6\u8fde\u5b57\u3002\n\u8fd8\u6709\u4e00\u70b9\u5f88\u7cdf\u7cd5\uff0c\u82f1\u8bed\u53ef\u4ee5\u6539\u53d8\u4e2d\u95f4\u8bcd\u7684\u98ce\u683c\uff0c\u4f46\u8349\u4e66\u5374\u4e0d\u80fd\uff1f\n\u5982\u679c\u6309\u7167\u672c\u673a\u7cfb\u7edf\u7684\u65b9\u5f0f\u7ed8\u5236\u8868\u60c5\u7b26\u53f7\uff0c\u5219\u9700\u8981\u4e0d\u5c0a\u91cd\u6587\u672c\u7684\u989c\u8272\u8bbe\u7f6e\uff08\u900f\u660e\u5ea6\u9664\u5916\uff09\uff1a\n\u4f60\u597d\u2764\ufe0f \ud83d\ude3a \ud83c\udf89 \u2122\ufe0f \ud83e\udd76 \ud83d\ude21 \ud83d\ude08 \ud83e\udd1f \ud83e\udd1f\ud83c\udffb \ud83e\udd1f\ud83c\udfff \u90a3\u91cc\uff08\u9ed1\u8272\uff09\n\u4f60\u597d\u2764\ufe0f \ud83d\ude3a \ud83c\udf89 \u2122\ufe0f \ud83e\udd76 \ud83d\ude21 \ud83d\ude08 \ud83e\udd1f \ud83e\udd1f\ud83c\udffb \ud83e\udd1f\ud83c\udfff \u90a3\u91cc\uff08\u7ea2\u8272\uff09\n\u4f60\u597d\u2764\ufe0f \ud83d\ude3a \ud83c\udf89 \u2122\ufe0f \ud83e\udd76 \ud83d\ude21 \ud83d\ude08 \ud83e\udd1f \ud83e\udd1f\ud83c\udffb \ud83e\udd1f\ud83c\udfff \u90a3\u91cc\uff08\u900f\u660e\uff09\n\u4f60\u597d\u2764\ufe0f \ud83d\ude3a \ud83c\udf89 \u2122\ufe0f \ud83e\udd76 \ud83d\ude21 \ud83d\ude08 \ud83e\udd1f \ud83e\udd1f\ud83c\udffb \ud83e\udd1f\ud83c\udfff \u90a3\u91cc\uff08\u7c97\u4f53\uff09\n\u4f60\u597d\u2764\ufe0f \ud83d\ude3a \ud83c\udf89 \u2122\ufe0f \ud83e\udd76 \ud83d\ude21 \ud83d\ude08 \ud83e\udd1f \ud83e\udd1f\ud83c\udffb \ud83e\udd1f\ud83c\udfff \u6709\uff08\u659c\u4f53\uff09\n\u8868\u60c5\u7b26\u53f7\u901a\u5e38\u6709\u81ea\u5df1\u7684\u672c\u8272\uff0c\u8fd9\u79cd\u989c\u8272\u751a\u81f3\u53ef\u4ee5\u6709\u8bed\u4e49\u610f\u4e49\uff0c\u5c31\u50cf\u80a4\u8272\u4fee\u9970\u8bed\u4e00\u6837\u3002\u66f4\u9ebb\u70e6\u7684\u662f\uff1a\u5b83\u4eec\u6709\u591a\u79cd\u989c\u8272\uff01\n\u636e\u6211\u6240\u77e5\uff0c\u8fd9\u5728\u8868\u60c5\u7b26\u53f7\u51fa\u73b0\u4e4b\u524d\u5e76\u4e0d\u662f\u4e00\u4ef6\u771f\u6b63\u7684\u4e8b\u60c5\uff0c\u6240\u4ee5\u4e0d\u540c\u7684\u5e73\u53f0\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5904\u7406\u8fd9\u4ef6\u4e8b\u3002\u4e00\u4e9b\u4eba\u5c06\u8868\u60c5\u7b26\u53f7\u4f5c\u4e3a\u4e00\u4e2a\u76f4\u63a5\u7684\u56fe\u50cf\u63d0\u4f9b\uff08\u82f9\u679c\uff09\uff0c\u53e6\u4e00\u4e9b\u4eba\u5c06\u8868\u60c5\u7b26\u53f7\u4f5c\u4e3a\u4e00\u7cfb\u5217\u5355\u8272\u56fe\u5c42\u63d0\u4f9b\uff08\u5fae\u8f6f\uff09\u3002\n\u540e\u4e00\u79cd\u65b9\u6cd5\u6709\u70b9\u4e0d\u9519\uff0c\u56e0\u4e3a\u5b83\u901a\u8fc7\u201c\u4ec5\u4ec5\u201d\u5c06\u4e00\u4e2aglyph\u53bb\u7cd6\u5316\u4e3a\u4e00\u7cfb\u5217\u5355\u8272glyph\uff0c\u4e0e\u73b0\u6709\u7684\u6587\u672c\u6e32\u67d3\u7ba1\u9053\u5f88\u597d\u5730\u96c6\u6210\uff0c\u6bcf\u4e2a\u4eba\u90fd\u4e60\u60ef\u4e8e\u4f7f\u7528\u8fd9\u4e9bglyph\u3002\n\u7136\u800c\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u7684\u6837\u5f0f\u53ef\u4ee5\u5728\u7ed8\u5236\u201c\u5355\u4e2a\u201d\u5b57\u5f62\u65f6\u53cd\u590d\u66f4\u6539\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u4e00\u4e2a\u201c\u5355\u4e00\u201d\u5b57\u5f62\u53ef\u80fd\u4f1a\u91cd\u53e0\uff0c\u4ece\u800c\u5bfc\u81f4\u524d\u9762\u4e00\u8282\u4e2d\u8ba8\u8bba\u7684\u900f\u660e\u5ea6\u95ee\u9898\u3002\u7136\u800c\uff0c\u5982\u4e0a\u6240\u793a\uff0c\u6d4f\u89c8\u5668\u786e\u5b9e\u6b63\u786e\u5730\u5408\u6210\u4e86\u8868\u60c5\u7b26\u53f7\u7684\u900f\u660e\u5ea6\uff01\n\u60a8\u5df2\u7ecf\u9700\u8981\u68c0\u6d4b\u989c\u8272\u56fe\u793a\u7b26\u5e76\u5bf9\u5176\u8fdb\u884c\u7279\u6b8a\u5904\u7406\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u4e3a\u5b83\u4eec\u91c7\u7528\u7279\u6b8a\u7684\u5408\u6210\u8def\u5f84\n\u8349\u4e66\u6709\u70b9\u96be\u770b\uff0c\u900f\u660e\u5ea6\u4e0d\u597d\uff0c\u4f46\u8868\u60c5\u7b26\u53f7\u5f88\u53ef\u6015/\u80e1\u8a00\u4e71\u8bed\uff0c\u6240\u4ee5\u989d\u5916\u7684\u5de5\u4f5c\u662f\u5408\u7406\u7684\n\u54e6\uff0c\u8fd8\u6709\uff0c\u5c06\u8868\u60c5\u7b26\u53f7\u659c\u4f53\u5316\u6216\u52a0\u7c97\u662f\u4ec0\u4e48\u610f\u601d\uff1f\u4f60\u5e94\u8be5\u5ffd\u7565\u8fd9\u4e9b\u98ce\u683c\u5417\uff1f\u4f60\u5e94\u8be5\u5408\u6210\u5b83\u4eec\u5417\uff1f\u8c01\u77e5\u9053\u5462\u3002\ud83e\udd37\u200d\u2640\ufe0f\n\u662f\u7684\uff0c\u4e0d\u7ba1\u51fa\u4e8e\u4ec0\u4e48\u539f\u56e0\uff0c\u5f88\u591a\u7cfb\u7edf\u90fd\u4f1a\u79d8\u5bc6\u5730\u589e\u52a0\u8868\u60c5\u7b26\u53f7\u7684\u5b57\u4f53\u5927\u5c0f\uff0c\u8ba9\u5b83\u4eec\u770b\u8d77\u6765\u66f4\u597d\u3002\n\u6587\u672c\u975e\u5e38\u5c0f\uff0c\u975e\u5e38\u8be6\u7ec6\uff0c\u800c\u4e14\u975e\u5e38\u91cd\u8981\u7684\u662f\u5b83\u5f88\u5bb9\u6613\u9605\u8bfb\u3002\u542c\u8d77\u6765\u50cf\u662f\u53cd\u8d70\u6837\uff08AA\uff09\u7684\u5de5\u4f5c\uff01\u54e6\uff0c480p\u771f\u7684\u662f\u4f4e\u5206\u8fa8\u7387\uff0c\u55ef\u3002\u66f4\u591aAA\uff01\uff01\uff01\n\u7070\u5ea6AA\u662f\u6d88\u9664\u6df7\u53e0\u7684\u201c\u81ea\u7136\u201d\u65b9\u6cd5\u3002\u5176\u57fa\u672c\u601d\u60f3\u662f\u4e3a\u90e8\u5206\u8986\u76d6\u7684\u50cf\u7d20\u63d0\u4f9b\u90e8\u5206\u900f\u660e\u5ea6\u3002\u5728\u6784\u56fe\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u5c06\u5bfc\u81f4\u50cf\u7d20\u7a0d\u5fae\u7740\u8272\uff0c\u5c31\u50cf\u5b83\u88ab\u7a0d\u5fae\u8986\u76d6\u4e00\u6837\uff0c\u4ece\u800c\u521b\u5efa\u66f4\u6e05\u6670\u7684\u7ec6\u8282\u3002\n\u5b83\u662f\u7070\u5ea6\u7684\uff0c\u56e0\u4e3a\u8fd9\u662f\u7528\u4e8e\u4e00\u7ef4\u989c\u8272\u7684\u672f\u8bed\uff0c\u5c31\u50cf\u6211\u4eec\u7684\u4e00\u7ef4\u900f\u660e\u5ea6\uff08\u5426\u5219\u5b57\u5f62\u5f80\u5f80\u662f\u5355\u4e00\u7684\u7eaf\u8272\uff09\u3002\u540c\u6837\uff0c\u5728\u767d\u8272\u80cc\u666f\u4e0a\u7684\u9ed1\u8272\u6587\u672c\u7684\u5e38\u89c1\u60c5\u51b5\u4e0b\uff0c\u6297\u952f\u9f7f\u4f1a\u5728\u8fb9\u7f18\u5468\u56f4\u663e\u793a\u4e3a\u7070\u8272\u3002\n\u4e9a\u50cf\u7d20AA\u662f\u4e00\u79cd\u6ee5\u7528\u684c\u9762\u663e\u793a\u5668\u4e0a\u50cf\u7d20\u5e03\u5c40\u7684\u5e38\u89c1\u65b9\u5f0f\u7684\u628a\u620f\u3002\u5b83\u6bd4\u8fd9\u66f4\u590d\u6742\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u771f\u7684\u611f\u5174\u8da3\uff0c\u4f60\u5e94\u8be5\u67e5\u4e00\u4e0b\uff0c\u4f46\u8fd9\u91cc\u6709\u4e00\u4e2aTL\uff1b\u9ad8\u5c42\u6982\u5ff5\u7684DR\uff1a\n\u4f60\u7684\u663e\u793a\u5668\u7684\u50cf\u7d20\u5b9e\u9645\u4e0a\u662f\u4e09\u5c0f\u5217\u7ea2\u3001\u7eff\u3001\u84dd\u3002\u5982\u679c\u4f60\u628a\u4e00\u4e2a\u50cf\u7d20\u53d8\u6210\u7ea2\u8272\uff0c\u4f60\u4e5f\u4f1a\u628a\u5b83\u53d8\u6210\u201c\u9ed1\u767d\u201d\u3002\u540c\u6837\u5730\uff0c\u5982\u679c\u4f60\u628a\u5b83\u53d8\u6210\u84dd\u8272\uff0c\u4f60\u5c31\u53d8\u6210\u4e86\u201c\u9ed1\u767d\u201d\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u901a\u8fc7\u6df7\u6dc6\u989c\u8272\uff0c\u4f60\u53ef\u4ee5\u5c06\u6c34\u5e73\u5206\u8fa8\u7387\u63d0\u9ad8\u4e09\u500d\uff0c\u83b7\u5f97\u66f4\u591a\u7ec6\u8282\uff01\n\u4f60\u53ef\u80fd\u4f1a\u8ba4\u4e3a\u8fd9\u770b\u8d77\u6765\u975e\u5e38\u6df7\u4e71\uff0c\u50cf\u5f69\u8679\u4e00\u6837\uff0c\u4f46\u5b9e\u9645\u4e0a\u6548\u679c\u975e\u5e38\u597d\uff08\u6709\u4e9b\u4eba\u4e0d\u540c\u610f\uff09\u3002\u4eba\u7c7b\u7684\u5927\u8111\u559c\u6b22\u770b\u5230\u6a21\u5f0f\u5e76\u4f7f\u4e8b\u60c5\u53d8\u5f97\u5e73\u6ed1\u3002\u8fd9\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4f60\u62cd\u6444\u4e00\u5f20\u4e9a\u50cf\u7d20AA\u6587\u672c\u7684\u5c4f\u5e55\u622a\u56fe\uff0c\u5982\u679c\u4f60\u8c03\u6574\u56fe\u50cf\u5927\u5c0f\uff0c\u6216\u8005\u751a\u81f3\u5728\u4e0d\u540c\u4e9a\u50cf\u7d20\u5e03\u5c40\u7684\u663e\u793a\u5668\u4e0a\u89c2\u770b\uff0c\u4f60\u7edd\u5bf9\u80fd\u591f\u770b\u5230\u989c\u8272\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6587\u672c\u622a\u56fe\u770b\u8d77\u6765\u975e\u5e38\u5947\u602a\u548c\u7cdf\u7cd5\u7684\u539f\u56e0\u3002\n\uff08\u603b\u7684\u6765\u8bf4\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u56fe\u6807\u7684\u989c\u8272\u53ef\u80fd\u4f1a\u610f\u5916\u5730\u6539\u53d8\u5176\u611f\u77e5\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\uff0c\u8fd9\u771f\u7684\u5f88\u70e6\u4eba\u3002\uff09\n\u6240\u4ee5\u4e9a\u50cf\u7d20AA\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u9ed1\u5ba2\uff0c\u53ef\u4ee5\u663e\u8457\u63d0\u9ad8\u6587\u672c\u7684\u6613\u8bfb\u6027\uff0c\u592a\u68d2\u4e86\uff01\u4f46\u662f\uff0c\u53ef\u60b2\u7684\u662f\uff0c\u8fd9\u4e5f\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u9888\u90e8\u75bc\u75db\uff01\n\u8bf7\u6ce8\u610f\uff0c\u65e0\u8bba\u4f7f\u7528\u54ea\u79cdAA\u7cfb\u7edf\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e9a\u50cf\u7d20\u8f6e\u5ed3\u504f\u79fb\u3002\u5c3d\u7ba1\u60a8\u603b\u662f\u5e0c\u671b\u5149\u6805\u5316\u7684\u56fe\u793a\u7b26\u6355\u6349\u5230\u5b8c\u6574\u50cf\u7d20\uff0c\u4f46\u5149\u6805\u5316\u672c\u8eab\u9002\u7528\u4e8e\u7279\u5b9a\u7684\u5b50\u50cf\u7d20\u504f\u79fb\uff080\u52301\u4e4b\u95f4\u7684\u503c\uff09\u3002\n\u5982\u679c\u5b83\u7684\u4e9a\u50cf\u7d20\u504f\u79fb\u4e3a0.5\uff0c\u90a3\u4e48\u5b83\u7684\u5149\u6805\u5316\u5c06\u662f\u4e24\u4e2a50%\u7684\u7070\u8272\u50cf\u7d20\n\u6805\u683c\u5316\u56fe\u793a\u7b26\u7684\u6210\u672c\u60ca\u4eba\u5730\u9ad8\uff0c\u6240\u4ee5\u60a8\u771f\u7684\u5e0c\u671b\u5c06\u5176\u7f13\u5b58\u5728atlas\u4e2d\u3002\u4f46\u5728\u4f7f\u7528\u4e9a\u50cf\u7d20\u504f\u79fb\u65f6\uff0c\u5982\u4f55\u7f13\u5b58\u8f6e\u5ed3\u5149\u6805\u5316\uff1f\u6bcf\u4e2a\u504f\u79fb\u91cf\u90fd\u6709\u81ea\u5df1\u72ec\u7279\u7684\u5149\u6805\u5316\uff0c\u6240\u4ee5\u4f60\u4e0d\u592a\u53ef\u80fd\u5f97\u5230\u8fd9\u6837\u7684\u7f13\u5b58\u547d\u4e2d\u7387\uff01\n\u8d28\u91cf\u548c\u6027\u80fd\u5fc5\u987b\u5e73\u8861\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u6355\u6349\u4e9a\u50cf\u7d20\u504f\u79fb\u6765\u5b9e\u73b0\u3002\u5bf9\u4e8e\u82f1\u6587\u6587\u672c\uff0c\u4e00\u4e2a\u5408\u7406\u7684\u5e73\u8861\u662f\u5728\u5c06\u6c34\u5e73\u5b50\u50cf\u7d20\u504f\u79fb\u6355\u6349\u4e3a\u56db\u5206\u4e4b\u4e00\u6574\u6570\u65f6\u6ca1\u6709\u5782\u76f4\u5b50\u50cf\u7d20\u7cbe\u5ea6\u3002\u8fd9\u53ea\u5269\u4e0b4\u4e2a\u4e9a\u50cf\u7d20\u4f4d\u7f6e\uff0c\u8fd9\u4ecd\u7136\u662f\u8d28\u91cf\u4e0a\u7684\u4e00\u5927\u6539\u8fdb\uff0c\u540c\u65f6\u5141\u8bb8\u5408\u7406\u7684\u7f13\u5b58\u91cf\u3002\ngreyscale AA\u7684\u4e00\u4e2a\u4f18\u70b9\u662f\uff0c\u4f60\u53ef\u4ee5\u73a9\u5f97\u5feb\u4e00\u70b9\uff0c\u653e\u677e\u4e00\u70b9\uff0c\u5b83\u4f1a\u4f18\u96c5\u5730\u9000\u5316\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5728\u7eb9\u7406\u4e0a\u53d8\u6362\u6587\u672c\uff08\u7f29\u653e\u3001\u65cb\u8f6c\u6216\u5e73\u79fb\uff09\uff0c\u5b83\u53ef\u80fd\u770b\u8d77\u6765\u6709\u70b9\u6a21\u7cca\uff0c\u4f46\u57fa\u672c\u4e0a\u770b\u8d77\u6765\u5f88\u597d\u3002\n\u5982\u679c\u4f60\u7528\u4e9a\u50cf\u7d20AA\u505a\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u5b83\u770b\u8d77\u6765\u4f1a\u5f88\u7cdf\u7cd5\u3002\u4e9a\u50cf\u7d20AA\u80cc\u540e\u7684\u6574\u4e2a\u60f3\u6cd5\u662f\uff0c\u4f60\u5728\u6ee5\u7528\u663e\u793a\u5668\u4e2d\u50cf\u7d20\u7684\u5e03\u5c40\u65b9\u5f0f\u3002\u5982\u679c\u663e\u793a\u7684\u50cf\u7d20\u4e0e\u7eb9\u7406\u7684\u50cf\u7d20\u4e0d\u4e00\u81f4\uff0c\u5219\u7ea2\u8272\u548c\u84dd\u8272\u8fb9\u7f18\u5c06\u6e05\u6670\u53ef\u89c1\uff01\n\u6709\u4eba\u53ef\u80fd\u4f1a\u8ba4\u4e3a\uff0c\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u201c\u529e\u6cd5\u201d\u662f\u5728\u65b0\u4f4d\u7f6e\u91cd\u65b0\u6807\u8bb0\u7b26\u53f7\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u8f6c\u6362\u662f\u9759\u6001\u7684\uff0c\u8fd9\u662f\u53ef\u884c\u7684\u3002\u4f46\u5982\u679c\u53d8\u6362\u662f\u4e00\u4e2a\u52a8\u753b\uff0c\u8fd9\u5b9e\u9645\u4e0a\u770b\u8d77\u6765\u4f1a\u66f4\u7cdf\u3002\u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u975e\u5e38\u5e38\u89c1\u7684\u6d4f\u89c8\u5668\u9519\u8bef\uff1a\u5982\u679c\u6211\u4eec\u65e0\u6cd5\u68c0\u6d4b\u5230\u67d0\u4e2a\u6587\u672c\u6b63\u5728\u53d1\u751f\u52a8\u753b\uff0c\u5f53\u6bcf\u4e2a\u5b57\u5f62\u5728\u4e0d\u540c\u7684\u5b50\u50cf\u7d20\u6355\u6349\u548c\u6bcf\u5e27\u63d0\u793a\u4e4b\u95f4\u6765\u56de\u8df3\u8dc3\u65f6\uff0c\u89d2\u8272\u5c06\u6296\u52a8\u3002\n\u56e0\u6b64\uff0c\u6d4f\u89c8\u5668\u5305\u542b\u4e86\u51e0\u79cd\u8bd5\u63a2\u6cd5\u6765\u68c0\u6d4b\u53ef\u80fd\u662f\u52a8\u753b\u7684\u4e1c\u897f\uff0c\u4ee5\u4fbf\u5b83\u4eec\u53ef\u4ee5\u5f3a\u5236\u7981\u7528\u9875\u9762\u8be5\u90e8\u5206\u7684\u4e9a\u50cf\u7d20AA\uff08\u7406\u60f3\u60c5\u51b5\u4e0b\u751a\u81f3\u4e9a\u50cf\u7d20\u5b9a\u4f4d\uff09\u3002\u8fd9\u53ef\u80fd\u5f88\u96be\u505a\u5230\u53ef\u9760\uff0c\u56e0\u4e3a\u4efb\u610f\u590d\u6742\u7684JS\u53ef\u4ee5\u9a71\u52a8\u52a8\u753b\uff0c\u800c\u4e0d\u7ed9\u6d4f\u89c8\u5668\u4efb\u4f55\u6e05\u6670\u7684\u201c\u63d0\u793a\u201d\u3002\n\u6b64\u5916\uff0c\u5982\u679c\u6d89\u53ca\u90e8\u5206\u900f\u660e\u5ea6\uff0c\u4e9a\u50cf\u7d20AA\u4e5f\u6709\u95ee\u9898\u3002\u57fa\u672c\u4e0a\uff0c\u6211\u4eec\u6b63\u5728\u8c03\u6574R\u3001G\u548cB\u901a\u9053\uff0c\u4ee5\u7f16\u78013\u4e2a\u900f\u660e\u5ea6\u503c\uff08\u6bcf\u4e2a\u5b50\u50cf\u7d20\u4e00\u4e2a\uff09\uff0c\u4f46\u6587\u672c\u672c\u8eab\u4e5f\u6709\u4e00\u79cd\u989c\u8272\uff0c\u5e76\u4e14\u6587\u672c\u4e0a\u7684\u5185\u5bb9\u4f1a\u6539\u53d8\uff0c\u56e0\u6b64\u4fe1\u606f\u5f88\u5bb9\u6613\u4e22\u5931\u3002\n\u5f53\u4f7f\u7528greyscale AA\u65f6\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u4e13\u7528\u7684alpha\u901a\u9053\uff0c\u56e0\u6b64\u4e0d\u4f1a\u4e22\u5931\u4efb\u4f55\u4e1c\u897f\u3002\u56e0\u6b64\uff0c\u5f53\u6d89\u53ca\u900f\u660e\u5ea6\u65f6\uff0c\u6d4f\u89c8\u5668\u503e\u5411\u4e8e\u4f7f\u7528\u7070\u5ea6AA\u3002\n\u9664\u4e86Firefox\u3002\u518d\u4e00\u6b21\uff0c\u8fd9\u662f\u4e00\u4e2a\u5947\u602a\u7684\u5730\u65b9\uff0c\u6709\u4eba\u5728Firefox\u4e0a\u5de5\u4f5c\u975e\u5e38\u70ed\u60c5\uff0c\u505a\u4e86\u4e00\u4e9b\u590d\u6742\u7684\u4e8b\u60c5\uff1a\u7ec4\u4ef6Alpha\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u4f60\u5b9e\u9645\u4e0a\u53ef\u4ee5\u6b63\u786e\u5730\u5408\u6210\u4e9a\u50cf\u7d20AA\u6587\u672c\uff0c\u4f46\u5b83\u5b9e\u9645\u4e0a\u9700\u8981\u67093\u4e2a\u989d\u5916\u7684\u901a\u9053\uff0c\u4e13\u95e8\u7528\u4e8eR\u3001G\u548cB\u901a\u9053\u7684\u900f\u660e\u5ea6\u3002\u4e0d\u51fa\u6240\u6599\uff0c\u8fd9\u4f1a\u4f7f\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5408\u6210\u7684\u6587\u672c\u7684\u5185\u5b58\u5360\u7528\u589e\u52a0\u4e00\u500d\u3002\n\u5728\u8f83\u65b0\u7248\u672c\u7684macos\u4e0a\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5728\u64cd\u4f5c\u7cfb\u7edf\u7ea7\u522b\u7981\u7528\u6587\u672c\u7684\u5b50\u50cf\u7d20aa\nChrome\u4f3c\u4e4e\u66f4\u79ef\u6781\u5730\u7981\u7528\u4e86\u4e9a\u50cf\u7d20aa\uff08\u4e0d\u786e\u5b9a\u5177\u4f53\u7684\u7b56\u7565\u662f\u4ec0\u4e48\uff09\nFirefox\u7684\u65b0\u56fe\u5f62\u540e\u7aef\uff08webrender\uff09\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\u653e\u5f03\u4e86Alpha\u7ec4\u4ef6\n\u8fd9\u90e8\u5206\u53ea\u662f\u4e00\u4e9b\u4e0d\u9700\u8981\u592a\u591a\u8ba8\u8bba\u7684\u5c0f\u4e1c\u897f\u3002\n\u5929\u5450\uff0c\u8fd9\u592a\u68d2\u4e86\u3002\u8fd9\u4e9b\u5b57\u4f53\u4e3b\u8981\u7531Adobe\u63d0\u4f9b\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u4e45\u524d\u5c31\u771f\u6b63\u8fdb\u5165\u4e86SVG\u3002\u6709\u65f6\u5019\u4f60\u53ef\u4ee5\u5ffd\u7565SVG\u90e8\u5206\uff08\u6211\u76f8\u4fe1\u6e90\u4ee3\u7801Pro\u5b57\u4f53\u5728\u6280\u672f\u4e0a\u5305\u542b\u4e00\u4e9bSVG\u5b57\u5f62\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b83\u4eec\u5e76\u6ca1\u6709\u88ab\u7f51\u7ad9\u4f7f\u7528\uff09\uff0c\u4f46\u901a\u5e38\u4f60\u9700\u8981\u5b9e\u73b0SVG\u652f\u6301\u6765\u7ed8\u5236\u6240\u6709\u5b57\u4f53\u3002\n\u4f60\u542c\u8bf4\u8fc7SVG\u52a8\u753b\u5b57\u4f53\u5417\uff1f\u4e0d\u597d\u7684\u6211\u8ba4\u4e3a\u4ed6\u4eec\u73b0\u5728\u5230\u5904\u90fd\u5931\u8d25\u4e86\u3002\uff08\u7531\u4e8e\u4e00\u4e9b\u70ed\u5fc3\u7684\u5f00\u53d1\u8005\uff0cFirefox\u968f\u673a\u652f\u6301\u4e86\u5b83\u4e00\u6bb5\u65f6\u95f4\u3002\uff09\n\u5982\u679c\u4f60\u5929\u771f\u5730\u5c0a\u91cd\u7528\u6237\u5bf9\u8d85\u5927\u5b57\u4f53\uff08\u6216\u8d85\u5927\u7f29\u653e\u7ea7\u522b\uff09\u7684\u8981\u6c42\uff0c\u4f60\u4f1a\u5728\u5b57\u5f62\u56fe\u8c31\u7684\u5927\u5c0f\u4e0a\u9047\u5230\u6781\u7aef\u7684\u5185\u5b58\u7ba1\u7406\u95ee\u9898\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u5b57\u7b26\u90fd\u53ef\u80fd\u6bd4\u6574\u4e2a\u5c4f\u5e55\u5927\u3002\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1a\n\u5728\u6784\u56fe\u8fc7\u7a0b\u4e2d\u4ee5\u8f83\u5c0f\u7684\u5c3a\u5bf8\u548c\u8f83\u9ad8\u7684\u6bd4\u4f8b\u6805\u683c\u5316\u8f6e\u5ed3\uff08\u7b80\u5355\uff0c\u4ea7\u751f\u6a21\u7cca\u7684\u8fb9\u7f18\uff09\n\u4eba\u4eec\u901a\u5e38\u77e5\u9053\u6587\u672c\u7684\u4e3b\u8981\u65b9\u5411\u53ef\u4ee5\u662f\u4ece\u5de6\u5230\u53f3\uff08\u82f1\u8bed\uff09\u3001\u4ece\u53f3\u5230\u5de6\uff08\u963f\u62c9\u4f2f\u8bed\uff09\u6216\u4ece\u4e0a\u5230\u4e0b\uff08\u65e5\u8bed\uff09\u3002\n\u5728\u684c\u9762\u4e0a\uff0c\u5982\u679c\u5c06\u9f20\u6807\u62d6\u52a8\u5230\u8be5\u6587\u672c\u4e0a\u4ee5\u9009\u62e9\u5b83\uff0c\u60a8\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\u8be5\u9009\u62e9\u5728\u4e2d\u95f4\u53d8\u5f97\u4e0d\u8fde\u7eed\u548c\u8df3\u8dc3\u3002\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u5728\u540c\u4e00\u884c\u4e2d\u6df7\u5408\u4e86\u4ece\u5de6\u5230\u53f3\u548c\u4ece\u53f3\u5230\u5de6\u7684\u6587\u672c\uff0c\u8fd9\u7edd\u5bf9\u662f\u7ecf\u5e38\u53d1\u751f\u7684\u3002\n\u8d77\u521d\uff0c\u5411\u53f3\u62d6\u52a8\u4f1a\u589e\u52a0\u9009\u62e9\uff0c\u4f46\u968f\u540e\u4f1a\u51cf\u5c11\u9009\u62e9\uff0c\u76f4\u5230\u5b83\u7a81\u7136\u5f00\u59cb\u518d\u6b21\u589e\u52a0\u3002\u8fd9\u5b9e\u9645\u4e0a\u662f\u5b8c\u5168\u6b63\u786e\u548c\u53ef\u53d6\u7684\uff1a\u9009\u62e9\u53ea\u662f\u5728\u5b9e\u9645\u7684\u5e95\u5c42\u5b57\u7b26\u4e32\u4e2d\u4fdd\u6301\u8fde\u7eed\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u60a8\u53ef\u4ee5\u6b63\u786e\u590d\u5236\u8de8\u8d8a\u8f6c\u6362\u7684\u6587\u672c\u7247\u6bb5\u3002\n\u56e0\u6b64\uff0c\u60a8\u9700\u8981\u5728\u9009\u62e9\u4ee3\u7801\u7684\u547d\u4e2d\u68c0\u6d4b\u4e2d\u5904\u7406\u8fd9\u4e00\u70b9\u3002\u5728\u5e03\u5c40\u8fc7\u7a0b\u4e2d\uff0c\u4f60\u8fd8\u9700\u8981\u5728\u6362\u884c\u7b97\u6cd5\u4e2d\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u3002\n\u4ec0\u4e48\uff1f\u54e6\uff0c\u4e0d\u4f60\u597d 1234\u4f60\u597d\n\u5f53\u5b57\u4f53\u4e2d\u7f3a\u5c11\u5b57\u7b26\u65f6\uff0c\u80fd\u591f\u5411\u7528\u6237\u4f20\u8fbe\u8fd9\u4e00\u60c5\u51b5\u662f\u5f88\u597d\u7684\u3002\u8fd9\u662f\u201c\u8c46\u8150\u201d\u5b57\u5f62\u3002\u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u53ea\u753b\u4e00\u4e2a\u7a7a\u767d\u7684\u8c46\u8150\uff08\u4e00\u4e2a\u77e9\u5f62\uff09\u5e76\u4fdd\u7559\u5b83\uff0c\u4f46\u662f\u5982\u679c\u4f60\u60f3\u6709\u6240\u5e2e\u52a9\uff0c\u4f60\u53ef\u4ee5\u5199\u51fa\u7f3a\u5c11\u7684\u5b57\u7b26\u7684\u503c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u66f4\u5bb9\u6613\u5730\u8c03\u8bd5\u5b83\u3002\n\u4f46\u662f\uff0c\u7b49\u7b49\uff0c\u6211\u4eec\u7528\u6587\u5b57\u6765\u89e3\u91ca\u6211\u4eec\u4e0d\u80fd\u753b\u6587\u5b57\uff1f\u9690\u9a6c\u5c14\u53ef\u592b\u6a21\u578b\u3002\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u7cfb\u7edf\u5fc5\u987b\u6709\u4e00\u4e2a\u57fa\u672c\u7684\u5b57\u4f53\uff0c\u53ef\u4ee5\u753b0-9\u548ca-F\uff0c\u4f46\u662f\u5bf9\u4e8e\u90a3\u4e9b\u5e0c\u671b\u7528\u5de5\u5177\u771f\u6b63\u7834\u574f\u5de5\u5177\u7684\u4eba\u6765\u8bf4\uff0c\u4f60\u53ef\u4ee5\u505aFirefox\u505a\u7684\u4e8b\u60c5\uff1amicrofont\uff01\nFirefox\u5185\u90e8\u6709\u4e00\u4e2a\u5c0f\u7684\u786c\u7f16\u7801\u6570\u7ec4\uff0c\u63cf\u8ff0\u4e86\u4e00\u4e2a\u5c0f\u5b57\u4f53\u56fe\u96c6\u7684\u4e00\u4f4d\u50cf\u7d20\u827a\u672f\uff0c\u6b63\u597d\u5bf9\u5e94\u8fd916\u4e2a\u5b57\u7b26\u3002\u6240\u4ee5\u5728\u753b\u8c46\u8150\u7684\u65f6\u5019\uff0c\u5b83\u53ef\u4ee5\u5feb\u901f\u5730\u753b\u51fa\u90a3\u4e9b\u5b57\u5f62\uff0c\u800c\u4e0d\u7528\u62c5\u5fc3\u5b57\u4f53\u3002\n\u5bf9\u4e8e\u9ad8\u8d28\u91cf\u7684\u5b57\u4f53\uff0c\u50cf\u659c\u4f53\u548c\u7c97\u4f53\u8fd9\u6837\u7684\u6837\u5f0f\u662f\u672c\u673a\u63d0\u4f9b\u7684\uff0c\u56e0\u4e3a\u6ca1\u6709\u7b80\u5355\u7684\u7b97\u6cd5\u53ef\u4ee5\u5f88\u597d\u5730\u5b9e\u73b0\u8fd9\u4e9b\u6548\u679c\u3002\n\u9664\u4e86\u4e00\u4e9b\u5b57\u4f53\u4e0d\u63d0\u4f9b\u8fd9\u4e9b\u6837\u5f0f\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u4e00\u4e2a\u7b80\u5355\u7684\u7b97\u6cd5\u6765\u5b9e\u73b0\u8fd9\u4e9b\u6548\u679c\u3002\n\u51c6\u786e\u5730\u8bf4\uff0c\u4f60\u662f\u5982\u4f55\u68c0\u6d4b\u548c\u5904\u7406\u8fd9\u4e00\u5207\u7684\uff0c\u8fd9\u662f\u975e\u5e38\u5177\u4f53\u7684\u7cfb\u7edf\uff0c\u975e\u5e38\u590d\u6742\uff0c\u8d85\u51fa\u4e86\u6211\u7684\u4e13\u4e1a\u9886\u57df\uff0c\u6240\u4ee5\u6211\u4e0d\u80fd\u5f88\u597d\u5730\u89e3\u91ca\u5b83\u3002\u6211\u53ea\u662f\u5728\u6d4f\u89c8Webrender\u7684\u5b57\u4f53\u4ee3\u7801\u3002\n\u4e0d\u7ba1\u600e\u6837\uff0c\u4e0d\u7ba1\u4f60\u505a\u4ec0\u4e48\uff0c\u4f60\u90fd\u9700\u8981\u4e00\u4e2a\u7efc\u5408\u7684\u9000\u8def\u3002\u8c22\u5929\u8c22\u5730\uff0c\u8fd9\u4e9b\u5b9e\u73b0\u5b9e\u9645\u4e0a\u975e\u5e38\u7b80\u5355\uff1a\n\u8001\u5b9e\u8bf4\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u505a\u5f97\u76f8\u5f53\u4e0d\u9519\uff01\u4f46\u7528\u6237\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\u4e8b\u60c5\u4f3c\u4e4e\u201c\u4e0d\u5bf9\u201d\uff0c\u5982\u679c\u4f60\u6295\u5165\u5de5\u4f5c\uff0c\u4f60\u53ef\u4ee5\u505a\u5f97\u66f4\u597d\u3002\n\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684bug\u3001\u4f18\u5316\u548c\u602a\u7656\u5df2\u7ecf\u53d1\u5c55\u4e86\u8db3\u591f\u957f\u7684\u65f6\u95f4\uff0c\u6210\u4e3a\u4e86\u7f8e\u5b66\u3002\u6240\u4ee5\uff0c\u5373\u4f7f\u4f60\u575a\u4fe1\u67d0\u4e9b\u4e1c\u897f\u662f\u7406\u60f3\u7684\u6216\u91cd\u8981\u7684\uff0c\u4e5f\u603b\u4f1a\u6709\u4e00\u5927\u7fa4\u7528\u6237\u6709\u4e0d\u540c\u7684\u504f\u597d\u3002\u5065\u58ee\u7684\u6587\u672c\u5448\u73b0\u7cfb\u7edf\u652f\u6301\u8fd9\u4e9b\u4e0d\u540c\u7684\u9996\u9009\u9879\uff08\u540c\u65f6\u9009\u62e9\u5408\u7406\u7684\u9ed8\u8ba4\u503c\uff09\u3002\n\u60a8\u5e94\u8be5\u652f\u6301\u7cfb\u7edf\u914d\u7f6e\u3001\u5b57\u4f53\u7279\u5b9a\u914d\u7f6e\u3001\u5e94\u7528\u7a0b\u5e8f\u7279\u5b9a\u914d\u7f6e\u548c\u6587\u672c\u8fd0\u884c\u7279\u5b9a\u914d\u7f6e\u3002\u4f60\u4e5f\u5e94\u8be5\u8bd5\u7740\n......", "note_en": "Rendering text, how hard could it be? As it turns out, incredibly hard! To my knowledge, literally no system renders text \u201cperfectly\u201d. It\u2019s all best-effort, although some efforts are more important than others.\n I\u2019ll be assuming you want to support arbitrary text provided by users with custom fonts, colors, and styles with line-wrapping and support for text-selection. Basically the minimum required to properly display a simple rich-text document, terminal, webpage, or anything else.\n The overarching theme here will be: there are no consistent right answers, everything is way more important than you think, and everything affects everything else.\n The topics I focus on here have no particular rhyme or reason, they\u2019re just the ones that come to mind after a few years of working on rendering in Firefox. For instance, I don\u2019t spend much time talking about the challenges of text-segmentation or managing the different platform-specific text libraries, because I don\u2019t look at that much.\n  Text is complicated and english is bad at expressing these nuances. For the purpose of this document, I will try to stick to the following terms. Note that these words aren\u2019t \u201cright\u201d, I just find them useful for communicating the key concepts to native english speakers who don\u2019t have backgrounds in linguistics.\n  Scalar: A Unicode Scalar, the \u201csmallest unit\u201d unicode describes (AKA a code point).\n Character: A Unicode Extended Grapheme Cluster (EGC), the \u201cbiggest unit\u201d unicode describes (potentially composed of multiple scalars).\n Glyph: An atomic unit of rendering yielded by the font. Generally this will have a unique ID in the font.\n Ligature: A glyph that is made up of several scalars, and potentially even several characters (native speakers may or may not think of a ligature as multiple \u201ccharacters\u201d, but to the font it\u2019s just one \u201ccharacter\u201d).\n  Script: The set of glyphs that make up some language (fonts tend to implement particular scripts).\n  Color: RGB and Alpha values for fonts (alpha isn\u2019t needed for some usecases, but it\u2019s interesting).\n Style: Bold and Italics modifiers for fonts (hinting, aliasing, and other settings tend to also get crammed in here in practical implementations).\n  Just so you have an idea for how a typical text-rendering pipeline works, here\u2019s a quick sketch:\n   Most fonts don\u2019t actually provide every glyph in existence. There\u2019s too many glyphs, so fonts are usually designed to only implement a particular script. End users usually don\u2019t know or care about this, and so a robust system must  cascade into other fonts when characters aren\u2019t available.\n For instance, even though the markup of the following text doesn\u2019t  suggest the presence of multiple fonts, drawing it correctly on all systems absolutely requires it: hello \ud83d\ude3a \u092e\u0928\u0940\u0937 \u0628\u0633\u0645 \u597d. This is dangerously close to Step 1 (Styling) depending on the results of Step 3 (Shaping)!\n (Alternatively, you can take the  Noto approach and use a single Uber Font that contains every character ever. Although that means users can\u2019t configure the font, and you can\u2019t provide a \u201cnative\u201d text experience to users on all platforms. But let\u2019s assume you want the more robust solution.)\n Similarly, layout requires you to know how much space each part of your text takes up, but this is only known once you shape the text! Step 2 depends on the results of Step 3?\n Shaping absolutely depends on you knowing your layout and styling, so we seem to be stuck. What do we do?\n First off, styling gets to cheat. Although what we  really want from a font is full glyphs, styling only needs to ask about  scalars. If a font doesn\u2019t properly support a script it shouldn\u2019t claim to know anything about the scalars that make up that script. So we can easily find the \u201cbest\u201d font as follows:\n For every character (EGC) in our text, keep asking each font in our cascade if it knows about all the scalars that make up that character, and use it if it does. If we get to the end of the cascade with no providers, then we yield tofu ( \udbff\udffd, a missing glyph indicator).\n In the case of emoji, you\u2019ve probably seen the failure mode of this process before! Because some emoji are actually ligatures of several simpler emoji, a font may successfully report support for the character while only yielding the components. So \ud83e\udd26\ud83c\udfff\u200d\u2640\ufe0f may literally appear as \ud83e\udd26 \ud83c\udfff\u200d \u2640 if the font is \u201ctoo old\u201d to know about the new ligature. This can also happen if your unicode implementation is \u201ctoo old\u201d to know about a character, causing the styling system to accept a partial match in the font.\n So now we know exactly what fonts we\u2019ll use without looking at layout or shape (although shaping might change our colors, more on that in later sections). Can we untie layout and shape as well? Nope! Things like paragraph breaks give you a nice hard break on lines, but the only way to do wrapping is to iteratively do shaping!\n You have to assume that your text fits on a single line and shape it until you run out of space. At that point you can perform layout operations and figure out where to break the text and start the next line. Repeat until everything is shaped and laid out.\n  Coming from english, you might think ligatures are just fancy fluff. I mean, who  really cares if \u201c\u00e6\u201d is written as \u201cae\u201d? Well, as it turns out, some languages are basically entirely ligatures. For instance \u201c\u0921\u094d\u0921 \u0628\u0633\u0645\u201d has individual characters of \u201c\u0921\u094d \u0921 \u0628 \u0633 \u0645\u201d. If you\u2019re viewing this in a competent text-rendering system (any of the major browsers), those two strings should look  very different.\n And no: this isn\u2019t about the difference between unicode scalars and extended grapheme clusters. If you ask a unicode-robust system (such as Swift) for the extended grapheme clusters of that string, it will spit out those 5 characters!\n The shape of a character depends on its neighbours:  you cannot correctly draw text character-by-character.\n Which is to say, you must use a  shaping library. The industry standard for this is  HarfBuzz, and it\u2019s extremely hard to implement your own. Use HarfBuzz.\n  Cursive scripts frequently have their glyphs intersect to avoid seams, and that can cause you problems.\n Let\u2019s look at \u201c\u092e\u0928\u0940\u0937 \u0645\u0646\u0634\u201d again. Seems fine, eh? Let\u2019s blow it up:\n    If you\u2019re in Safari or Edge, this might still look ok! If you\u2019re in Firefox or Chrome, it looks awful, like this:\n  The problem is that Chrome and Firefox are trying to  cheat. They ate their vegetables and properly shaped the text, but once they had glyphs they still tried to draw them individually. This mostly works fine, except for when there\u2019s transparency and overlapping. Then you get darkening at the overlaps.\n A \u201ccorrect\u201d implementation will draw the text to a temporary surface  without transparency and then composite that surface into the scene  with transparency. Firefox and Chrome don\u2019t do this because it\u2019s expensive and  usually unnecessary for the major western languages. Interestingly, they  do understand the issue, because they actually bend over backwards to specially handle this for emoji (but we\u2019ll get to that later).\n  Ok this one is  mostly a curiosity in that I\u2019m not aware of any super-reasonable cases where this happens, but it naturally falls out of markups. Here\u2019s two pieces of text with the same  content but different color styling:\n \u092a\u0928\u094d\u0939  \u092a\u0928\u094d\u0939  \u0924\u094d\u0930  \u0930\u094d\u091a  \u0915\u0943\u0915 \u0943  \u0921 \u094d\u0921  \u0928 \u094d\u0939 \u0943 \u0947  \u0625\u0644 \u0627  \u0628 \u0633 \u0645  \u0627 \u0644 \u0644 \u0647\n \u092a\u0928\u094d\u0939 \u092a\u0928\u094d\u0939 \u0924\u094d\u0930 \u0930\u094d\u091a \u0915\u0943\u0915\u0943 \u0921\u094d\u0921 \u0928\u094d\u0939\u0943\u0947 \u0625\u0644\u0627 \u0628\u0633\u0645 \u0627\u0644\u0644\u0647\n     Here\u2019s what they look like in Chrome (if using its  new layout implementation):\n        I guess everyone should do what Firefox does, right? But if we zoom in, we can see that it\u2019s doing something very janky:\n   The problem is, there\u2019s really no reasonable answer for what  should happen here. We\u2019ve broken up a ligature with different stylings, and since the ligature is in some sense a rendering \u201cunit\u201d it\u2019s reasonable to simply refuse to support this (as most do).\n For whatever reason,  someone working on Firefox got really enthusiastic about trying to handle it more gracefully. The general approach is to draw the ligature multiple times with best-guess masks and different colors, which works surprisingly well!\n There is a  some merit in trying to support these \u201cpartial ligatures\u201d: only shaping can know if a ligature will happen, and it can depend on system-specific fonts, so a ligature may show up where no one expected! The classic english example here is an \u00e6 ligature from a user-installed font spanning the boundary of a hyperlink.\n Also it kinda sucks that english can ch ange  style mid-word but cursive scripts can\u2019t?\n   If you draw emoji the way the native system would, you need to disrespect the text\u2019s color settings (except for transparency):\n Hello \u2764\ufe0f \ud83d\ude3a \ud83c\udf89 \u2122\ufe0f \ud83e\udd76 \ud83d\ude21 \ud83d\ude08 \ud83e\udd1f \ud83e\udd1f\ud83c\udffb \ud83e\udd1f\ud83c\udfff There (Black)\n Hello \u2764\ufe0f \ud83d\ude3a \ud83c\udf89 \u2122\ufe0f \ud83e\udd76 \ud83d\ude21 \ud83d\ude08 \ud83e\udd1f \ud83e\udd1f\ud83c\udffb \ud83e\udd1f\ud83c\udfff There (Red)\n Hello \u2764\ufe0f \ud83d\ude3a \ud83c\udf89 \u2122\ufe0f \ud83e\udd76 \ud83d\ude21 \ud83d\ude08 \ud83e\udd1f \ud83e\udd1f\ud83c\udffb \ud83e\udd1f\ud83c\udfff There (Transparent)\n Hello \u2764\ufe0f \ud83d\ude3a \ud83c\udf89 \u2122\ufe0f \ud83e\udd76 \ud83d\ude21 \ud83d\ude08 \ud83e\udd1f \ud83e\udd1f\ud83c\udffb \ud83e\udd1f\ud83c\udfff There (Bold)\n Hello \u2764\ufe0f \ud83d\ude3a \ud83c\udf89 \u2122\ufe0f \ud83e\udd76 \ud83d\ude21 \ud83d\ude08 \ud83e\udd1f \ud83e\udd1f\ud83c\udffb \ud83e\udd1f\ud83c\udfff There (Italics)\n Emoji generally have their own native colors, and this color can even have semantic meaning, as is the case for skin-tone modifiers. More problematically: they have multiple colors!\n As far as I can tell, this wasn\u2019t really a thing before emoji, and so different platforms approach this in different ways. Some provide emoji as a straight-up image (Apple), others provide emoji as  a series of single-color  layers (Microsoft).\n The latter approach is kinda nice because it integrates well with existing text rendering pipelines by \u201cjust\u201d desugarring a glyph into a series of single-color glyphs, which everyone is used to working with.\n However that means that your style can change  repeatedly while drawing a \u201csingle\u201d glyph. It also means that a \u201csingle\u201d glyph can overlap itself, leading to the transparency issues discussed in an earlier section. And yet, as shown above, browsers  do properly composite the transparency for emoji!\n  You already need to detect color glyphs and handle them specially, so it\u2019s easy to take a special compositing path for them\n Cursive scripts are slightly ugly with bad transparency, but emoji are terrifying/gibberish, so extra work is justified\n  Oh also, what does it mean to italicize or bold an emoji? Should you ignore those styles? Should you synthesize them? Who knows. \ud83e\udd37\u200d\u2640\ufe0f\n  Yeah for whatever reason a bunch of systems secretly increase the font-size for emoji to make them look better.\n  Text is really small and detailed, and it\u2019s really important that it\u2019s easily legible. Sounds like a job for anti-aliasing (AA)! Oh, 480p really is low resolution huh. More AA!!!\n    Greyscale-AA is the \u201cnatural\u201d approach to anti-aliasing. The basic idea is to give partially-covered pixels partial-transparency. During composition, this will cause that pixel to be slightly tinted as if it were slightly covered, creating clearer details.\n It\u2019s greyscale because that\u2019s the term used for one-dimensional color, like our one-dimensional transparency (otherwise glyphs tend to be a single solid color). Also in the common case of black text on a white background, the anti-aliasing literally shows up as greyness around the edges.\n Subpixel-AA is a trick that abuses the common way pixels are laid out on desktop monitors. It\u2019s more complicated than this, so if you\u2019re really interested you should look it up, but here\u2019s a TL;DR of the high-level concept:\n Your monitor\u2019s pixels are actually three little columns of RED GREEN BLUE. If you make a pixel red you\u2019re  kinda also making it \u201cWHITE BLACK BLACK\u201d. Similarly, if you make it blue, you\u2019re making \u201cBLACK BLACK WHITE\u201d. In other words, by messing around with colors you can  triple your horizontal resolution and get way more details!\n You might think that this would look super messed up and rainbowy, but in practice it honestly works out really well (some disagree). The human brain likes to see patterns and smooth things out. That said, if you take a screenshot of subpixel-AA text you will  absolutely be able to see the colors if you resize the image, or even look at it on a monitor with a different subpixel layout. This is why screenshots of text often look really weird and bad.\n (As a total aside, the fact that this works also means that the color of an icon can accidentally change its perceived size and position, which is really annoying.)\n So subpixel-AA is a really neat hack that can significantly improve text legibility, great! But, sadly, it\u2019s also a huge pain in the neck!\n Note that regardless of the AA system you use, you can also have  subpixel glyph offsets. Although you always want your rasterized glyphs to be snapped to full pixels, the rasterization itself is for a specific subpixel offset (a value between 0 and 1).\n  If its subpixel offset was 0.5, then its rasterization would be two 50% grey pixels\n  Rasterizing glyphs is surprisingly expensive, so you really want to cache it in an atlas. But how do you cache glyph rasterizations when you\u2019re using subpixel-offsets? Each offset is its own unique rasterization, so you\u2019re incredibly unlikely to get cache hits like that!\n Quality and performance must be balanced here, and that can be done by snapping your subpixel offsets. For english text, a reasonable balance is to have no vertical subpixel precision while snapping the horizontal subpixel offset to a quarter-integer. This leaves you with only 4 subpixel-positions, which is still a big improvement in quality while allowing for a reasonable amount of caching.\n  One nice thing about greyscale-AA is that you can play a bit fast-and-loose with it, and it will degrade gracefully. For instance, if you transform a texture with text on it (scaling, rotating, or translating), it might look a bit blurry but it will look basically fine.\n If you do the same thing with subpixel-AA, it will look terrible. The entire idea behind subpixel-AA is that you are abusing how the pixels are laid out in a display. If the pixels of the display don\u2019t line up with the pixels of your texture, the red and blue edges will be clearly visible!\n One might think that the \u201cfix\u201d for this is to just rerasterize the glyphs in their new location. And indeed, if the transform is static, this can work. But if the transform is an  animation this will actually look  even worse. This is actually a really common browser bug: if we  ever fail to detect that an animation is happening to some text, the characters will  jiggle as each glyph bounces around between different subpixel snappings and hints on each frame.\n As a result, browsers contain several heuristics to detect things which might be animations so that they can force-disable subpixel-AA for that part of the page (and ideally even subpixel-positioning). This can be pretty hard to do reliably, because arbitrarily complex JS can drive an animation without giving any clear \u201cheads up\u201d to the browser.\n Furthermore, if partial transparency is involved, subpixel-AA is also problematic. Basically, we\u2019re tweaking our R, G, and B channels to encode 3 transparency values (one for each subpixel), but the text itself also has a color, and the thing the text is on does to, so information easily gets lost.\n When using greyscale-AA we have a dedicated alpha channel so nothing is ever lost. As such, browsers tend to use greyscale-AA when transparency is involved.\n \u2026Except Firefox. Yet again, this is a weird place where someone working on Firefox got really enthusiastic and did something complicated: Component Alpha. It turns out you can in fact properly composite subpixel-AA text, but it involves effectively having 3 extra channels dedicated to the transparency of your R, G, and B channels. Unsurprisingly, this doubles the memory footprint of text that\u2019s composited in this way.\n  On newer versions of macos, subpixel-aa of text is disabled at the OS level by default\n Chrome seems to be disabling subpixel-aa more aggressively (not sure what the exact policy is)\n Firefox\u2019s new graphics backend (webrender) has abandoned Component Alpha for the sake of simplicity\n  This part\u2019s just a grab bag of little things that don\u2019t need merit much discussion.\n  God this blows. These fonts are mostly provided by Adobe, because they got really into SVG a while ago. Sometimes you can just ignore the SVG parts (I believe the Source Code Pro font technically contains some SVG glyphs, but in practice they aren\u2019t actually used by websites), but in general you need to implement SVG support to draw All The Fonts.\n Also have you heard of  Animated SVG Fonts? No? Good. I think they\u2019re broken/unimplemented everywhere now. (Firefox randomly supported it for a while because of some enthusiastic developer.)\n  If you naively respect a user\u2019s request for a very large font (or very large zoom level), you will run into extreme memory management problems with the size of your glyph atlas, as each character may be bigger than the entire screen. There are a few ways to handle this:\n Rasterize the glyph at a smaller size, and upscale during composition (easy, produces blurry edges)\n  It\u2019s pretty common for folks to know that the primary direction of text can be left-to-right (english), right-to-left (arabic), or top-to-bottom (japanese).\n     On a desktop, if you drag your mouse across that text to select it, you may notice that the selection becomes discontinuous and jumpy in the middle. This is because we\u2019re mixing left-to-right and right-to-left text in the same line, which absolutely happens all the time.\n At first dragging right  increases the selection, but then it  decreases it until it suddenly starts increasing again. This is in fact totally correct and desirable: the selection is just remaining contiguous  in the actual underlying string. This way you can correctly copy a fragment of text that spans the transition.\n So you need to deal with that in your selection code\u2019s hit-detection. Also you need to deal with that in your line breaking algorithm during layout.\n   oh hey what? oh  \u0644\u0627 \u0628\u0633\u0645 \u0627\u0644\u0644\u0647 no \u4f60\u597d 1234\u4f60\u597d\n    When characters are missing from fonts, it\u2019s nice to be able to communicate to the user that this happened. This is the \u201ctofu\u201d glyph. Now, you can just draw a blank tofu (a rectangle) and leave it at that, but if you want to be helpful you can write out the value of the missing character so it can be debugged more easily.\n But, wait, we\u2019re using text to explain that we can\u2019t draw text? Hmm.\n You could appeal to an assumption that the system must have a basic font that can draw 0-9 and A-F, but for those who expect to truly Destroy Their Tools With Their Tools you can do what Firefox does: the microfont!\n Inside Firefox there\u2019s a little hardcoded array describing one-bit pixel art of a tiny font atlas for exactly those 16 characters. So when drawing tofu, it can blit those glyphs out without worrying about fonts.\n   For high-quality fonts, stylings like  italics and  bold are provided natively, as there isn\u2019t a simple algorithmic way to do those effects nicely.\n Except some fonts don\u2019t provide those stylings, and so you need a simple algorithmic way to do those effects.\n Exactly how you detect and handle all of this is pretty system-specific, hairy, and outside my area of expertise, so I can\u2019t really explain it well. I would just be digging through  Webrender\u2019s font code.\n Anyway, no matter what you do, you need a  synthetic fallback. Thankfully, the implementations are actually pretty straightforward:\n   Honestly, these approaches do a pretty decent job! But users might notice that things seem \u201cwrong\u201d and you can do better if you put in the work.\n  Platform-specific bugs, optimizations, and quirks have thrived for long enough to become aesthetics. So even if you adamantly believe that certain things are ideal or important, there\u2019s always going to be a huge group of users with different preferences. A robust text rendering system supports those different preferences (while picking reasonable defaults).\n You should support system configurations, font-specific configurations, application-specific configurations, and text-run-specific configurations. You should also try to\n......", "posttime": "2022-02-15 20:20:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5448\u73b0,rendering,\u6587\u672c", "title": "\u6587\u672c\u5448\u73b0\u8ba8\u538c\u4f60\uff082019\uff09", "title_en": "Text Rendering Hates You (2019)", "transed": 1, "url": "https://gankra.github.io/blah/text-hates-you/", "via": "", "real_tags": ["\u5448\u73b0", "rendering", "\u6587\u672c"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073512, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eca\u5e74\uff0c\u6211\u591a\u6b21\u88ab\u95ee\u53ca\u5982\u4f55\u8861\u91cf\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u7684\u751f\u4ea7\u7387\u3001\u8d28\u91cf\u548c\u6210\u679c\uff0c\u5c24\u5176\u662f\u5728\u9886\u5bfc\u5c42\u63d0\u5021\u6df7\u5408\u5de5\u4f5c\u6a21\u5f0f\u65f6\u3002\n\u4f46\u662f\uff0c\u5f53\u5f88\u96be\u96c7\u4f63\u548c\u7559\u4f4f\u4f18\u79c0\u7684\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u65f6\uff0c\u6280\u672f\u7ec4\u7ec7\u9762\u4e34\u7740\u8fd9\u6837\u4e00\u4e2a\u73b0\u5b9e\uff1a\u6709\u624d\u534e\u7684\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u5bf9\u88ab\u4e25\u5bc6\u7ba1\u7406\u7684\u60f3\u6cd5\u6012\u4e0d\u53ef\u904f\uff0c\u8bb8\u591a\u4eba\u5c06\u79bb\u5f00\u6709\u5fae\u89c2\u7ba1\u7406\u6587\u5316\u7684\u5de5\u4f5c\u5c97\u4f4d\u3002\n\u8981\u6c42\u5f00\u53d1\u4eba\u5458\u5411\u6ca1\u6709\u8f6f\u4ef6\u5f00\u53d1\u7ecf\u9a8c\u7684\u7ecf\u7406\u6c47\u62a5\u53ef\u80fd\u4f1a\u5f15\u53d1\u5bf9\u6d41\u7a0b\u5b98\u50da\u7684\u62c5\u5fe7\u3002\u4e00\u4e9b\u4fe1\u5949\u6781\u7aef\u81ea\u7ec4\u7ec7\u539f\u5219\u7684\u654f\u6377\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u60f3\u8981\u5b8c\u5168\u7684\u81ea\u4e3b\u6027\uff0c\u5e76\u4e14\u53ef\u80fd\u4f1a\u5728\u4efb\u4f55\u9886\u5bfc\u5c42\u8bd5\u56fe\u8861\u91cf\u751f\u4ea7\u529b\u3001\u8d28\u91cf\u6216\u5176\u4ed6\u6027\u80fd\u8003\u8651\u7684\u8ff9\u8c61\u4e0b\u53cd\u6297\u3002\n\u5982\u679c\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u8ba8\u538c\u5fae\u89c2\u7ba1\u7406\uff0c\u90a3\u4e48\u8bb8\u591a\u4eba\u5bf9\u5e74\u5ea6\u7ee9\u6548\u8bc4\u4f30\u5c31\u66f4\u52a0\u9119\u89c6\u3002\u5f00\u53d1\u4eba\u5458\u4ee5\u5b9e\u65f6\u6027\u80fd\u76ee\u6807\u4e3a\u76ee\u6807\uff0c\u65e8\u5728\u63d0\u9ad8\u901f\u5ea6\u3001\u4ee3\u7801\u90e8\u7f72\u9891\u7387\u3001\u5468\u671f\u65f6\u95f4\u548c\u5176\u4ed6\u5173\u952e\u6027\u80fd\u6307\u6807\u3002Scrum\u56e2\u961f\u5728\u6bcf\u6b21\u51b2\u523a\u7ed3\u675f\u65f6\u90fd\u4f1a\u8ba8\u8bba\u4ed6\u4eec\u7684\u7ee9\u6548\uff0c\u56e0\u6b64\u5e74\u5ea6\u548c\u5b63\u5ea6\u7ee9\u6548\u8bc4\u4f30\u7684\u53cd\u9988\u53ef\u80fd\u663e\u5f97\u591a\u4f59\u6216\u65e0\u5173\u7d27\u8981\u3002\n\u4f46\u4e5f\u6709\u4e00\u4e2a\u73b0\u5b9e\uff0c\u5373\u7ec4\u7ec7\u9700\u8981\u65b9\u6cd5\u6765\u8bc6\u522b\u654f\u6377\u56e2\u961f\u548c\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u662f\u5426\u8fbe\u5230\u6216\u8d85\u8fc7\u6027\u80fd\u3001\u5f00\u53d1\u548c\u4e1a\u52a1\u76ee\u6807\u3002\u7ba1\u7406\u8005\u5982\u4f55\u5728\u4e0d\u8ba9\u5f00\u53d1\u4eba\u5458\u75db\u82e6\u7684\u60c5\u51b5\u4e0b\u83b7\u5f97\u4ed6\u4eec\u9700\u8981\u7684\u4e1c\u897f\uff1f\n\u4e0b\u9762\u662f\u4e03\u4e2a\u63a8\u8350\u7684\u5b9e\u8df5\uff0c\u5b83\u4eec\u7b26\u5408\u654f\u6377\u3001scrum\u3001devops\u548c\u8f6f\u4ef6\u5f00\u53d1\u751f\u547d\u5468\u671f\u4e2d\u7684\u539f\u5219\uff0c\u53ef\u4ee5\u5e94\u7528\u4e8e\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u7684\u8bc4\u5ba1\u3002\u6211\u5e76\u6ca1\u6709\u628a\u5b83\u4eec\u5199\u6210\u806a\u660e\u7684\u76ee\u6807\uff08\u5177\u4f53\u7684\u3001\u53ef\u6d4b\u91cf\u7684\u3001\u53ef\u5b9e\u73b0\u7684\u3001\u76f8\u5173\u7684\u548c\u6709\u65f6\u95f4\u9650\u5236\u7684\uff09\uff0c\u4f46\u9886\u5bfc\u8005\u5e94\u8be5\u6839\u636e\u7ec4\u7ec7\u7684\u654f\u6377\u5de5\u4f5c\u65b9\u5f0f\u548c\u4e1a\u52a1\u76ee\u6807\u91c7\u7eb3\u76f8\u5173\u7684\u76ee\u6807\u3002\n\u5176\u4e2d\u4e00\u4e9b\u53ef\u80fd\u53ea\u4e0e\u56e2\u961f\u5c42\u9762\u76f8\u5173\uff0c\u800c\u7ba1\u7406\u8005\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u65b9\u6cd5\u6765\u8861\u91cf\u4ed6\u4eec\u7684\u76f4\u63a5\u4e0b\u5c5e\u3002\n\u5b9a\u4e49\u76ee\u6807\u548c\u5173\u952e\u7ed3\u679c\uff08OKR\uff09\u662f\u4e00\u4e2a\u8ba8\u8bba\uff0c\u4ea7\u54c1\u6240\u6709\u8005\u3001\u5f00\u53d1\u7ecf\u7406\u548c\u67b6\u6784\u5e08\u53ef\u4ee5\u4e0e\u4ed6\u4eec\u7684\u56e2\u961f\u5728\u53ef\u6d4b\u91cf\u7684\u6210\u529f\u6807\u51c6\u4e0a\u4fdd\u6301\u4e00\u81f4\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f\u9886\u5bfc\u8005\u548c\u56e2\u961f\u4e4b\u95f4\u7684\u5408\u4f5c\uff0c\u9886\u5bfc\u8005\u5b9a\u4e49\u76ee\u6807\uff0c\u6574\u4e2a\u56e2\u961f\u8ba8\u8bba\u3001\u8fa9\u8bba\u5e76\u51b3\u5b9a\u5173\u952e\u7ed3\u679c\u3002\n\u6700\u4f73\u5b9e\u8df5\u662f\u4ee5\u6709\u610f\u4e49\u7684\u8282\u594f\u5b9a\u4e49OKR\u3002\u5982\u679c\u8fc7\u4e8e\u9891\u7e41\uff0c\u5b9a\u4e49\u548c\u6d4b\u91cfOKR\u7684\u5f00\u9500\u53ef\u80fd\u4f1a\u5f88\u9ad8\uff1b\u5982\u679c\u592a\u5c11\uff0c\u56e2\u961f\u53ef\u80fd\u4f1a\u5ffd\u89c6\u76ee\u6807\u3002\u4e24\u4e2a\u4f8b\u5b50\uff1a\n\u201c\u63d0\u9ad8\u5e94\u7528\u7a0b\u5e8f\u53ef\u9760\u6027\u201d\u7684\u76ee\u6807\u53ef\u80fd\u5305\u62ec\u51cf\u5c11\u9875\u9762\u54cd\u5e94\u65f6\u95f4\u3001\u63d0\u9ad8\u5e94\u7528\u7a0b\u5e8f\u53ef\u7528\u6027\u6216\u5c06\u9519\u8bef\u7387\u964d\u4f4e\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u767e\u5206\u6bd4\u3002\n\u201c\u63d0\u9ad8\u90e8\u7f72\u53ef\u9760\u6027\u201d\u7684\u76ee\u6807\u53ef\u80fd\u5305\u62ec\u63d0\u9ad8\u6d4b\u8bd5\u81ea\u52a8\u5316\u6216\u4ee5\u6709\u610f\u4e49\u7684\u767e\u5206\u6bd4\u51cf\u5c11\u6784\u5efa\u65f6\u95f4\u7b49\u7ed3\u679c\u3002\nScrum\u662f\u4ee5\u8282\u594f\u548c\u4f1a\u8bae\u627f\u8bfa\u4e3a\u57fa\u7840\u7684\uff0c\u6240\u4ee5\u5b9e\u73b0\u6700\u540e\u671f\u9650\u662f\u8861\u91cf\u56e2\u961f\u7eaa\u5f8b\u548c\u6807\u51c6\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u6211\u5e76\u4e0d\u671f\u671b\u56e2\u961f\u5b8c\u7f8e\u5730\u5b8c\u6210\u6bcf\u4e00\u6b21\u51b2\u523a\u7684\u627f\u8bfa\uff0c\u4f46\u9886\u5bfc\u8005\u53ef\u4ee5\u5728\u51e0\u4e2a\u51b2\u523a\u4e2d\u8bbe\u5b9a\u4e00\u4e2a\u9ad8\u548c\u4f4e\u7684\u671f\u671b\u503c\u3002\n\u5bf9\u4e8e\u6309\u7167\u89c4\u5b9a\u7684\u8282\u594f\uff08\u6bcf\u5929\u3001\u6bcf\u5468\u3001\u6bcf\u56db\u6b21\u51b2\u523a\u7b49\uff09\u8fdb\u884c\u53d1\u5e03\u7684\u56e2\u961f\uff0c\u6211\u5efa\u8bae\u68c0\u67e5\u56e2\u961f\u662f\u5426\u6309\u8ba1\u5212\u53d1\u5e03\u5e76\u6ee1\u8db3\u8d28\u91cf\u57fa\u51c6\u3002\u5728\u53d1\u5e03\u65e5\u671f\u4e4b\u524d\uff0c\u4f46\u5bfc\u81f4\u505c\u673a\u3001\u5b89\u5168\u4e8b\u4ef6\u6216\u91cd\u5927\u751f\u4ea7\u95ee\u9898\u662f\u663e\u800c\u6613\u89c1\u7684\u95ee\u9898\u3002\n\u654f\u6377\u5ba3\u8a00\u5c06\u201c\u5ba2\u6237\u5408\u4f5c\u80dc\u8fc7\u5408\u540c\u8c08\u5224\u201d\u786e\u5b9a\u4e3a\u6838\u5fc3\u4ef7\u503c\u89c2\u3002\u867d\u7136\u6211\u4eec\u4e0d\u5e94\u8be5\u8981\u6c42\u654f\u6377\u5f00\u53d1\u4eba\u5458\u5b8c\u7f8e\u5730\u4ea4\u4ed8\u4ea7\u54c1\u2014\u2014\u65f6\u95f4\u3001\u8303\u56f4\u548c\u6210\u672c\uff0c\u5373\u4f17\u6240\u5468\u77e5\u7684\u94c1\u4e09\u89d2\u2014\u2014\u4f46\u6211\u4eec\u53ef\u4ee5\u5bfb\u6c42\u83b7\u53d6\u72ec\u7acb\u7684\u5ba2\u6237\u6ee1\u610f\u5ea6\u6307\u6807\u3002\n\u6ee1\u610f\u5ea6\u8c03\u67e5\u662f\u5927\u578b\u5f00\u53d1\u7ec4\u7ec7\u53ef\u4ee5\u7528\u6765\u83b7\u53d6\u654f\u6377\u5f00\u53d1\u4eba\u5458\u548c\u56e2\u961f\u53cd\u9988\u7684\u5de5\u5177\u4e4b\u4e00\u3002\u4e00\u4e9b\u95ee\u9898\u53ef\u80fd\u5305\u62ec\uff1a\n\u5173\u952e\u662f\u5c06\u5ba2\u6237\u53cd\u9988\u5e26\u56de\u5f00\u53d1\u4eba\u5458\u548c\u654f\u6377\u56e2\u961f\uff0c\u4ee5\u4fbf\u4ed6\u4eec\u80fd\u591f\u4ece\u5ba2\u6237\u7684\u89d2\u5ea6\u53cd\u601d\u7ed3\u679c\u5e76\u63d0\u9ad8\u6027\u80fd\u3002\n\u8be2\u95ee\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u53e6\u4e00\u4e2a\u56e2\u961f\u7684API\u3001\u5347\u7ea7\u53e6\u4e00\u4e2a\u5f00\u53d1\u4eba\u5458\u7684\u4ee3\u7801\u6216\u4ece\u53ef\u7528\u6587\u6863\u4e2d\u5b66\u4e60\u65b0\u7684\u5e94\u7528\u7a0b\u5e8f\u4f53\u7cfb\u7ed3\u6784\u6709\u591a\u5bb9\u6613\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u4f60\u4e0d\u592a\u53ef\u80fd\u5f97\u5230\u79ef\u6781\u7684\u56de\u5e94\u6216\u662f\u4e00\u4e2a\u5feb\u4e50\u7684\u5f00\u53d1\u4eba\u5458\uff0c\u5c24\u5176\u662f\u5728\u5904\u7406\u9057\u7559\u4ee3\u7801\u6216\u662f\u5728\u5355\u7247\u67b6\u6784\u4e2d\u5de5\u4f5c\u65f6\u3002\n\u90a3\u4e48\uff0c\u60a8\u5982\u4f55\u786e\u5b9a\u5f00\u53d1\u4eba\u5458\u5728\u5f00\u53d1\u6613\u4e8e\u4f7f\u7528\u7684\u53ef\u7ef4\u62a4\u4ee3\u7801\u3001\u6709\u7528\u6587\u6863\u548c\u5fae\u670d\u52a1\u65b9\u9762\u662f\u5426\u505a\u5f97\u66f4\u597d\u5462\uff1f\u4f60\u5982\u4f55\u8861\u91cf\u8fd9\u79cd\u8fdb\u6b65\u6216\u5012\u9000\uff1f\n\u867d\u7136\u53ef\u80fd\u6709\u5de5\u5177\u6216\u5206\u6790\u6765\u83b7\u53d6\u8fd9\u4e9b\u6307\u6807\uff0c\u4f46\u6211\u8ba4\u4e3a\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u521b\u5efa\u4e00\u4e2a\u540c\u884c\u8bc4\u5ba1\u6d41\u7a0b\u3002\u540c\u884c\u53ef\u4ee5\u5728\u5ba1\u67e5pull\u8bf7\u6c42\u65f6\u8bc4\u8bba\u4ee3\u7801\u53ef\u8bfb\u6027\uff0c\u63d0\u4f9b\u6587\u6863\u8bc4\u7ea7\uff0c\u5e76\u5728\u96c6\u6210\u5fae\u670d\u52a1\u6216API\u65f6\u54cd\u5e94\u8c03\u67e5\u3002\n\u540c\u884c\u8bc4\u5ba1\u5e94\u8be5\u8865\u5145\u4ee3\u7801\u8bc4\u5ba1\u548c\u8d28\u91cf\u5206\u6790\u5de5\u5177\u7684\u53cd\u9988\uff0c\u8fd9\u4e9b\u5de5\u5177\u53ef\u4ee5\u63d0\u4f9b\u5173\u4e8e\u4ee3\u7801\u8d28\u91cf\u3001\u5b89\u5168\u6027\u548c\u76f8\u5173\u95ee\u9898\u7684\u5b9e\u65f6\u3001\u7ec6\u7c92\u5ea6\u53cd\u9988\u3002\n\u4ea7\u54c1\u6240\u6709\u8005\u548c\u540c\u884c\u63d0\u4f9b\u91cd\u8981\u7684\u53cd\u9988\uff0c\u4f46\u7ba1\u7406\u8005\u8fd8\u5fc5\u987b\u786e\u4fdd\u5f00\u53d1\u4eba\u5458\u548c\u5f00\u53d1\u56e2\u961f\u5ba1\u67e5\u5e76\u56de\u5e94\u8fd0\u8425\u53cd\u9988\u3002\u53cd\u9988\u5e94\u5305\u62ec\u6709\u5173\u73b0\u573a\u53ef\u9760\u6027\u5de5\u7a0b\u3001\u5b89\u5168\u5b9e\u8df5\u4ee5\u53ca\u5bf9IT\u670d\u52a1\u7ba1\u7406\uff08ITSM\uff09\u4e8b\u4ef6\u3001\u8bf7\u6c42\u548c\u5176\u4ed6\u95ee\u9898\u7684\u54cd\u5e94\u7684\u7ec6\u8282\u3002\nDevops\u3001ITSM\u548cinfosec\u90fd\u6709\u975e\u5e38\u6210\u719f\u7684KPI\uff0c\u9886\u5bfc\u8005\u5e94\u8be5\u4e3a\u8f6f\u4ef6\u5f00\u53d1\u56e2\u961f\u9009\u62e9\u4e00\u4e2a\u6709\u610f\u4e49\u4e14\u6613\u4e8e\u7ba1\u7406\u7684\u6570\u5b57\u3002\u5bf9\u4e8e\u4f7f\u7528\u4e91\u672c\u673a\u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u53d1\u56e2\u961f\uff0c\u6211\u5efa\u8bae\u5b9a\u4e49\u670d\u52a1\u7ea7\u522b\u76ee\u6807\uff0c\u5e76\u4f7f\u7528\u5b83\u4eec\u6765\u7ba1\u7406\u9519\u8bef\u9884\u7b97\u3002\u5bf9\u4e8e\u5176\u4ed6\u5f00\u53d1\u56e2\u961f\u6765\u8bf4\uff0c\u8861\u91cf\u53d8\u66f4\u5931\u8d25\u7387\u7684\u964d\u4f4e\u4ee5\u53ca\u4ece\u4e8b\u6545\u4e2d\u6062\u590d\u7684\u5e73\u5747\u65f6\u95f4\u662f\u672c\u7814\u7a76\u7684\u9996\u8981\u5173\u952e\u7ee9\u6548\u6307\u6807\u3002\n\u5982\u4eca\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u4f01\u4e1a\u8ba4\u8bc6\u5230\u652f\u6301\u6301\u7eed\u5b66\u4e60\u3001\u4fc3\u8fdb\u5b89\u5168\u7684\u5b9e\u9a8c\u73af\u5883\u4ee5\u53ca\u8ba9\u53c2\u4e0e\u8005\u53c2\u4e0e\u6307\u5bfc\u8ba1\u5212\u7684\u91cd\u8981\u6027\u3002\u867d\u7136\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u91cd\u8981\u7684\u76ee\u6807\uff0c\u4f46\u7ba1\u7406\u8005\u5e94\u8be5\u5ba1\u67e5\u5f00\u53d1\u4eba\u5458\u5982\u4f55\u5c06\u8fd9\u4e9b\u6307\u5bfc\u65b9\u9488\u4ed8\u8bf8\u5b9e\u8df5\uff0c\u4ee5\u53ca\u5b83\u4eec\u5728\u54ea\u91cc\u4ea7\u751f\u4e1a\u52a1\u5f71\u54cd\u3002\u7ba1\u7406\u8005\u5e94\u5e2e\u52a9\u5f00\u53d1\u4eba\u5458\u5236\u5b9a\u804c\u4e1a\u53d1\u5c55\u8ba1\u5212\uff0c\u5e76\u5c31\u4ed6\u4eec\u7684\u5b66\u4e60\u3001\u6307\u5bfc\u3001\u53c2\u4e0e\u5b9e\u9a8c\u548c\u6982\u5ff5\u9a8c\u8bc1\u5982\u4f55\u4e0e\u5458\u5de5\u7684\u804c\u4e1a\u76ee\u6807\u4fdd\u6301\u4e00\u81f4\u63d0\u4f9b\u53cd\u9988\u3002\n\u5728DICE 2021\u6280\u672f\u4e13\u5bb6\u7684\u60c5\u611f\u62a5\u544a\u4e2d\uff0c36%\u7684\u53d7\u8bbf\u8005\u8ba4\u4e3a\u4ed6\u4eec\u7684\u5026\u6020\u5728\u4e94\u5206\u7684\u8303\u56f4\u5185\u4e3a\u56db\u6216\u4e94\uff0c\u800c48%\u7684\u53d7\u8bbf\u8005\u8868\u793a\u4ed6\u4eec\u53ef\u80fd\u4f1a\u6539\u53d8\u96c7\u4e3b\u3002\n\u6211\u4e0d\u76f8\u4fe1\u9996\u5e2d\u4fe1\u606f\u5b98\u3001\u9996\u5e2d\u6280\u672f\u5b98\u3001\u4ea4\u4ed8\u8d1f\u8d23\u4eba\u548c\u8f6f\u4ef6\u5f00\u53d1\u7ecf\u7406\u5e0c\u671b\u770b\u5230\u4ed6\u4eec\u7684\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u7cbe\u75b2\u529b\u7aed\uff0c\u52a0\u5165\u4f1f\u5927\u7684\u8f9e\u804c\u884c\u5217\u3002\u56e0\u6b64\uff0c\u867d\u7136\u6211\u63d0\u51fa\u4e86\u51e0\u79cd\u7ba1\u7406\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u7684\u65b9\u6cd5\uff0c\u4f46\u9886\u5bfc\u8005\u5e94\u8be5\u540c\u60c5\u5f53\u4eca\u7684\u5de5\u4f5c\u73af\u5883\u548c\u6bcf\u4e2a\u5f00\u53d1\u4eba\u5458\u7684\u4e2a\u4eba\u60c5\u51b5\u3002\n\u53d6\u5f97\u5e73\u8861\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4e0e\u4eba\u529b\u8d44\u6e90\u90e8\u95e8\u5408\u4f5c\uff0c\u786e\u5b9a\u5de5\u4f5c\u548c\u751f\u6d3b\u76ee\u6807\u3002\u5f00\u53d1\u4eba\u5458\u5e94\u8be5\u4e2a\u6027\u5316\u8fd9\u4e9b\u76ee\u6807\uff0c\u7ec4\u7ec7\u548c\u7ba1\u7406\u4eba\u5458\u5e94\u8be5\u5bf9\u5b83\u4eec\u4fdd\u5bc6\u3002\u4e00\u4e2a\u5de5\u4f5c-\u751f\u6d3b\u76ee\u6807\u53ef\u4ee5\u521b\u9020\u4e00\u79cd\u5e73\u8861\uff0c\u8bb8\u591a\u5f00\u53d1\u4eba\u5458\u73b0\u5728\u9700\u8981\u8fd9\u79cd\u5e73\u8861\u6765\u611f\u53d7\u652f\u6301\u3002\n\u6700\u7ec8\uff0c\u7ba1\u7406\u548c\u8861\u91cf\u7ee9\u6548\u9700\u8981\u7ecf\u7406\u548c\u5458\u5de5\u4e4b\u95f4\u7ecf\u5e38\u8fdb\u884c\u8ba8\u8bba\u3002\u6211\u4eec\u662f\u5426\u5728\u76ee\u6807\u548c\u6210\u529f\u6807\u51c6\u4e0a\u4fdd\u6301\u4e00\u81f4\uff1f\u6211\u4eec\u4e86\u89e3\u6807\u51c6\u548c\u7ea6\u675f\u5417\uff1f\u5373\u4f7f\u6307\u6807\u63d0\u4f9b\u4e86\u6307\u6807\uff0c\u901a\u5e38\u4e5f\u662f\u901a\u8fc7\u8ba8\u8bba\u548c\u540e\u7eed\u884c\u52a8\u6765\u63d0\u9ad8\u7ee9\u6548\u3002\u4eba\u4eec\u5c31\u662f\u8fd9\u6837\u5de5\u4f5c\u7684\u3002", "note_en": "I\u2019ve been asked several times this year about measuring a software developer\u2019s productivity, quality, and outcomes, especially when leadership promotes hybrid working models.\n But here\u2019s the reality that tech organizations face when it\u2019s difficult to hire and retain great software developers: Talented software developers bristle at the idea of being closely managed, and many will leave jobs where there is a culture of micromanagement.\n  Asking a developer to report to a manager with no software development experience can spark fears of process bureaucracy. Some agile software developers who embrace the extremes of self-organizing principles want full autonomy and may rebel at any sign of leadership attempts to measure productivity, quality, or other performance considerations.\n If software developers detest micromanaging, many have a stronger contempt for yearly performance reviews. Developers target real-time performance objectives and aim to improve velocity, code deployment frequency, cycle times, and other key performance indicators. Scrum teams discuss their performance at the end of every sprint, so the feedback from yearly and quarterly performance reviews can seem superfluous or irrelevant.\n But there\u2019s also the practical reality that organizations require methods to recognize whether agile teams and software developers meet or exceed performance, development, and business objectives. How can managers get what they need without making developers miserable?\n What follows are seven recommended practices that align with principles in agile, scrum, devops, and the software development lifecycle and that could be applied to reviewing software developers. I don\u2019t write them as  SMART goals (specific, measurable, achievable, relevant, and time-bound), but leaders should adopt the relevant ones as such based on the organization\u2019s  agile ways of working and business objectives.\n  Some of these may only be relevant at the team level, while managers could use others to measure their direct reports.\n   Defining objectives and key results (OKRs) is a discussion that product owners, development managers, and architects can have with their teams to align on measurable success criteria. Ideally, it\u2019s a collaboration between the leaders and the team, with the leaders defining the objective and the full team discussing, debating, and deciding the key results.\n  A best practice is to define OKRs on a meaningful cadence. If too frequent, the overhead of defining and measuring OKRs may be expensive; if too infrequent, teams may lose sight of the objectives. Two examples:\n The objective of \u201cimprove application reliability\u201d may include results such as reducing page response time, improving app availability, or reducing error rates by a meaningful percentage.\n The objective of \u201cimprove deployment reliability\u201d may include results such as increasing test automation or reducing build time by meaningful percentages.\n  Scrum runs on a foundation of cadences and meeting commitments, so achieving deadlines is one way to measure a team\u2019s discipline and alignment to standards. I don\u2019t expect teams to meet every sprint\u2019s commitments perfectly, but leaders can set a high and low bar of expectations aggregated across several sprints.\n For teams performing releases on defined cadences (daily, weekly, every four sprints, etc.), I recommend reviewing whether teams release on schedule and meet quality benchmarks. Hitting the release date but causing outages, security incidents, or significant production issues are obvious problems.\n  The agile manifesto identifies \u201ccustomer collaboration over contract negotiation\u201d as a core value. While we shouldn\u2019t hold agile developers to deliver flawlessly \u2013 on time, scope, and cost, the proverbial  iron triangle \u2013 we can seek to capture independent customer satisfaction metrics.\n  A satisfaction survey is one tool that larger development organizations can use to capture feedback for agile developers and teams. Some questions might cover:\n  The key is to bring customer feedback back to the developer and agile teams so they can reflect on the results from the customer\u2019s perspective and improve performance.\n  Ask a developer how easy it is to use another team\u2019s APIs, upgrade another developer\u2019s code, or learn a new application architecture from the available documentation. Unfortunately, you\u2019re unlikely to get a positive response or a happy developer, especially when working on legacy code or in a monolithic architecture.\n So how do you determine whether developers are doing a better job today of developing maintainable code, useful documentation, and microservices that are easy to consume? How could you measure this progress or regression?\n  While there may be tools or analytics to get at these metrics, I believe the simplest approach is to create a process for peer reviews. Peers can comment on code readability when reviewing a pull request, provide ratings on documentation, and respond to surveys when integrating microservices or APIs.\n Peer reviews should supplement the feedback from  code review and quality analysis tools that can provide real-time, granular feedback on code quality, security, and related issues.\n  Product owners and peers provide important feedback, but managers must also ensure that developers and development teams review and respond to operational feedback. The feedback should include specifics around site reliability engineering, security practices, and responsiveness to IT services management (ITSM) incidents, requests, and other tickets.\n Devops, ITSM, and infosec have highly mature KPIs, and leaders should select a meaningful and manageable number for software development teams to focus on. For development teams working on cloud-native applications, I recommend  defining service level objectives and using them to manage error budgets. For other development groups, measuring reductions in change failure rates and mean time to recover from incidents were the  top KPIs in this research.\n  Today, more businesses recognize the importance of supporting continuous learning, promoting safe environments for experimentation, and enrolling participants in mentoring programs. While all of these are important goals, managers should review how developers put these guidelines into practice and where they deliver business impacts. Managers should help developers create a career development plan and provide feedback on how their learning, mentoring, and participation in experiments and proofs of concept align with the employee\u2019s career goals.\n  In the  Dice 2021 Technologist Sentiment Report, 36% of respondents rated their burnout a four or five on a five-point scale, and 48% reported they are likely to change employers.\n I don\u2019t believe CIOs, CTOs, delivery leaders, and software development managers want to see their software developers burn out and join the great resignation. So while I suggest several ways to  manage software developers, leaders should be empathetic to today\u2019s working environment and to every developer\u2019s personal situation.\n  One way to strike a balance is to work with human resources on defining work-life goals and objectives. Developers should personalize these goals, and the organization and managers should keep them confidential. A work-life goal can create a balance many developers need today to feel supported.\n Ultimately, managing and measuring performance requires frequent discussions between manager and employee. Are we aligned on goals and the criteria for success? Do we understand the standards and constraints? Even when metrics provide indicators, it\u2019s often the discussion and follow-up actions that lead to improved performance. That\u2019s just how people work.", "posttime": "2022-02-15 20:11:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u53d1,\u8f6f\u4ef6,software,\u5f00\u53d1\u4eba\u5458", "title": "\u5982\u4f55\u5728\u4e0d\u8fdb\u884c\u5fae\u89c2\u7ba1\u7406\u7684\u60c5\u51b5\u4e0b\u7ba1\u7406\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458", "title_en": "How to manage software developers without micromanaging", "transed": 1, "url": "https://www.infoworld.com/article/3649773/how-to-manage-software-developers-without-micromanaging.html", "via": "", "real_tags": ["\u5f00\u53d1", "\u8f6f\u4ef6", "software", "\u5f00\u53d1\u4eba\u5458"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073511, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "William Press\uff0c\u8ba1\u7b97\u673a\u79d1\u5b66\u548c\u7efc\u5408\u751f\u7269\u5b66\uff0c\u5fb7\u514b\u8428\u65af\u5927\u5b66\uff0c\u5965\u65af\u4e01\uff0c\u5965\u65af\u4e01\uff0cTX\u7f16\u8f91\uff1b2021\u5e7411\u670811\u65e5\u6536\u5230\uff1b\u63a5\u53d72021\u5e7412\u670820\u65e5\n\u4eba\u5de5\u667a\u80fd\uff08AI\uff09\u2014\u2014\u5408\u6210\u6587\u672c\u3001\u97f3\u9891\u3001\u56fe\u50cf\u548c\u89c6\u9891\u6b63\u5728\u88ab\u6b66\u5668\u5316\uff0c\u7528\u4e8e\u975e\u611f\u5b98\u4eb2\u5bc6\u56fe\u50cf\u3001\u91d1\u878d\u6b3a\u8bc8\u548c\u865a\u5047\u4fe1\u606f\u6d3b\u52a8\u3002\u6211\u4eec\u5bf9\u4eba\u5de5\u667a\u80fd\u5408\u6210\u4eba\u8138\u7167\u7247\u771f\u5b9e\u6027\u7684\u8bc4\u4f30\u8868\u660e\uff0c\u5408\u6210\u5f15\u64ce\u5df2\u7ecf\u7a7f\u8fc7\u4e86\u795e\u79d8\u7684\u5c71\u8c37\uff0c\u80fd\u591f\u521b\u5efa\u51fa\u6bd4\u771f\u5b9e\u4eba\u8138\u66f4\u96be\u4ee5\u533a\u5206\u3001\u66f4\u53ef\u4fe1\u7684\u4eba\u8138\u3002\n\u4eba\u5de5\u667a\u80fd\uff08AI\uff09\u2014\u2014\u7531\u97f3\u9891\u3001\u56fe\u50cf\u548c\u89c6\u9891\u5408\u6210\uff08\u5373\u6240\u8c13\u7684\u6df1\u5ea6\u5047\u8d27\uff09\u9a71\u52a8\u7684\u6280\u672f\uff0c\u5df2\u7ecf\u4f7f\u4eba\u4eec\u5bf9\u4e4b\u524d\u72ec\u5bb6\u4f7f\u7528\u7684\u597d\u83b1\u575e\u7ea7\u7279\u6548\u6280\u672f\u7684\u4f7f\u7528\u6c11\u4e3b\u5316\u3002\u4ece\u5408\u6210\u4efb\u4f55\u4eba\u58f0\u97f3\u4e2d\u7684\u8bed\u97f3\uff081\uff09\u5230\u5408\u6210\u865a\u6784\u4eba\u7269\u7684\u56fe\u50cf\uff082\uff09\uff0c\u518d\u5230\u5c06\u4e00\u4e2a\u4eba\u7684\u8eab\u4efd\u4e0e\u53e6\u4e00\u4e2a\u4eba\u7684\u8eab\u4efd\u4ea4\u6362\uff0c\u6216\u6539\u53d8\u4ed6\u4eec\u5728\u89c6\u9891\u4e2d\u6240\u8bf4\u7684\u5185\u5bb9\uff083\uff09\uff0c\u4eba\u5de5\u667a\u80fd\u5408\u6210\u7684\u5185\u5bb9\u65e2\u6709\u5a31\u4e50\u7684\u529b\u91cf\uff0c\u4e5f\u6709\u6b3a\u9a97\u7684\u529b\u91cf\u3002\n\u751f\u6210\u6027\u5bf9\u6297\u7f51\u7edc\uff08GAN\uff09\u662f\u5408\u6210\u5185\u5bb9\u7684\u5e38\u7528\u673a\u5236\u3002GAN\u4f7f\u4e24\u4e2a\u795e\u7ecf\u7f51\u7edc\u2014\u2014\u751f\u6210\u5668\u548c\u9274\u522b\u5668\u2014\u2014\u76f8\u4e92\u5bf9\u7acb\u3002\u8981\u5408\u6210\u865a\u6784\u4eba\u7269\u7684\u56fe\u50cf\uff0c\u751f\u6210\u5668\u4ece\u968f\u673a\u50cf\u7d20\u9635\u5217\u5f00\u59cb\uff0c\u8fed\u4ee3\u5b66\u4e60\u5408\u6210\u771f\u5b9e\u4eba\u8138\u3002\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u9274\u522b\u5668\u5b66\u4e60\u5c06\u5408\u6210\u4eba\u8138\u4e0e\u771f\u5b9e\u4eba\u8138\u5e93\u533a\u5206\u5f00\u6765\uff1b\u5982\u679c\u5408\u6210\u7684\u4eba\u8138\u53ef\u4ee5\u4e0e\u771f\u5b9e\u4eba\u8138\u533a\u5206\u5f00\u6765\uff0c\u90a3\u4e48\u9274\u522b\u5668\u4f1a\u60e9\u7f5a\u751f\u6210\u5668\u3002\u5728\u591a\u6b21\u8fed\u4ee3\u4e2d\uff0c\u751f\u6210\u5668\u5b66\u4e60\u5408\u6210\u8d8a\u6765\u8d8a\u771f\u5b9e\u7684\u4eba\u8138\uff0c\u76f4\u5230\u9274\u522b\u5668\u65e0\u6cd5\u5c06\u5176\u4e0e\u771f\u5b9e\u4eba\u8138\u533a\u5206\u5f00\u6765\uff08\u53c2\u89c1\u56fe1\uff0c\u4f8b\u5982\u771f\u5b9e\u4eba\u8138\u548c\u5408\u6210\u4eba\u8138\uff09\u3002\n\u5927\u4f17\u5a92\u4f53\u5df2\u7ecf\u5199\u4e86\u5f88\u591a\u5173\u4e8e\u6df1\u5ea6\u9020\u5047\u7684\u6f5c\u5728\u5a01\u80c1\u7684\u6587\u7ae0\uff0c\u5305\u62ec\u521b\u9020\u975e\u611f\u5b98\u7684\u4eb2\u5bc6\u5f62\u8c61\uff08\u901a\u5e38\u88ab\u8bef\u79f0\u4e3a\u201c\u590d\u4ec7\u8272\u60c5\u201d\uff09\u3001\u5c0f\u89c4\u6a21\u5230\u5927\u89c4\u6a21\u7684\u6b3a\u8bc8\uff0c\u4ee5\u53ca\u4e3a\u672c\u5df2\u5371\u9669\u7684\u865a\u5047\u4fe1\u606f\u6d3b\u52a8\u6dfb\u52a0\u55b7\u6c14\u71c3\u6599\u3002\u4e5f\u8bb8\u6700\u6709\u5bb3\u7684\u540e\u679c\u662f\uff0c\u5728\u4efb\u4f55\u56fe\u50cf\u6216\u89c6\u9891\u90fd\u53ef\u80fd\u88ab\u4f2a\u9020\u7684\u6570\u5b57\u4e16\u754c\u4e2d\uff0c\u4efb\u4f55\u4e0d\u65b9\u4fbf\u6216\u4e0d\u53d7\u6b22\u8fce\u7684\u8bb0\u5f55\u7684\u771f\u5b9e\u6027\u90fd\u53ef\u80fd\u53d7\u5230\u8d28\u7591\u3002\n\u5c3d\u7ba1\u5728\u5f00\u53d1\u81ea\u52a8\u6280\u672f\u4ee5\u68c0\u6d4b\u6df1\u5ea6\u865a\u5047\u5185\u5bb9\u65b9\u9762\u53d6\u5f97\u4e86\u8fdb\u5c55\uff08\u4f8b\u5982\uff0c\u53c2\u8003\u6587\u732e4\uff09\u21d3\u2013 6\uff09 \uff0c\u76ee\u524d\u7684\u6280\u672f\u6ca1\u6709\u8db3\u591f\u7684\u6548\u7387\u6216\u51c6\u786e\u6027\u6765\u5e94\u5bf9\u6bcf\u65e5\u4e0a\u4f20\u7684\u6d2a\u6d41\uff087\uff09\u3002\u56e0\u6b64\uff0c\u7f51\u7edc\u5185\u5bb9\u7684\u666e\u901a\u6d88\u8d39\u8005\u5fc5\u987b\u52aa\u529b\u533a\u5206\u771f\u5047\u3002\u6211\u4eec\u8fdb\u884c\u4e86\u4e00\u7cfb\u5217\u611f\u6027\u7814\u7a76\uff0c\u4ee5\u786e\u5b9a\u4eba\u7c7b\u53c2\u4e0e\u8005\u662f\u5426\u80fd\u591f\u533a\u5206\u6700\u5148\u8fdb\u7684\u5408\u6210\u4eba\u8138\u548c\u771f\u5b9e\u4eba\u8138\uff0c\u4ee5\u53ca\u8fd9\u4e9b\u4eba\u8138\u5f15\u53d1\u7684\u4fe1\u4efb\u7a0b\u5ea6\u3002\n\u5728\u8fd9\u9879\u7814\u7a76\u4e2d\uff0c315\u540d\u53c2\u4e0e\u8005\u5c06800\u5f20\u8138\u4e2d\u7684128\u5f20\u5206\u7c7b\u4e3a\u771f\u5b9e\u6216\u5408\u6210\u3002\u56fe2A\u663e\u793a\u4e86\u53c2\u4e0e\u8005\u51c6\u786e\u5ea6\u7684\u5206\u5e03\uff08\u84dd\u8272\u6761\uff09\u3002\u5e73\u5747\u51c6\u786e\u7387\u4e3a48.2%\uff0895%CI[47.1%\uff0c49.2%\uff09\uff0c\u63a5\u8fd150%\u7684\u5076\u7136\u8868\u73b0\uff0c\u65e0\u53cd\u5e94\u504f\u5dee\uff1ad\u2032=\u2212 0.09;      \u03b2 = 0.99. \u4e24\u6b21\u91cd\u590d\u6d4b\u91cf\u4e8c\u5143logistic\u56de\u5f52\u5206\u6790\uff0c\u4e00\u6b21\u7528\u4e8e\u771f\u5b9e\u4eba\u8138\uff0c\u53e6\u4e00\u6b21\u7528\u4e8e\u5408\u6210\u4eba\u8138\uff0c\u4ee5\u68c0\u9a8c\u523a\u6fc0\u7269\u6027\u522b\u548c\u79cd\u65cf\u5bf9\u51c6\u786e\u6027\u7684\u5f71\u54cd\u3002\u5bf9\u4e8e\u771f\u5b9e\u9762\u5b54\uff0c\u5b58\u5728\u663e\u8457\u7684\u6027\u522b\u00d7\u79cd\u65cf\u4ea4\u4e92\u4f5c\u7528\uff0c\u03c72\uff083\uff0cN=315\uff09=95.03\uff0cP&lt\uff1b0.001. \u4e8b\u540eBonferroni\u6821\u6b63\u7684\u6bd4\u8f83\u663e\u793a\uff0c\u4e1c\u4e9a\u7537\u6027\u9762\u5b54\u7684\u5e73\u5747\u51c6\u786e\u7387\u9ad8\u4e8e\u4e1c\u4e9a\u5973\u6027\u9762\u5b54\uff0c\u800c\u767d\u4eba\u7537\u6027\u9762\u5b54\u7684\u5e73\u5747\u51c6\u786e\u7387\u9ad8\u4e8e\u767d\u4eba\u5973\u6027\u9762\u5b54\u3002\u5bf9\u4e8e\u5408\u6210\u9762\u5b54\uff0c\u4e5f\u5b58\u5728\u663e\u8457\u7684\u6027\u522b\u00d7\u79cd\u65cf\u4ea4\u4e92\u4f5c\u7528\uff0c\u03c72\uff083\uff0cN=315\uff09=68.41\uff0cP&lt\uff1b0.001. \u5bf9\u4e8e\u7537\u6027\u548c\u5973\u6027\u5408\u6210\u4eba\u8138\u800c\u8a00\uff0c\u767d\u8138\u7684\u5206\u7c7b\u6700\u4e0d\u51c6\u786e\uff0c\u800c\u7537\u6027\u767d\u8138\u7684\u5206\u7c7b\u7cbe\u5ea6\u4f4e\u4e8e\u5973\u6027\u767d\u8138\u3002\u6211\u4eec\u5047\u8bbe\u767d\u8138\u66f4\u96be\u5206\u7c7b\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728StyleGAN2\u8bad\u7ec3\u6570\u636e\u96c6\u4e2d\u7684\u6bd4\u4f8b\u8fc7\u9ad8\uff0c\u56e0\u6b64\u66f4\u771f\u5b9e\u3002\n\u5728\u8fd9\u9879\u7814\u7a76\u4e2d\uff0c219\u540d\u65b0\u53c2\u4e0e\u8005\u901a\u8fc7\u8bad\u7ec3\u548c\u9010\u6b21\u8bd5\u9a8c\u53cd\u9988\uff0c\u4ece\u5b9e\u9a8c1\u4e2d\u7684800\u7ec4\u9762\u5b54\u4e2d\uff0c\u5bf9128\u5f20\u9762\u5b54\u8fdb\u884c\u4e86\u5206\u7c7b\u3002\u56fe2A\u663e\u793a\u4e86\u53c2\u4e0e\u8005\u51c6\u786e\u5ea6\u7684\u5206\u5e03\uff08\u6a59\u8272\u6761\uff09\u3002\u5e73\u5747\u51c6\u786e\u7387\u7565\u5fae\u63d0\u9ad8\u523059.0%\uff0895%\u53ef\u4fe1\u533a\u95f4[57.7%\uff0c60.4%\uff09\uff0c\u65e0\u53cd\u5e94\u504f\u5dee\uff1ad\u2032=0.46\uff1b\u03b2 = 0.99. \u5c3d\u7ba1\u63d0\u4f9b\u4e86\u4e00\u6b21\u53c8\u4e00\u6b21\u7684\u8bd5\u9a8c\u53cd\u9988\uff0c\u4f46\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u51c6\u786e\u7387\u6ca1\u6709\u63d0\u9ad8\uff0c\u7b2c\u4e00\u7ec464\u5f20\u8138\u7684\u5e73\u5747\u51c6\u786e\u7387\u4e3a59.3%\uff0895%\u53ef\u4fe1\u533a\u95f4[57.8%\uff0c60.7%]\uff09\uff0c\u7b2c\u4e8c\u7ec464\u5f20\u8138\u7684\u5e73\u5747\u51c6\u786e\u7387\u4e3a58.8%\uff0895%\u53ef\u4fe1\u533a\u95f4[57.4%\uff0c60.3%]\uff09\u3002\u8fdb\u4e00\u6b65\u5206\u6790\u6027\u522b\u548c\u79cd\u65cf\u5bf9\u51c6\u786e\u6027\u7684\u5f71\u54cd\uff0c\u91cd\u590d\u4e86\u5b9e\u9a8c1\u7684\u4e3b\u8981\u53d1\u73b0\u3002\u8fd9\u9879\u5206\u6790\u518d\u6b21\u8868\u660e\uff0c\u5bf9\u4e8e\u7537\u6027\u548c\u5973\u6027\u5408\u6210\u9762\u5b54\uff0c\u767d\u8272\u9762\u5b54\u662f\u6700\u96be\u5206\u7c7b\u7684\u3002\n\u5f53\u4e86\u89e3\u6e32\u67d3\u5de5\u4ef6\u5e76\u7ed9\u51fa\u53cd\u9988\u65f6\uff0c\u51c6\u786e\u5ea6\u6709\u4e86\u53ef\u9760\u7684\u63d0\u9ad8\uff1b\u7136\u800c\uff0c\u603b\u4f53\u8868\u73b0\u4ec5\u7565\u9ad8\u4e8e\u9884\u671f\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u7f3a\u4e4f\u6539\u5584\u8868\u660e\u53cd\u9988\u7684\u5f71\u54cd\u662f\u6709\u9650\u7684\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u4e00\u4e9b\u5408\u6210\u4eba\u8138\u6839\u672c\u4e0d\u5305\u542b\u53ef\u611f\u77e5\u7684\u4f2a\u5f71\u3002\n\u9762\u90e8\u8868\u60c5\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u4fe1\u606f\u6765\u6e90\uff0c\u4ec5\u4ec5\u51e0\u6beb\u79d2\u7684\u66dd\u5149\u65f6\u95f4\u5c31\u8db3\u4ee5\u5bf9\u4e2a\u4f53\u7279\u5f81\uff08\u5982\u53ef\u4fe1\u5ea6\uff09\u505a\u51fa\u9690\u542b\u63a8\u65ad\uff088\uff09\u3002\u6211\u4eec\u60f3\u77e5\u9053\u5408\u6210\u9762\u5b54\u662f\u5426\u4e5f\u4f1a\u6fc0\u6d3b\u540c\u6837\u7684\u53ef\u4fe1\u5ea6\u5224\u65ad\u3002\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u4e48\u4fe1\u4efb\u611f\u53ef\u4ee5\u5e2e\u52a9\u533a\u5206\u771f\u5b9e\u9762\u5b54\u548c\u5408\u6210\u9762\u5b54\u3002\n\u5728\u8fd9\u9879\u7814\u7a76\u4e2d\uff0c223\u540d\u53c2\u4e0e\u8005\u5bf9\u540c\u4e00\u7ec4800\u5f20\u8138\u4e2d\u7684128\u5f20\u8138\u7684\u53ef\u4fe1\u5ea6\u8fdb\u884c\u4e86\u8bc4\u5206\uff0c\u8bc4\u5206\u8303\u56f4\u4e3a1\uff08\u975e\u5e38\u4e0d\u53ef\u4fe1\uff09\u52307\uff08\u975e\u5e38\u53ef\u4fe1\uff09\uff089\uff09\u3002\u56fe2b\u6240\u793a\u4e3a\u5e73\u5747\u8bc4\u5206\u7684\u5206\u5e03\uff08\u901a\u8fc7\u5e73\u5747\u987a\u5e8f\u8bc4\u5206\uff0c\u6211\u4eec\u5047\u8bbe\u4e3a\u7ebf\u6027\u8bc4\u5206\u91cf\u8868\uff09\u3002\u771f\u5b9e\u9762\uff08\u84dd\u8272\u6761\uff09\u7684\u5e73\u5747\u8bc4\u7ea7\u4e3a4.48\uff0c\u4f4e\u4e8e\u5408\u6210\u9762\uff08\u6a59\u8272\u6761\uff09\u7684\u8bc4\u7ea7\u4e3a4.82\u3002\u867d\u7136\u53ea\u67097.7%\u7684\u53ef\u4fe1\u5ea6\u66f4\u9ad8\uff0c\u4f46\u8fd9\u79cd\u5dee\u5f02\u662f\u663e\u8457\u7684[t\uff08222\uff09=14.6\uff0cP&lt\uff1b0.001\uff0cd=0.49]\u3002\u867d\u7136\u5f71\u54cd\u5f88\u5c0f\uff0c\u4f46\u9ed1\u4eba\u9762\u5b54\u6bd4\u5357\u4e9a\u9762\u5b54\u66f4\u503c\u5f97\u4fe1\u4efb\uff0c\u4f46\u9664\u6b64\u4e4b\u5916\uff0c\u5728\u6574\u4e2a\u79cd\u65cf\u4e2d\u6ca1\u6709\u5f71\u54cd\u3002\u5973\u6027\u6bd4\u7537\u6027\u66f4\u503c\u5f97\u4fe1\u8d56\uff0c\u5206\u522b\u4e3a4.94\u548c4.36[t\uff08222\uff09=19.5\uff0cP&lt\uff1b0.001\uff0cd=0.82]\u3002\n\u56fe3\u663e\u793a\u4e86\u56db\u4e2a\u6700\u503c\u5f97\u4fe1\u8d56\u7684\u9762\u5b54\uff08\u56fe3\uff0c\u4e0a\u56fe\uff09\u548c\u56db\u4e2a\u6700\u4e0d\u503c\u5f97\u4fe1\u8d56\u7684\u9762\u5b54\uff08\u56fe3\uff0c\u4e0b\u56fe\uff09\u3002\u524d\u4e09\u4e2a\u6700\u503c\u5f97\u4fe1\u4efb\u7684\u4eba\u8138\u662f\u5408\u6210\u7684\uff08S\uff09\uff0c\u800c\u540e\u56db\u4e2a\u6700\u4e0d\u503c\u5f97\u4fe1\u4efb\u7684\u4eba\u8138\u662f\u771f\u5b9e\u7684\uff08R\uff09\u3002\u7b11\u8138\u66f4\u6709\u53ef\u80fd\u88ab\u8bc4\u4e3a\u503c\u5f97\u4fe1\u8d56\u7684\u9762\u5b54\uff0c\u4f4665.5%\u7684\u771f\u5b9e\u9762\u5b54\u548c58.8%\u7684\u5408\u6210\u9762\u5b54\u90fd\u5728\u5fae\u7b11\uff0c\u56e0\u6b64\u5355\u51ed\u9762\u90e8\u8868\u60c5\u65e0\u6cd5\u89e3\u91ca\u4e3a\u4ec0\u4e48\u5408\u6210\u9762\u5b54\u88ab\u8bc4\u4e3a\u66f4\u503c\u5f97\u4fe1\u8d56\u3002\n\u5408\u6210\u751f\u6210\u7684\u4eba\u8138\u4e0d\u4ec5\u5177\u6709\u9ad8\u5ea6\u7684\u7167\u7247\u771f\u5b9e\u611f\uff0c\u800c\u4e14\u51e0\u4e4e\u65e0\u6cd5\u4e0e\u771f\u5b9e\u4eba\u8138\u533a\u5206\u5f00\u6765\uff0c\u800c\u4e14\u88ab\u8ba4\u4e3a\u66f4\u53ef\u4fe1\u3002\u8fd9\u79cd\u8d85\u5199\u5b9e\u4e3b\u4e49\u4e0e\u6700\u8fd1\u7684\u7814\u7a76\u7ed3\u679c\u4e00\u81f4\uff0810,11\uff09\u3002\u8fd9\u4e24\u9879\u7814\u7a76\u7684\u79cd\u65cf\u548c\u6027\u522b\u591a\u6837\u6027\u4e0e\u6211\u4eec\u7684\u7814\u7a76\u4e0d\u540c\uff0c\u4e5f\u6ca1\u6709\u50cf\u6211\u4eec\u90a3\u6837\u5339\u914d\u771f\u5b9e\u548c\u5408\u6210\u7684\u9762\u5b54\uff0c\u4ee5\u5c3d\u91cf\u51cf\u5c11\u65e0\u610f\u4e2d\u7684\u7ebf\u7d22\u3002\u867d\u7136\u767d\u4eba\u7537\u6027\u9762\u90e8\u9ad8\u5ea6\u903c\u771f\u5e76\u4e0d\u4ee4\u4eba\u60ca\u8bb6\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u9762\u90e8\u5728\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u4e2d\u5360\u4e3b\u5bfc\u5730\u4f4d\uff0c\u4f46\u6211\u4eec\u53d1\u73b0\uff0c\u5408\u6210\u9762\u90e8\u7684\u771f\u5b9e\u611f\u8de8\u8d8a\u79cd\u65cf\u548c\u6027\u522b\u3002\u4e5f\u8bb8\u6700\u6709\u8da3\u7684\u662f\uff0c\u6211\u4eec\u53d1\u73b0\u5408\u6210\u4eba\u8138\u6bd4\u771f\u5b9e\u4eba\u8138\u66f4\u53ef\u4fe1\u3002\u8fd9\u53ef\u80fd\u662f\u56e0\u4e3a\u5408\u6210\u4eba\u8138\u770b\u8d77\u6765\u66f4\u50cf\u666e\u901a\u4eba\u8138\uff0c\u800c\u666e\u901a\u4eba\u8138\u672c\u8eab\u88ab\u8ba4\u4e3a\u66f4\u53ef\u4fe1\uff0812\uff09\u3002\u4e0d\u7ba1\u80cc\u540e\u7684\u539f\u56e0\u662f\u4ec0\u4e48\uff0c\u4eba\u5de5\u5408\u6210\u7684\u4eba\u8138\u5df2\u7ecf\u51fa\u73b0\u5728\u795e\u79d8\u5c71\u8c37\u7684\u53e6\u4e00\u8fb9\u3002\u8fd9\u5e94\u8be5\u88ab\u8ba4\u4e3a\u662f\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u548c\u89c6\u89c9\u9886\u57df\u7684\u6210\u529f\u3002\u540c\u65f6\uff0c\u65b9\u4fbf\u8bbf\u95ee\uff08https://thispersondoesnotexist.com)\u8fd9\u4e9b\u9ad8\u8d28\u91cf\u7684\u865a\u5047\u56fe\u50cf\u5df2\u7ecf\u5e76\u5c06\u7ee7\u7eed\u5bfc\u81f4\u5404\u79cd\u95ee\u9898\uff0c\u5305\u62ec\u66f4\u5177\u8bf4\u670d\u529b\u7684\u5728\u7ebf\u865a\u5047\u4e2a\u4eba\u8d44\u6599\uff0c\u4ee5\u53ca\u5408\u6210\u97f3\u9891\u548c\u89c6\u9891\u751f\u6210\u7ee7\u7eed\u6539\u5584\u975e\u611f\u5b98\u4eb2\u5bc6\u56fe\u50cf\uff0813\uff09\u3001\u6b3a\u8bc8\u548c\u865a\u5047\u4fe1\u606f\u6d3b\u52a8\u7684\u95ee\u9898\uff0c\u8fd9\u4e9b\u95ee\u9898\u5bf9\u4e2a\u4eba\u3001\u793e\u4f1a\u548c\u4e2a\u4eba\u90fd\u6709\u4e25\u91cd\u5f71\u54cd\uff0c\u6c11\u4e3b\u56fd\u5bb6\u3002\n\u56e0\u6b64\uff0c\u6211\u4eec\u9f13\u52b1\u5f00\u53d1\u8fd9\u4e9b\u6280\u672f\u6765\u8003\u8651\u76f8\u5173\u98ce\u9669\u662f\u5426\u5927\u4e8e\u5b83\u4eec\u7684\u6536\u76ca\u3002\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u4ec5\u4ec5\u56e0\u4e3a\u6280\u672f\u7684\u53d1\u5c55\u662f\u53ef\u80fd\u7684\uff0c\u5c31\u4e0d\u9f13\u52b1\u6280\u672f\u7684\u53d1\u5c55\u3002\u5982\u679c\u6ca1\u6709\uff0c\u90a3\u4e48\u6211\u4eec\u9f13\u52b1\u5e73\u884c\u5f00\u53d1\u5408\u7406\u7684\u4fdd\u969c\u63aa\u65bd\uff0c\u4ee5\u5e2e\u52a9\u51cf\u8f7b\u7531\u6b64\u4ea7\u751f\u7684\u5408\u6210\u4ecb\u8d28\u4e0d\u53ef\u907f\u514d\u7684\u5371\u5bb3\u3002\u4f8b\u5982\uff0c\u4fdd\u62a4\u63aa\u65bd\u53ef\u80fd\u5305\u62ec\u5c06\u9c81\u68d2\u6c34\u5370\u7eb3\u5165\u56fe\u50cf\u548c\u89c6\u9891\u5408\u6210\u7f51\u7edc\uff0c\u4ece\u800c\u63d0\u4f9b\u53ef\u9760\u8bc6\u522b\u7684\u4e0b\u6e38\u673a\u5236\uff0814\uff09\u3002\u7531\u4e8e\u8fd9\u9879\u5f3a\u5927\u6280\u672f\u7684\u4f7f\u7528\u6c11\u4e3b\u5316\u6784\u6210\u4e86\u6700\u5927\u7684\u5a01\u80c1\uff0c\u6211\u4eec\u8fd8\u9f13\u52b1\u91cd\u65b0\u8003\u8651\u5bf9\u516c\u4f17\u91c7\u53d6\u7684\u901a\u5e38\u662f\u81ea\u7531\u653e\u4efb\u7684\u65b9\u5f0f\uff0c\u4ee5\u53ca\u4e0d\u53d7\u9650\u5236\u5730\u53d1\u5e03\u4ee3\u7801\uff0c\u4ee5\u4fbf\u4efb\u4f55\u4eba\u5c06\u5176\u7eb3\u5165\u4efb\u4f55\u5e94\u7528\u7a0b\u5e8f\u3002\n\u5728\u8fd9\u4e2a\u5173\u952e\u65f6\u523b\uff0c\u6b63\u5982\u5176\u4ed6\u79d1\u5b66\u548c\u5de5\u7a0b\u9886\u57df\u6240\u505a\u7684\u90a3\u6837\uff0c\u6211\u4eec\u9f13\u52b1\u56fe\u5f62\u548c\u89c6\u89c9\u754c\u4e3a\u5408\u6210\u5a92\u4f53\u6280\u672f\u7684\u521b\u9020\u548c\u4f20\u64ad\u5236\u5b9a\u6307\u5bfc\u65b9\u9488\uff0c\u5176\u4e2d\u5305\u62ec\u7814\u7a76\u4eba\u5458\u3001\u51fa\u7248\u5546\u548c\u5a92\u4f53\u5206\u9500\u5546\u7684\u9053\u5fb7\u51c6\u5219\u3002\n\u6211\u4eec\u9009\u62e9\u4e86400\u5f20\u4f7f\u7528\u6700\u5148\u8fdb\u6837\u5f0f2\uff082\uff09\u5408\u6210\u7684\u8138\uff0c\u786e\u4fdd\u6027\u522b\uff08200\u540d\u5973\u6027\uff1b200\u540d\u7537\u6027\uff09\u3001\u4f30\u8ba1\u5e74\u9f84\uff08\u786e\u4fdd\u4ece\u513f\u7ae5\u5230\u8001\u5e74\u4eba\u7684\u5e74\u9f84\u8303\u56f4\uff09\u548c\u79cd\u65cf\uff08100\u540d\u975e\u88d4\u7f8e\u56fd\u4eba\u6216\u9ed1\u4eba\u3001100\u540d\u767d\u4eba\u3001100\u540d\u4e1c\u4e9a\u4eba\u548c100\u540d\u5357\u4e9a\u4eba\uff09\u7684\u591a\u6837\u6027\u3002\u4e3a\u4e86\u51cf\u5c11\u989d\u5916\u7684\u7ebf\u7d22\uff0c\u6211\u4eec\u53ea\u5305\u62ec\u80cc\u666f\u57fa\u672c\u4e00\u81f4\u7684\u56fe\u50cf\uff0c\u5e76\u4e14\u6ca1\u6709\u4efb\u4f55\u660e\u663e\u7684\u6e32\u67d3\u7455\u75b5\u3002\u8fd9\u79cd\u5bf9\u660e\u663e\u5de5\u4ef6\u7684\u5254\u9664\u4f7f\u5f97\u611f\u77e5\u4efb\u52a1\u66f4\u52a0\u56f0\u96be\u3002\u7136\u800c\uff0c\u7531\u4e8e\u5408\u6210\u8fc7\u7a0b\u975e\u5e38\u7b80\u5355\uff0c\u56e0\u6b64\u53ef\u4ee5\u5408\u7406\u5730\u5047\u8bbe\uff0c\u4efb\u4f55\u6545\u610f\u6b3a\u9a97\u5408\u6210\u4eba\u8138\u7684\u4f7f\u7528\u90fd\u4e0d\u4f1a\u5305\u542b\u660e\u663e\u7684\u89c6\u89c9\u4f2a\u5f71\u3002\n\u5bf9\u4e8e\u6bcf\u4e2a\u5408\u6210\u7684\u4eba\u8138\uff0c\u6211\u4eec\u4eceStyleGAN2\u5b66\u4e60\u9636\u6bb5\u4f7f\u7528\u7684\u57fa\u7840\u4eba\u8138\u6570\u636e\u5e93\u4e2d\u6536\u96c6\u4e86\u4e00\u5f20\u5339\u914d\u7684\u771f\u5b9e\u4eba\u8138\uff08\u6027\u522b\u3001\u5e74\u9f84\u3001\u79cd\u65cf\u548c\u6574\u4f53\u5916\u89c2\uff09\u3002\u4f7f\u7528\u6807\u51c6\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u63cf\u8ff0\u7b26\uff0815\uff09\u63d0\u53d6\u6bcf\u4e2a\u5408\u6210\u4eba\u8138\u7684\u4f4e\u7ef4\u3001\u6709\u611f\u77e5\u610f\u4e49\uff0816\uff09\u8868\u793a\u3002\u6bcf\u4e2a\u5408\u6210\u4eba\u8138\u7684\u63d0\u53d6\u8868\u793a\u2014\u20144096-D\u5b9e\u503c\u5411\u91cfv\u2192 \u572870000\u5f20\u771f\u5b9e\u4eba\u8138\u7684\u6570\u636e\u96c6\u4e2d\uff0cs-\u4e0e\u6240\u6709\u5176\u4ed6\u4eba\u8138\u8868\u793a\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ee5\u627e\u5230\u6700\u76f8\u4f3c\u7684\u4eba\u8138\u3002\u4ee3\u8868v\u7684\u771f\u5b9e\u9762\u5b54\u2192 r\u4e0ev\u7684\u6b27\u6c0f\u8ddd\u79bb\u6700\u5c0f\u2192 s\u3001 \u5e76\u6ee1\u8db3\u6211\u4eec\u7684\u5b9a\u6027\u9009\u62e9\u6807\u51c6\uff0c\u88ab\u9009\u4e3a\u5339\u914d\u9762\u3002\u4e0e\u5408\u6210\u4eba\u8138\u4e00\u6837\uff0c\u4e3a\u4e86\u51cf\u5c11\u5916\u90e8\u7ebf\u7d22\uff0c\u6211\u4eec\u53ea\u5305\u62ec1\uff09\u80cc\u666f\u57fa\u672c\u4e00\u81f4\u7684\u56fe\u50cf\uff0c2\uff09\u65e0\u969c\u788d\u7684\u4eba\u8138\uff08\u4f8b\u5982\u8138\u524d\u6ca1\u6709\u5e3d\u5b50\u6216\u624b\uff09\uff0c3\uff09\u805a\u7126\u548c\u9ad8\u5206\u8fa8\u7387\uff0c\u4ee5\u53ca4\uff09\u8863\u670d\u4e0a\u6ca1\u6709\u660e\u663e\u7684\u6587\u5b57\u6216\u6807\u5fd7\u3002\u6211\u4eec\u76ee\u6d4b\u4e86\u591a\u8fbe50\u5f20\u6700\u5339\u914d\u7684\u8138\uff0c\u9009\u62e9\u4e86\u4e00\u5f20\u7b26\u5408\u4e0a\u8ff0\u6807\u51c6\u7684\u8138\uff0c\u5e76\u4e14\u5728\u6574\u4f53\u9762\u90e8\u4f4d\u7f6e\u3001\u59ff\u52bf\u3001\u8868\u60c5\u4ee5\u53ca\u773c\u955c\u548c\u73e0\u5b9d\u7684\u5b58\u5728\u65b9\u9762\u4e5f\u5339\u914d\u3002\u56fe4\u6240\u793a\u4e3a\u8fd9\u4e9b\u5339\u914d\u7684\u771f\u5b9e\u9762\u548c\u5408\u6210\u9762\u7684\u4ee3\u8868\u6027\u793a\u4f8b\u3002\n\u5bf9\u4e8e\u5b9e\u9a8c1\uff08\u57fa\u7ebf\uff09\uff0c\u6211\u4eec\u4ece\u4e9a\u9a6c\u900a\u7684\u673a\u68b0\u571f\u8033\u5176\u4eba\u5927\u5e08\u90a3\u91cc\u62db\u52df\u4e86315\u540d\u53c2\u4e0e\u8005\u3002\u6bcf\u4f4d\u53c2\u4e0e\u8005\u9996\u5148\u9605\u8bfb\u4e00\u7bc7\u7b80\u77ed\u7684\u4ecb\u7ecd\uff0c\u89e3\u91ca\u7814\u7a76\u7684\u76ee\u7684\uff0c\u5e76\u7b80\u8981\u89e3\u91ca\u4ec0\u4e48\u662f\u5408\u6210\u8138\u3002\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u6bcf\u4e2a\u53c2\u4e0e\u8005\u90fd\u88ab\u544a\u77e5\uff0c\u4ed6\u4eec\u5c06\u83b7\u5f975\u7f8e\u5143\u7684\u65f6\u95f4\u62a5\u916c\uff0c\u5982\u679c\u4ed6\u4eec\u7684\u603b\u4f53\u51c6\u786e\u5ea6\u5728\u56de\u7b54\u51c6\u786e\u5ea6\u7684\u524d20%\uff0c\u5219\u989d\u5916\u83b7\u5f975\u7f8e\u5143\u3002\u53c2\u4e0e\u8005\u8fd8\u88ab\u544a\u77e5\uff0c\u4ed6\u4eec\u5c06\u770b\u523010\u4e2a\u660e\u663e\u5408\u6210\u7684\u8138\u7684\u6293\u6355\u8bd5\u9a8c\uff0c\u8fd9\u4e9b\u8138\u6709\u660e\u663e\u7684\u6e32\u67d3\u9519\u8bef\u3002\u5728\u8fd9\u4e9b\u8bd5\u9a8c\u4e2d\uff0c\u81f3\u5c11\u6709\u4e5d\u6b21\u672a\u80fd\u505a\u51fa\u6b63\u786e\u53cd\u5e94\uff0c\u5bfc\u81f4\u53c2\u4e0e\u8005\u6ca1\u6709\u83b7\u5f97\u62a5\u916c\uff0c\u4ed6\u4eec\u7684\u6570\u636e\u88ab\u6392\u9664\u5728\u6211\u4eec\u7684\u7814\u7a76\u4e4b\u5916\u3002\u7136\u540e\u6bcf\u4e2a\u53c2\u4e0e\u8005\u770b\u5230128\u5f20\u56fe\u7247\uff0c\u4e00\u6b21\u4e00\u5f20\uff0c\u5e76\u6307\u5b9a\u56fe\u7247\u662f\u771f\u5b9e\u7684\u8fd8\u662f\u5408\u6210\u7684\u3002\u53c2\u4e0e\u8005\u6709\u65e0\u9650\u7684\u65f6\u95f4\u56de\u590d\uff0c\u6bcf\u6b21\u56de\u590d\u540e\u90fd\u6ca1\u6709\u6536\u5230\u53cd\u9988\u3002\n\u5728\u5b9e\u9a8c2\uff08\u57f9\u8bad\u548c\u53cd\u9988\uff09\u4e2d\uff0c\u6211\u4eec\u53c8\u62db\u52df\u4e86219\u540d\u571f\u8033\u5176\u673a\u68b0\u5927\u5e08\uff08\u672c\u7814\u7a76\u53c2\u4e0e\u8005\u8f83\u5c11\uff0c\u56e0\u4e3a\u6211\u4eec\u6392\u9664\u4e86\u4efb\u4f55\u5b8c\u6210\u7b2c\u4e00\u9879\u7814\u7a76\u7684\u53c2\u4e0e\u8005\uff09\u3002\u6bcf\u4f4d\u53c2\u4e0e\u8005\u9996\u5148\u9605\u8bfb\u4e00\u7bc7\u7b80\u77ed\u7684\u4ecb\u7ecd\uff0c\u89e3\u91ca\u7814\u7a76\u7684\u76ee\u7684\uff0c\u5e76\u7b80\u8981\u89e3\u91ca\u4ec0\u4e48\u662f\u5408\u6210\u8138\u3002\u7136\u540e\u5411\u53c2\u4e0e\u8005\u5c55\u793a\u4e86\u4e00\u4e2a\u7b80\u77ed\u7684\u6559\u7a0b\uff0c\u63cf\u8ff0\u4e86\u53ef\u7528\u4e8e\u8bc6\u522b\u5408\u6210\u4eba\u8138\u7684\u7279\u5b9a\u6e32\u67d3\u5de5\u4ef6\u7684\u793a\u4f8b\u3002\u6240\u6709\u5176\u4ed6\u5b9e\u9a8c\u6761\u4ef6\u4e0e\u5b9e\u9a8c1\u76f8\u540c\uff0c\u53ea\u662f\u53c2\u4e0e\u8005\u5728\u6bcf\u6b21\u56de\u7b54\u540e\u90fd\u4f1a\u6536\u5230\u53cd\u9988\u3002\n\u5728\u5b9e\u9a8c3\uff08\u53ef\u4fe1\u5ea6\uff09\u4e2d\uff0c\u6211\u4eec\u62db\u52df\u4e86223\u540d\u571f\u8033\u5176\u673a\u68b0\u5927\u5e08\u3002\u6bcf\u4f4d\u53c2\u4e0e\u8005\u9996\u5148\u9605\u8bfb\u4e86\u4e00\u7bc7\u7b80\u77ed\u7684\u4ecb\u7ecd\uff0c\u8bf4\u660e\u8be5\u7814\u7a76\u7684\u76ee\u7684\u662f\u57281\uff08\u975e\u5e38\u4e0d\u53ef\u4fe1\uff09\u52307\uff08\u975e\u5e38\u53ef\u4fe1\uff09\u7684\u8303\u56f4\u5185\u8bc4\u4f30\u4e00\u5f20\u8138\u7684\u53ef\u4fe1\u5ea6\u3002\u56e0\u4e3a\u8fd9\u91cc\u6ca1\u6709\u6b63\u786e\u7684\u7b54\u6848\uff0c\u6240\u4ee5\u6ca1\u6709\u63d0\u4f9b\u9010\u4e2a\u8bd5\u9a8c\u7684\u53cd\u9988\u3002\u53c2\u4e0e\u8005\u8fd8\u88ab\u544a\u77e5\uff0c\u4ed6\u4eec\u5c06\u770b\u523010\u4e2a\u9762\u90e8\u6293\u6355\u8bd5\u9a8c\uff0c\u5176\u4e2d\u6570\u5b57\u53ef\u4fe1\u8bc4\u7ea7\u76f4\u63a5\u8986\u76d6\u5728\u9762\u90e8\u3002\u5728\u8fd9\u4e9b\u8bd5\u9a8c\u4e2d\uff0c\u81f3\u5c11\u6709\u4e5d\u6b21\u672a\u80fd\u6b63\u786e\u62a5\u544a\u6307\u5b9a\u7684\u8bc4\u5206\uff0c\u5bfc\u81f4\u53c2\u4e0e\u8005\u6ca1\u6709\u83b7\u5f97\u62a5\u916c\uff0c\u4ed6\u4eec\u7684\u6570\u636e\u88ab\u6392\u9664\u5728\u6211\u4eec\u7684\u7814\u7a76\u4e4b\u5916\u3002\u7136\u540e\u6bcf\u4e2a\u53c2\u4e0e\u8005\u770b\u5230128\u5f20\u56fe\u7247\uff0c\u4e00\u6b21\u4e00\u5f20\uff0c\u5e76\u88ab\u8981\u6c42\u5bf9\u53ef\u4fe1\u5ea6\u8fdb\u884c\u8bc4\u5206\u3002\u53c2\u4e0e\u8005\u6709\u65e0\u9650\u7684\u65f6\u95f4\u505a\u51fa\u56de\u5e94\u3002\n\u6240\u6709\u5b9e\u9a8c\u90fd\u662f\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u5927\u5b66\u3001\u4f2f\u514b\u5229\u4fdd\u62a4\u4eba\u7c7b\u5b66\u79d1\u529e\u516c\u5ba4\uff08\u534f\u8baeID 2019-0712422\uff09\u548c\u5170\u5f00\u65af\u7279\u5927\u5b66\u79d1\u5b66\u6280\u672f\u7814\u7a76\u4f26\u7406\u59d4\u5458\u4f1a\uff08\u534f\u8baeID FST200 76\uff09\u7684\u6279\u51c6\u4e0b\u8fdb\u884c\u7684\u3002\u53c2\u4e0e\u8005\u5728\u53c2\u4e0e\u7814\u7a76\u524d\u7ed9\u4e88\u5145\u5206\u77e5\u60c5\u540c\u610f\u3002\n\u56fe\u50cf\u5df2\u5b58\u653e\u5728GitHub\uff08https://github.com/NVlabs/stylegan2\u548chttps://github.com/NVlabs/ffhq-dataset).\u533f\u540d\u5b9e\u9a8c\u523a\u6fc0\u548c\u6570\u636e\u5df2\u5b58\u50a8\u5728\u5f00\u653e\u79d1\u5b66\u6846\u67b6\uff08https://osf.io/ru36d/).\n\u6211\u4eec\u611f\u8c22Erik H\u00e4rk\u00f6nen\u3001Jaakko Lehtinen\u548cDavid Luebke\u5bf9\u4eba\u8138\u7684\u5de7\u5999\u5408\u6210\u3002\n\u4f5c\u8005\u8d21\u732e\uff1aS.J.N.\u548cH.F.\u8bbe\u8ba1\u7814\u7a76\uff0c\u6267\u884c\u7814\u7a76\uff0c\u8d21\u732e\u65b0\u8bd5\u5242/\u5206\u6790\u5de5\u5177\uff0c\u5206\u6790\u6570\u636e\uff0c\u5e76\u64b0\u5199\u8bba\u6587\u3002", "note_en": "Edited by William Press, Computer Sciences and Integrative Biology, University of Texas at Austin, Austin, TX; received November 11, 2021; accepted December 20, 2021\n    Artificial intelligence (AI)\u2013synthesized text, audio, image, and video are being weaponized for the purposes of nonconsensual intimate imagery, financial fraud, and disinformation campaigns. Our evaluation of the photorealism of AI-synthesized faces indicates that synthesis engines have passed through the uncanny valley and are capable of creating faces that are indistinguishable\u2014and more trustworthy\u2014than real faces.\n  Artificial intelligence (AI)\u2013powered audio, image, and video synthesis\u2014so-called deep fakes\u2014has democratized access to previously exclusive Hollywood-grade, special effects technology. From synthesizing speech in anyone\u2019s voice ( 1) to synthesizing an image of a fictional person ( 2) and swapping one person\u2019s identity with another or altering what they are saying in a video ( 3), AI-synthesized content holds the power to entertain but also deceive.\n Generative adversarial networks (GANs) are popular mechanisms for synthesizing content. A GAN pits two neural networks\u2014a generator and discriminator\u2014against each other. To synthesize an image of a fictional person, the generator starts with a random array of pixels and iteratively learns to synthesize a realistic face. On each iteration, the discriminator learns to distinguish the synthesized face from a corpus of real faces; if the synthesized face is distinguishable from the real faces, then the discriminator penalizes the generator. Over multiple iterations, the generator learns to synthesize increasingly more realistic faces until the discriminator is unable to distinguish it from real faces (see  Fig. 1 for example real and synthetic faces).\n  Much has been written in the popular press about the potential threats of deep fakes, including the creation of nonconsensual intimate imagery (more commonly referred to by the misnomer \u201crevenge porn\u201d), small- to large-scale fraud, and adding jet fuel to already dangerous disinformation campaigns. Perhaps most pernicious is the consequence that, in a digital world in which any image or video can be faked, the authenticity of any inconvenient or unwelcome recording can be called into question.\n Although progress has been made in developing automatic techniques to detect deep-fake content (e.g., refs.  4  \u21d3\u2013 6), current techniques are not efficient or accurate enough to contend with the torrent of daily uploads ( 7). The average consumer of online content, therefore, must contend with sorting out the real from the fake. We performed a series of perceptual studies to determine whether human participants can distinguish state-of-the-art GAN-synthesized faces from real faces and what level of trust the faces evoked.\n In this study, 315 participants classified, one at a time, 128 of the 800 faces as real or synthesized. Shown in  Fig. 2 A is the distribution of participant accuracy (blue bars). The average accuracy is 48.2% (95% CI [47.1%, 49.2%]), close to chance performance of 50%, with no response bias:      d \u2032 = \u2212 0.09;      \u03b2 = 0.99. Two repeated-measures binary logistic regression analyses were conducted\u2014one for real and one for synthetic faces\u2014to examine the effect of stimuli gender and race on accuracy. For real faces, there was a significant gender \u00d7 race interaction,       \u03c7 2 ( 3 , N = 315 ) = 95.03 , P &lt; 0.001. Post hoc Bonferroni-corrected comparisons revealed that mean accuracy was higher for male East Asian faces than female East Asian faces and higher for male White faces than female White faces. For synthetic faces, there was also a significant gender \u00d7 race interaction,       \u03c7 2 ( 3 , N = 315 ) = 68.41 , P &lt; 0.001. For both male and female synthetic faces, White faces were the least accurately classified, and male White faces were less accurately classified than female White faces. We hypothesize that White faces are more difficult to classify because they are overrepresented in the StyleGAN2 training dataset and are therefore more realistic.\n In this study, 219 new participants, with training and trial-by-trial feedback, classified 128 faces taken from the same 800 set of faces as in experiment 1. Shown in  Fig. 2 A is the distribution of participant accuracy (orange bars). The average accuracy improved slightly to 59.0% (95% CI [57.7%, 60.4%]), with no response bias:      d \u2032 = 0.46;      \u03b2 = 0.99. Despite providing trial-by-trial feedback, there was no improvement in accuracy over time, with an average accuracy of 59.3% (95% CI [57.8%, 60.7%]) for the first set of 64 faces and 58.8% (95% CI [57.4%, 60.3%]) for the second set of 64 faces. Further analyses to examine the effect of gender and race on accuracy replicated the primary findings of experiment 1. This analysis again revealed that, for both male and female synthetic faces, White faces were the most difficult to classify.\n When made aware of rendering artifacts and given feedback, there was a reliable improvement in accuracy; however, overall performance remained only slightly above chance. The lack of improvement over time suggests that the impact of feedback is limited, presumably because some synthetic faces simply do not contain perceptually detectable artifacts.\n Faces provide a rich source of information, with exposure of just milliseconds sufficient to make implicit inferences about individual traits such as trustworthiness ( 8). We wondered whether synthetic faces activate the same judgements of trustworthiness. If not, then a perception of trustworthiness could help distinguish real from synthetic faces.\n In this study, 223 participants rated the trustworthiness of 128 faces taken from the same set of 800 faces on a scale of 1 (very untrustworthy) to 7 (very trustworthy) ( 9). Shown in  Fig. 2 B is the distribution of average ratings (by averaging the ordinal ratings, we are assuming a linear rating scale). The average rating for real faces (blue bars) of 4.48 is less than the rating of 4.82 for synthetic faces (orange bars). Although only 7.7% more trustworthy, this difference is significant [     t ( 222 ) = 14.6 , P &lt; 0.001 , d = 0.49]. Although a small effect, Black faces were rated more trustworthy than South Asian faces, but, otherwise, there was no effect across race. Women were rated as significantly more trustworthy than men, 4.94 as compared to 4.36 [     t ( 222 ) = 19.5 , P &lt; 0.001 , d = 0.82].\n Shown in  Fig. 3 are the four most ( Fig. 3,  Top) and four least ( Fig. 3,  Bottom) trustworthy faces. The top three most trustworthy faces are synthetic (S), while the bottom four least trustworthy faces are real (R). A smiling face is more likely to be rated as trustworthy, but 65.5% of our real faces and 58.8% of synthetic faces are smiling, so facial expression alone cannot explain why synthetic faces are rated as more trustworthy.\n Synthetically generated faces are not just highly photorealistic, they are nearly indistinguishable from real faces and are judged more trustworthy. This hyperphotorealism is consistent with recent findings ( 10,  11). These two studies did not contain the same diversity of race and gender as ours, nor did they match the real and synthetic faces as we did to minimize the chance of inadvertent cues. While it is less surprising that White male faces are highly realistic\u2014because these faces dominate the neural network training\u2014we find that the realism of synthetic faces extends across race and gender. Perhaps most interestingly, we find that synthetically generated faces are more trustworthy than real faces. This may be because synthesized faces tend to look more like average faces which themselves are deemed more trustworthy ( 12). Regardless of the underlying reason, synthetically generated faces have emerged on the other side of the uncanny valley. This should be considered a success for the fields of computer graphics and vision. At the same time, easy access ( https://thispersondoesnotexist.com) to such high-quality fake imagery has led and will continue to lead to various problems, including more convincing online fake profiles and\u2014as synthetic audio and video generation continues to improve\u2014problems of nonconsensual intimate imagery ( 13), fraud, and disinformation campaigns, with serious implications for individuals, societies, and democracies.\n We, therefore, encourage those developing these technologies to consider whether the associated risks are greater than their benefits. If so, then we discourage the development of technology simply because it is possible. If not, then we encourage the parallel development of reasonable safeguards to help mitigate the inevitable harms from the resulting synthetic media. Safeguards could include, for example, incorporating robust watermarks into the image and video synthesis networks that would provide a downstream mechanism for reliable identification ( 14). Because it is the democratization of access to this powerful technology that poses the most significant threat, we also encourage reconsideration of the often laissez-faire approach to the public and unrestricted releasing of code for anyone to incorporate into any application.\n At this pivotal moment, and as other scientific and engineering fields have done, we encourage the graphics and vision community to develop guidelines for the creation and distribution of synthetic media technologies that incorporate ethical guidelines for researchers, publishers, and media distributors.\n We selected 400 faces synthesized using the state-of-the-art StyleGAN2 ( 2), ensuring diversity across gender (200 women; 200 men), estimated age (ensuring a range of ages from children to older adults), and race (100 African American or Black, 100 Caucasian, 100 East Asian, and 100 South Asian). To reduce extraneous cues, we only included images with a mostly uniform background, and devoid of any obvious rendering artifacts. This culling of obvious artifacts makes the perceptual task harder. Because the synthesis process is so easy, however, it is reasonable to assume that any intentionally deceptive use of a synthetic face will not contain obvious visual artifacts.\n For each synthesized face, we collected a matching real face (in terms of gender, age, race, and overall appearance) from the underlying face database used in the StyleGAN2 learning stage. A standard convolutional neural network descriptor ( 15) was used to extract a low-dimensional, perceptually meaningful ( 16) representation of each synthetic face. The extracted representation for each synthetic face\u2014a 4,096-D real-valued vector        v \u2192 s\u2014was compared with all other facial representations in the data set of 70,000 real faces to find the most similar face. The real face with representation        v \u2192 r with minimal Euclidean distance to        v \u2192 s, and satisfying our qualitative selection criteria, is selected as the matching face. As with the synthetic faces, to reduce extraneous cues, we only included images 1) with a mostly uniform background, 2) with unobstructed faces (e.g., no hats or hands in front of face), 3) in focus and high resolution, and 4) with no obvious writing or logos on clothing. We visually inspected up to 50 of the best matched faces and selected the one that met the above criteria and was also matched in terms of overall face position, posture, and expression, and presence of glasses and jewelry. Shown in  Fig. 4 are representative examples of these matched real and synthetic faces.\n For experiment 1 (baseline), we recruited 315 participants from Amazon\u2019s Mechanical Turk Master Workers. Each participant first read a brief introduction explaining the purpose of the study and a brief explanation of what a synthetic face is. Before beginning, each participant was informed they would be paid $5 for their time, and an extra $5 if their overall accuracy was in the top 20% of response accuracies. Participants were also informed they would see 10 catch trials of obviously synthetic faces with glaring rendering errors. A failure to respond correctly to at least nine of these trials led to the participants not being paid and their data being excluded from our study. Each participant then saw 128 images, one at a time, and specified whether the image was real or synthetic. Participants had an unlimited amount of time to respond and were not provided with feedback after each response.\n For experiment 2 (training and feedback), we recruited another 219 Mechanical Turk Master Workers (we had fewer participants in this study because we excluded any participants who completed the first study). Each participant first read a brief introduction explaining the purpose of the study and a brief explanation of what a synthetic face is. Participants were then shown a short tutorial describing examples of specific rendering artifacts that can be used to identify synthetic faces. All other experimental conditions were the same as in experiment 1, except that participants received feedback after each response.\n For experiment 3 (trustworthiness), we recruited 223 Mechanical Turk Master Workers. Each participant first read a brief introduction explaining that the purpose of the study was to assess the trustworthiness of a face on a scale of 1 (very untrustworthy) to 7 (very trustworthy). Because there was no correct answer here, no trial-by-trial feedback was provided. Participants were also informed they would see 10 catch trials of faces in which the numeric trustworthy rating was directly overlaid atop the face. A failure to correctly report the specified rating on at least nine of these trials led to the participants not being paid and their data being excluded from our study. Each participant then saw 128 images, one at a time, and was asked to rate the trustworthiness. Participants had an unlimited amount of time to respond.\n All experiments were carried out with the approval of the University of California, Berkeley\u2019s Office for Protection of Human Subjects (Protocol ID 2019-07-12422) and Lancaster University\u2019s Faculty of Science and Technology Research Ethics Committee (Protocol ID FST20076). Participants gave fully informed consent prior to taking part in the study.\n Images have been deposited in GitHub ( https://github.com/NVlabs/stylegan2 and  https://github.com/NVlabs/ffhq-dataset). Anonymized experimental stimuli and data have been deposited in the Open Science Framework ( https://osf.io/ru36d/).\n We thank Erik H\u00e4rk\u00f6nen, Jaakko Lehtinen, and David Luebke for their masterful synthesis of faces.\n Author contributions: S.J.N. and H.F. designed research, performed research, contributed new reagents/analytic tools, analyzed data, and wrote the paper.", "posttime": "2022-02-15 20:07:10", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4eba\u5de5\u667a\u80fd,rust,\u5408\u6210,faces", "title": "\u4eba\u5de5\u667a\u80fd\u5408\u6210\u7684\u4eba\u8138\u4e0e\u771f\u5b9e\u4eba\u8138\u65e0\u6cd5\u533a\u5206\uff0c\u800c\u4e14\u66f4\u53ef\u4fe1", "title_en": "AI-synthesized faces are indistinguishable from real faces and more trustworthy", "transed": 1, "url": "https://www.pnas.org/content/119/8/e2120481119", "via": "", "real_tags": ["\u4eba\u5de5\u667a\u80fd", "rust", "\u5408\u6210", "faces"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073510, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "$ssh ping-c 3 kimSSHPING kimray from kim:ssh_seq=1\u6b21=109\u6beb\u79d2kim\u56de\u590d\uff1assh_seq=2\u6b21=136\u6beb\u79d2kim\u56de\u590d\uff1assh_seq=3\u6b21=141\u6beb\u79d2--kim ping\u7edf\u8ba1\u6570\u636e--\u4f20\u8f933\u4e2a\u8bf7\u6c42\uff0c\u63a5\u65363\u4e2a\u8bf7\u6c42\uff0c0%\u8bf7\u6c42\u4e22\u5931\n$ssh diff/etc/hosts:/etc/hosts\uff08&lt\uff1b\uff09\u4f7f\u7528/etc/hosts\uff08&gt\uff1b\uff091,2c1,2&lt\uff1b127.0.0.1\u672c\u5730\u4e3b\u673a&lt\uff1b127.0.1.1\u91d1--&gt\uff1b127.0.0.1\u672c\u5730\u4e3b\u673a&gt\uff1b127.0.1.1\u7728\u773c\n6:6:6:6:6:6:6:6:6:6:6:6:6:6:6:8:8:8:8:8:8:8:8:8:10:6:6:6:6:6:6\uff1aadadadadvvvvvvvvvvvvvvvvvvvvv6:6:6:6:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:18:8:8:8:8:8:8:18:8:8:18:18:18:8:18\uff08c:18:93:08:3a:4c:84:64:87:91\uff08RSA\uff092048SHA256 WKOZD8BAELJEJGTAWCKBYB4KHDI0PNJB2/gcS1Lk\n$ssh certinfo~/\u3002ssh/*\u3002pub/home/vaporup/\u3002ssh/id_rsa-cert.pub ssh_cert_\u6c38\u4e45\u6709\u6548-&gt\uff1b\u6c38\u8fdc/\u5bb6/vaporup/\u3002ssh/test1-cert.pub ssh_cert_\u65e0\u65482038-01-19T04:14:07-&gt\uff1b2038-01-19T04:14:07/home/vaporup/\u3002ssh/test2-cert.pub ssh_cert_\u8fc7\u671f1988-11-14T13:36:40-&gt\uff1b1991-08-11T14:36:40$ssh certinfo-v~/\u3002ssh/*\u3002pub/home/vaporup/\u3002ssh/id_rsa-cert.pub:\u7c7b\u578b\uff1assh rsa cert-v01@openssh.com\u7528\u6237\u8bc1\u4e66\u516c\u94a5\uff1aRSA-CERT SHA256:Mm7o312345YEaWetVshTBslX48h0XJceLWzxx3RugDg\u7b7e\u540dCA:RSA SHA256:4fcOpOm/Xk12345mYnihk0cr6SdjghPgONxriMJex+\u5bc6\u94a5ID:&#34\uff1bvaporup\u548c#34\uff1b\u5e8f\u5217\u53f7\uff1a0\u6709\u6548\uff1a\u6c38\u4e45\u4e3b\u4f53\uff1a\uff08\u65e0\uff09\u5173\u952e\u9009\u9879\uff1a\uff08\u65e0\uff09\u6269\u5c55\u540d\uff1apermit-X11-forwarding permit agent forwarding permit port forwarding permit pty permit user rc\n\u5f3a\u5236\u5b9e\u65bd\u5bc6\u7801\u8eab\u4efd\u9a8c\u8bc1\uff08\u53ea\u8981\u670d\u52a1\u5668\u5141\u8bb8\uff09\u3002\u6bcf\u6b21\u5728\u8c37\u6b4c\u4e0a\u641c\u7d22SSH\u9009\u9879\u90fd\u4f1a\u8ba9\u4eba\u975e\u5e38\u607c\u706b\u3002e\u3001 g.\u7528\u4e8e\u8df3\u8fc7\u57fa\u4e8e\u5bc6\u94a5\u7684\u767b\u5f55\u4ee5\u8fdb\u884c\u5bc6\u7801\u6d4b\u8bd5\u3002", "note_en": "$ ssh-ping -c 3 kimSSHPING kimReply from kim: ssh_seq=1 time=109 msReply from kim: ssh_seq=2 time=136 msReply from kim: ssh_seq=3 time=141 ms--- kim ping statistics ---3 requests transmitted, 3 requests received, 0% request loss\n      $ ssh-diff /etc/hosts kimComparing kim:/etc/hosts (&lt;) with /etc/hosts (&gt;)1,2c1,2&lt; 127.0.0.1 localhost&lt; 127.0.1.1 kim---&gt; 127.0.0.1 localhost&gt; 127.0.1.1 blinky\n      $ ssh-hostkeys kim (ECDSA) 256 MD5 3d:8e:49:6e:40:34:c6:e4:c8:5f:60:d9:ad:bf:1f:b9 (ECDSA) 256 SHA256 txYpmPENBWolKBaA5EkCM/y1Hm2DP81jtABFrWUBf/c(ED25519) 256 MD5 a8:93:71:f9:13:d0:32:02:c0:e5:1e:f6:b9:db:8c:b0(ED25519) 256 SHA256 JZMLzNS2ifdGYv2SrqDodz7+/qaRCTBPukaCnMQqbX8 (RSA) 2048 MD5 8b:37:63:cd:58:fd:9c:18:93:08:3a:4c:84:64:87:91 (RSA) 2048 SHA256 WkOzD8BaeljejgTTAwECkByyb4kHdI0pnJB2/gcS1Lk\n      $ ssh-certinfo ~/.ssh/*.pub/home/vaporup/.ssh/id_rsa-cert.pub SSH_CERT_VALID forever -&gt; forever/home/vaporup/.ssh/test1-cert.pub SSH_CERT_INVALID 2038-01-19T04:14:07 -&gt; 2038-01-19T04:14:07/home/vaporup/.ssh/test2-cert.pub SSH_CERT_EXPIRED 1988-11-14T13:36:40 -&gt; 1991-08-11T14:36:40$ ssh-certinfo -v ~/.ssh/*.pub/home/vaporup/.ssh/id_rsa-cert.pub: Type: ssh-rsa-cert-v01@openssh.com user certificate Public key: RSA-CERT SHA256:Mm7o312345YEaWetVshTBslX48h0XJceLWzxx3RugDg Signing CA: RSA SHA256:4fcOpOm/Xk12345mYnihk0cr6SdjghPgONxriMJex+A Key ID: &#34;vaporup&#34; Serial: 0 Valid: forever Principals: (none) Critical Options: (none) Extensions: permit-X11-forwarding permit-agent-forwarding permit-port-forwarding permit-pty permit-user-rc\n  Enforces password authentication (as long as the server allows it). It became quite annoying googling the SSH options for this every time. e.g. used to skip key-based login for password testing.", "posttime": "2022-02-15 20:05:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "ssh", "title": "SSH\u5de5\u5177\uff1a\u8ba9SSH\u66f4\u65b9\u4fbf", "title_en": "SSH-tools: Making SSH more convenient", "transed": 1, "url": "https://github.com/vaporup/ssh-tools", "via": "", "real_tags": ["ssh"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073509, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5176\u4e2d\u4e00\u4e2a\u6e38\u620f\u662f\u300a\u56da\u5f92\u300b&#39\uff1bs\u56f0\u5883\uff08\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7b56\u7565&#34\uff1bKrump&#34\uff1b\u901a\u5e38\u88ab\u79f0\u4e3a&#34\uff1b\u5408\u4f5c&#34\uff1b\uff0c\u800c&#34\uff1bFlitz&#34\uff1b\u901a\u5e38\u88ab\u79f0\u4e3a&#34\uff1b\u7f3a\u9677&#\uff09\u3002\u4f46\u662f\u56da\u72af&#39\uff1bs\u56f0\u5883\u6709\u989d\u5916\u7684\u7ed3\u6784\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u8981\u83b7\u5f97PD\u8d44\u683c\uff0c\u6211\u4eec\u5fc5\u987b\u6709$Y&gt\uff1bW&gt\uff1bZ&gt\uff1bX\u7f8e\u5143$Y&gt\uff1b\u5982\u679c\u53e6\u4e00\u4e2a\u73a9\u5bb6\u5408\u4f5c\uff0cW$\u4f1a\u6fc0\u53d1\u4ed6\u4eec\u53db\u9003\u7684\u52a8\u673a\uff0c\u800c$Z&gt\uff1b\u5982\u679c\u53e6\u4e00\u4e2a\u73a9\u5bb6\u51fa\u73b0\u7f3a\u9677\uff0cX$\u4f1a\u63d0\u4f9b\u8fd9\u79cd\u52a8\u529b\u3002\u5728\u8fd9\u4e24\u4e2a\u7ea6\u675f\u6761\u4ef6\u4e0b\uff0c\u7eb3\u4ec0\u5747\u8861\u6c38\u8fdc\u662fFlitz/Flitz\uff0c\u6536\u76ca\u4e3a$\uff08Z\uff0cZ\uff09$$W&gt\uff1bZ$\u6b63\u662f\u8fd9\u79cd\u56f0\u5883\u7684\u6839\u6e90\uff1b\u5982\u679c\u6539\u4e3a$Z&gt\uff1bW$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5e73\u8861\u662f\u4e00\u4e2a\u5b8c\u7f8e\u7684\u7ed3\u679c\uff0c\u53ef\u80fd\u662f\u6700\u4f18\u7684\u3002\n\u6211\u901a\u5e38\u4f1a\u60f3\u5230\u4e00\u4e2a\u56da\u72af&#39\uff1b\u540c\u65f6\u62e5\u67092W\u7f8e\u5143&gt\uff1bX+Y&gt\uff1b2Z$\u3002\u8fd9\u8868\u660e\uff0c\u76f8\u4e92\u5408\u4f5c\u7684\u603b\u56de\u62a5\u6700\u9ad8\u2014\u2014\u5b83&#39\uff1bs&#34\uff1b\u793e\u4f1a\u6700\u4f18&#34\uff1b\u4ece\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u610f\u4e49\u4e0a\u6765\u8bf4\u2014\u2014\u800c\u76f8\u4e92\u80cc\u53db\u7684\u7a0b\u5ea6\u6700\u4f4e\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u4e3a&#34\uff1b\u7f3a\u9677&#34\uff1b\u884c\u52a8\u5982&#34\uff1b\u4e3a\u81ea\u5df1\u4e89\u53d6\u4e00\u4e9b\u4ef7\u503c\uff0c\u4f46\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u7834\u574f\u4ef7\u503c&#34\uff1b\u3002\uff08\u6216\u8005\uff0c&#34\uff1b\u5408\u4f5c&#34\uff1b\u4f5c\u4e3a&#34\uff1b\u5c06\u4f60\u7684\u4e00\u4e9b\u4ef7\u503c\u7ed9\u4e88\u4f60\u7684\u73a9\u4f342\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u589e\u52a0\u4ef7\u503c&#34\uff1b\uff09\u6211\u4eec\u53ef\u4ee5\u8003\u8651\uff1a\n\u5982\u679c\u662f2\u7f8e\u5143&lt\uff1bX+Y$\uff0c\u7136\u540e\u5728\u4f60\u7684\u73a9\u4f34\u5408\u4f5c\u65f6\u53db\u9003\u521b\u9020\u4ef7\u503c\uff08\u76f8\u5bf9\u4e8e\u5408\u4f5c\uff09\u3002\u4ece\u793e\u4f1a\u89d2\u5ea6\u6765\u770b\uff0cKrump/Flitz\u6216Flitz/Krump\u6bd4Krump/Krump\u66f4\u53ef\u53d6\uff1b\u5728\u8fd9\u79cd\u8fed\u4ee3\u6e38\u620f\u4e2d\uff0c\u4f60&#39\uff1b\u6211\u66f4\u559c\u6b22\u5c06$X$\u66ff\u6362\u4e3a$Y$\uff0c\u800c\u4e0d\u662f\u5f97\u5230\u4e00\u4e2a\u6052\u5b9a\u7684$W$\u3002\u7ef4\u57fa\u767e\u79d1\u4ecd\u5c06\u5176\u5f52\u7c7b\u4e3a\u56da\u72af#39\uff1b\u5979\u8fdb\u9000\u4e24\u96be\uff0c\u4f46\u6211\u8ba4\u4e3a&#39\uff1b\u8fd9\u662f\u4e00\u4e2a\u53ef\u7591\u7684\u672f\u8bed\uff0c\u6211\u4e0d\u77e5\u9053&#39\uff1b\u6211\u4e0d\u8fd9\u4e48\u8ba4\u4e3a&#39\uff1b\u8fd9\u662f\u6807\u51c6\u3002\u6211\u53ef\u80fd\u4f1a\u4e0d\u5047\u601d\u7d22\u5730\u5efa\u8bae\u79f0\u4e4b\u4e3a\u201c\u53a8\u5e08\u592a\u591a\u201d\u6e38\u620f\u3002\uff08\u8fd9\u4e2a\u540d\u5b57\u5047\u8bbe\u4f60&#39\uff1b\u5b81\u613f\u6328\u997f\u4e5f\u4e0d\u613f\u505a\u996d\uff0c\u800c\u4e14\u53d8\u8d28\u7684\u8089\u6c64\u603b\u6bd4\u6ca1\u6709\u8089\u6c64\u597d\u3002\uff09\n\u5982\u679c$2Z&gt\uff1bX+Y$\uff0c\u7136\u540e\u5728\u4f60\u7684\u73a9\u4f34\u7f3a\u9677\u65f6\u53db\u9003\u521b\u9020\u4ef7\u503c\u3002\u6211\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u56da\u72af#39\uff1bs\u56f0\u5883\uff1b\u6211\u7684\u76f4\u89c9\u662f\uff0c\u5bf9\u4e2d\u5fc3\u6848\u4f8b\u7684\u5927\u591a\u6570\u5206\u6790\u4e5f\u9002\u7528\u4e8e\u6b64\u3002\n\u636e\u6211\u6240\u77e5\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e$W\uff0cX\uff0cY\uff0cZ$\uff08\u51b3\u5b9a\u4e2a\u4eba\u7ed3\u679c\uff09\u548c$2W\uff0cX+Y\uff0c2Z$\uff08\u51b3\u5b9a\u793e\u4f1a\u7ed3\u679c\uff09\u7684\u987a\u5e8f\u5bf9\u6e38\u620f\u8fdb\u884c\u5206\u7c7b\u3002\u6709\u65f6\u6211\u4eec&#39\uff1b\u6211\u60f3\u8003\u8651\u4e24\u4e2a\u503c\u76f8\u7b49\u7684\u60c5\u51b5\uff0c\u4f46\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0cI\u548cY 39\uff1b\u5047\u8bbe\u6ca1\u6709\u7b49\u5f0f\uff0c\u6211\u5c06\u5bf9\u5b83\u4eec\u8fdb\u884c\u5206\u7c7b\u3002\u5929\u771f\u7684\u4f1a\u67094\u7f8e\u51433! = 144\u7f8e\u5143\u53ef\u80fd\u7684\u6e38\u620f\uff0c\u4f46\u662f\n\u98a0\u5012\u4e00\u5207\u4e8b\u7269\u7684\u987a\u5e8f\u5e76\u4e0d\u610f\u5473\u7740&#39\uff1b\u4e0d\u8981\u6539\u53d8\u5206\u6790\uff0c\u5b83\u53ea\u662f\u6362\u4e86Krump\u548cFlitz\u7684\u6807\u7b7e\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe\uff0c$W&gt\uff1bZ$\u3002\u8fd9\u6d88\u9664\u4e86\u4e00\u534a\u7684\u7ec4\u5408\u3002\n\u663e\u7136\u662f2W&gt\uff1b2Z$\uff0c\u6240\u4ee5\u5b83&#39\uff1b\u8fd9\u53ea\u662f\u4e00\u4e2aX+Y\u7f8e\u5143\u4e0e\u5b83\u4eec\u76f8\u6bd4\u4e0b\u964d\u4e86\u591a\u5c11\u7684\u95ee\u9898\u3002\u8fd9\u5c31\u6d88\u9664\u4e86\u53e6\u4e00\u534a\u3002\n\u5982\u679c$W&gt\uff1bZ&gt\uff1b\u2022&gt\uff1b\u2022$\u7136\u540e\u662f$X+Y&lt\uff1b2Z$\u3002\u8fd9\u5c31\u6d88\u9664\u4e86\u53e6\u5916\u56db\u79cd\u7ec4\u5408\u3002\n\u5982\u679c$\u2022&gt\uff1b\u2022&gt\uff1bW&gt\uff1bZ$then$X+Y&gt\uff1b2W$\uff0c\u518d\u51cf\u53bb\u56db\u4e2a\u3002\n\u5982\u679c$W&gt\uff1b\u2022&gt\uff1b\u2022&gt\uff1bZ$then$2W&gt\uff1bX+Y&gt\uff1b2Z$\uff0c\u6dd8\u6c70\u56db\u540d\u3002\n\u5982\u679c$W&gt\uff1b\u2022&gt\uff1bZ&gt\uff1b\u2022$\u7136\u540e\u662f2W&gt\uff1bX+Y$\uff0c\u6d88\u9664\u4e24\u4e2a\u3002\n\u5982\u679c$\u2022&gt\uff1bW&gt\uff1b\u2022&gt\uff1bZ$then$X+Y&gt\uff1b2Z$\uff0c\u51cf\u5c11\u4e24\u4e2a\u3002\n\u8fd9\u4f7f\u6211\u4eec\u53ea\u5269\u4e0b20\u4e2a\u7ec4\u5408\uff0c\u800c\u6211\u4eec&#39\uff1b\u6211\u5df2\u7ecf\u770b\u8fc7\u5176\u4e2d\u7684\u4e09\u4e2a\u4e86\uff0c\u6240\u4ee5\u8fd9\u770b\u8d77\u6765\u5f88\u5bb9\u6613\u7406\u89e3\u3002\u5728\u4e0b\u6587\u4e2d\uff0c\u6211&#39\uff1b\u6211\u4e3b\u8981\u662f\u6839\u636e\u6211\u8ba4\u4e3a\u533a\u5206\u8fd9\u4e9b\u6e38\u620f\u7684\u6709\u8da3\u7a0b\u5ea6\u5c06\u5b83\u4eec\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u800c\u6211&#39\uff1b\u6211\u6ca1\u6709\u7ed9\u4ed6\u4eec\u8d77\u540d\u5b57\u7684\u65f6\u5019&#39\uff1b\u6211\u4e0d\u77e5\u9053\u73b0\u6709\u7684\u540d\u5b57\u3002\u540d\u79f0\u548c\u5206\u7ec4\u90fd\u5e94\u88ab\u89c6\u4e3a\u6682\u5b9a\u3002\n\u5728\u8fd9\u4e2a\u6e38\u620f\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5403\u86cb\u7cd5\uff0c\u4e5f\u53ef\u4ee5\u997f\u809a\u5b50\u3002\u4f60\u559c\u6b22\u5403\u86cb\u7cd5\u3002\u4f60\u559c\u6b22\u4f60\u7684\u73a9\u4f34\u5403\u86cb\u7cd5\u3002\u90a3\u91cc&#39\uff1bIt\u2019\u6bcf\u4e2a\u4eba\u90fd\u6709\u8db3\u591f\u7684\u86cb\u7cd5\uff0c\u6ca1\u6709\u7406\u7531\u6328\u997f\u3002\u552f\u4e00\u7684\u7eb3\u4ec0\u5747\u8861\u662f\u6bcf\u4e2a\u4eba\u90fd\u5403\u86cb\u7cd5\uff0c\u8fd9\u662f\u793e\u4f1a\u6700\u4f18\u7684\u7ed3\u679c\u3002\u5f88\u68d2\u7684\u6bd4\u8d5b\uff01\u6211\u4eec\u5e94\u8be5\u7ecf\u5e38\u73a9\u3002\n\uff08\u5982\u679c$X&gt\uff1bY$\uff0c\u90a3\u4e48\u5982\u679c\u4f60\u5fc5\u987b\u5728\u4f60\u81ea\u5df1\u548c\u4f60\u7684\u73a9\u4f34\u5403\u86cb\u7cd5\u4e4b\u95f4\u505a\u51fa\u9009\u62e9\uff0c\u4f60&#39\uff1b\u4f1a\u81ea\u5df1\u5403\u3002\u5982\u679c$Y&gt\uff1bX$\uff0c\u90a3\u4e48\u5728\u90a3\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60&#39\uff1b\u4f1a\u7ed9\u4ed6\u4eec\u3002$W\uff0cZ$\u548c$X\uff0cY$\u4e4b\u95f4\u7684\u76f8\u7b49\u8868\u793a\u5728\u5404\u79cd\u60c5\u51b5\u4e0b\u5bf9\uff08\u4f60\u81ea\u5df1\uff0c\u4f60\u7684\u73a9\u4f34\uff09\u5403\u86cb\u7cd5\u6f20\u4e0d\u5173\u5fc3\u3002\uff09\n\u5728\u8fd9\u4e2a\u6e38\u620f\u4e2d\uff0c\u4f60\u8981\u4e48\u53bb\u53c2\u52a0\u6d3e\u5bf9\uff0c\u8981\u4e48\u5446\u5728\u5bb6\u91cc\u3002\u5982\u679c\u4f60\u4eec\u90fd\u53bb\u53c2\u52a0\u6d3e\u5bf9\uff0c\u592a\u597d\u4e86\uff01\u5982\u679c\u4f60\u4eec\u90fd\u5f85\u5728\u5bb6\u91cc\uff0c\u90a3&#39\uff1b\u5b83\u4e5f\u5f88\u9177\u3002\u5982\u679c\u4f60\u4eec\u4e2d\u7684\u4efb\u4f55\u4e00\u65b9\u53bb\u53c2\u52a0\u6d3e\u5bf9\uff0c\u800c\u53e6\u4e00\u65b9\u5f85\u5728\u5bb6\u91cc\uff0c\u4f60&#39\uff1b\u6211\u4fe9\u90fd\u4f1a\u4e3a\u6b64\u611f\u5230\u975e\u5e38\u61ca\u607c\u3002\n\u5728$W=Z$\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f\u4e00\u4e2a\u7eaf\u7cb9\u7684\u534f\u8c03\u6e38\u620f\uff0c\u5b83\u4e0d&#39\uff1bI don\u2019\u6211\u6ca1\u6709\u4e00\u4e2a\u4e0d\u9700\u8981\u6c9f\u901a\u5c31\u80fd\u505a\u51fa\u7684\u663e\u800c\u6613\u89c1\u7684\u9009\u62e9\u3002\n\uff08\u7ef4\u57fa\u767e\u79d1\u5728\u8be5\u9875\u9762\u4e0a\u79f0\u4e4b\u4e3a\u4fdd\u8bc1\u6e38\u620f\uff0c\u4f46\u5728\u9875\u9762\u4e0a\u7528\u8fd9\u4e2a\u540d\u5b57\u6765\u8868\u793a\u730e\u9e7f\uff0c\u6240\u4ee5\u6211\u4e0d\u4f7f\u7528\u8fd9\u4e2a\u540d\u5b57\u3002\uff09\n\u4f60\u53ef\u4ee5\u5b66\u4e60\uff0c\u4e5f\u53ef\u4ee5\u7761\u89c9\u3002\u65e0\u8bba\u4f60\u7684\u73a9\u4f34\u505a\u4ec0\u4e48\uff0c\u4f60&#39\uff1b\u5982\u679c\u4f60\u4eec\u4e00\u8d77\u5b66\u4e60\uff0c\u4f60\u4eec\u53ef\u4ee5\u4e92\u76f8\u5e2e\u52a9\u3002\u5982\u679c\u4f60\u4e0a\u5e8a\u7761\u89c9\uff0c\u90a3\u4e48\u5b83&#39\uff1b\u5982\u679c\u4f60\u7684\u73a9\u4f34\u548c\u4f60\u4e0a\u5e8a\uff0c\u90a3\u4f1a\u66f4\u6709\u8da3\uff1b\u4f46\u5982\u679c\u4f60\u521a\u5f00\u59cb\u5b66\u4e60\uff0c\u5bf9\u4f60\u6765\u8bf4\u66f4\u597d\u3002\n\u4f60\u53ef\u4ee5\u730e\u9e7f\u6216\u91ce\u5154\uff08\u6709\u65f6\u662f\u5154\u5b50\uff09\u3002\u5982\u679c\u4f60\u4eec\u90fd\u6355\u730e\u7261\u9e7f\uff0c\u4f60\u4eec\u5c31\u53ef\u4ee5\u6210\u529f\u5730\u5728\u4f60\u4eec\u4e4b\u95f4\u6355\u6349\u5230\u4e00\u53ea\u7261\u9e7f\uff0c\u8fd9\u5f88\u597d\u3002\u5982\u679c\u4f60\u4eec\u90fd\u730e\u5154\uff0c\u4f60\u4eec\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u6293\u4e00\u53ea\u5154\u5b50\uff0c\u8fd9\u5f88\u597d\u3002\u4f60\u53ef\u4ee5\u81ea\u5df1\u6293\u4e00\u53ea\u91ce\u5154\uff0c\u4f46\u5982\u679c\u4f60\u730e\u6740\u7261\u9e7f\uff0c\u800c\u4f60\u7684\u73a9\u4f34\u730e\u6740\u91ce\u5154\uff0c\u4f60\u5c06\u4e00\u65e0\u6240\u83b7\u3002\n\u8fd9\u4e5f\u9002\u7528\u4e8e$Y=Z$\u3002\u5982\u679c$Y&gt\uff1bZ$\u7136\u540e\u4e24\u4e2a\u730e\u5154\u7684\u4eba\u4f1a\u4e92\u76f8\u653b\u51fb#39\uff1b\u8d70\u5427\u3002\n\u7eb3\u4ec0\u5747\u8861\u662f\u5728Stag/Stag\u548cHare/Hare\uff0cStag/Stag\u662f\u793e\u4f1a\u6700\u4f18\u7684\u3002\u91ce\u5154/\u91ce\u5154\u53ef\u80fd\u662f\u6700\u7cdf\u7cd5\u7684\u793e\u4ea4\u7ed3\u679c\uff0c\u5c3d\u7ba1\u6211\u8ba4\u4e3a\u8fd9\u4e2a\u6e38\u620f\u901a\u5e38\u7528$2Z&gt\uff1bY+X$\u3002\n\u4f60\u53ef\u4ee5\u4ece\u516c\u5171\u573a\u6240\u83b7\u53d6\u4e00\u4e9b\u8d44\u6e90\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u53bb\u7ba1\u5b83\u3002\u90a3\u91cc&#39\uff1b\u6709\u5f88\u591a\u8d44\u6e90\u53ef\u4ee5\u5229\u7528\uff0c\u800c\u4f60&#39\uff1b\u4f60\u6700\u597d\u8fd8\u662f\u628a\u5b83\u62ff\u8d70\u3002\u4f46\u662f\u5982\u679c\u4f60\u548c\u4f60\u7684\u73a9\u4f34\u90fd\u73a9Take\u6e38\u620f\uff0c\u4f60\u5c31\u53ef\u4ee5\u4e92\u76f8\u5438\u5f15#39\uff1bs\u65b9\u5f0f\u5e76\u964d\u4f4e\u6548\u7387\uff08\u9664\u975e$X=W$\uff09\u3002\n\u5982\u679c$2W&gt\uff1bX+Y$\u90a3\u4e48\u4f60\u4e0d&#39\uff1b\u76f8\u4e92\u5f71\u54cd\u663e\u8457\uff1b\u793e\u4f1a\u6700\u4f18\u7ed3\u679c\u4e5f\u662f\u7eb3\u4ec0\u5747\u8861\u3002\u4f46\u5982\u679c2W\u7f8e\u5143&lt\uff1bX+Y$\u90a3\u4e48\u5e72\u9884\u7684\u603b\u6210\u672c\u8d85\u8fc7\u4e86\u4f60\u4eec\u4efb\u4f55\u4e00\u65b9\u53ef\u4ee5\u83b7\u53d6\u7684\u8d44\u6e90\u7684\u4ef7\u503c\uff0c\u4e00\u4e9b\u534f\u8c03\u4e00\u4e2a\u4eba\u83b7\u53d6\u548c\u4e00\u4e2a\u4eba\u79bb\u5f00\u7684\u65b9\u6cd5\u5c06\u5177\u6709\u793e\u4f1a\u4ef7\u503c\u3002\n\u5982\u679c$Y&gt\uff1bZ$\u5982\u679c\uff08\u65e0\u8bba\u51fa\u4e8e\u4f55\u79cd\u539f\u56e0\uff09\u4f60\u79bb\u5f00\u4e86\u8d44\u6e90\uff0c\u4f60&#39\uff1b\u6211\u5e0c\u671b\u4f60\u7684\u4f34\u4fa3\u80fd\u63a5\u53d7\u3002\u5982\u679c$Z&gt\uff1bY$you&#39\uff1b\u6211\u5e0c\u671b\u4ed6\u4eec\u4e5f\u79bb\u5f00\u3002\n\u4e00\u4e2a\u6709\u8da3\u7684\u4f8b\u5b50\u662f$X&gt\uff1bW&gt\uff1bZ&gt\uff1bY$\u548c$X+Y&gt\uff1b2W$\u3002\u8d70/\u8d70\u548c\u8d70/\u8d70\u662f\u793e\u4f1a\u6700\u4f18\u7684\uff0c\u4f46\u79bb\u5f00\u7684\u73a9\u5bb6\u66f4\u559c\u6b22\u4efb\u4f55\u5176\u4ed6\u7ed3\u679c\u3002\n\u5728\u8fd9\u4e2a\u6e38\u620f\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5de5\u4f5c\uff08\u6295\u5165\u5e2e\u52a9\u5efa\u7acb\u4e00\u4e2a\u5171\u540c\u7684\u8d44\u6e90\uff09\u6216\u9003\u907f\uff08\u4e0d\u8fd9\u6837\u505a\uff09\u3002\u5982\u679c\u4f60\u4eec\u4e2d\u7684\u4efb\u4f55\u4e00\u65b9\u90fd\u80fd\u5de5\u4f5c\uff0c\u90a3\u4e48\u8fd9\u5bf9\u4f60\u4eec\u53cc\u65b9\u6765\u8bf4\u90fd\u8d85\u51fa\u4e86\u6210\u672c\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u5f53\u4f60\u7684\u73a9\u4f34\u5de5\u4f5c\u65f6\uff0c\u4f60\u60f3\u9003\u907f\uff1b\u4f46\u5982\u679c\u4f60\u7684\u73a9\u4f34\u9003\u907f\uff0c\u4f60&#39\uff1bI\u2019\u6211\u5b81\u613f\u5de5\u4f5c\uff0c\u4e5f\u4e0d\u613f\u628a\u5de5\u4f5c\u7559\u7740\u505a\u3002\u7eb3\u4ec0\u5747\u8861\u5728\u8d77\u4f5c\u7528/\u9003\u907f\u548c\u9003\u907f/\u5de5\u4f5c\u3002\n\u5982\u679c$2W&gt\uff1bX+Y$\u90a3\u4e48\uff0c\u793e\u4f1a\u6700\u4f73\u7ed3\u679c\u662f\u5de5\u4f5c/\u5de5\u4f5c\uff0c\u534f\u8c03\u8be5\u7ed3\u679c\u7684\u65b9\u6cd5\u5728\u793e\u4f1a\u4e0a\u662f\u6709\u7528\u7684\u3002\u5982\u679c\u662f2\u7f8e\u5143&lt\uff1bX+Y$\uff0c\u793e\u4f1a\u6700\u4f73\u7ed3\u679c\u662f\u4e00\u65b9\u5de5\u4f5c\uff0c\u53e6\u4e00\u65b9\u9003\u907f\uff0c\u4f46\u6ca1\u6709\u660e\u663e\u7684\u9009\u62e9\u3002\n\u5728\u8fd9\u4e2a\u6e38\u620f\u4e2d\uff0c\u76ee\u6807\u662f\u73a9\u4e00\u4e2a\u4e0d\u540c\u4e8e\u4f60\u7684\u73a9\u4f34\u7684\u52a8\u4f5c\u3002\u5982\u679c$X=Y$\uff0c\u5219\u6709&#39\uff1bIt\u2019\u6ca1\u6709\u7406\u7531\u559c\u6b22\u4e00\u4e2a\u52a8\u4f5c\u800c\u4e0d\u662f\u53e6\u4e00\u4e2a\uff0c\u4f46\u662f\u5982\u679c\u4ed6\u4eec&#39\uff1b\u4f60\u5728\u90a3\u91cc\u4e0d\u5e73\u7b49&#39\uff1b\u8c01\u80fd\u5f97\u5230\u4ec0\u4e48\u5956\u52b1\uff0c\u5c31\u5f97\u7ed5\u7740\u5708\u5b50\u8f6c\u3002\u5982\u679c\u4f60&#39\uff1b\u5982\u679c\u4f60\u5bf9\u7ed3\u679c\u4e0d\u6ee1\u610f\uff0c\u90a3\u4e48\u6539\u53d8\u4f60\u7684\u52a8\u4f5c\u5bf9\u4f60\u7684\u73a9\u4f34\u7684\u4f24\u5bb3\u8981\u5927\u4e8e\u5bf9\u4f60\u7684\u4f24\u5bb3\u3002\u7eb3\u4ec0\u5747\u8861\u662f\u5f53\u4f60\u91c7\u53d6\u4e0d\u540c\u7684\u884c\u52a8\u65f6\uff0c\u8fd9\u4e9b\u90fd\u662f\u793e\u4f1a\u6700\u4f18\u7684\u3002\n\uff08\u6211\u6709\u70b9\u60ca\u8bb6\uff0c\u8fd9\u662f\u552f\u4e00\u4e00\u4e2a\u6211\u60f3\u6839\u636e\u7ed3\u679c\u7684\u793e\u4f1a\u504f\u597d\u6765\u91cd\u65b0\u547d\u540d\u6e38\u620f\u7684\u60c5\u51b5\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u552f\u4e00\u4e00\u4e2a$X+Y$\u4e0d\u88ab\u5f3a\u8feb\u5927\u4e8e\u6216\u5c0f\u4e8e$2X$\u7684\u6e38\u620f\u662f\u519c\u6c11\u7684\u56f0\u5883\u548c\u4e30\u5bcc\u7684\u516c\u5171\u8d44\u6e90\uff0c\u800c\u8fd9\u4e9b\u6b63\u662f\u6211\u6700\u5e0c\u671b\u770b\u5230\u7684\u5c06\u6765\u5206\u88c2\u3002\uff09\n\u6211\u753b\u4e86\u4e00\u5f20\u8fd9\u4e9b\u6e38\u620f\u7684\u56fe\u8868\u3002\u6211\u53ea\u6839\u636e$W\uff0cX\uff0cY\uff0cZ$\u7684\u987a\u5e8f\u5bf9\u5b83\u4eec\u8fdb\u884c\u5206\u7c7b\uff08\u5373\u6211\u628a\u56da\u72af\u548c\u53a8\u5e08\u592a\u591a\u7684\u56f0\u5883\u5f52\u4e3a\u4e00\u7c7b\uff09\uff0c\u6bcf\u5f53\u4e24\u4e2a\u6e38\u620f\u76f8\u540c\u65f6\uff0c\u9664\u4e86\u4ea4\u6362\u4e24\u4e2a\u76f8\u90bb\u7684\u503c\u5916\uff0c\u6211\u90fd\u4f1a\u83b7\u5f97\u4f18\u52bf\u3002\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684\uff1a\n\u7ebf\u7684\u989c\u8272\u6839\u636e\u4ea4\u6362\u7684\u503c\u5bf9\u800c\u5b9a\uff08\u524d\u4e24\u4e2a\u4e3a\u7ea2\u8272\uff0c\u4e2d\u95f4\u4e24\u4e2a\u4e3a\u84dd\u8272\uff0c\u540e\u4e24\u4e2a\u4e3a\u7eff\u8272\uff09\u3002\u6211&#39\uff1b\u6211\u4e0d\u786e\u5b9a\u6211\u4eec\u80fd\u4ece\u4e2d\u5b66\u5230\u591a\u5c11\uff0c\u4f46\u6211\u89c9\u5f97\u5bf9\u79f0\u6027\u4ee4\u4eba\u6109\u60a6\u3002\n\u6211\u4e0d&#39\uff1b\u6211\u73b0\u5728\u4e0d\u60f3\u6df1\u5165\u7814\u7a76\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u5728\u8fd9\u91cc&#39\uff1b\u8fd9\u662f\u4e00\u4e2a\u6211\u4eec\u53ef\u4ee5\u5e94\u7528\u7684\u8f6c\u53d8\u3002\u6211\u4eec\u4e0d\u662f\u7528$W\uff0cX\uff0cY\uff0cZ$\u6765\u601d\u8003\u8fd9\u4e9b\u6e38\u620f\uff0c\u800c\u662f\u7528&#34\uff1b\u7b2c\u4e8c\u540d\u7403\u5458\u5728\u514b\u9c81\u59c6\u548c#34#\u4e4b\u95f4\u73a9\u5f17\u5229\u8328\u7684\u4ef7\u503c\uff1a\n$a=X-W$\uff0c\u5982\u679c\u73a9\u5bb61\u73a9Krump\uff0c\u5219\u4e3a\u73a9\u5bb61\u7684\u503c\u3002\n$\u03b2=Y-W$\uff0c\u5982\u679c\u73a9\u5bb61\u73a9Krump\uff0c\u5219\u4e3a\u73a9\u5bb62\u7684\u503c\u3002\n$\u03b3=Z-Y$\uff0c\u5982\u679c\u73a9\u5bb61\u73a9Flitz\uff0c\u5219\u4e3a\u73a9\u5bb61\u7684\u503c\u3002\n$\u03b4=Z-X$\uff0c\u5982\u679c\u73a9\u5bb61\u73a9Flitz\uff0c\u5219\u4e3a\u73a9\u5bb62\u7684\u503c\u3002\n\u8fd9\u56db\u4e2a\u6570\u5b57\u51b3\u5b9a\u4e86$W\uff0cX\uff0cY\uff0cZ$\uff0c\u52a0\u4e0a\u4e00\u4e2a\u5e38\u6570\u503c\uff0c\u8fd9\u5e76\u4e0d&#39\uff1b\u4e0d\u8981\u6539\u53d8\u6e38\u620f\u3002\u4f8b\u5982\uff0c\u56da\u72af&#39\uff1bs\u56f0\u5883\u548c\u592a\u591a\u53a8\u5e08\u90fd\u6709$a&lt\uff1b0\uff0c\u03b2&gt\uff1b0\uff0c\u03b3&lt\uff1b0\uff0c\u03b4&gt\uff1b0$. \u4e00\u540d\u56da\u72af&#39\uff1bs\u56f0\u5883\u8fd8\u6709$\u03b1+\u03b2&lt\uff1b0\u7f8e\u5143\uff0c\u800c\u592a\u591a\u53a8\u5e08\u62e5\u6709$\u03b1+\u03b2&gt\uff1b0$.\n\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u5f00\u59cb\u7528$\u03b1\uff0c\u03b2\uff0c\u03b3\uff0c\u03b4$\u6765\u8003\u8651\u8fd9\u4e9b\u6e38\u620f\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f\u8fd9\u80fd\u7ed9\u6211\u4eec\u63d0\u4f9b\u6709\u7528\u7684\u89c1\u89e3\u5417\uff1f\u6211\u4e0d&#39\uff1b\u6211\u4e0d\u77e5\u9053\u3002\n\u5f53\u7136\uff0c\u4e3a\u4e86\u8ba9\u8fd9\u4e9b\u6570\u5b57\u6307\u5411\u672c\u6587\u7814\u7a76\u7684\u5176\u4e2d\u4e00\u4e2a\u6e38\u620f\uff0c\u6211\u4eec\u5fc5\u987b\u6709$\u03b1-\u03b2=\u03b3-\u03b4$\u3002\u6211\u8ba4\u4e3a\u5982\u679c\u4f60\u653e\u677e\u8fd9\u4e2a\u9650\u5236\uff0c\u4f60\u5c31\u4f1a\u5f00\u59cb\u7814\u7a76\u6bd4\u8fd9\u4e9b\u6e38\u620f\u66f4\u4e00\u822c\u7684\u6e38\u620f\u3002\u4f46\u6211\u6ca1\u6709&#39\uff1b\u6211\u6ca1\u60f3\u592a\u591a\u3002\n\u79f0\u4ed6\u4eec\u4e3a\u4f60\u7684&#34\uff1b\u5bf9\u624b&#34\uff1b\u5047\u8bbe\u5bf9\u6297\u7a0b\u5ea6\u53ef\u80fd\u4e0d\u5b58\u5728\u3002\u00a0 \u21a9\n\u7531discus\u652f\u6301\u7684\u8bc4\u8bba", "note_en": "One such game is the  Prisoner&#39;s Dilemma (in which strategy &#34;Krump&#34; is usually called &#34;Cooperate&#34;, and &#34;Flitz&#34; is usually called &#34;Defect&#34;). But the Prisoner&#39;s Dilemma has additional structure. Specifically, to qualify as a PD, we must have $Y &gt; W &gt; Z &gt; X$. $Y &gt; W$ gives the motivation to defect if the other player cooperates, and $Z &gt; X$ gives that motivation if the other player defects. With these two constraints, the  Nash equilibrium is always going to be Flitz/Flitz for a payoff of $(Z, Z)$. $W &gt; Z$ is what gives the dilemma its teeth; if instead $Z &gt; W$, then that equilibrium is a perfectly fine outcome, possibly the optimal one.\n I usually think of a Prisoner&#39;s Dilemma as also having $2W &gt; X + Y &gt; 2Z$. That specifies that mutual cooperation has the highest total return - it&#39;s &#34;socially optimal&#34; in a meaningful sense  - while mutual defection has the lowest. It also means you can model the &#34;defect&#34; action as &#34;take some value for yourself, but destroy value in the process&#34;. (Alternatively, &#34;cooperate&#34; as &#34;give some of your value to your playmate  2, adding to that value in the process&#34;.) We might consider instead:\n If $2W &lt; X + Y$, then defecting while your playmate cooperates  creates value (relative to cooperating). From a social perspective, Krump/Flitz or Flitz/Krump is preferable to Krump/Krump; and in an iterated game of this sort, you&#39;d prefer to alternate $X$ with $Y$ than to get a constant $W$. Wikipedia still classes this as a Prisoner&#39;s Dilemma, but I think that&#39;s dubious terminology, and I don&#39;t think it&#39;s standard. I might offhand suggest calling it the Too Many Cooks game. (This name assumes that you&#39;d rather go hungry than cook, and that spoiled broth is better than no broth.)\n  If $2Z &gt; X + Y$, then defecting while your playmate defects creates value. I have no issue thinking of this as a Prisoner&#39;s Dilemma; my instinct is that most analyses of the central case will also apply to this.\n  As far as I can tell, we can classify games according to the ordering of $W, X, Y, Z$ (which determine individual outcomes) and of $2W, X + Y, 2Z$ (which determine the social outcomes). Sometimes we&#39;ll want to consider the case when two values are equal, but for simplicity I&#39;m going to classify them assuming there are no equalities. Naively there would be $4! \u00b7 3! = 144$ possible games, but\n Reversing the order of everything doesn&#39;t change the analysis, it just swaps the labels Krump and Flitz. So we can assume without loss of generality that $W &gt; Z$. That eliminates half the combinations.\n  Obviously $2W &gt; 2Z$, so it&#39;s just a question of where $X + Y$ falls in comparison to them. That eliminates another half.\n  If $W &gt; Z &gt; \u2022 &gt; \u2022$ then $X + Y &lt; 2Z$. That eliminates another four combinations.\n  If $\u2022 &gt; \u2022 &gt; W &gt; Z$ then $X + Y &gt; 2W$, eliminating another four.\n  If $W &gt; \u2022 &gt; \u2022 &gt; Z$ then $2W &gt; X + Y &gt; 2Z$, eliminating four.\n  If $W &gt; \u2022 &gt; Z &gt; \u2022$ then $2W &gt; X + Y$, eliminating two.\n  If $\u2022 &gt; W &gt; \u2022 &gt; Z$ then $X + Y &gt; 2Z$, eliminating two.\n That brings us down to just 20 combinations, and we&#39;ve already looked at three of them, so this seems tractable. In the following, I&#39;ve grouped games together mostly according to how interesting I think it is to distinguish them, and I&#39;ve given them names when I didn&#39;t know an existing name. Both the names and the grouping should be considered tentative.\n  In this game, you can either Eat Cake or Go Hungry. You like eating cake. You like when your playmate eats cake. There&#39;s enough cake for everyone, and no reason to go hungry. The only Nash equilibrium is the one where everyone eats cake, and this is the socially optimal result. Great game! We should play it more often.\n (If $X &gt; Y$, then if you had to choose between yourself and your playmate eating cake, you&#39;d eat it yourself. If $Y &gt; X$, then in that situation you&#39;d give it to them. Equalities between $W, Z$ and $X, Y$ signify indifference to (yourself, your playmate) eating cake in various situations.)\n  In this game, you can either go to a Party or stay Home. If you both go to a party, great! If you both stay home, that&#39;s cool too. If either of you goes to a party while the other stays home, you&#39;d both be super bummed about that.\n  In the case $W = Z$, this is a pure  coordination game, which doesn&#39;t have the benefit of an obvious choice that you can make without communicating.\n (Wikipedia calls this the assurance game on that page, but uses that name for the Stag Hunt on the page for that, so I&#39;m not using that name.)\n  You can either Study or Bunk Off. No matter what your playmate does, you&#39;re better off Studying, and if you Study together you can help each other. If you Bunk Off, then it&#39;s more fun if your playmate Bunks Off with you; but better still for you if you just start Studying.\n   You can either hunt Stag or Hare (sometimes &#34;Rabbit&#34;). If you both hunt Stag, you successfully catch a stag between you, which is great. If you both hunt Hare, you each catch a hare, which is fine. You can catch a hare by yourself, but if you hunt Stag and your playmate hunts Hare, you get nothing.\n This also works with $Y = Z$. If $Y &gt; Z$ then two people hunting Hare get in each other&#39;s way.\n The Nash equilibria are at Stag/Stag and Hare/Hare, and Stag/Stag is socially optimal. Hare/Hare might be the worst possible social result, though I think this game is usually described with $2Z &gt; Y + X$.\n   You can Take some resource from the commons, or you can Leave it alone. There&#39;s plenty of resource to be taken, and you&#39;ll always be better off taking it. But if you and your playmate both play Take, you get in each other&#39;s way and reduce efficiency (unless $X = W$).\n If $2W &gt; X + Y$ then you don&#39;t intefere with each other significantly; the socially optimal result is also the Nash equilibrium. But if $2W &lt; X + Y$ then the total cost of interfering is more than the value of resource either of you can take, and some means of coordinating one person to Take and one to Leave would be socially valuable.\n If $Y &gt; Z$ then if (for whatever reason) you Leave the resource, you&#39;d prefer your partner Takes it. If $Z &gt; Y$ you&#39;d prefer them to also Leave it.\n An interesting case here is $X &gt; W &gt; Z &gt; Y$ and $X + Y &gt; 2W$. Take/Leave and Leave/Take are social optimal, but the Leave player would prefer literally any other outcome.\n   In this game, you can Work (pitch in to help build a mutual resource) or Shirk (not do that). If either of you Works, it provides more than its cost to both of you. Ideally, you want to Shirk while your playmate Works; but if your playmate Shirks, you&#39;d rather Work than leave the work undone. The Nash equilibria are at Work/Shirk and Shirk/Work.\n If $2W &gt; X + Y$ then the socially optimal outcome is Work/Work, and a means to coordinate on that outcome would be socially useful. If $2W &lt; X + Y$, the socially optimal outcome is for one player to Work while the other Shirks, but with no obvious choice for which one of you it should be.\n   In this game, the goal is to play a different move than your playmate. If $X = Y$ then there&#39;s no reason to prefer one move over another, but if they&#39;re not equal there&#39;ll be some maneuvering around who gets which reward. If you&#39;re not happy with the outcome, then changing the move you play will harm your playmate more than it harms you. The Nash equilibria are when you play different moves, and these are socially optimal.\n   (I&#39;m a little surprised that this is the only case where I&#39;ve wanted to rename the game depending on the social preference of the outcomes. That said, the only other games where $X + Y$ isn&#39;t forced to be greater or less than $2X$ are the Farmer&#39;s Dilemma and the Abundant Commons, and those are the ones I&#39;d most expect to want to split in future.)\n  I made a graph of these games. I only classified them according to ordering of $W, X, Y, Z$ (i.e. I lumped Prisoner&#39;s Dilemma with Too Many Cooks), and I drew an edge whenever two games were the same apart from swapping two adjacent values. It looks like this:\n   The lines are colored according to which pair of values is swapped (red first two, blue middle two, green last two). I&#39;m not sure we learn much from it, but I find the symmetry pleasing.\n  I don&#39;t want to look too deep into this right now, but here&#39;s a transformation we could apply. Instead of thinking about these games in terms of the numbers $W, X, Y, Z$, we think in terms of &#34;the value of Player 2 playing Flitz over Krump&#34;:\n $\u03b1 = X - W$, the value to Player 1, if Player 1 plays Krump.\n  $\u03b2 = Y - W$, the value to Player 2, if Player 1 plays Krump.\n  $\u03b3 = Z - Y$, the value to Player 1, if Player 1 plays Flitz.\n  $\u03b4 = Z - X$, the value to Player 2, if Player 1 plays Flitz.\n These four numbers determine $W, X, Y, Z$, up to adding a constant value to all of them, which doesn&#39;t change the games. For example, Prisoner&#39;s Dilemma and Too Many Cooks both have $\u03b1 &lt; 0, \u03b2 &gt; 0, \u03b3 &lt; 0, \u03b4 &gt; 0$. A Prisoner&#39;s Dilemma also has $\u03b1 + \u03b2 &lt; 0$ while Too Many Cooks has $\u03b1 + \u03b2 &gt; 0$.\n So what happens if we start thinking about these games in terms of $\u03b1, \u03b2, \u03b3, \u03b4$ instead? Does this give us useful insights? I don&#39;t know.\n Of course, for these numbers to point at one of the games studied in this post, we must have $\u03b1 - \u03b2 = \u03b3 - \u03b4$. I think if you relax that constraint, you start looking into games slightly more general than these. But I haven&#39;t thought about it too hard.\n Calling them your &#34;opponent&#34; assumes a level of antagonism that may not be present.\u00a0 \u21a9\n    comments powered by  Disqus", "posttime": "2022-02-15 19:57:57", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6e38\u620f,\u56f0\u5883,games", "title": "\u5bf9\u56da\u5f92\u56f0\u5883\u8fd9\u6837\u7684\u6e38\u620f\u8fdb\u884c\u5206\u7c7b", "title_en": "Classifying games like the Prisoner's Dilemma", "transed": 1, "url": "http://reasonableapproximation.net/2020/07/04/classifying-games-like-prisoners-dilemma.html", "via": "", "real_tags": ["\u6e38\u620f", "\u56f0\u5883", "games"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073508, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0e\u4eba\u4fdd\u6301\u8054\u7cfb\u662f\u4e00\u79cd\u4e0d\u5bf9\u79f0\u7684\u4e60\u60ef\uff0c\u53ea\u9700\u8981\u5f88\u5c11\u7684\u52aa\u529b\u3001\u65f6\u95f4\u548c\u8d44\u6e90\uff0c\u4f46\u5374\u6709\u65e0\u9650\u7684\u597d\u5904\u3002\u8fd9\u662f\u8ba9\u4f60\u7684\u751f\u6d3b\u66f4\u52a0\u610f\u5916\u7684\u6700\u7b80\u5355\u3001\u6700\u6709\u6548\u7684\u65b9\u6cd5\u3002\n\u597d\u4e86\uff0c\u591f\u4e86\u3002\u65e2\u7136\u4f60\u70b9\u51fb\u4e86\u6807\u9898\uff0c\u6211\u60f3\u4f60\u5e94\u8be5\u660e\u767d\u4e3a\u4ec0\u4e48\u4e0e\u4eba\u4fdd\u6301\u8054\u7cfb\u662f\u6709\u610f\u4e49\u7684\u3002\n\u56e0\u6b64\uff0c\u9664\u975e\u4f60\u6709\u4e00\u4e2a\u575a\u5b9e\u7684\u7cfb\u7edf\uff0c\u5426\u5219\u4f60\u5f88\u53ef\u80fd\u65e0\u6cd5\u5b9a\u671f\u4e0e\u4eba\u63a5\u89e6\uff0c\u9519\u8fc7\u5927\u91cf\u7684\u4e50\u8da3\u548c\u673a\u4f1a\u3002\n\u5fb7\u91cc\u514b\u00b7\u897f\u6c83\u65af\u6709\u4e00\u5957\u5f88\u9177\u7684\u7cfb\u7edf\u3002\u4ed6\u5c06\u6240\u6709\u60f3\u4e0e\u4e4b\u4fdd\u6301\u8054\u7cfb\u7684\u4eba\u5206\u4e3a\u56db\u7c7b\uff1aA\u3001B\u3001C\u3001D\uff1a\n\u867d\u7136\u8fd9\u4e2a\u7cfb\u7edf\u542c\u8d77\u6765\u4f3c\u4e4e\u5f88\u7b80\u5355\uff0c\u4f46\u548c\u5927\u591a\u6570\u4eba\u4e00\u6837\uff0c\u6211\u5e76\u6ca1\u6709\u771f\u6b63\u505a\u5230\u8fd9\u4e00\u70b9\u3002\n\u4f60\u663e\u7136\u9700\u8981\u4e00\u4e9b\u6280\u672f\uff0c\u4f46\u6211\u8bd5\u8fc7\u7684\u6240\u6709CRM\uff08\u548cPRM\uff09\u90fd\u611f\u89c9\u6709\u4e9b\u8fc7\u5934\u4e86\u3002\u5fb7\u91cc\u514b\u6700\u7ec8\u7f16\u5199\u4e86\u81ea\u5df1\u7684\u6570\u636e\u5e93\u8f6f\u4ef6\uff0c\u4f46\u4ece\u672a\u516c\u5f00\u5206\u4eab\u8fc7\u3002\n\u4f60\u5230\u5e95\u5199\u4e86\u4ec0\u4e48\uff1f\u5fb7\u91cc\u514b\u7684\u5efa\u8bae\u76f8\u5f53\u542b\u7cca\uff1a\u201c\u770b\u770b\u4ed6\u4eec\u505a\u5f97\u600e\u4e48\u6837\u3002\u770b\u770b\u4f60\u80fd\u4e0d\u80fd\u4ee5\u4efb\u4f55\u65b9\u5f0f\u5e2e\u52a9\u4ed6\u4eec\u3002\u201d\n\u73b0\u5728\u6211\u7ec8\u4e8e\u60f3\u51fa\u4e86\u4e00\u4e2a\u529e\u6cd5\u8ba9\u5fb7\u91cc\u514b\u7684\u7cfb\u7edf\u5de5\u4f5c\u3002\u663e\u7136\uff0c\u8fd9\u5c31\u662f\u6211\u5199\u8fd9\u7bc7\u6587\u7ae0\u7684\u539f\u56e0\u3002\n\u7b2c\u4e00\u4e2a\u6807\u9898\u662f\u201c\u5efa\u7acb\u8054\u7cfb\u201d\u3002\u987e\u540d\u601d\u4e49\uff0c\u5b83\u9002\u7528\u4e8e\u6211\u5728\u67d0\u4e2a\u65f6\u5019\u5df2\u7ecf\u4e0e\u4e4b\u4e92\u52a8\u5e76\u5e0c\u671b\u4fdd\u6301\u8054\u7cfb\u7684\u6240\u6709\u4eba\u3002\n\u6211\u559c\u6b22\u8ba9\u4e8b\u60c5\u5c3d\u53ef\u80fd\u7b80\u5355\uff0c\u6240\u4ee5\u53ea\u67097\u5217\uff1a\u59d3\u540d\u3001\u8054\u7cfb\u4fe1\u606f\u3001\u5907\u6ce8\u3001\u7c7b\u522b\u3001\u4e0a\u4e00\u4e2a\u8054\u7cfb\u4eba\u3001\u4e0b\u4e00\u4e2a\u8054\u7cfb\u4eba\u3001\u89e6\u53d1\u63d0\u9192\u3002\n\u524d\u4e09\u5217\u662f\u7b80\u5355\u7684\u6587\u672c\u5217\uff0c\u800c\u7b2c\u4e09\u5217\u662f\u7c7b\u522b\uff0c\u662f\u5355\u4e2a\u9009\u62e9\u5217\uff08\u201ca\u201d\u3001\u201cB\u201d\u3001\u201cC\u201d\u3001\u201cD\u201d\uff09\u3002\n\u4e0b\u4e00\u4e2a\u8054\u7cfb\u4eba\u5217\u662f\u6839\u636e\u7c7b\u522b\u548c\u6700\u540e\u4e00\u4e2a\u8054\u7cfb\u4eba\u5217\u4e2d\u7684\u503c\u8ba1\u7b97\u7684\u3002\n\u5982\u679c\uff08\u7c7b\u522b=&#34\uff1bD&#34\uff1b\uff0c\u65e5\u671f\u6dfb\u52a0\uff08{Last Contact}\uff0c12\uff0c&#39\uff1bmonth&#39\uff1b\uff09\uff0c\u5982\u679c\uff08\u7c7b\u522b=&#34\uff1bC&#34\uff1b\uff0c\u65e5\u671f\u6dfb\u52a0\uff08{Last Contact}\uff0c6\uff0c&#39\uff1bmonth&#39\uff1b\uff09\uff0c\u5982\u679c\uff08\u7c7b\u522b=&#34\uff1bB&#34\uff1b\uff0c\u65e5\u671f\u6dfb\u52a0\uff08{Last Contact}\uff0c2\uff0c&#39\uff1bmonth&#39\uff1b\uff09\uff0c\u5982\u679c\uff08\u7c7b\u522b=&#34\uff1bA&#34\uff1b\uff0c\u65e5\u671f\u6dfb\u52a0\uff08{Last Contact}\uff0c3\uff0c&#39\uff1bweeks&#39\uff1b\uff09\uff09\n\u8fd9\u4e9b\u503c\uff08\u4f8b\u5982\uff0cC\u7c7b\u8054\u7cfb\u4eba\u6bcf6\u4e2a\u6708\u8054\u7cfb\u4e00\u6b21\uff09\u4e0eDerek Sivers\u4f7f\u7528\u7684\u503c\u5b8c\u5168\u76f8\u540c\u3002\n\u7136\u540e\u901a\u8fc7\u6bd4\u8f83\u4e0b\u4e00\u4e2a\u8054\u7cfb\u4eba\u680f\u548c\u4eca\u5929\u7684\u65e5\u671f\u6765\u586b\u5145\u89e6\u53d1\u63d0\u9192\u680f\u3002\n\u7b2c\u4e8c\u5f20\u8868\u540d\u4e3a\u201c\u6f5c\u5728\u65b0\u8054\u7cfb\u4eba\u201d\uff0c\u66f4\u7b80\u5355\u3002\u5728\u91cc\u9762\uff0c\u6211\u50a8\u5b58\u4e86\u8fc4\u4eca\u4e3a\u6b62\u6211\u8fd8\u6ca1\u6709\u4e0e\u4e4b\u4ea4\u8c08\u8fc7\u7684\u9177\u4eba\u7684\u4fe1\u606f\u3002\n\u6bcf\u5f53\u6211\u9047\u5230\u4e00\u4e2a\u5f88\u9177\u7684\u9879\u76ee\u3001\u6709\u8da3\u7684\u5185\u5bb9\u6216\u6211\u5f97\u5230\u4e00\u4e2a\u63a8\u8350\uff0c\u6211\u90fd\u4f1a\u628a\u8fd9\u4e2a\u4eba\u6dfb\u52a0\u5230\u8fd9\u4e2a\u8868\u4e2d\u3002\n\u5728\u201c\u59d3\u540d\u201d\u680f\u4e2d\uff0c\u6211\u901a\u5e38\u4f1a\u4fdd\u5b58\u4e00\u4e2a\u6307\u5411\u4ed6\u4eec\u7f51\u7ad9\u3001\u9879\u76ee\u6216Twitter\u5e10\u6237\u7684\u94fe\u63a5\u3002\u6ce8\u91ca\u680f\u7528\u6765\u5b58\u50a8\u4e00\u4e9b\u5173\u4e8e\u6211\u4e3a\u4ec0\u4e48\u8ba4\u4e3a\u8fd9\u4e2a\u4eba\u6709\u8da3\u7684\u4fe1\u606f\u3002\n\u4f8b\u5982\uff0c\u5176\u4e2d\u4e00\u6761\u53ef\u80fd\u662f\uff1a\u201c\u4ed6\u5728\u535a\u5ba2\u4e0a\u53d1\u8868\u4e86\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u5e16\u5b50\uff1ahttps://jon.bo/posts/\".\n\u6b64\u8868\u4e2d\u5269\u4f59\u7684\u4e24\u5217\u201c\u4f38\u51fa\u201d\u548c\u201c\u4f55\u65f6\u4f38\u51fa\u201d\u5c06\u81ea\u52a8\u586b\u5145\u3002\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u81ea\u52a8\u5316\uff0c\u56e0\u4e3a\u8fd9\u662f\u6240\u6709\u9b54\u6cd5\u53d1\u751f\u7684\u5730\u65b9\u3002\n\u6211\u5df2\u7ecf\u6bcf\u5929\u67e5\u770b\u6211\u7684\u6536\u4ef6\u7bb1\uff0c\u6240\u4ee5\u6536\u5230\u8fd9\u6837\u7684\u63d0\u9192\u5bf9\u6211\u6765\u8bf4\u662f\u5b8c\u7f8e\u7684\u3002\u67e5\u770b\u6570\u636e\u5e93\u6216\u67d0\u4e2a\u7f51\u7ad9\u80af\u5b9a\u4f1a\u589e\u52a0\u592a\u591a\u6469\u64e6\u3002\n\u8981\u521b\u5efaAirtable automation\uff0c\u8bf7\u5355\u51fb\u53f3\u4e0a\u89d2\u7684Automations\u6309\u94ae\u3002\n\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u662f\u5728\u5df2\u5efa\u7acb\u7684\u8054\u7cfb\u4eba\u8868\u4e2d\u67e5\u627e\u6240\u6709\u8bb0\u5f55\uff0c\u5176\u4e2d\u89e6\u53d1\u5668\u63d0\u9192\u5217\u5305\u542b\u5355\u8bcd\u201c\u89e6\u53d1\u5668\u63d0\u9192\u201d\u3002\uff08\u8bf7\u8bb0\u4f4f\uff0c\u6b64\u5217\u662f\u901a\u8fc7\u5c06\u4eca\u5929\u7684\u65e5\u671f\u4e0e\u4e0b\u4e00\u4e2a\u8054\u7cfb\u4eba\u5217\u8fdb\u884c\u6bd4\u8f83\u7684\u516c\u5f0f\u586b\u5145\u7684\u3002\uff09\n\u7b2c\u4e8c\u4e2a\u52a8\u4f5c\u662f\u4e00\u4e2a\u5c0f\u7684\u81ea\u5b9a\u4e49\u811a\u672c\uff0c\u5b83\u81ea\u52a8\u4ece\u6f5c\u5728\u7684\u65b0\u8054\u7cfb\u4eba\u8868\u4e2d\u9009\u62e9\u4e00\u4e2a\u968f\u673a\u6761\u76ee\uff0c\u7136\u540e\u66f4\u65b0\u8be5\u6761\u76ee\u7684\u201c\u4f38\u51fa\u201d\u548c\u201c\u4f55\u65f6\u4f38\u51fa\u201d\u5b57\u6bb5\u3002\u5f53\u7136\uff0c\u811a\u672c\u53ea\u4f1a\u4ece\u4ee5\u524d\u6ca1\u6709\u9009\u62e9\u8fc7\u7684\u6761\u76ee\u5217\u8868\u4e2d\u8fdb\u884c\u9009\u62e9\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8981\u66f4\u65b0\u201c\u4f38\u51fa\u201d\u5217\u3002\u4ec5\u4f7f\u7528\u201c\u4f38\u51fa\u201d\u5217\u4e0d\u7b49\u4e8e\u201c\u662f\u201d\u7684\u8bb0\u5f55\u3002\u6b64\u5916\uff0c\u811a\u672c\u4f1a\u8fd4\u56de\u968f\u673a\u9009\u53d6\u7684\u8bb0\u5f55\uff0c\u4ee5\u4fbf\u6211\u5728\u4e0b\u4e00\u6b65\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u4fe1\u606f\u3002\n\u6700\u540e\u4e00\u6b65\u662f\u5c06\u524d\u9762\u6b65\u9aa4\u4e2d\u7684\u6240\u6709\u4fe1\u606f\u653e\u5165\u7535\u5b50\u90ae\u4ef6\uff0c\u7136\u540e\u53d1\u9001\u5230\u6211\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002\u8fd9\u5305\u62ec\u4ece\u6f5c\u5728\u65b0\u8054\u7cfb\u4eba\u8868\u4e2d\u968f\u673a\u9009\u53d6\u7684\u4e00\u4e2a\u6761\u76ee\uff0c\u4ee5\u53ca\u4ece\u5df2\u5efa\u7acb\u8054\u7cfb\u4eba\u8868\u4e2d\u5e94\u53d1\u9001\u65b0\u6d88\u606f\u7684\u4eba\u5458\u5217\u8868\u3002\n\u6bcf\u5929\u65e9\u4e0a\u6211\u90fd\u4f1a\u6536\u5230\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\uff0c\u544a\u8bc9\u6211\u4eca\u5929\u5e94\u8be5\u8054\u7cfb\u8c01\u3002\u5728\u6211\u53d1\u9001\u6d88\u606f\u540e\uff0c\u6211\u6253\u5f00Airtable\u5e76\u5c06\u6700\u540e\u4e00\u4e2a\u8054\u7cfb\u4eba\u680f\u66f4\u65b0\u4e3a\u4eca\u5929\u7684\u65e5\u671f\u3002\u603b\u7684\u6765\u8bf4\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u6bcf\u5929\u5927\u6982\u9700\u898115\u5206\u949f\u3002\n\u4f60\u53ef\u4ee5\u5728\u4e0b\u9762\u627e\u5230\u66f4\u591a\u7684\u6280\u672f\u7ec6\u8282\uff0c\u4f46\u9996\u5148\u6211\u60f3\u82b1\u4e00\u70b9\u65f6\u95f4\u8c08\u8c08\u66f4\u91cd\u8981\u7684\u4e8b\u60c5\u3002\n\u6211\u901a\u5e38\u4f1a\u82b1\u51e0\u5206\u949f\u65f6\u95f4\u7814\u7a76\u4ed6\u4eec\u6700\u8fd1\u5728\u505a\u4ec0\u4e48\u3002\n\u6211\u67e5\u770b\u4ed6\u4eec\u7684\u793e\u4ea4\u8d44\u6599\u3001\u4e2a\u4eba\u7f51\u7ad9\uff0c\u9605\u8bfb\u6216\u89c2\u770b\u4ed6\u4eec\u53d1\u5e03\u7684\u4efb\u4f55\u6211\u9519\u8fc7\u7684\u5185\u5bb9\u3002\n\u6700\u91cd\u8981\u7684\u662f\uff0c\u6211\u603b\u662f\u53d1\u9001\u6211\u60f3\u63a5\u6536\u7684\u4fe1\u606f\u3002\u4ed6\u4eec\u7b80\u77ed\u3001\u771f\u8bda\uff0c\u800c\u4e14\uff08\u7406\u60f3\u60c5\u51b5\u4e0b\uff09\u5f88\u6709\u5e2e\u52a9\u3002\u6211\u4ece\u4e0d\u8bd5\u56fe\u63a8\u9500\u4efb\u4f55\u4e1c\u897f\uff0c\u9664\u4e86\u4fdd\u6301\u8054\u7cfb\uff0c\u6211\u6ca1\u6709\u522b\u7684\u8ba1\u5212\u3002\n\u6709\u65f6\u6211\u53ea\u662f\u5206\u4eab\u4e00\u7bc7\u76f8\u5173\u7684\u6587\u7ae0\u6216\u4e66\uff0c\u6211\u8ba4\u4e3a\u4ed6\u4eec\u53ef\u80fd\u4f1a\u89c9\u5f97\u6709\u8da3\uff0c\u6709\u65f6\u6211\u4f1a\u5c31\u4ed6\u4eec\u73b0\u5728\u9762\u4e34\u7684\u95ee\u9898\u63d0\u4f9b\u5177\u4f53\u7684\u5e2e\u52a9\u6216\u5efa\u8bae\u3002\n\u5f53\u7136\uff0c\u5e76\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u5b9a\u671f\u53d1\u5e03\u5185\u5bb9\u6216\u66f4\u65b0\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u901a\u5e38\u53ea\u662f\u95ee\u4ed6\u4eec\u6700\u8fd1\u5728\u505a\u4ec0\u4e48\u3002\n\u4f60\u4f1a\u60ca\u8bb6\u5730\u53d1\u73b0\uff0c\u6709\u8fd9\u4e48\u591a\u4eba\u771f\u7684\u5f88\u9ad8\u5174\u6536\u5230\u8fd9\u6837\u7684\u4fe1\u606f\uff0c\u4ed6\u4eec\u7ecf\u5e38\u4f1a\u5f15\u53d1\u5404\u79cd\u66f4\u6df1\u5c42\u6b21\u7684\u5bf9\u8bdd\u3002\n\u597d\u7684\uff0c\u5c31\u50cf\u6211\u8bf4\u7684\uff0c\u66f4\u591a\u7684\u6280\u672f\u7ec6\u8282\u5982\u4e0b\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u8ba9\u6211\u77e5\u9053\u4f60\u7684\u60f3\u6cd5\uff0c\u5982\u679c\u4f60\u5bf9\u6211\u5982\u4f55\u6539\u8fdb\u6211\u7684\u7cfb\u7edf\u6709\u4efb\u4f55\u5efa\u8bae\u3002\n\u6b64\u5916\uff0c\u8fd9\u662f\u6211\u7528\u6765\u9009\u62e9\u968f\u673a\u6761\u76ee\u548c\u76f8\u5e94\u66f4\u65b0\u5b57\u6bb5\u7684\u4ee3\u7801\uff1a\n\u8ba9table=base\u3002\u53ef\u83b7\u53d6\u7684\uff08\u6f5c\u5728\u7684\u65b0\u8054\u7cfb\u4eba\uff09\uff1b\u8ba9queryResult=Wait table\u3002\u9009\u62e9RecordsAsSync\uff08\uff09\uff1bvar items=queryResult\u3002recordslet todo_items=[]\uff1b\u5bf9\u4e8e\uff08let i=0\uff1bi&lt\uff1bitems.length\uff1bi++\uff09{var record=items[i]if\uff08record.getCellValue\uff08&#34\uff1bReach Out&#34\uff1b\uff09\uff01=&#34; \u662f\u7684\uff08#34\uff1b\uff09{todo_items.push\uff08record\uff09\uff1b}\u5b89\u6170\u65e5\u5fd7\uff08todo_items.length\uff09\uff1b\u8ba9rightNow=newdate\uff08\uff09\uff1bvar random_record=todo_items[todo_items.length*Math.random\uff08\uff09|0]\uff1b\u7b49\u5019\u9910\u684c\u3002updateRecordAsync\uff08random#u record.id\uff0c{&#34\uff1bReach Out&#34\uff1b\uff1a&#34\uff1bYes&&#34\uff1b&#When to Reach&#34\uff1b\uff1arightNow}\uff09\u8f93\u51fa\u3002set\uff08&#34\uff1bName&#34\uff1b\uff0crandom#u record.getCellValue\uff08&#34\uff1bName&#34\uff1b\uff09\u8f93\u51faset\uff08&#34\uff1bNotes&#34\uff1b\uff0crandom#u record.getCellValue\uff08&#34\uff1bNotes&#34\uff1b\uff09\n\u6700\u540e\u4f46\u5e76\u975e\u6700\u4e0d\u91cd\u8981\u7684\u662f\uff0c\u8fd9\u662f\u6211\u7528\u6765\u7f16\u8bd1\u548c\u53d1\u9001\u6bcf\u65e5\u7535\u5b50\u90ae\u4ef6\u7684\u64cd\u4f5c\u3002\n\u6700\u540e\uff0c\u5982\u679c\u4f60&#39\uff1b\u5982\u679c\u4f60\u662f\u4e00\u4e2a\u597d\u5947\u800c\u806a\u660e\u7684\u4eba\uff0c\u4f60\u7edd\u5bf9\u5e94\u8be5\u52a0\u5165\u6211\u901a\u8baf\u4e0a5000\u591a\u4eba\u7684\u884c\u5217\u3002\u6bcf\u5468\u53d1\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\uff0c\u91cc\u9762\u6709\u6211\u5b66\u5230\u7684\u3001\u8bfb\u5230\u7684\u6216\u53d1\u73b0\u7684\u6240\u6709\u6709\u8da3\u7684\u4e1c\u897f\u3002", "note_en": "Staying in touch with people is one of these asymmetric habits that require little effort, time and resources but has an unlimited upside. It\u2019s the easiest and most effective way to make your life more serendipitous.\n Okay enough of that. Since you clicked on the headline I will assume you understand why it makes sense to keep in touch with people.\n  So unless you have a solid system, chances are high that you won\u2019t reach out to people regularly and miss out on a ton of fun and opportunities.\n Derek Sivers has a cool  system. He divides all people he wants to stay in touch with into four categories: A, B, C, D:\n  While this system sounds deceptively simple, like most people, I wasn\u2019t really able to make it work.\n You obviously need some technology but all CRMs (and PRMs) I tried felt overkill. Derek ended up  programming his own database software which he however never shared publicly.\n  What exactly do you write? Derek\u2019s advice is rather vague: \u201cJust find out how they\u2019re doing. See if you can help them in any way.\u201d\n Now I recently finally figured out a way to make Derek\u2019s system work. Obviously, this is why I\u2019m writing this post.\n    The first one is titled  Established Contacts. As the name suggests it\u2019s for everyone I already interacted with at some point and want to keep in touch with.\n  I like to keep things as simple as possible, so there are only 7 columns:  Name,  Contact Info,  Notes,  Category,  Last Contact,  Next Contact,  Trigger Reminder.\n The first three columns are simple text columns while the third one,  Category, is a single select column (\u201dA\u201d, \u201cB\u201d, \u201cC\u201d, \u201cD\u201d).\n The  Next Contact column is calculated as a function of the values in the  Category and  Last  Contact columns.\n   IF( Category=&#34;D&#34;, DATEADD({Last Contact},12,&#39;month&#39;), IF(Category=&#34;C&#34;, DATEADD({Last Contact},6,&#39;month&#39;), IF(Category=&#34;B&#34;, DATEADD({Last Contact},2,&#39;month&#39;), IF(Category=&#34;A&#34;, DATEADD({Last Contact},3,&#39;weeks&#39;)) ) ) )\n The values (e.g. contacts in the C category are contacted every 6 months) are exactly the same that Derek Sivers uses.\n The  Trigger Reminder column is then populated by comparing the  Next Contact column with today\u2019s date.\n    The second table, titled  Potential New Contacts is even simpler. In it I store information on cool people I haven\u2019t talked to so far.\n  Whenever I come across a cool project, interesting piece of content or I get a referral, I add the person in question to this table.\n In the  Name column, I usually save a link to their website, project, or Twitter account. The  Notes column is used to store some information about why I think this person is interesting.\n For example, one entry might read: \u201c He publishes incredible posts on his blog:  https://jon.bo/posts/\u201d.\n The remaining two columns in this table  Reach Out and  When to Reach Out are populated automatically.\n So next, we\u2019re going to talk about automations, since this is where all the magic happens.\n       I already check my inbox every day so getting a reminder like this is perfect for me. Checking a database or some website would definitely add too much friction.\n    To create an Airtable automation, click on the  Automations button in the upper right corner.\n     The first action is to find all records in the  Established Contacts table where the  Trigger Reminder column contains the word \u201cTrigger Reminder\u201d. (Remember that this column is populated through a formula that compares today\u2019s date to the  Next Contact column.)\n  The second action is a little custom script that automatically picks one random entry from the  Potential New Contacts table and then updates the  Reach Out and  When to Reach Out fields for this entry. Of course, the script only picks from the list of entries that haven\u2019t been picked before. This is why the  Reach Out column is updated. Only records where the  Reach Out column is not equal to \u201cYes\u201d are used. Moreover, the script returns the record it picked randomly so I can use this information in the next step.\n  The final step is that all the information from the previous steps is put into an email which is then sent to my email address. This includes the one entry from the  Potential New Contacts table that was picked randomly and the list of people from the  Established Contacts table that are due for a new message.\n  Every morning I\u2019m getting an email that tells me who I should reach out to today. After I sent the messages, I open Airtable and update the  Last Contact column to today\u2019s date. In total, this process takes maybe 15 minutes per day.\n You can find all further technical details below but first I want to take a brief moment to talk about something more important.\n    I typically spend a few minutes researching what they\u2019ve been up to recently.\n I check their social profiles, personal websites, and read or watch any content they published that I missed.\n  Most importantly, I always send the kind of messages I\u2019d like to receive. They\u2019re short, genuine, and (ideally) helpful. I never try to sell anything and there\u2019s no agenda other than to keep in touch.\n Sometimes I just share a related article or book I think they might find interesting and sometimes I offer specific help or advice with a problem they\u2019re facing right now.\n Of course, not everyone publishes content or updates regularly. In that case, I usually just ask what they\u2019ve been up to lately.\n You\u2019d be surprised how many people are really happy to get these kinds of messages and they often spark all kinds of deeper conversations.\n Okay, like I said, more technical details below. And in any case, let me know what you think and if you have any suggestions on how I can improve my system.\n          Moreover, this is the code I\u2019m using to pick a random entry and the update fields accordingly:\n let table = base.getTable(&#34;Potential New Contacts&#34;);let queryResult = await table.selectRecordsAsync();var items = queryResult.recordslet todo_items = [];for (let i = 0; i  &lt;  items.length ;  i ++)  {  var  record =  items[i]  if  ( record.getCellValue (&#34; Reach  Out &#34;)  !=  &#34; Yes &#34;)  {  todo_items.push ( record );  } } console.log ( todo_items.length ); let  rightNow =  new  Date (); var  random_record =  todo_items[todo_items.length  *  Math.random ()  |  0]; await  table.updateRecordAsync ( random_record.id ,  {  &#34; Reach  Out &#34;  :  &#34; Yes &#34;,  &#34; When  to  Reach  Out &#34;  :  rightNow }) output.set (&#34; Name &#34;, random_record.getCellValue (&#34; Name &#34;)) output.set (&#34; Notes &#34;, random_record.getCellValue (&#34; Notes &#34;))\n Last but not least, this is the action I\u2019m using to compile and send the daily email.\n   Finally, if you&#39;re a curious intelligent person, you should definitely join the 5000+ other people on my newsletter. It\u2019s one email a week with everything interesting I\u2019ve learned, read or found.", "posttime": "2022-02-15 19:50:40", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6570\u767e\u4eba,system,\u4fdd\u6301\u8054\u7cfb", "title": "\u6211\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u7cfb\u7edf\u4e0e\u6570\u767e\u4eba\u4fdd\u6301\u8054\u7cfb", "title_en": "A simple system I\u2019m using to stay in touch with hundreds of people", "transed": 1, "url": "https://jakobgreenfeld.com/stay-in-touch", "via": "", "real_tags": ["\u6570\u767e\u4eba", "system", "\u4fdd\u6301\u8054\u7cfb"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073507, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u9053\u83dc\u7684\u7279\u70b9\u662f\u5927\u80c6\u7684\u8bbe\u8ba1\uff0c\u4e24\u680f\u7684\u5e03\u5c40\u5f88\u5bbd\uff0c\u5c55\u793a\u4e86\u914d\u6599\u548c\u65b9\u6cd5\u3002\u5927\u53f7\u7c97\u4f53\u6807\u9898\u4e0a\u65b9\u662f\u5bf9\u914d\u65b9\u7684\u4f4e\u8c03\u63cf\u8ff0\uff0c\u6709\u52a9\u4e8e\u63d0\u4f9b\u914d\u65b9\u7684\u5386\u53f2\u8bb0\u5f55\u6216\u5176\u4ed6\u4fe1\u606f\u3002\u6807\u9898\u4e0b\u65b9\u662f\u4e00\u4e2a\u7b80\u6d01\u7684\u65b9\u6846\uff0c\u60a8\u53ef\u4ee5\u5728\u5176\u4e2d\u8f93\u5165\u98df\u8c31\u5236\u4f5c\u7684\u4efd\u6570\u3001\u51c6\u5907\u548c\u70f9\u996a\u65f6\u95f4\u4ee5\u53ca\u98df\u8c31\u96be\u5ea6\u3002\u914d\u6599\u548c\u5236\u5907\u6b65\u9aa4\uff08\u65b9\u6cd5\uff09\u5206\u4e24\u5217\u663e\u793a\uff0c\u5982\u679c\u9700\u8981\uff0c\u53ef\u4ee5\u8f7b\u677e\u8c03\u6574\u5176\u5bbd\u5ea6\u3002\u914d\u6599\u91c7\u7528\u67d4\u548c\u7684\u5c0f\u659c\u4f53\uff0c\u4ee5\u514d\u5f15\u8d77\u4eba\u4eec\u5bf9\u66f4\u91cd\u8981\u7684\u65b9\u6cd5\u7684\u6ce8\u610f\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u4f1a\u81ea\u52a8\u5728\u53f3\u4fa7\u7528\u4e0d\u540c\u7684\u9ed1\u70b9\u7f16\u53f7\u3002\u6700\u540e\uff0c\u53ef\u4ee5\u5728\u65b9\u6cd5\u4e0b\u6307\u5b9a\u4e00\u4e9b\u63d0\u793a\u3001\u5b58\u50a8\u6307\u5357\u3001\u53d8\u4f53\u6216\u5176\u4ed6\u6709\u7528\u4fe1\u606f\u3002\n\u6a21\u677f\u975e\u5e38\u7075\u6d3b\uff0c\u53ea\u9700\u6307\u5b9a\u6807\u9898\u3001\u6210\u5206\u548c\u65b9\u6cd5\u3002\u5982\u679c\u4e0d\u9700\u8981\uff0c\u5176\u4ed6\u4e00\u5207\u90fd\u4f1a\u6d88\u5931\uff0c\u914d\u65b9\u7684\u5e03\u5c40\u4e5f\u4f1a\u76f8\u5e94\u8c03\u6574\u3002\n\u6b64\u6a21\u677f\u6839\u636eCC BY-NC-SA 4.0\u8bb8\u53ef\u8bc1\u83b7\u5f97\u8bb8\u53ef\u3002\u5355\u51fb\u6b64\u5904\u67e5\u770b\u6b64\u8bb8\u53ef\u8bc1\u5bf9\u60a8\u4f7f\u7528\u6a21\u677f\u7684\u610f\u4e49\u3002\n\u6b64\u6a21\u677f\u4f7f\u7528\u6807\u51c6pdflatex\u7f16\u8bd1\u3002\u9664\u4e86\u63d0\u4f9b\u5168\u5957\u7279\u514b\u65af\u7684\u5305\u88c5\u5916\uff0c\u6ca1\u6709\u5176\u4ed6\u7279\u6b8a\u8981\u6c42\u3002\n\u9664\u4e86\u914d\u65b9\u6210\u5206\u548c\u65b9\u6cd5\uff0c\u6240\u6709\u5176\u4ed6\u914d\u65b9\u4fe1\u606f\u90fd\u8bbe\u7f6e\u5728\u6a21\u677f\u9876\u90e8\u7684\u914d\u65b9\u4fe1\u606f\u5757\u4e2d\u3002\u914d\u65b9\u7684\u4e0d\u540c\u90e8\u5206\u6709\u8bb8\u591a\u547d\u4ee4\uff0c\u4f8b\u5982\u6807\u9898\u4e0a\u65b9\u51fa\u73b0\u7684\u659c\u4f53\u63cf\u8ff0\u7684\\recipedescription{}\u3002\u6bcf\u4e2a\u547d\u4ee4\u90fd\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u9664\u914d\u65b9\u6807\u9898\u5916\uff0c\u6240\u6709\u53c2\u6570\u90fd\u53ef\u4ee5\u4e3a\u7a7a\u3002\u6ce8\u610f\uff0c\u547d\u4ee4\u5fc5\u987b\u59cb\u7ec8\u5b58\u5728\uff0c\u6240\u4ee5\u4e0d\u8981&#39\uff1b\u5982\u679c\u4e0d\u9700\u8981\uff0c\u4e0d\u8981\u8bc4\u8bba\u6216\u5220\u9664\u5b83\u4eec\u3002\n\u6a21\u677f\u4e2d\u6709\u4e00\u4e2a\u81ea\u5b9a\u4e49\u547d\u4ee4\uff0c\u7528\u4e8e\u8f93\u51fa\u914d\u65b9\u7684\u6807\u9898\u3002\n\\outputrecipeheader\u6b64\u547d\u4ee4\u8f93\u51fa\u98df\u8c31\u63cf\u8ff0\u3001\u6807\u9898\u548c\u4efd\u6570/\u51c6\u5907\u65f6\u95f4/\u70f9\u996a\u65f6\u95f4/\u96be\u5ea6\u3002\u5b83\u4e0d\u63a5\u53d7\u4efb\u4f55\u53c2\u6570\uff0c\u5e76\u4f7f\u7528\u914d\u65b9\u4fe1\u606f\u5757\u4e2d\u6307\u5b9a\u7684\u4fe1\u606f\u3002\u5510&#39\uff1bt\u5220\u9664\u6b64\u547d\u4ee4\u6216\u66f4\u6539\u5176\u5728\u6a21\u677f\u4e2d\u7684\u4f4d\u7f6e\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u8bf4\u660e\u6216\u914d\u65b9\u4fe1\u606f\uff0c\u5b83\u4f1a\u81ea\u52a8\u8c03\u6574\u5e03\u5c40\u4ee5\u5220\u9664\u5b83\u4eec\uff0c\u5e76\u4e14\u770b\u8d77\u6765\u4ecd\u7136\u4e0d\u9519\u3002\n\u6210\u5206\u548c\u65b9\u6cd5\u4ee5\u56fa\u5b9a\u5bbd\u5ea6\u7684\u4e24\u5217\u5e03\u5c40\u8f93\u51fa\u3002\u53ef\u4ee5\u901a\u8fc7\u67e5\u627e\\columnratio\u547d\u4ee4\u5e76\u66f4\u6539\u5176\u4e2d\u7684\u4e24\u4e2a\u503c\u6765\u66f4\u6539\u8fd9\u4e9b\u5bbd\u5ea6\u3002\u5efa\u8bae\u5c06\u5176\u603b\u548c\u8bbe\u4e3a1\uff0c\u4ee5\u4fbf\u503c\u5bf9\u5e94\u4e8e\u5217\u7684\u767e\u5206\u6bd4\u5bbd\u5ea6\u3002\u4e24\u5217\u5e03\u5c40\u901a\u8fc7\\begin{paracol}{2}\u6fc0\u6d3b\uff0c\u5982\u679c\u6709\u8d85\u8fc7\u4e00\u9875\u7684\u6210\u5206\u6216\u65b9\u6cd5\uff0c\u914d\u65b9\u5c06\u6839\u636e\u9700\u8981\u81ea\u52a8\u62c6\u5206\u4e3a\u5176\u4ed6\u9875\u9762\u3002\n\u914d\u65b9\u914d\u6599\u5b58\u653e\u5728RecipeIngElements\u73af\u5883\u4e2d\uff0c\u6bcf\u4e2a\u914d\u6599\u90fd\u5728\u5355\u4e2a\u53c2\u6570\u4e2d\u7684\\\u914d\u6599{}\u547d\u4ee4\u4e2d\u6307\u5b9a\u3002\u53ef\u4ee5\u5728\u914d\u6599\u4e2d\u6dfb\u52a0\u65b0\u7684\u7ebf\uff0c\u4f7f\u591a\u7ebf\u914d\u6599\u7528\u6807\u51c6\u7684\\\\\u5305\u88c5\u6574\u9f50\u3002\n\u914d\u65b9\u65b9\u6cd5\u4f4d\u4e8erecipemethods\u73af\u5883\u4e2d\uff0c\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u5728\u5355\u4e2a\u53c2\u6570\u4e2d\u7684\\method{}\u547d\u4ee4\u4e2d\u6307\u5b9a\u3002\u4e0d\u5efa\u8bae\u5728\u65b9\u6cd5\u4e2d\u4f7f\u7528\u65b0\u884c\uff0c\u800c\u662f\u5c06\u65b9\u6cd5\u5206\u89e3\u4e3a\u591a\u4e2a\u6b65\u9aa4\uff0c\u6bcf\u4e2a\u6b65\u9aa4\u4e2d\u90fd\u6709\u77ed\u53e5\u3002\u8fd9\u4f7f\u5f97\u83dc\u8c31\u66f4\u5bb9\u6613\u7406\u89e3\uff0c\u5e76\u4e3a\u6587\u672c\u63d0\u4f9b\u4e86\u5598\u606f\u7684\u7a7a\u95f4\u3002", "note_en": "This recipe features a bold design with a wide two-column layout that displays the ingredients and methods. Above the large bold title is a subdued description of the recipe, useful for giving a history of the recipe or additional information about it. Below the title is a neat block where you can enter the number of servings the recipe makes, the preparation and cooking times and the recipe difficulty. Ingredients and steps of preparation (methods) are displayed in two columns, the widths of which can be easily adjusted if required. Ingredients are in a subdued smaller italic so as not to draw attention from the more important methods which are automatically numbered in distinct black dots on the right. Finally, some tips, storage guidelines, variations or other useful information can be specified under the methods.\n The template is very flexible and the only things that must be specified are the title, ingredients and methods. Everything else will simply disappear if not required and the layout of the recipe will adjust accordingly.\n       This template is licensed under a   CC BY-NC-SA 4.0 license.  Click here to see what this license means for your use of the template.\n   This template compiles with standard pdflatex. There are no special requirements outside of packages that are supplied with a full distribution of TeX.\n  Apart from the recipe ingredients and methods, all other recipe information is set in the RECIPE INFORMATION block at the top of the template. A number of commands are present there for different parts of the recipe, such as  \\recipedescription{} for the italic description that appears above the title. Each command takes a single parameter and all of them can be empty except the recipe title. Note that the commands must always be present, so don&#39;t comment them out or remove them if they are not required.\n  A single custom command is present in the template for outputting the header of the recipe.\n \\outputrecipeheader This command outputs the recipe description, title and servings/preparation time/cooking time/difficulty. It does not take any parameters and uses the information specified in the RECIPE INFORMATION block. Don&#39;t remove this command or change its position in the template. If no description or recipe information is specified, it will automatically adjust the layout to remove them and still look good.\n  The ingredients and methods are output in a two-column layout with fixed widths. You can change these widths by finding the  \\columnratio command and changing the two values within it. It is recommended to have them sum to 1 so the values correspond to percentage widths of the columns. The two-column layout is activated with  \\begin{paracol}{2} and if there are more ingredients or methods than fit on 1 page, the recipe will automatically split onto additional pages as required.\n Recipe ingredients are housed in a  recipeingredients environment and each ingredient is specified in a  \\ingredient{} command in the single parameter. New lines can be added within ingredients to make multi-line ingredients wrap neatly with the standard  \\\\.\n Recipe methods are housed in a  recipemethods environment and each method is specified in a  \\method{} command in the single parameter. It is not recommended to use new lines in methods but instead to break up the method into more steps with short sentences in each one. This makes the recipe easier to follow and gives breathing space for the text.", "posttime": "2022-02-15 19:48:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u914d\u65b9,template", "title": "\u70f9\u996a\u914d\u65b9\u7528\u4e73\u80f6\u6a21\u677f", "title_en": "LaTeX Template for Cooking Recipes", "transed": 1, "url": "https://www.latextemplates.com/template/jacopo-recipe", "via": "", "real_tags": ["\u914d\u65b9", "template"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073506, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211&#39\uff1b\u6211\u5df2\u7ecf\u5728\u8111\u540e\u80e1\u601d\u4e71\u60f3\u4e86\u5f88\u957f\u65f6\u95f4\uff0c\u73b0\u5728\u662f\u6211\u5b8c\u7f8e\u7684\u5e94\u7528\u7a0b\u5e8f\u8bed\u8a00\u3002\u6709\u4e00\u4e9b\u8bed\u8a00\u6211\u6216\u591a\u6216\u5c11\u90fd\u559c\u6b22\uff0c\u4f46\u6211\u4ecd\u7136\u76f8\u4fe1\u53e6\u4e00\u79cd\u8bed\u8a00\u53ef\u80fd\u66f4\u9002\u5408\u6211\u60f3\u5199\u7684\u8f6f\u4ef61\uff0c\u6211\u6709\u5f88\u591a\u60f3\u6cd5\uff0c\u5173\u4e8e\u5b83\u5c06\u5305\u62ec\u54ea\u4e9b\u529f\u80fd\uff0c\u5b83\u5c06\u7701\u7565\u54ea\u4e9b\u529f\u80fd\uff0c\u5982\u4f55\u7f16\u5199\uff0c\u7b49\u7b49\u3002\n\u6211\u5bf9\u73b0\u6709\u8bed\u8a00\u7684\u4e00\u4e2a\u4e0d\u6ee1\u662f\uff0c\u6211\u8ba4\u4e3a\u5b83\u4eec\u90fd\u4e0d\u80fd\u5f88\u597d\u5730\u5904\u7406\u9519\u8bef\u3002\u683c\u96f7\u767b\u00b7\u970d\u5c14&#39\uff1bWhat\u2019\u5f88\u597d\u7684\u535a\u5ba2\u6587\u7ae0\u4e0b\u4e00\u6b65\u662f\u4ec0\u4e48\uff1f\u8c08\u5230\u7f16\u7a0b\u8bed\u8a00\u672a\u6765\u53ef\u80fd\u4f1a\u53bb\u7684\u5730\u65b9\uff0c\u4ed6\u6307\u51fa\u7684\u4e00\u4ef6\u4e8b\u662f\u6211\u4eec&#39\uff1b\u6211\u6709\u5404\u79cd\u5404\u6837\u7684\u65b9\u6cd5\uff0c\u4f46\u6ca1\u6709\u4e00\u79cd\u611f\u89c9\u660e\u663e\u662f\u5bf9\u7684\u3002\u6211\u975e\u5e38\u540c\u610f\uff0c\u6211\u4e0d&#39\uff1b\u6211\u4e0d\u60f3\u5047\u88c5\u6211&#39\uff1b\u6211\u4eec\u5728\u8fd9\u91cc\u201c\u89e3\u51b3\u201d\u4e86\u9519\u8bef\u5904\u7406\u3002\n\u7136\u800c\uff0c\u6211&#39\uff1b\u6211\u6709\u4e00\u4e2a\u5047\u8bbe\uff0c\u5173\u4e8e\u5728\u6211\u5b8c\u7f8e\u7684\u5e94\u7528\u7a0b\u5e8f\u8bed\u8a00\u4e2d\u6211\u53ef\u80fd\u9700\u8981\u4ec0\u4e48\u6837\u7684\u9519\u8bef\u5904\u7406\u7cfb\u7edf\uff0c\u6211&#39\uff1b\u6211\u4ece\u6765\u6ca1\u6709\u5b8c\u6574\u5730\u5199\u8fc7\u3002\u6211&#39\uff1b\u6211\u6ca1\u6709\u60f3\u8c61\u4e00\u4e2a\u5168\u65b0\u7684\u9519\u8bef\u5904\u7406\u7cfb\u7edf\uff1a\u76f8\u53cd\uff0c\u6211&#39\uff1b\u6211\u60f3\u8c61\u7740\u7528\u4e00\u4e9b\u5df2\u7ecf\u5c1d\u8bd5\u8fc7\u7684\u60f3\u6cd5\uff0c\u5e76\u4ee5\u4e00\u79cd\u65b0\u9896\u7684\u65b9\u5f0f\u5c06\u5b83\u4eec\u7ed3\u5408\u8d77\u6765\uff0c\u5e0c\u671b\u80fd\u5c06\u5b83\u4eec\u7684\u4f18\u70b9\u548c\u7f3a\u70b9\u7ed3\u5408\u8d77\u6765\u3002\u4e3a\u4e86\u89e3\u91ca\u8fd9\u4e00\u5047\u8bbe\u7279\u5f81\uff0c\u6211&#39\uff1b\u6211\u5c06\u628a\u5b83\u5206\u89e3\u4e3a\u4e24\u79cd\u8bed\u8a00\u8bbe\u8ba1\u5047\u8bbe\uff1a\n\u7b2c\u4e00\u4e2a\u5047\u8bbe\uff1a\u9759\u6001\u58f0\u660e\u51fd\u6570\u53ef\u4ee5\u629b\u51fa\u7684\u53ef\u80fd\u5f02\u5e38\u5217\u8868\uff0c\u6bd4\u5982Java&#39\uff1bS\u68c0\u67e5\u5f02\u5e38\u6216C++\u5f02\u5e38\u89c4\u8303\uff0c\u53ea\u8981\u5b83\u4eec\u53ef\u4ee5\u88ab\u63a8\u65ad\uff0c\u4e0d\u9700\u8981\u7531\u7a0b\u5e8f\u5458\u660e\u786e\u5217\u51fa\uff0c\u5c31\u53ef\u4ee5\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u7279\u6027\u3002\n\u7b2c\u4e8c\u4e2a\u5047\u8bbe\uff1a\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0\u4e00\u4e2a\u53d7Common Lisp#39\u542f\u53d1\u7684\u9759\u6001\u7c7b\u578b\u63a8\u65ad\u6761\u4ef6\u7cfb\u7edf\uff0c\u521b\u5efa\u4e00\u4e2a\u6781\u5176\u7075\u6d3b\u548c\u5f3a\u5927\u7684\u9519\u8bef\u5904\u7406\u673a\u5236\uff1bs\u6761\u4ef6\u7cfb\u7edf\uff0c\u5c06\u9519\u8bef\u6761\u4ef6\u7684\u9759\u6001\u63a8\u65ad\u4e0e\u91cd\u65b0\u542f\u52a8\u7684\u9759\u6001\u63a8\u65ad\u8026\u5408\u8d77\u6765\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u7684\u5176\u4f59\u90e8\u5206\u5c06\u4ee5\u7247\u6bb5\u7684\u5f62\u5f0f\u89e3\u91ca\u5b83\u4eec\u3002\u6211\u8fd8\u5e94\u8be5\u6307\u51fa\uff0c\u8fd9\u4e00\u5207\u90fd\u662f\u5047\u8bbe\u6027\u7684\uff1a\u6211\u6ca1\u6709&#39\uff1b\u6211\u6ca1\u6709\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6211\u4e5f\u6ca1\u6709&#39\uff1bI don\u2019\u6211\u4e0d\u76f8\u4fe1\u4efb\u4f55\u7f16\u7a0b\u8bed\u8a00\u529f\u80fd\u90fd\u662f\u6b63\u5f53\u7684\uff0c\u9664\u975e\u5b83\u5728\u5176\u9884\u671f\u9886\u57df\u7684\u81f3\u5c11\u4e2d\u7b49\u89c4\u6a21\u7684\u7a0b\u5e8f\u4e2d\u5f97\u5230\u8bc1\u660e\u3002\uff08\u4e8b\u5b9e\u4e0a\uff0c\u6211\u5c06\u8981\u8ba8\u8bba\u7684\u4e00\u4e2a\u7279\u6027\u5728\u5c0f\u7247\u6bb5\u4e2d\u4f3c\u4e4e\u5f88\u597d\uff0c\u800c\u5728\u5927\u578b\u7a0b\u5e8f\u4e2d\u5374\u975e\u5e38\u7cdf\u7cd5\u3002\uff09\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83&#39\uff1b\u8fd9\u662f\u4e00\u4e2a\u5047\u8bbeI&#39\uff1b\u6211\u60f3\u6d4b\u8bd5\u4e00\u4e0b\uff0c\u56e0\u4e3a\u6211\u6000\u7591\u6709\u4e00\u4e2a\u529f\u80fd\uff0c\u6bd4\u5982\u6211&#39\uff1b\u6211\u5c06\u8981\u63cf\u8ff0\u7684\u5c06\u662f\u6211\u901a\u5e38\u7f16\u5199\u7684\u5404\u79cd\u7a0b\u5e8f\u548c\u5e93\u7684\u4e00\u5927\u798f\u97f3\uff01\n\u6211\u89c9\u5f97\u662f&#39\uff1b\u5982\u679c\u8bf4\u68c0\u67e5\u8fc7\u7684\u5f02\u5e38\u5728\u7406\u8bba\u4e0a\u542c\u8d77\u6765\u53ef\u80fd\u5f88\u6709\u5438\u5f15\u529b\uff0c\u4f46\u5728\u5b9e\u8df5\u4e2d\u5374\u975e\u5e38\u7cdf\u7cd5\uff0c\u8fd9\u53ef\u80fd\u662f\u76f8\u5f53\u65e0\u53ef\u4e89\u8bae\u7684\u3002\u60f3\u6cd5\u5f88\u7b80\u5355\uff1a\u5982\u679c\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u5217\u4e3e\u4e86\u53ef\u80fd\u5f15\u53d1\u7684\u5f02\u5e38\uff0c\u90a3\u4e48\u53ef\u4ee5\u9759\u6001\u5730\u9a8c\u8bc1\u662f\u5426\u68c0\u67e5\u4e86\u6240\u6709\u9519\u8bef\u8def\u5f84\u3002\u5982\u679c\u6211\u8c03\u7528\u4e00\u4e2a\u6ca1\u6709\u58f0\u660e\u4efb\u4f55\u5f02\u5e38\u7684\u65b9\u6cd5foo\uff08\uff09\uff0c\u90a3\u4e48\u6211\u80af\u5b9a\u4f1a\u8d62&#39\uff1b\u6211\u4e0d\u9700\u8981\u6293\u4f4f\u4efb\u4f55\u4e00\u4e2a\uff01\u5982\u679c\u6211\u67e5\u770b\u6e90\u4ee3\u7801\uff0c\u53d1\u73b0foo\uff08\uff09\u629b\u51fa\u4e86\u8be5\u5f02\u5e38\uff0c\u90a3\u4e48\u6211\u80af\u5b9a\u9700\u8981\u5904\u7406\u8be5\u5f02\u5e38\uff01\u5982\u679c\u6211\u4e0d&#39\uff1b\u6211\u4e0d\u80fd\u5bf9\u90a3\u4e2a\u5f02\u5e38\u505a\u4e9b\u4ec0\u4e48\uff1a\u6211\u8981\u4e48\u9700\u8981\u663e\u5f0f\u5730\u6355\u6349\u5b83\uff0c\u8981\u4e48\u9700\u8981\u901a\u8fc7\u5411\u6211\u7684\u65b9\u6cd5\u4e2d\u6dfb\u52a0\u629b\u51fa\u90a3\u4e2a\u5f02\u5e38\u6765\u663e\u5f0f\u5730\u4f20\u9012\u5b83\u3002\u77e5\u9053\u6240\u6709\u7684\u9519\u8bef\u8def\u5f84\u90fd\u5f97\u5230\u4e86\u5904\u7406\uff0c\u6211\u53ef\u4ee5\u8f7b\u677e\u5165\u7761\uff01\n\u2026\u5f53\u7136\uff0c\u9664\u4e86\u73b0\u5728\u4f60\u9700\u8981\u5728\u4f60\u7684\u6574\u4e2a\u8be5\u6b7b\u7684\u4ee3\u7801\u5e93\u4e2d\u4e00\u6b21\u53c8\u4e00\u6b21\u5730\u590d\u5236\u548c\u7c98\u8d34\u8fd9\u4e2a\u5f02\u5e38\uff0c\u8fd9\u4e2a\u4ee3\u7801\u5e93\u975e\u5e38\u5608\u6742\uff0c\u6ca1\u6709\u4eba\u613f\u610f\u8fd9\u4e48\u505a\u3002\uff08\u66f4\u4e0d\u7528\u8bf4\u6211\u53ef\u80fd\u60f3\u8981\u629b\u51fa\u7684\u516d\u4e2a\u6216\u66f4\u591a\u4f8b\u5916\u4e86\uff01\uff09\u5728\u5b9e\u8df5\u4e2d\uff0cJava\u7a0b\u5e8f\u5458\u666e\u904d\u8ba4\u4e3a\u68c0\u67e5\u5f02\u5e38\u7edd\u5bf9\u4e0d\u503c\u5f97\uff1a\u8981\u4e48\u4ed6\u4eec\u968f\u610f\u5730\u5728\u6240\u6709\u65b9\u6cd5\u5468\u56f4\u629b\u51fa\u6cdb\u578b\u548c\u65e0\u5e2e\u52a9\u7684\u629b\u51fa\u5f02\u5e38\uff0c\u8981\u4e48\u4ed6\u4eec\u6355\u83b7\u4efb\u4f55\u5f02\u5e38\u800c\u4e0d\u8d39\u5fc3\u8fa8\u522b\u4ee5\u6d88\u9664\u8b66\u544a\uff0c\u8981\u4e48\u4ed6\u4eec\u4f7f\u7528\u8fd0\u884c\u65f6\u9519\u8bef\uff0c\u800c\u8fd9\u4e9b\u9519\u8bef\u4e0d&#39\uff1b\u4e0d\u9700\u8981\u5305\u542b\u5728\u7c7b\u578b\u4e2d\u3002\u5927\u578b\u4ee3\u7801\u5e93\u7684\u7814\u7a76\u7ed3\u679c\u575a\u5b9a\u5730\u8868\u660e\uff0c\u5f02\u5e38\u89c4\u8303\u4f1a\u589e\u52a0\u5de5\u4f5c\u5f3a\u5ea6\uff0c\u4f46\u4e0d\u4f1a&#39\uff1b\u4e0d\u4f1a\u663e\u8457\u5f71\u54cd\u5b89\u5168\u6027\u3002\n\u4f46\u6211\u6000\u7591\u95ee\u9898\u4e0d\u5728\u4e8e&#39\uff1b\u4ed6\u4eec\u4e0d\u80fd&#39\uff1bt\u5728\u67d0\u4e9b\u65b9\u9762\u63d0\u9ad8\u5b89\u5168\u6027\uff1a\u95ee\u9898\u5728\u4e8e\uff0c\u5b83\u4eec\u6240\u9020\u6210\u7684\u5de5\u4f5c\u91cf\u4e0e\u60a8\u6240\u83b7\u5f97\u7684\u5b89\u5168\u6027\u4e0d\u6210\u6bd4\u4f8b\uff0c\u800c\u4e14\u5b83\u4eec\u5f80\u5f80\u4f1a\u4fc3\u4f7f\u7a0b\u5e8f\u5458\u4ee5\u6700\u5c0f\u5316\u5de5\u4f5c\u91cf\u7684\u65b9\u5f0f\u4f7f\u7528\u5b83\u4eec\uff0c\u4ece\u800c\u4e5f\u4f1a\u6700\u5c0f\u5316\u5b89\u5168\u6027\u3002\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u6446\u8131\u4e86\u8f9b\u52b3\u5462\uff1f\n\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u8bbe\u60f3\u4e00\u79cd\u5047\u8bbe\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u4f46\u6709\u4f8b\u5916\uff1a\u8bed\u6cd5\u4e0d\u662f&#39\uff1b\u4e0d\u91cd\u8981\uff0c\u6240\u4ee5\u6211&#39\uff1b\u6211\u5c06\u501f\u7528handwavey Rust\u7684\u8bed\u6cd5\uff0c\u4f46\u6211\u5fc5\u987b\u6e05\u695a\uff0c\u4e0b\u9762\u6240\u6709\u7684\u4f8b\u5b50\u90fd\u662f\u865a\u6784\u7684\uff0c\u90fd\u662f\u865a\u6784\u7684\u975e\u9508\u8bed\u8a00\u3002\u6211\u5728\u8fd9\u91cc\u60f3\u8c61\u7684\u662f\uff0c\u65b9\u6cd5\u7684\u9ed8\u8ba4\u65b9\u5f0f\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a\n//\u865a\u6784\u8bed\u8a00fn find\uff08haystack:String\uff0cneedle:String\uff09\u4e2d\u7684\u4e00\u4e2a\u51fd\u6570\u793a\u4f8b&gt\uff1bNat{//implementation elided}\n\u554a\uff0c\u4f46\u662f\u6709&#39\uff1b\u8fd9\u6bb5\u8bdd\u91cc\u6ca1\u6709\u63d0\u5230\u4f8b\u5916\uff0c\u5bf9\u5427\uff1f\u5728\u6211\u4eec\u5047\u8bbe\u7684\u8bed\u8a00\u4e2d\uff0c\u8fd9\u5e76\u4e0d\u610f\u5473\u7740&#39\uff1b\u4e0d\u662f\u8bf4\u5b83\u8d62\u4e86&#39\uff1bt\u629b\u51fa\u5f02\u5e38\uff1a\u76f8\u53cd\uff0c\u8fd9\u610f\u5473\u7740\u5b83&#39\uff1b\u5141\u8bb8\u629b\u51fa\u4efb\u4f55\u5f02\u5e38\uff01\u7136\u800c\uff0c\u7f16\u8bd1\u5668\u53ef\u4ee5\u63a8\u65ad\u5b83\u53ef\u80fd\u629b\u51fa\u54ea\u4e9b\u5f02\u5e38\uff0c\u5e76\u4e14\u5b83\u4e0d\u5e94\u8be5&#39\uff1b\u4e0d\u96be\u8ba1\u7b97\uff1a\u53ea\u9700\u7d2f\u79ef\u65b9\u6cd5\u4f53\u4e2d\u629b\u51fa\u7684\u4efb\u4f55\u672a\u6355\u83b7\u5f02\u5e38\u6216\u65b9\u6cd5\u4f53\u4e2d\u8c03\u7528\u7684\u65b9\u6cd5\u629b\u51fa\u7684\u4efb\u4f55\u672a\u6355\u83b7\u5f02\u5e38\u3002\u5982\u679c\u6211\u5411\u7f16\u8bd1\u5668\u8be2\u95eefind\u7684\u7c7b\u578b\uff0c\u5b83\u53ef\u80fd\u4f1a\u544a\u8bc9\u6211\n\u8fd9\u610f\u5473\u7740\u7f16\u8bd1\u5668\u5f88\u6e05\u695afind\u53ef\u80fd\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u5e76\u4e14\u5b9e\u9645\u4e0a\u77e5\u9053\u5b83\u53ef\u80fd\u629b\u51fa\u4ec0\u4e48\u5f02\u5e38\u3002\u4f7f\u7528find now\u7684\u4efb\u4f55\u4e1c\u897f\u90fd\u53ef\u4ee5\u77e5\u9053\u5b83\u53ef\u80fd\u4f1a\u629b\u51faSubstringNotFound\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5728\u8fd9\u4e2a\u5047\u8bbe\u7684\u8bed\u8a00\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\n\u73b0\u5728\u6211\u4eec&#39\uff1bwe&#39\uff1b\u6211\u58f0\u79f0\u8fd9\u4e2a\u4f8b\u5b50\u6ca1\u6709\u4f8b\u5916\uff0c\u4f46\u56e0\u4e3a\u6211\u4eec&#39\uff1b\u91cd\u65b0\u4f7f\u7528find\uff0c\u7f16\u8bd1\u5668\u53ef\u4ee5\u6b63\u786e\u5730\u6307\u51fa\u6211\u4eec\u6ca1\u6709&#39\uff1b\u672a\u627e\u5230\u5904\u7406\u8fc7\u7684\u5b50\u5b57\u7b26\u4e32\u3002\u5c31\u50cf\u5728\u722a\u54c7\u4e00\u6837\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u6709\u4e24\u4e2a\u57fa\u672c\u9009\u9879\uff0c\u8981\u4e48\u6355\u83b7\u793a\u4f8b\u4e3b\u4f53\u4e2d\u7684SubstringNotFound\uff0c\u8981\u4e48\u5c06SubstringNotFound\u6dfb\u52a0\u5230\u629b\u51fa\u7684\u5f02\u5e38\u5217\u8868\u4e2d\uff0c\u4f46\u6211\u4eec&#39\uff1b\u6211\u4eec\u8fd8\u6709\u7b2c\u4e09\u4e2a\u66f4\u7b80\u6d01\u7684\u9009\u62e9\uff1a\u6211\u4eec\u53ef\u4ee5\u5b8c\u5168\u5220\u9664throws\uff08\uff09\u5e76\u5141\u8bb8\u5b83\u4e3a\u6211\u4eec\u63a8\u65ad\u51fa\u5b83\u60f3\u8981\u7684\u4efb\u4f55\u4e1c\u897f\u3002\u5982\u679c\u6211\u4eec\u613f\u610f\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u6dfb\u52a0\u89c4\u8303\uff0c\u4f46\u5176\u4ed6\u7684\u5219\u7531\u7f16\u8bd1\u5668\u6765\u5904\u7406\u3002\n\u6211\u8ba4\u4e3a\u6709&#39\uff1b\u8fd9\u91cc\u8fd8\u6709\u66f4\u591a\u5173\u4e8e\u8868\u73b0\u529b\u7684\u5185\u5bb9\u3002\u4f8b\u5982\uff0c\u7a0b\u5e8f\u5458\u53ef\u80fd\u4f1a\u9009\u62e9\u5728\u5217\u8868\u4e2d\u663e\u5f0f\u5730\u5305\u542b\u4e00\u4e2a\u5f02\u5e38\uff1a\u4e00\u4e2a\u7c7b\u578b\uff0c\u6bd4\u5982fn example\uff08\uff09-&gt\uff1bNat\u629b\u51fa\uff08\u67d0\u4e2a\u5f02\u5e38\uff0c\u2026\uff09\u8fd9\u610f\u5473\u7740\uff0c\u201c\u65e0\u8bba\u7f16\u8bd1\u5668\u5728\u8fd9\u91cc\u4e3a\u65b9\u6cd5\u4f53\u63a8\u65ad\u51fa\u4ec0\u4e48\uff0c\u4f46\u5b83\u4e5f\u53ef\u4ee5\u629b\u51fa\u4e00\u4e9b\u5f02\u5e38\uff0c\u5373\u4f7f\u7f16\u8bd1\u5668\u6ca1\u6709\u63a8\u65ad\u51fa\u8be5\u5f02\u5e38\u3002\u201d\u6709\u4e00\u79cd\u60c5\u51b5\u4f60\u53ef\u80fd\u5e0c\u671b\u8fd9\u6837\u505a\uff0c\u90a3\u5c31\u662f\u5728\u539f\u578b\u5316\u4e00\u4e2aAPI\u65f6\uff1a\u4e5f\u8bb8\u6211\u77e5\u9053\u6211\u7684API\u6700\u7ec8\u53ef\u80fd\u4f1a\u629b\u51faCacheMissException\uff0c\u4f46\u6211\u6ca1\u6709&#39\uff1b\u6211\u8fd8\u6ca1\u628a\u7f13\u5b58\u8fde\u63a5\u597d\uff0c\u6240\u4ee5\u6211&#39\uff1b\u6211\u8981\u786e\u4fdd\u5728\u6211\u7684\u7c7b\u578b\u7b7e\u540d\u4e2d\uff0c\u5728\u9002\u5f53\u7684\u5730\u65b9\u5305\u62ec\u5b83\uff0c\u4ee5\u9632\u4e07\u4e00\uff0c\u5728\u5176\u4ed6\u5730\u65b9\u4f7f\u7528throws\uff08\uff09\u6765\u786e\u4fdd\u6211\u5728\u9700\u8981\u7684\u5730\u65b9\u5904\u7406\u5b83\u3002\n\u4e0d\u8fc7\uff0c\u66f4\u6709\u7528\u7684\u662f\uff0c\u6211\u53ef\u4ee5\u60f3\u8c61\u4e00\u79cd\u8bed\u6cd5\u6765\u786e\u4fdd\u7279\u5b9a\u7684\u5f02\u5e38\u4e0d\u4f1a\u51fa\u73b0&#39\uff1bt\u5305\u542b\u5728\u63a8\u65ad\u7c7b\u578b\u4e2d\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u50cffn example\uff08\uff09\u8fd9\u6837\u7684\u7c7b\u578b-&gt\uff1bNat\u629b\u51fa\uff08\uff01OtherException\uff0c\u2026\uff09\u8fd9\u610f\u5473\u7740\uff0c\u201c\u8fd9\u4f1a\u629b\u51fa\u7f16\u8bd1\u5668\u4e3a\u4e3b\u4f53\u63a8\u65ad\u7684\u4efb\u4f55\u5185\u5bb9\uff0c\u4f46\u5982\u679c\u63a8\u65ad\u96c6\u5305\u542bOtherException\uff0c\u5219\u4f1a\u5f15\u53d1\u7f16\u8bd1\u9519\u8bef\u3002\u201d\u8fd9\u610f\u5473\u7740\u4f60\u6ca1\u6709&#39\uff1b\u4e0d\u9700\u8981\u4e3a\u4e00\u4e2a\u590d\u6742\u7684API\u5b9a\u671f\u91cd\u65b0\u7f16\u5199\u5f02\u5e38\u96c6\uff0c\u5b83\u53ef\u80fd\u4f1a\u629b\u51fa\u5341\u51e0\u4e2a\u4e0d\u540c\u7684\u7279\u5b9a\u9519\u8bef\uff0c\u4f46\u4f60\u4ecd\u7136\u53ef\u4ee5\u8bf4\uff0c\u201c\u6211\u4e0d\u5e0c\u671b\u8fd9\u4e2a\u7279\u5b9a\u7684\u5f02\u5e38\u9003\u9038\uff0c\u6240\u4ee5\u8bf7\u544a\u8bc9\u6211\u5b9e\u8bdd\uff1a\u5982\u679cexample\uff08\uff09\u8bd5\u56fe\u629b\u51fa\u5176\u4ed6\u5f02\u5e38\uff0c\u90a3\u4e48\u5c31\u5bf9\u6211\u5927\u558a\u5927\u53eb\u3002\u201d\n\u4e8b\u5b9e\u4e0a\uff0c\u6211\u53ef\u4ee5\u60f3\u8c61\uff0c\u60f3\u8981\u4ee5\u4e00\u79cd\u65b9\u5f0f\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u5f02\u5e38\u5217\u8868\uff0c\u5373\u4f7f\u662f\u50cf\uff08\uff09\u8fd9\u6837\u7684\u7a7a\u5217\u8868\uff0c\u5b9e\u9645\u4e0a\u4e5f\u4f1a\u9690\u5f0f\u5730\u5305\u542b\u666e\u904d\u5b58\u5728\u7684\u201c\u5b58\u5728\u201d\u5f02\u5e38\uff1a\u4f8b\u5982\uff0c\u8868\u793aSIGKILL\u4e4b\u7c7b\u4fe1\u53f7\u7684\u5f02\u5e38\uff0c\u6216\u8005\u5728\u8fdb\u7a0b\u8017\u5c3d\u5185\u5b58\u65f6\u5f15\u53d1\u7684\u5f02\u5e38\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cfn foo\uff08\uff09\u629b\u51fa\uff08\uff09\u5c06\u662f\u4e00\u4e2a\u65b9\u4fbf\u7684\u5c0f\u8bf4\uff0c\u56e0\u4e3a\u5b83\u8d62\u5f97\u4e86&#39\uff1b\u4e0d\u8981\u5f3a\u8feb\u7a0b\u5e8f\u5458\u5904\u7406\u5185\u5b58\u4e0d\u8db3\u9519\u8bef\uff0c\u4f46\u662f\u7a0b\u5e8f\u5458\u53ef\u4ee5\u7f16\u5199fn foo\uff08\uff09throws\uff08\uff01OutOfMemory\uff09\u6765\u8868\u793afoo\u4e0d\u4ec5\u6ca1\u6709&#39\uff1b\u5b83\u4e0d\u4f1a\u629b\u51fa\u4efb\u4f55\u7528\u6237\u7f16\u5199\u7684\u6216\u5178\u578b\u7684stdlib\u5f02\u5e38\uff0c\u5b83\u8fd8\u627f\u8bfa\u5904\u7406\u4ece\u5185\u90e8\u5192\u51fa\u7684\u5185\u5b58\u4e0d\u8db3\u5f02\u5e38\u3002\u4e00\u4e2a\u5178\u578b\u7684\u7a0b\u5e8f\u53ef\u80fd\u4ecd\u7136\u4f1a\u5b9a\u4e49fn main\uff08\uff09throws\uff08\uff09\uff0c\u4f46\u670d\u52a1\u5668&#39\uff1b\u53ef\u80fd\u4f1a\u5b9a\u4e49fn main\uff08\uff09\u629b\u51fa\uff08\uff01OutOfMemory\uff0c\uff01Sigkill\uff09\uff0c\u8fd9\u6837\u7f16\u8bd1\u5668\u5c31\u53ef\u4ee5\u5728&#39\uff1b\u6211\u4eec\u65e0\u6cd5\u5904\u7406\u8fd9\u4e9b\u9519\u8bef\u60c5\u51b5\u3002\n\u6211\u6ca1\u6709&#39\uff1b\u6211\u6ca1\u6709\u7528\u4efb\u4f55\u8bed\u8a00\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6240\u4ee5\u5b83&#39\uff1b\u5f88\u53ef\u80fd\u662f&#39\uff1b\u6211\u4ecd\u7136\u6709\u95ee\u9898\u3002\u800c\u6211&#39\uff1b\u6211\u5df2\u7ecf\u89e3\u51b3\u4e86\u4e00\u4e9b\u6211\u6ca1\u6709\u89e3\u51b3\u7684\u95ee\u9898&#39\uff1b\u6211\u6ca1\u6709\u8bd5\u56fe\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4f8b\u5982\uff0c\u6211\u6ca1\u6709&#39\uff1bt\u8bd5\u56fe\u5145\u5206\u9610\u660e\u9ad8\u9636\u51fd\u6570\u7684\u7c7b\u578b\u89c4\u5219\uff0c\u6216\u8005\u8fd9\u5c06\u5982\u4f55\u4e0e\u7c7b\u578b\u7c7b\u4ea4\u4e92\uff0c\u6216\u8005\u7f16\u8bd1\u6a21\u578b\u5c06\u5982\u4f55\u5de5\u4f5c\uff1athere&#39\uff1b\u8fd8\u6709\u5f88\u591a\u5de5\u4f5c\u8981\u505a\uff0c\u5728\u5b9e\u8df5\u4e2d\u53ef\u80fd\u9700\u8981\u5176\u4ed6\u9650\u5236\u3001\u59a5\u534f\u6216\u542f\u53d1\u3002\u4f46\u6211\u7684\u5047\u8bbe\u662f\uff0c\u8fd9\u6837\u7684\u529f\u80fd\u53ef\u4ee5\u8ba9\u4eba\u4eec\u4ee5\u4e00\u79cd\u5305\u542b\u6700\u5c0f\u5f00\u9500\u7684\u65b9\u5f0f\u4f7f\u7528\u68c0\u67e5\u8fc7\u7684\u5f02\u5e38\uff0c\u5141\u8bb8\u7a0b\u5e8f\u5458\u9009\u62e9\u4f7f\u7528\u6709\u7528\u7684\u68c0\u67e5\uff0c\u4f46\u4e5f\u53ef\u4ee5\u5728\u68c0\u67e5\u65f6\u907f\u5f00\u5b83\u4eec&#39\uff1b\u8fd9\u6ca1\u7528\u3002\n\u6211\u8bf4\u6211\u7684\u5047\u8bbe\u8fd8\u6709\u53e6\u4e00\u90e8\u5206\uff0c\u5e76\u89e3\u91ca\u6211&#39\uff1b\u6211\u5f97\u8c08\u8c08\u5e38\u89c1\u7684Lisp&#39\uff1bs\u6761\u4ef6\u7cfb\u7edf\u3002\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u4ece\u4f8b\u5916\u5f00\u59cb\uff0c\u8be6\u7ec6\u63cf\u8ff0\u5b83\u4eec\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u56e0\u4e3a&#39\uff1b\u6211\u4eec\u5c06\u5e2e\u52a9\u6211\u4eec\u4e86\u89e3\u60c5\u51b5\u7684\u4e0d\u540c\u3002\n\u5728\u4e00\u79cd\u6709\u5f02\u5e38\u7684\u8bed\u8a00\u4e2d\uff0c\u4f60\u901a\u8fc7\u6784\u9020\u4e00\u4e2a\u53eb\u505a\u5f02\u5e38\u7684\u201c\u4e1c\u897f\u201d\u6765\u8868\u793a\u9519\u8bef\u7684\u5b58\u5728\uff0c\u5f02\u5e38\u901a\u5e38\u662f\u4e00\u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u503c\u3002\u5728\u5177\u6709\u7ee7\u627f\u6027\u7684\u8bed\u8a00\u4e2d\uff0c\u8fd9\u4e9b\u503c\u901a\u5e38\u662f\u4ece\u7279\u5b9a\u57fa\u7c7b\u7ee7\u627f\u7684\uff08\u5c3d\u7ba1Ruby\u5e76\u4e0d\u603b\u662f\u5141\u8bb8\u629b\u51fa\u4efb\u4f55\u503c\uff09\uff0c\u800c\u5728\u6ca1\u6709\u7ee7\u627f\u6027\u7684\u8bed\u8a00\u4e2d\uff0c\u5b83\u4eec\u901a\u5e38\u5177\u6709\u67d0\u79cd\u7279\u5b9a\u4e8e\u9519\u8bef\u7684\u6807\u8bb0\uff08\u4f8b\u5982\u5728Haskell\u6216\u5404\u79cdML\u8bed\u8a00\u4e2d\uff09\u8fd9\u4e9b\u503c\u53ef\u4ee5\u201c\u63d0\u5347\u201d\u6216\u201c\u629b\u51fa\u201d\u3002\u5f53\u4e00\u4e2a\u5f02\u5e38\u88ab\u201c\u5f15\u53d1\u201d\u65f6\uff0c\u8bed\u8a00\u8fd0\u884c\u5e93\u5c06\u5f00\u59cb\u6cbf\u7740\u5806\u6808\u5411\u4e0a\u79fb\u52a8\uff0c\u5728\u79fb\u52a8\u8fc7\u7a0b\u4e2d\u91ca\u653e\u5806\u6808\u5e27\uff0c\u76f4\u5230\u5b83\u627e\u5230\u4e00\u4e2a\u201c\u5904\u7406\u7a0b\u5e8f\u201d\uff0c\u4e00\u4e2a\u4e0e\u9002\u5f53\u7684\u5f02\u5e38\u7c7b\u578b\u6216\u6807\u8bb0\u5339\u914d\u7684\u4ee3\u7801\u4f4d\uff0c\u5e76\u9644\u52a0\u5230\u4e00\u4e2a\u9519\u8bef\u5904\u7406\u4ee3\u7801\u5757\u4e0a\u3002\u5982\u679c\u627e\u4e0d\u5230\u5904\u7406\u7a0b\u5e8f\uff0c\u8fd0\u884c\u65f6\u901a\u5e38\u4f1a\u7ec8\u6b62\u7a0b\u5e8f\u5e76\u6253\u5370\u76f8\u5173\u6d88\u606f\u3002\u5982\u679c\u5b83\u786e\u5b9e\u627e\u5230\u4e86\u4e00\u4e2a\u5904\u7406\u7a0b\u5e8f\uff0c\u5b83\u5c06\u4ece\u8be5\u70b9\u6062\u590d\uff0c\u4e3a\u8be5\u4ee3\u7801\u4f4d\u63d0\u4f9b\u5f02\u5e38\u3002\n\u8fd9\u662f\u4e00\u79cd\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u9519\u8bef\u673a\u5236\uff1a\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e00\u673a\u5236\u5982\u6b64\u4e4b\u591a\uff0c\u4ee5\u81f3\u4e8e\u5f88\u96be\u60f3\u8c61\u66ff\u4ee3\u65b9\u6848\u3002\u4f60\u8fd8\u80fd\u505a\u4ec0\u4e48\uff1f\u4f60\u8fd8\u60f3\u4ece\u4e2d\u5f97\u5230\u4ec0\u4e48\uff1f\n\u6211&#39\uff1b\u6211\u8981\u4ece\u5f7c\u5f97\u00b7\u585e\u8d1d\u5c14\u90a3\u91cc\u5077\u4e00\u4e2a\u4f8b\u5b50&#39\uff1b\u8fd9\u662f\u4e00\u4e2a\u5b9e\u7528\u7684\u901a\u7528Lisp\u4f5c\u4e3a\u52a8\u673a\uff0c\u4f46\u662f\u5bf9\u4e8e\u90a3\u4e9b\u6ca1\u6709&#39\uff1b\u6211\u4e0d\u559c\u6b22\u53e3\u9f7f\u4e0d\u6e05\u3002\u60f3\u8c61\u4e00\u4e0b\u6211&#39\uff1b\u6211\u6b63\u5728\u5199\u4e00\u4e2a\u5e93\uff0c\u5b83\u6b63\u5728\u89e3\u6790\u7279\u5b9a\u683c\u5f0f\u7684\u65e5\u5fd7\u6587\u4ef6\u3002\u6211\u6709\u4e00\u4e2a\u540d\u4e3aparse_log_entry\u7684\u51fd\u6570\uff0c\u5b83\u83b7\u53d6\u4e00\u6bb5\u6587\u672c\u5e76\u751f\u6210\u4e00\u4e2a\u65e5\u5fd7\u6761\u76ee\u3002\u8bf4\u6211&#39\uff1b\u6211\u662f\u8fd9\u6837\u5199\u7684\uff1a\nfn\u89e3\u6790\u65e5\u5fd7\u6761\u76ee\uff08\u6587\u672c\uff1a\u5b57\u7b26\u4e32\uff09->\uff1bLogEntry{if\uff08\u683c\u5f0f\u826f\u597d\uff08\u6587\u672c\uff09\uff09{return LogEntry:\uff1afrom_text\uff08\u6587\u672c\uff09\uff1b}else{raise morformedlogentry\uff08text\uff09\uff1b}\n\u73b0\u5728\u8fd9\u4e2a\u5e93\u662f\u5173\u4e8e\u89e3\u6790\u6574\u4e2a\u65e5\u5fd7\u6587\u4ef6\u7684\uff0c\u6240\u4ee5\u6211\u8fd8\u516c\u5f00\u4e86\u4e00\u4e2a\u51fd\u6570\u6765\u89e3\u6790\u6574\u4e2a\u6587\u4ef6\uff0c\u5982\u4e0b\u6240\u793a\uff1a\nfn\u89e3\u6790\u65e5\u5fd7\u6587\u4ef6\uff08f:file\uff09-&gt\uff1b\u5217\u8868&lt\uff1b\u767b\u5f55&gt\uff1b{let mut list=list:\uff1anew\uff08\uff09\uff1bfor ln in f.read_lines\uff08\uff09{list.append\uff08parse_log_entry\uff08ln\uff09\uff09\uff1b}\u5217\u8868}\n\u8fd9\u5f88\u597d\u4e5f\u5f88\u7b80\u5355\uff01\u4e0d\u5e78\u7684\u662f\uff0c\u5982\u679c\u4e00\u4e2a\u6761\u76ee\u65e0\u6cd5\u89e3\u6790\uff0c\u6211\u4eec&#39\uff1b\u6211\u5c06\u629b\u51fa\u4e00\u4e2a\u683c\u5f0f\u9519\u8bef\u7684Genetry\u5f02\u5e38\uff0c\u5e76\u5931\u53bb\u5bf9\u8fc4\u4eca\u4e3a\u6b62\u5206\u6790\u7684\u6574\u4e2a\u65e5\u5fd7\u7684\u8bbf\u95ee\u6743\u9650\uff01\u5728\u67d0\u4e9b\u5e94\u7528\u4e2d\uff0c\u53ef\u80fd\u662f&#39\uff1b\u5f88\u597d\uff0c\u4f46\u6211&#39\uff1b\u6211\u8bf4\u8fc7\u6211\u4eec&#39\uff1b\u6211\u4eec\u6b63\u5728\u7f16\u5199\u4e00\u4e2a\u5e93\uff0c\u6211\u4eec\u5e0c\u671b\u5b83\u5bf9\u6700\u7ec8\u7528\u6237\u6765\u8bf4\u5c3d\u53ef\u80fd\u7075\u6d3b\u3002\u4e5f\u8bb8\u5e93\u7684\u7528\u6237\u5e0c\u671b\u6211\u4eec\u4f7f\u7528\u4e00\u79cd\u7279\u6b8a\u7684LogEntry\u503c\u6765\u8868\u793a\u683c\u5f0f\u9519\u8bef\u7684\u6761\u76ee\uff1f\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a\nfn\u89e3\u6790\u65e5\u5fd7\u6587\u4ef6\uff08f:file\uff09-&gt\uff1b\u5217\u8868&lt\uff1b\u767b\u5f55&gt\uff1b{let mut list=list:\uff1anew\uff08\uff09\uff1bfor ln in f.read_line\uff08\uff09{try{list.append\uff08parse_log_entry\uff08ln\uff09\uff09}catch\uff08exn:MalformedLogEntry\uff09{list.append\uff08bad_log_entry\uff08\uff09\uff09}list}\n\u73b0\u5728\u6211\u4eec\u4f18\u96c5\u5730\u5904\u7406\u8fd9\u4e2a\u9519\u8bef\u3002\u4f46\u73b0\u5728\u6211\u4eec&#39\uff1b\u6211\u4eec\u5047\u8bbe&#39\uff1b\u8fd9\u5c31\u662f\u7528\u6237\u5e0c\u671b\u6211\u4eec\u5904\u7406\u9519\u8bef\u7684\u65b9\u5f0f\u3002\u4e5f\u8bb8\u7528\u6237\u5e0c\u671b\u6211\u4eec\u6084\u6084\u5730\u8df3\u8fc7\u8fd9\u4e2a\u6761\u76ee\uff01\u6211\u4eec\u4e5f\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a\nfn\u89e3\u6790\u65e5\u5fd7\u6587\u4ef6\uff08f:file\uff09-&gt\uff1b\u5217\u8868&lt\uff1b\u767b\u5f55&gt\uff1b{let mut list=list:\uff1anew\uff08\uff09\uff1bfor ln in f.read_line\uff08\uff09{try{list.append\uff08parse_log_entry\uff08ln\uff09\uff09}catch\uff08_exn:MalformedLogEntry\uff09{//do nothing}list}\n\u4f46\u5982\u679c\u4ed6\u4eec\u60f3\u8ba9\u6211\u4eec\u8df3\u8fc7\u5b83\u4eec\uff0c\u4f46\u5c06\u9519\u8bef\u5199\u5165stdout\u5462\uff1f\u8fd8\u662f\u7279\u5b9a\u7684\u8bb0\u5f55\u5668\uff1f\u6216\u8005\u5e94\u7528\u4e00\u4e2a\u4fee\u6b63\u542f\u53d1\u5f0f\uff0c\u7136\u540e\u518d\u6b21\u5c1d\u8bd5\u89e3\u6790\u8be5\u884c\uff1f\u6216\u8005\u2026\n\u597d\u5427\uff0c\u5e93\u7684\u8bbe\u8ba1\u5f88\u96be\uff0c\u800c\u8bbe\u8ba1\u80fd\u591f\u4ee5\u5404\u79cd\u53ef\u80fd\u7684\u65b9\u5f0f\u5904\u7406\u9519\u8bef\u7684\u5e93\u771f\u7684\u5f88\u96be\u3002\u8fd9\u91cc\u7684\u4e00\u79cd\u65b9\u6cd5\u53ef\u80fd\u662f\u63d0\u4f9b\u6240\u6709\u8fd9\u4e9b\u9009\u9879\uff0c\u4f9b\u56fe\u4e66\u9986\u7528\u6237\u9009\u62e9\u3002\u4e5f\u8bb8\u6211\u4eec\u5411\u7528\u6237\u516c\u5f00\u4e86\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u5b9e\u73b0\u4e86\u8fd9\u4e9b\u7b56\u7565\u7684\u4e0d\u540c\u7248\u672c\uff0c\u6bd4\u5982\u4f7f\u7528\u9ed8\u8ba4\u503c\u89e3\u6790\u65e5\u5fd7\u6587\u4ef6\u4e0e\u8df3\u8fc7\u574f\u6587\u4ef6\u89e3\u6790\u65e5\u5fd7\u6587\u4ef6\u3002\u4e5f\u8bb8\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5e26\u6709\u8bb8\u591a\u53ef\u9009\u53c2\u6570\u7684\u51fd\u6570\uff0c\u6bd4\u5982parse_log_file\uff08\u9ed8\u8ba4\u503c\u4e3a\uff1a\u2026\uff0c\u8df3\u8fc7\u65e0\u6548\u503c\u4e3a\uff1a\u2026\uff09\u3002\u4e5f\u8bb8\u6211\u4eec\u53ea\u662f\u628a\u624b\u4e3e\u5728\u7a7a\u4e2d\uff0c\u7136\u540e\u9009\u62e9\u4e00\u4e2a\u6211\u4eec\u8ba4\u4e3a\u5408\u7406\u7684\uff1a\u5e38\u89c4\u800c\u975e\u914d\u7f6e\uff0c\u5bf9\u5417\uff1f\n\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u6211\u4eec\u6709\u4e00\u4e2a\u6761\u4ef6\u7cfb\u7edf\uff0c\u6211\u4eec\u5c06\u6709\u4e00\u4e2a\u975e\u5e38\u5f3a\u5927\u7684\u65b9\u5f0f\uff0c\u5141\u8bb8\u7528\u6237\u9009\u62e9\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u6216\u66f4\u591a\uff0c\u800c\u4e0d\u5fc5\u5927\u5e45\u6539\u53d8\u6211\u4eec\u7684\u754c\u9762\u3002\u6761\u4ef6\u7cfb\u7edf\u6240\u505a\u7684\u662f\u5206\u79bb\u51fa\u4e24\u4e2a\u56e0\u5f02\u5e38\u5904\u7406\u800c\u6df7\u6dc6\u7684\u4e0d\u540c\u5173\u6ce8\u70b9\uff1a\u9519\u8bef\u6062\u590d\u4ee3\u7801\u7684\u4f5c\u7528\u548c\u5e94\u8be5\u8c03\u7528\u7684\u9519\u8bef\u6062\u590d\u4ee3\u7801\u3002\u9996\u5148\uff0c\u6211\u4eec\u4e0d\u5b89\u88c5\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff0c\u800c\u662f\u5b89\u88c5\u4ec0\u4e48&#39\uff1b\u5b83\u88ab\u79f0\u4e3a\u91cd\u542f\uff0c\u5e76\u7ed9\u5b83\u8d77\u4e86\u4e00\u4e2a\u540d\u5b57\uff1a\u8fd9\u5c31\u662f\u6211\u4eec\u5982\u4f55\u5b9a\u4e49\u5728\u5f15\u53d1\u9519\u8bef\u540e\u53ef\u80fd\u8fd0\u884c\u7684\u6062\u590d\u4ee3\u7801\uff0c\u4f46\u5b83\u4e0d\u80fd\u4fdd\u8bc1\u4e0e\u91cd\u542f\u76f8\u5173\u7684\u9519\u8bef\u5904\u7406\u4ee3\u7801\u5b9e\u9645\u8fd0\u884c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u4ece\u8df3\u8fc7\u6761\u76ee\u7684\u903b\u8f91\u5f00\u59cb\uff1a\nfn\u89e3\u6790\u65e5\u5fd7\u6587\u4ef6\uff08f:file\uff09-&gt\uff1b\u5217\u8868&lt\uff1b\u767b\u5f55&gt\uff1b{let mut list=list:\uff1anew\uff08\uff09\uff1bfor ln in f.read_lines\uff08\uff09{try{list.append\uff08parse_log_entry\uff08ln\uff09\uff09}\u91cd\u65b0\u542f\u52a8SkipEntry{//do nothing}}list}\n\u6b64\u91cd\u542f\u5757\u4ee3\u8868\u51fa\u73b0\u9519\u8bef\u65f6\u53ef\u80fd\u7684\u6062\u590d\u7b56\u7565\uff0cSkiperor\u662fwe&#39\uff1b\u6211\u5df2\u7ecf\u7ed9\u4e86\u3002\u7136\u800c\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u4ecd\u7136\u7f3a\u5c11\u4e00\u4e9b\u4e1c\u897f\uff1a\u6211\u4eec\u6ca1\u6709&#39\uff1b\u6211\u6ca1\u6709\u544a\u8bc9\u6211\u4eec\u7684\u7a0b\u5e8f\u4f7f\u7528\u5b83\u3002\u6211\u4eec\u7684\u56fe\u4e66\u9986\u5e94\u8be5&#39\uff1bI don\u2019\u6211\u4e0d\u662f\u505a\u51fa\u8fd9\u4e2a\u9009\u62e9\u7684\u4eba\uff0c\u6240\u4ee5\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u60f3\u8c61\u4e00\u4e0b&#39\uff1b\u4ece\u4e00\u4e9b\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u91cd\u65b0\u8c03\u7528parse_log_file library\u51fd\u6570\u3002\u73b0\u5728\uff0c\u6211\u4eec\u544a\u8bc9\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u901a\u8fc7\u8c03\u7528restart We&#39\uff1b\u6211\u5b9a\u4e49\u4e86\uff1a\nfn analyze_log\uff08\uff09-&gt\uff1b\u5217\u8868&lt\uff1b\u767b\u5f55&gt\uff1b{\u8bd5\u8bd5{parse_log_file\uff08file:\uff1aopen\uff08&#34\uff1bmy_log.txt&#34\uff1b\uff09}\u53e5\u67c4{MalformedLogEntry\uff08\uff09=&gt\uff1brestart skippentry\uff0c}\n\u8fd9\u5c31\u662f\u6211&#39\uff1b\u6211\u544a\u8bc9\u7a0b\u5e8f\u4f7f\u7528\u54ea\u6bb5\u6062\u590d\u4ee3\u7801\u3002\u6211&#39\uff1b\u6211\u7684\u610f\u601d\u662f\uff0c\u201c\u5982\u679c\u6211\u4eec\u9047\u5230\u4ee3\u7801\u4ea7\u751f\u4e86\u9519\u8bef\u7684\u751f\u6210\uff0c\u90a3\u4e48\u901a\u8fc7\u627e\u5230\u6807\u8bb0\u4e3aSkipEntry\u7684\u6062\u590d\u8def\u5f84\u5e76\u4ece\u90a3\u91cc\u91cd\u65b0\u542f\u52a8\u6765\u6062\u590d\u3002\u201d\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec&#39\uff1b\u6211\u53ea\u5b9a\u4e49\u4e86\u4e00\u6761\u6062\u590d\u8def\u5f84\u3002\u8ba9&#39\uff1b\u6211\u4eec\u5c06\u91cd\u65b0\u8bbf\u95eeparse_log_\u6761\u76ee\uff0c\u5e76\u6dfb\u52a0\u4e00\u4e9b\u53ef\u80fd\u7528\u4e8e\u4ece\u8be5\u51fd\u6570\u4e2d\u7684\u9519\u8bef\u4e2d\u6062\u590d\u7684\u7b56\u7565\u3002\u4e0e\u4e0a\u9762\u7684SkipEntry\u4e0d\u540c\uff0c\u5b83\u4eec\u8fd8\u63a5\u53d7\u53c2\u6570\uff0c\u8fd9\u4e9b\u53c2\u6570\u662f\u5904\u7406\u7a0b\u5e8f\u53ef\u4ee5\u5728\u53e5\u67c4\u5757\u4e2d\u63d0\u4f9b\u7684\u4fe1\u606f\u7247\u6bb5\uff1a\nfn\u89e3\u6790\u65e5\u5fd7\u6761\u76ee\uff08\u6587\u672c\uff1a\u5b57\u7b26\u4e32\uff09->\uff1bLogEntry{if\uff08\u683c\u5f0f\u826f\u597d\uff08\u6587\u672c\uff09\uff09{return LogEntry:\uff1afrom_text\uff08\u6587\u672c\uff09\uff1b}\u5426\u5219{try{raise morformedlogentry\uff08text\uff09\uff1b}\u91cd\u65b0\u542f\u52a8UseValue\uff08v:LogEntry\uff09{return v\uff1b}\u91cd\u65b0\u542f\u52a8RetryParse\uff08new_text:String\uff09{return parse_log_entry\uff08new_text\uff09\uff1b}}\n\u73b0\u5728\u6211\u4eec\u603b\u5171\u6709\u4e09\u79cd\u53ef\u80fd\u7684\u65b9\u6cd5\u6765\u4ece\u9519\u8bef\u7684\u751f\u6210\u4e2d\u6062\u590d\uff1a\u6211\u4eec\u53ef\u4ee5\u8c03\u7528SkipEntry\u91cd\u65b0\u542f\u52a8\uff0c\u5b83\u53ea\u4f1a\u8df3\u8fc7\u9519\u8bef\u7684\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5e26\u6709LogEntry\u7c7b\u578b\u7684\u503c\u7684UseValue\u91cd\u65b0\u542f\u52a8\u6765\u7528\u63d0\u4f9b\u7684\u4e0d\u540c\u65e5\u5fd7\u66ff\u6362\u574f\u65e5\u5fd7\uff0c\u6216\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528RetryParse\u91cd\u65b0\u542f\u52a8\u6765\u63d0\u4f9b\u4e00\u4e2a\u65b0\u7684\u5df2\u66f4\u6b63\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u518d\u6b21\u5c1d\u8bd5\u89e3\u6790\u3002\n\u73b0\u5728\u91cd\u8981\u7684\u662f\uff0c\u5e93\u5141\u8bb8\u6240\u6709\u8fd9\u4e9b\u91cd\u542f\u540c\u65f6\u5b58\u5728\uff0c\u4f46\u6ca1\u6709\u6307\u5b9a\u8981\u6267\u884c\u54ea\u4e9b\u91cd\u542f\uff1a\u5373&#39\uff1b\u8fd9\u53d6\u51b3\u4e8e\u547c\u53eb\u4ee3\u7801\u3002\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u66f4\u6539\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\uff0c\u5c06bad_log_entry\uff08\uff09\u4f5c\u4e3a\u9ed8\u8ba4\u503c\u63d0\u4f9b\uff1b\u8fd9\u610f\u5473\u7740\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4ecd\u5c06\u5305\u542b\u4e0e\u6211\u4eec\u7684\u884c\u4e00\u6837\u591a\u7684\u65e5\u5fd7\u6761\u76ee\u503c\uff0c\u4f46\u6709\u4e9b\u7279\u5b9a\u5730\u8868\u793a\u4e3a\u574f\u503c\uff1a\nfn analyze_log\uff08\uff09-&gt\uff1b\u5217\u8868&lt\uff1b\u767b\u5f55&gt\uff1b{\u8bd5\u8bd5{parse_log_file\uff08file:\uff1aopen\uff08&#34\uff1bmy_log.txt&#34\uff1b\uff09}\u53e5\u67c4{MalformedLogEntry\uff08\uff09=&gt\uff1b\u91cd\u65b0\u542f\u52a8UseEntry\uff08bad_log_entry\uff08\uff09\uff09\uff0c}\n\u5982\u679c\u6211\u4eec\u60f3\u8df3\u8fc7\u90a3\u4e9b\u4e0d\u597d\u7684\uff0c\u4f46\u4ecd\u7136\u901a\u8fc7\u5411\u65e5\u5fd7\u8bb0\u5f55\u7a0b\u5e8f\u6253\u5370\u6d88\u606f\u6765\u8bb0\u5f55\u6211\u4eec\u770b\u5230\u7684\uff0c\u8be5\u600e\u4e48\u529e\uff1f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528SkipEntry\u548c\u4e00\u4e9b\u989d\u5916\u7684\u5904\u7406\u7a0b\u5e8f\u4ee3\u7801\uff0c\u7136\u540e\uff1a\nfn analyze_log\uff08\uff09-&gt\uff1b\u5217\u8868&lt\uff1b\u767b\u5f55&gt\uff1b{\u8bd5\u8bd5{parse_log_file\uff08file:\uff1aopen\uff08&#34\uff1bmy_log.txt&#34\uff1b\uff09}\u53e5\u67c4{MalformedLogEntry\uff08text\uff09=&gt\uff1b{logger.log\uff08&#34\uff1b\u53d1\u73b0\u9519\u8bef\u7684\u65e5\u5fd7\u6761\u76ee\uff1a`{}`&#34\uff1b\uff0ctext\uff09\uff1b\u91cd\u65b0\u542f\u52a8SkipEntry\uff1b}}}\n\u5982\u679c\u6211\u4eec\u60f3\u5c1d\u8bd5\u5bf9\u6211\u4eec\u770b\u5230\u7684\u524d\u51e0\u4e2a\u9519\u8bef\u5e94\u7528\u4fee\u6b63\u542f\u53d1\uff0c\u4f46\u5982\u679c\u6211\u4eec\u770b\u5230\u7684\u9519\u8bef\u8d85\u8fc7\u9884\u5148\u786e\u5b9a\u7684\u201c\u5141\u8bb8\u201d\u6570\u91cf\uff0c\u5c31\u9000\u51fa\u7a0b\u5e8f\uff0c\u8be5\u600e\u4e48\u529e\uff1f\u6211\u4eec\u53ef\u4ee5\u5728\u5904\u7406\u7a0b\u5e8f\u548cRetryParse\u91cd\u65b0\u542f\u52a8\u4e2d\u4f7f\u7528\u5171\u4eab\u72b6\u6001\uff1a\nfn analyze_log\uff08\uff09-&gt\uff1b\u5217\u8868&lt\uff1b\u767b\u5f55&gt\uff1b{let mut errors=0\uff1b\u5c1d\u8bd5{parse_log_file\uff08file:\uff1aopen\uff08&#34\uff1bmy_log.txt&#34\uff1b\uff09}\u5904\u7406{MalformedLogEntry\uff08\u6587\u672c\uff09=&gt\uff1b{if\uff08errors&lt\uff1bALLOWED_LOG_errors\uff09{errors+=1\uff1b\u91cd\u65b0\u542f\u52a8RetryParse\uff08try_correction\uff08\u6587\u672c\uff09\uff09\uff1b}else{logger.log\uff08&#34\uff1b\u9047\u5230\u592a\u591a\u9519\u8bef\u7684\u65e5\u5fd7\u6761\u76ee\uff1b\u6b63\u5728\u9000\u51fa&#34\uff1b\uff09\uff1b\u7cfb\u7edf\u9000\u51fa\uff081\uff09\uff1b}}}\n\u8bda\u7136\uff0c\u8fd9\u4e2a\u7cfb\u7edf\u80af\u5b9a\u6bd4\u5f02\u5e38\u5904\u7406\u66f4\u7cbe\u7ec6\uff1a\u4f60&#39\uff1b\u6211\u4eec\u5f97\u5230\u4e86\u66f4\u591a\u7684\u79fb\u52a8\u90e8\u4ef6\uff0c\u5305\u62ec\u9519\u8bef\u6761\u4ef6\uff08\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ea\u6709\u4e00\u4e2a\uff09\u52a0\u4e0a\u547d\u540d\u7684\u9519\u8bef\u91cd\u542f\u52a0\u4e0a\u5904\u7406\u7a0b\u5e8f\u903b\u8f91\u3002\uff08\u6211\u6000\u7591\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8bed\u8a00\u8bbe\u8ba1\u5e08\u6ca1\u6709\u8d39\u5fc3\u5c06\u5176\u79fb\u690d\u5230\u65b0\u8bed\u8a00\u4e2d\u7684\u539f\u56e0\u4e4b\u4e00\uff0c\u800c\u662f\u66f4\u559c\u6b22\u57fa\u4e8e\u5f02\u5e38\u7684\u7b80\u5355\u9519\u8bef\u6216\u663e\u5f0f\u7ed3\u679c\u7c7b\u578b\u3002\uff09\u4f46\u8fd9\u79cd\u5206\u79bb\u53ef\u80fd\u975e\u5e38\u5f3a\u5927\uff1a\u6211\u4eec\u4e0d\u518d\u9700\u8981\u901a\u8fc7API\u624b\u52a8\u6267\u884c\u7ebf\u7a0b\u72b6\u6001\uff1b\u76f8\u53cd\uff0c\u6211\u4eec\u7684API\u662f\u4e3a\u201c\u5feb\u4e50\u4e4b\u8def\u201d\u800c\u8bbe\u8ba1\u7684\uff0c\u4f46\u9519\u8bef\u4ecd\u7136\u53ef\u4ee5\u4ee5\u7ec6\u7c92\u5ea6\u7684\u65b9\u5f0f\u5904\u7406\uff0c\u8fd8\u6709\u4ec0\u4e48&#39\uff1b\u6b64\u5916\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5b8c\u5168\u63a7\u5236\u5982\u4f55\u5904\u7406\u8fd9\u4e9b\u9519\u8bef\u3002\u5c06\u9519\u8bef\u6062\u590d\u7b56\u7565\uff08\u79f0\u4e3a\u91cd\u65b0\u542f\u52a8\uff09\u4ece\u5982\u4f55\u5b9e\u9645\u5904\u7406\u9519\u8bef\uff08\u79f0\u4e3a\u5904\u7406\u7a0b\u5e8f\u7b56\u7565\uff09\u4e2d\u5206\u79bb\u51fa\u6765\uff0c\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e9b\u975e\u5e38\u7b80\u5355\u4f46\u529f\u80fd\u5f3a\u5927\u7684API\u8bbe\u8ba1\u3002\n\u597d\u5427\uff0c\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u628a\u8fd9\u4e9b\u653e\u5728\u4e00\u8d77\u3002\u6700\u540e\u4e00\u8282\u8ba8\u8bba\u4e86\u7c7b\u578b\uff0c\u7406\u7531\u5f88\u5145\u5206\uff1a\u5728Common Lisp\u4e2d\uff0c\u6ca1\u6709&#39\uff1bt\u7c7b\u578b\u7528\u4e8e\u91cd\u65b0\u542f\u52a8\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5b83&#39\uff1b\u5904\u7406\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u6307\u5b9a\u4e00\u4e2a\u4e0d&#39\uff1b\u4e0d\u5b58\u5728\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5b83&#39\uff1b\u6211\u4f1a\u4ea7\u751f\u53e6\u4e00\u79cd\u9519\u8bef\uff08\u7528Lisp\u7684\u8bf4\u6cd5\u662f\u63a7\u5236\u9519\u8bef\uff09\uff0c\u56e0\u4e3a\u5b83\u4e0d\u662f&#39\uff1b\u65e0\u6cd5\u627e\u5230\u4ee3\u7801\u5e94\u8be5\u6062\u590d\u7684\u4f4d\u7f6e\u3002\n\u4f46\u6211\u4eec\u53ef\u4ee5\u6784\u5efa\u4e00\u79cd\u5b9e\u73b0\u6761\u4ef6\u7cfb\u7edf\u7684\u9759\u6001\u7c7b\u578b\u8bed\u8a00\uff0c\u8fd9\u6837\u7f16\u8bd1\u5668\u5c31\u53ef\u4ee5\u62d2\u7edd\u6355\u83b7\u4e0d\u5b58\u5728\u7684\u9519\u8bef\u7684\u7a0b\u5e8f\uff0c\u6216\u8005\u5c1d\u8bd5\u4ece\u4e0d\u5b58\u5728\u7684\u91cd\u65b0\u542f\u52a8\u4e2d\u6062\u590d\uff08\u6216\u8005\u4e3a\u8fd9\u4e9b\u91cd\u65b0\u542f\u52a8\u63d0\u4f9b\u9519\u8bef\u7c7b\u578b\u7684\u503c\uff09\u518d\u4e00\u6b21\uff0c\u6211&#39\uff1bd\u5efa\u8bae\u8fd9\u6837\u505a\u662f\u901a\u8fc7\u5141\u8bb8\u9519\u8bef\u6216\u6761\u4ef6\uff0c\u4f7f\u7528\u5e38\u89c1\u7684Lisp\u672f\u8bed\uff0c\u4f46\u4e5f\u53ef\u4ee5\u91cd\u65b0\u542f\u52a8\n......", "note_en": "Something I&#39;ve had puttering around in the back of my head for  ages now is My Perfect Application Language. There are languages out there that I like more or less, but I still believe that another language could be a more perfect fit for the software I want to write  1, and I have a large number of ideas about what features it would include, what features it would omit, how it might be written, and so forth.\n One dissatisfaction I have with existing languages is that I think none of them do error-handling  terribly well.  Graydon Hoare&#39;s very good blog post  What next? talks about places that programming languages might go in the future, and one thing he notes is that we&#39;ve got various approaches but none of them feel obviously right. I very much agree and I don&#39;t want to pretend I&#39;ve \u201csolved\u201d error-handling here.\n However, I&#39;ve got a hypothesis about what sort of error-handling system I might want in My Perfect Application Language, and I&#39;ve never actually written it down in full. I&#39;m not imagining a completely novel error-handling system: instead, I&#39;m imagining taking a few ideas which have been tried and combining them in a somewhat novel way to hopefully combine their strengths and temper their weaknesses. To explain this hypothetical feature, I&#39;m going to break it down into two language design hypotheses:\n The  first hypothesis: statically declaring the list of possible exceptions which a function can throw, like Java&#39;s checked exceptions or C++ exception specifications, can be a good feature  so long as they can be optionally inferred and do not need to be explicitly listed by the programmer.\n The  second hypothesis: we can create an incredibly flexible and powerful error-handling mechanism by implementing a  statically typed inferred condition system inspired by Common Lisp&#39;s condition system, coupling static inference of error conditions with static inference of restarts.\n The rest of this post will explain them in fragments. I should also note that this  all hypothetical: I haven&#39;t implemented this, and I don&#39;t believe  any programming language feature can be really justified until it has proven itself in at least medium-scale programs in its intended domain. (In fact, one of the features I&#39;m about to discuss seemed fine in tiny snippets and turned out to be abysmal in large programs.) That said, it&#39;s a hypothesis I&#39;d like to test, because I  suspect a feature like the one I&#39;m about to describe would be a tremendous boon to the kinds of programs and libraries that I usually write!\n  I think it&#39;s probably pretty uncontroversial to say that checked exceptions might sound appealing in theory but are downright miserable in practice. The idea is simple: you can statically verify that all error paths are checked if each method enumerates the exceptions that might be thrown. If I call a method  foo() that declares no exceptions, then I know for sure that I won&#39;t need to catch any of them! If I look in the source and see  foo() throws ThatException, then I know for sure that I might need to handle  ThatException! The compiler will yell at me if I don&#39;t do  something about  ThatException: I either need to explicitly catch it, or I need to explicitly pass it on by adding  throws ThatException to my method. I can sleep easy, knowing that all error paths are handled!\n \u2026except, of course, now you need to copy-and-paste  throws ThatException again and again and again and again throughout your whole damn codebase, which is  ridiculously noisy and nobody wants to do it. (To say nothing of the half-dozen or more exceptions I might want to actually throw!) In practice, Java programmers have pretty universally found checked exceptions to be firmly Not Worth It: either they haphazardly toss the generic and unhelpful  throws Exception around all their methods, or they  catch any exception without bothering to discriminate in order to silence the warning, or they use runtime errors which don&#39;t need to be included in the type. Findings with large codebases have firmly indicated that exception specifications increase toil but don&#39;t significantly impact safety.\n But I suspect the problem isn&#39;t that they can&#39;t increase safety in some respects: the problem is that the amount of toil they cause is disproportionate to the safety you get, and in that they tend to push programmers to use them in ways which minimize the toil and therefore  also minimizes safety. So what if we got rid of the toil?\n Let&#39;s imagine a hypothetical programming language with exceptions: the syntax isn&#39;t important, so I&#39;m going to borrow a handwavey Rust-like syntax, but I shold be clear that all the examples below are imaginary and in a fictional non-Rust language. What I imagine here is that the default way of a method might look something like this:\n // an example function in a fictional languagefn find(haystack: String, needle: String) -&gt; Nat { // implementation elided}\n  Ah, but there&#39;s nothing in that snippet that mentions exceptions, right? In our hypothetical language, that doesn&#39;t mean it  won&#39;t throw an exception: instead, that means it&#39;s allowed to throw any exception! However, the compiler can infer which exceptions it  might throw, and it shouldn&#39;t be hard to compute: simply accumulate any uncaught exception thrown in the method body or any uncaught exception thrown by a method which is called in the method body. If I asked the compiler for the type of  find here, it might tell me a type like\n  So that means the compiler is well aware that  find might throw an exception, and in fact knows what exception it might throw. Anything which uses  find now can be aware that it might throw  SubstringNotFound. That means that, in this hypothetical language, we can write something like\n  And  now we&#39;ve given our compiler license to yell at us: we&#39;ve claimed that  example throws no exceptions, but because we&#39;re using  find, the compiler can correctly point out that we haven&#39;t handled  SubstringNotFound. Just like in Java, we&#39;ve got two basic options\u2014either catching  SubstringNotFound in the body of  example, or adding  SubstringNotFound to the list of exceptions thrown\u2014but we&#39;ve also got a third, substantially more terse option: we can wholly remove  throws () and allow it to infer for us whatever it wants to. We can add the specification  if we care but otherwise let the compiler handle the rest.\n I think there&#39;s also more that can be done around expressivity here. For example, perhaps a programmer could choose to explicitly include an exception in the list: a type like  fn example() -&gt; Nat throws (SomeException, ...) would mean, \u201cWhatever the compiler infers for the method body here, but it can also throw  SomeException even if the compiler didn&#39;t infer that one.\u201d One situation you might want this is when prototyping an API: perhaps I know that my API might  eventually throw  CacheMissException, but I haven&#39;t wired up the cache yet, so I&#39;m going to make sure I include that in my type signatures in the appropriate places just in case, and elsewhere use  throws () to make sure I handle it in places where I need to.\n More usefully, though, I can imagine a syntax for ensuring that specific exceptions  aren&#39;t included in the inferred type. In this case, a type like  fn example() -&gt; Nat throws (!OtherException, ...) would mean, \u201cThis throws whatever the compiler infers for the body, but if that inferred set includes  OtherException then raise a compile error.\u201d This means you don&#39;t need to regularly re-write the set of exceptions for a complicated API which might throw a dozen different specific errors, but you  could still say, \u201cI don&#39;t want this specific exception to escape, so keep me honest: if  example() ever tries to throw  OtherException, then yell at me about it.\u201d\n In fact, I can imagine wanting to implement this in a way where exception lists, even empty ones like  (), will actually implicitly include pervasive \u201cexistential\u201d exceptions: for example, exceptions that represent signals like  SIGKILL or exceptions that get raised when the process runs out of memory. In that case,  fn foo() throws () would be a convenient fiction, because it won&#39;t force the programmer to handle out-of-memory errors, but a programmer could write  fn foo() throws (!OutOfMemory) to indicate that  foo not only doesn&#39;t throw any user-written or typical stdlib exceptions, it also promises to handle out-of-memory exceptions that bubbled up from within it. A typical program probably would still probably define  fn main() throws (), but a server that&#39;s intended to be long-lived might define  fn main() throws (!OutOfMemory, !Sigkill) so that the compiler can let you know when you&#39;ve failed to handle those error conditions.\n I haven&#39;t implemented this in any language, so it&#39;s quite possible it&#39;d still have problems. And I&#39;ve handwaved away a number of issues that I haven&#39;t tried to solve. For example, I haven&#39;t tried fully articulating the typing rules for higher-order functions, or how this would interact with typeclasses, or how the compilation model will work: there&#39;s a lot to be done, and it might require other limitations or compromises or heuristics in practice. But my  hypothesis is that a feature such as this would let people use checked exceptions in a way that includes minimal overhead, allowing programmers to opt-in to useful checks but also get out of their way when it&#39;s not useful.\n  I said there was another part of my hypothesis, and to explain that I&#39;ll have to talk about Common Lisp&#39;s condition system. Let&#39;s start with exceptions and describe in fine detail how they work, because that&#39;ll help us understand how conditions differ.\n In a language with exceptions, you signal the existence of an error by you constructing a \u201cthing\u201d called an  exception, which is usually a value of a specific type. In languages with inheritance these are often values that inherit from a specific base class (although not always\u2014Ruby, for example, allows any value to be thrown) and in languages without inheritance they usually have some kind of error-specific tag (e.g. in Haskell or various ML languages.) These values can be \u201craised\u201d or \u201cthrown\u201d. When an exception is \u201craised\u201d, the language runtime will begin to walk up the stack, freeing stack frames as it goes, until it finds a \u201chandler\u201d, a bit of code which matches the appropriate exception type or tag and is attached to a block of error-handling code. If it fails to find a handler, the runtime will usually terminate the program and print a relevant message. If it  does find a handler, it resumes from that point, providing the exception to that bit of code.\n This is a widely-used mechanism for errors: so much so, in fact, that it can be hard to imagine alternatives. What else  could you do? What else would you want out of it?\n I&#39;m going to steal an example from  Peter Seibel&#39;s  Practical Common Lisp as motivation, but rewrite it in a curly-bracket syntax for people who aren&#39;t as comfortable with Lisp. Imagine that I&#39;m writing a library which is parsing log files in a particular format. I have a function called  parse_log_entry which takes a fragment of text and produces a log entry. Say I&#39;ve written it like this:\n fn parse_log_entry(text: String) -&gt; LogEntry { if (is_well_formed(text)) { return LogEntry::from_text(text); } else { raise MalformedLogEntry(text); }}\n Now the library is about parsing whole log files, so I also expose a function to parse an entire file like this:\n fn parse_log_file(f: File) -&gt; List&lt;LogEntry&gt; { let mut list = List::new(); for ln in f.read_lines() { list.append(parse_log_entry(ln)); } list}\n This is nice and simple! Unfortunately, if a single entry fails to parse, we&#39;ll throw a  MalformedLogEntry exception and lose access to the whole log parsed so far! In some applications, maybe that&#39;s fine, but I&#39;ve said we&#39;re writing a  library, and we want it to be as flexible as possible for an eventual user. Perhaps a user of the library would like us to put a special kind of  LogEntry value that represents a malformed entry instead? We could write something like this:\n fn parse_log_file(f: File) -&gt; List&lt;LogEntry&gt; { let mut list = List::new(); for ln in f.read_lines() { try { list.append(parse_log_entry(ln)) } catch (exn: MalformedLogEntry) { list.append(bad_log_entry()) } } list}\n Now we handle that error gracefully. But now we&#39;re assuming that&#39;s how the user wants us to handle that error. Maybe the user wants us to quietly skip that entry instead! We can write that, too:\n fn parse_log_file(f: File) -&gt; List&lt;LogEntry&gt; { let mut list = List::new(); for ln in f.read_lines() { try { list.append(parse_log_entry(ln)) } catch (_exn: MalformedLogEntry) { // do nothing } } list}\n But what if they want us to skip them but write the errors to stdout? Or to a specific logger? Or apply a correction heuristic and try parsing the line again? Or\u2026\n Okay, library design is hard, and designing libraries which handle errors in every possible way is  really hard. One approach here might be to provide all these as options which can be chosen by the library user. Maybe we expose different methods to the user which each implement different versions of these strategies, like  parse_log_file_with_default versus  parse_log_file_skip_bad. Maybe we provide one function with lots of optional parameters, like  parse_log_file(with_default: ..., skip_invalid: ...). Maybe we just throw our hands in the air and choose one we think is sensible: convention over configuration, right?\n On the other hand, if we had a  condition system, we would have a  really powerful way of allowing the user to choose any of these and more without having to significantly change our interface. What a condition system does is separate out two different concerns that get conflated by exception-handling:  what error recovery code does and  what error recovery code should be invoked. To begin with, instead of an exception handler, we install what&#39;s called a  restart and give it a name: this is how we define our recovery code that might run after an error is raised, but it does  not guarantee that the error-handling code associated with the restart is actually run. In this case, let&#39;s start with logic around skipping entries:\n fn parse_log_file(f: File) -&gt; List&lt;LogEntry&gt; { let mut list = List::new(); for ln in f.read_lines() { try { list.append(parse_log_entry(ln)) } restart SkipEntry { // do nothing } } list}\n This  restart block represents a possible recovery strategy in the presence of an error, and  SkipError is the name we&#39;ve given it. However, we&#39;re still missing something: we haven&#39;t actually told our program to  use it. Our library shouldn&#39;t be the one to make that choice, so let&#39;s imagine that we&#39;re calling the  parse_log_file library function from some application code. We now tell our application code to  handle a condition by invoking the  restart we&#39;ve defined:\n fn analyze_log() -&gt; List&lt;LogEntry&gt; { try { parse_log_file(File::open(&#34;my_log.txt&#34;)) } handle { MalformedLogEntry(_) =&gt; restart SkipEntry, }}\n This is where I&#39;m telling the program  which piece of recovery code to use. What I&#39;m saying is, \u201cIf we ever come across a situation where our code has produced a  MalformedLogEntry, then recover from that by finding the recovery path labeled with  SkipEntry and restart from there.\u201d\n So far we&#39;ve only defined that one recovery path. Let&#39;s revisit  parse_log_entry and add a few more strategies we might use to recover from an error within that function. Unlike  SkipEntry above, these also take parameters, which are pieces of information that the handler can supply in the  handle blocks:\n fn parse_log_entry(text: String) -&gt; LogEntry { if (is_well_formed(text)) { return LogEntry::from_text(text); } else { try { raise MalformedLogEntry(text); } restart UseValue(v: LogEntry) { return v; } restart RetryParse(new_text: String) { return parse_log_entry(new_text); } }}\n Now we have a total of three possible ways to recover from a  MalformedLogEntry: we can invoke the  SkipEntry restart which will simply skip past malformed lines, we can use the  UseValue restart with a value of type  LogEntry to replace the bad log with a different provided one, or we can use the  RetryParse restart to supply a new corrected string and attempt the parsing again.\n The important thing now is that the library allows all of these restarts to exist simultaneously, but  does not specify which to take: that&#39;s up to the calling code. Let&#39;s change our application code to supply  bad_log_entry() as a default value instead; this means an application will still include as many  LogEntry values as we had lines, but some are specifically represented as bad ones:\n fn analyze_log() -&gt; List&lt;LogEntry&gt; { try { parse_log_file(File::open(&#34;my_log.txt&#34;)) } handle { MalformedLogEntry(_) =&gt; restart UseEntry(bad_log_entry()), }}\n What if we want to skip the bad ones but still record that we saw them by printing messages to our logger? We can use  SkipEntry with some extra handler code, then:\n fn analyze_log() -&gt; List&lt;LogEntry&gt; { try { parse_log_file(File::open(&#34;my_log.txt&#34;)) } handle { MalformedLogEntry(text) =&gt; { logger.log(&#34;Found bad log entry: `{}`&#34;, text); restart SkipEntry; } }}\n What if we want to try applying a correction heuristic to the first several errors that we see, but exit the program if we see more than an pre-determined \u201callowable\u201d amount of bad errors? We can use shared state in our handler and the  RetryParse restart:\n fn analyze_log() -&gt; List&lt;LogEntry&gt; { let mut errors = 0; try { parse_log_file(File::open(&#34;my_log.txt&#34;)) } handle { MalformedLogEntry(text) =&gt; { if (errors &lt; ALLOWED_LOG_ERRORS) { errors += 1; restart RetryParse(try_correction(text)); } else { logger.log(&#34;Encountered too many bad log entries; exiting&#34;); system.exit(1); } } }}\n Admittedly, this system is definitely more fiddly than exception-handling: you&#39;ve got more moving parts, what with the error conditions (which in this example we had only one of)  plus the named error restarts  plus the handler logic. (I suspect this is one reason why language designers haven&#39;t bothered porting this into new languages, preferring simpler exception-based errors or explicit result types instead.) But the separation can be incredibly powerful: we no longer need to manually thread state through our API; instead, our API is designed for the \u201chappy path\u201d, but errors can still be handled in a granular way, and what&#39;s more, the application has full control over how those errors get handled. Breaking up strategies for error recovering (as named restarts) from how to  actually handle errors (as handler strategies) allows for some incredibly simple but powerful API designs.\n  Okay, so let&#39;s put these together. The last section glossed over types, and for good reason: in Common Lisp, there aren&#39;t types for restarts. In fact, it&#39;s possible for a handler to specify a restart which doesn&#39;t exist, in which case it&#39;ll produce a  different kind of error (a  CONTROL-ERROR in Common Lisp parlance) because it wasn&#39;t able to find the place where code should resume.\n But we could build a statically typed language that implements a condition system, so that the compiler could reject programs which catch non-existent errors or try to resume from non-existent restarts (or supply those restarts with values of the wrong type.) Yet again, the way I&#39;d propose doing this is by allowing errors\u2014or conditions, to use the Common Lisp terminology\u2014but  also restar\n......", "posttime": "2022-02-15 19:39:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6761\u4ef6,typed,\u9519\u8bef", "title": "\u7ed3\u6784\u578b\u6761\u4ef6\u5904\u7406", "title_en": "Structurally-Typed Condition Handling", "transed": 1, "url": "https://journal.infinitenegativeutility.com/structurally-typed-condition-handling", "via": "", "real_tags": ["\u6761\u4ef6", "typed", "\u9519\u8bef"]}]