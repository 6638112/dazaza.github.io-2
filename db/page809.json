[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1012829, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Redo\u662f\u957f\u5bff\u7684Make\u7a0b\u5e8f\u7684\u7ade\u4e89\u5bf9\u624b\uff0c\u4f46\u9057\u61be\u7684\u662f\uff0cMake\u7a0b\u5e8f\u5e76\u4e0d\u5b8c\u7f8e\u3002\u4e0e\u5176\u4ed6\u540c\u7c7b\u7ade\u4e89\u5bf9\u624b\u4e0d\u540c\uff0cRedo\u6293\u4f4f\u4e86make\u7684\u7b80\u5355\u6027\u548c\u7075\u6d3b\u6027\uff0c\u540c\u65f6\u907f\u514d\u4e86\u5b83\u7684\u7f3a\u9677\u3002\u5b83\u8bbe\u6cd5\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u540c\u65f6\u6bd4make\u66f4\u7b80\u5355\uff0c\u6bd4make\u66f4\u7075\u6d3b\uff0c\u6bd4make\u66f4\u5f3a\u5927\uff0c\u5e76\u4e14\u4e0d\u4f1a\u727a\u7272\u6027\u80fd-ARARE\u7279\u6027\u7684\u7ec4\u5408\u3002\nRedo\u7684\u539f\u59cb\u8bbe\u8ba1\u6765\u81eaDaniel J.Bernstein(qmail\u548cdjbdns\u7b49\u8bb8\u591a\u6709\u7528\u529f\u80fd\u7684\u521b\u5efa\u8005)\u3002\u4ed6\u4e00\u5ea6(\u6ca1\u6709\u65e5\u671f)\u5728\u4ed6\u7684\u7f51\u7ad9\u4e0a\u53d1\u5e03\u4e86\u4e00\u4e9b\u7b80\u77ed\u7684\u7b14\u8bb0\uff0c\u6807\u9898\u5e76\u4e0d\u5f20\u626c\uff1a\u5f53\u6e90\u6587\u4ef6\u53d1\u751f\u53d8\u5316\u65f6\u91cd\u5efa\u76ee\u6807\u6587\u4ef6\u3002\u8fd9\u4e9b\u7b14\u8bb0\u8db3\u4ee5\u7406\u89e3\u7cfb\u7edf\u5e94\u8be5\u5982\u4f55\u5de5\u4f5c\uff1b\u4e0d\u5e78\u7684\u662f\uff0c\u6ca1\u6709\u4e0e\u4e4b\u914d\u5957\u7684\u4ee3\u7801\u3002\u57fa\u4e8e\u8fd9\u4e2a\u8bbe\u8ba1\uff0c\u6211\u4ece\u5934\u5f00\u59cb\u7f16\u5199\u4e86\u8fd9\u4e2a\u91cd\u505a\u5b9e\u73b0\u3002\n\u5728\u6211\u53d1\u73b0djb redo\u4e4b\u540e\uff0c\u6211\u5728\u4e92\u8054\u7f51\u4e0a\u641c\u7d22\u5176\u4ed6\u4eba\u5df2\u7ecf\u53d1\u73b0\u6211\u6240\u62e5\u6709\u7684\u4e1c\u897f\u7684\u4efb\u4f55\u8ff9\u8c61\uff1a\u4e00\u4e2a\u9690\u85cf\u7684\u3001\u672a\u5b9e\u73b0\u7684\u3001\u51fa\u8272\u4ee3\u7801\u8bbe\u8ba1\u7684\u5b9d\u77f3\u3002\u6211\u5f53\u65f6\u53ea\u53d1\u73b0\u4e86\u4e00\u4e2a\u6709\u8da3\u7684\u94fe\u63a5\uff1aAlanGrosskurth\uff0c\u4ed6\u5728\u6ed1\u94c1\u5362\u5927\u5b66\u7684\u7855\u58eb\u8bba\u6587\u662f\u5173\u4e8e\u81ea\u4e0a\u800c\u4e0b\u7684\u8f6f\u4ef6\u91cd\u5efa\uff0c\u5373DJB\u91cd\u505a\u3002\u4ed6\u7528\u5927\u7ea6250\u884cshell\u811a\u672c\u7f16\u5199\u4e86\u81ea\u5df1\u7684\u5b9e\u73b0(\u8bda\u7136\u5f88\u6162)\uff0c\u8fd9\u8ba9\u4eba\u5bf9\u8fd9\u4e2a\u7cfb\u7edf\u6709\u591a\u7b80\u5355\u6709\u4e2a\u6982\u5ff5\u3002\u4ece\u90a3\u65f6\u8d77\uff0c\u51fa\u73b0\u4e86\u51e0\u4e2a\u5176\u4ed6\u5b9e\u73b0(\u53c2\u89c1\u4e0b\u9762\u7684\u5217\u8868)\u3002\n\u6211\u7684\u91cd\u505a\u5b9e\u73b0\u79f0\u4e3a\u91cd\u505a\uff0c\u539f\u56e0\u4e0e\u670975\u4e2a\u4e0d\u540c\u7248\u672c\u7684make\u90fd\u79f0\u4e3amake\u7684\u539f\u56e0\u76f8\u540c\u3002\u90a3\u6837\u7684\u8bdd\u5c31\u5bb9\u6613\u591a\u4e86\u3002\n\u6211\u8fd8\u5728\u8be5\u5b58\u50a8\u5e93\u7684minimum/\u76ee\u5f55\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a\u975e\u5e38\u5c0f\u7684\u7eafPOSIX-sh\u5b9e\u73b0\uff0c\u79f0\u4e3ado\u3002\n\u91cd\u505a\u80cc\u540e\u7684\u7406\u8bba\u542c\u8d77\u6765\u597d\u5f97\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\uff1a\u5b83\u53ef\u4ee5\u505a\u4efb\u4f55Make\u80fd\u505a\u7684\u4e8b\u60c5\uff0c\u4f46\u5b9e\u73b0\u8981\u7b80\u5355\u5f97\u591a\uff0c\u8bed\u6cd5\u66f4\u6e05\u6670\uff0c\u800c\u4e14\u60a8\u65e0\u9700\u6c42\u52a9\u4e8e\u4e11\u964b\u7684\u9ed1\u5ba2\u5c31\u53ef\u4ee5\u83b7\u5f97\u66f4\u5927\u7684\u7075\u6d3b\u6027\u3002\u6b64\u5916\uff0c\u60a8\u53ef\u4ee5\u83b7\u5f97\u975e\u9012\u5f52make\u7684\u6240\u6709\u901f\u5ea6(\u6bcf\u6b21\u8fd0\u884c\u53ea\u68c0\u67e5\u4f9d\u8d56\u9879\u4e00\u6b21)\u548c\u9012\u5f52make\u7684\u6240\u6709\u6e05\u6670\u5ea6(\u60a8\u4e0d\u4f1a\u8ba9\u4e00\u4e2a\u6a21\u5757\u7684\u4ee3\u7801\u8df5\u8e0f\u53e6\u4e00\u4e2a\u6a21\u5757\u7684\u4ee3\u7801)\u3002\n(\u514d\u8d23\u58f0\u660e\uff1a\u6211\u76ee\u524d\u7684\u5b9e\u73b0\u6ca1\u6709Make\u7684\u901f\u5ea6\u5feb\uff0c\u56e0\u4e3a\u5b83\u662f\u7528python\u7f16\u5199\u7684\u3002\u6700\u7ec8\uff0c\u6211\u4f1a\u7528C\u8bed\u8a00\u91cd\u5199\u5b83\uff0c\u800c\u4e14\u901f\u5ea6\u4f1a\u975e\u5e38\u975e\u5e38\u5feb\u3002)\u3002\n\u5c55\u793a\u5b83\u7684\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u8df3\u5230\u4e00\u4e2a\u4f8b\u5b50\u4e2d\u3002\u4e0b\u9762\u662f\u7f16\u8bd1C++\u7a0b\u5e8f\u7684\u65b9\u6cd5\u3002\n\u5f53\u7136\uff0c\u60a8\u8fd8\u5fc5\u987b\u521b\u5efaA.c\u548cB.c\uff0c\u8fd9\u662f\u60a8\u60f3\u8981\u6784\u5efa\u4ee5\u521b\u5efa\u5e94\u7528\u7a0b\u5e8f\u7684C\u8bed\u8a00\u8d44\u6e90\u6587\u4ef6\u3002\n\u60a8\u5728default.o.do\u4e2d\u6355\u6349\u5230\u751f\u6210\u81ea\u4f9d\u8d56\u9879\u7684shell\u5492\u8bed\u4e86\u5417\uff1f\u6587\u4ef6\u540ddefault.o.do\u8868\u793a\u8fd0\u884c\u6b64\u811a\u672c\u4ee5\u751f\u6210.o\u6587\u4ef6\uff0c\u9664\u975e\u6709\u9002\u7528\u7684\u66f4\u5177\u4f53\u7684.o.do\u811a\u672c\u3002&#34\uff1b\n\u5173\u4e8e\u91cd\u505a\uff0c\u8981\u7406\u89e3\u7684\u5173\u952e\u662f\u58f0\u660e\u4f9d\u8d56\u9879\u662f\u76f4\u63a5\u7684\u5176\u4ed6shell\u547d\u4ee4\u3002Redo-ifchange\u547d\u4ee4\u610f\u5473\u7740\u6784\u5efa\u6bcf\u4e2amy\u53c2\u6570\u3002\u5982\u679c\u5b83\u4eec\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u6216\u5b83\u4eec\u7684\u4f9d\u8d56\u5173\u7cfb\u53d1\u751f\u53d8\u5316\uff0c\u90a3\u4e48\u6211\u9700\u8981\u91cd\u65b0\u8fd0\u884c\u5f53\u524d\u811a\u672c\u3002&#34\uff1b\n\u5728\u6301\u4e45\u7684.redo\u6570\u636e\u5e93\u4e2d\u8ddf\u8e2a\u4f9d\u8d56\u9879\uff0c\u4ee5\u4fbf\u91cd\u505a\u4ee5\u540e\u53ef\u4ee5\u68c0\u67e5\u5b83\u4eec\u3002\u5982\u679c\u9700\u8981\u91cd\u65b0\u6784\u5efa\u6587\u4ef6\uff0c\u5b83\u5c06\u91cd\u65b0\u6267\u884cWhatever.do\u811a\u672c\u5e76\u91cd\u65b0\u751f\u6210\u4f9d\u8d56\u9879\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u9700\u8981\u91cd\u65b0\u6784\u5efa\uff0c\u53ea\u9700\u4f7f\u7528\u5176\u6301\u4e45\u7684.redo\u6570\u636e\u5e93\uff0c\u800c\u65e0\u9700\u91cd\u65b0\u8fd0\u884c\u811a\u672c\uff0credo\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002\u800c\u4e14\u5b83\u53ef\u4ee5\u5728\u9879\u76ee\u6784\u5efa\u5f00\u59cb\u65f6\u53ea\u505a\u4e00\u6b21\u68c0\u67e5\uff0c\u8fd9\u771f\u7684\u5f88\u5feb\u3002\n\u6700\u68d2\u7684\u662f\uff0c\u6b63\u5982\u60a8\u5728default.o.do\u4e2d\u770b\u5230\u7684\u90a3\u6837\uff0c\u60a8\u53ef\u4ee5\u5728\u6784\u5efa\u7a0b\u5e8f\u4e4b\u540e\u58f0\u660e\u4f9d\u8d56\u9879\u3002\u5728C\u8bed\u8a00\u4e2d\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u5c1d\u8bd5\u5b9e\u9645\u6784\u5efa\u6765\u83b7\u5f97\u6700\u597d\u7684\u4f9d\u8d56\u4fe1\u606f\uff0c\u56e0\u4e3a\u8fd9\u662f\u627e\u51fa\u60a8\u9700\u8981\u7684\u5934\u6587\u4ef6\u7684\u65b9\u6cd5\u3002\u91cd\u505a\u57fa\u4e8e\u8fd9\u6837\u4e00\u4e2a\u7b80\u5355\u7684\u89c1\u89e3\uff1a\u5728\u6784\u5efa\u76ee\u6807\u4e4b\u524d\uff0c\u60a8\u5b9e\u9645\u4e0a\u5e76\u4e0d\u5173\u5fc3\u4f9d\u8d56\u9879\u662f\u4ec0\u4e48\u3002\u5982\u679c\u76ee\u6807\u4e0d\u5b58\u5728\uff0c\u60a8\u663e\u7136\u9700\u8981\u6784\u5efa\u5b83\u3002\n\u4e00\u65e6\u60a8\u65e0\u8bba\u5982\u4f55\u90fd\u8981\u6784\u5efa\u5b83\uff0c\u6784\u5efa\u811a\u672c\u672c\u8eab\u5c31\u53ef\u4ee5\u968f\u5fc3\u6240\u6b32\u5730\u8ba1\u7b97\u4f9d\u8d56\u5173\u7cfb\u4fe1\u606f\uff1b\u4e0emake\u4e0d\u540c\uff0c\u60a8\u6839\u672c\u4e0d\u9700\u8981\u7279\u6b8a\u7684\u4f9d\u8d56\u5173\u7cfb\u8bed\u6cd5\u3002\u60a8\u751a\u81f3\u53ef\u4ee5\u5728\u6784\u5efa\u4e4b\u540e\u58f0\u660e\u4e00\u4e9b\u4f9d\u8d56\u9879\uff0c\u8fd9\u4f7f\u5f97C\u98ce\u683c\u7684\u81ea\u4f9d\u8d56\u9879\u53d8\u5f97\u7b80\u5355\u5f97\u591a\u3002\n\u56e0\u6b64\uff0c\u91cd\u505a\u662f\u547d\u4ee4\u6027\u7f16\u7a0b\u548c\u58f0\u660e\u6027\u7f16\u7a0b\u7684\u72ec\u7279\u7ec4\u5408\u3002\u521d\u59cb\u6784\u5efa\u51e0\u4e4e\u5b8c\u5168\u662f\u5fc5\u9700\u7684(\u8fd0\u884c\u4e00\u7cfb\u5217\u811a\u672c)\u3002\u4f5c\u4e3a\u5176\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u811a\u672c\u4e00\u6b21\u58f0\u660e\u51e0\u4e2a\u4f9d\u8d56\u9879\uff0c\u7136\u540e\u91cd\u505a\u5c06\u5b83\u4eec\u7ec4\u88c5\u5230\u4e00\u4e2a\u66f4\u5927\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u3002\u7136\u540e\uff0c\u5728\u5c06\u6765\uff0c\u5b83\u4f7f\u7528\u9884\u5148\u58f0\u660e\u7684\u6570\u636e\u7ed3\u6784\u6765\u51b3\u5b9a\u9700\u8981\u91cd\u505a\u54ea\u4e9b\u5de5\u4f5c\u3002\n(GNU make\u652f\u6301\u5c06\u60a8\u7684\u4e00\u4e9b\u4f9d\u8d56\u9879\u653e\u5165\u5305\u542b\u6587\u4ef6\u4e2d\uff0c\u5e76\u5728\u8fd9\u4e9b\u5305\u542b\u6587\u4ef6\u53d1\u751f\u66f4\u6539\u65f6\u81ea\u52a8\u91cd\u65b0\u52a0\u8f7d\u5b83\u4eec\u3002\u4f46\u8fd9\u975e\u5e38\u4ee4\u4eba\u56f0\u60d1-\u901a\u8fc7Makefile\u7684\u7a0b\u5e8f\u6d41\u5df2\u7ecf\u5f88\u96be\u8ddf\u8e2a\u4e86\uff0c\u5f53\u5b83\u4ece\u5934\u91cd\u65b0\u542f\u52a8\u65f6\u5c31\u66f4\u96be\u4e86\uff0c\u56e0\u4e3a\u5305\u542b\u6587\u4ef6\u5728\u8fd0\u884c\u65f6\u4f1a\u53d1\u751f\u53d8\u5316\u3002\u4f7f\u7528\u91cd\u505a\uff0c\u60a8\u53ef\u4ee5\u4ece\u4e0a\u5230\u4e0b\u8bfb\u53d6\u6bcf\u4e2a\u6784\u5efa\u811a\u672c\u3002Redo-ifchange\u8c03\u7528\u7c7b\u4f3c\u4e8e\u8c03\u7528\u51fd\u6570\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4ece\u4e0a\u5230\u4e0b\u8bfb\u53d6\u8be5\u51fd\u6570\u3002)\n\u4e00\u4e9b\u8f83\u5927\u7684\u4e13\u6709\u9879\u76ee\u6b63\u5728\u4f7f\u7528\u5b83\uff0c\u4f46\u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4ece\u672c\u6587\u6863\u4e2d\u94fe\u63a5\u8d77\u6765\u3002\u4ee5\u4e0b\u662f\u51e0\u4e2a\u5f00\u653e\u6e90\u7801\u793a\u4f8b\uff1a\n\u89e3\u653e\u8d5b\u9053\u662f\u4e00\u4e2a\u7528\u91cd\u505a\u7f16\u8bd1\u7684C++\u4e8c\u8fdb\u5236(\u6e38\u620f)\u7684\u7b80\u5355\u793a\u4f8b\u3002\nWvStreams\u4f7f\u7528\u66f4\u590d\u6742\u7684\u8bbe\u7f6e\uff0c\u751f\u6210\u51e0\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u3001\u5e93\u548c\u811a\u672c\u3002\u5b83\u663e\u793a\u4e86\u5982\u4f55\u5728\u4e0e\u6e90\u6587\u4ef6\u4e0d\u540c\u7684\u76ee\u5f55\u4e2d\u751f\u6210\u8f93\u51fa\u6587\u4ef6\u3002\nWvBuild\u53ef\u4ee5\u4ea4\u53c9\u7f16\u8bd1\u51e0\u4e2a\u4f9d\u8d56\u9879\uff0c\u5982OpenSSL\u548czlib\uff0c\u7136\u540e\u4f7f\u7528\u8fd9\u4e9b\u76f8\u540c\u7684\u5e93\u6784\u5efaWvStream\u3002\u5b83\u662f\u91cd\u505a/\u5efa\u7acb\u4e92\u64cd\u4f5c\u548c\u590d\u6742\u4f9d\u8d56\u5173\u7cfb\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u3002\nBuildroot\u6709\u4e00\u4e2a\u5b9e\u9a8c\u6027\u7684\u53d8\u4f53\uff0c\u5b83\u4f7f\u7528\u91cd\u505a\u6765\u6e05\u7406\u5176\u4f9d\u8d56\u903b\u8f91\u3002\n\u60a8\u53ef\u4ee5\u5728\u98df\u8c31\u4e2d\u627e\u5230\u4e00\u4e9b\u7cbe\u9009\u7684\u6559\u7a0b\u793a\u4f8b\uff0c\u4f8b\u5982\u4f7f\u7528LaTeX\u8fdb\u884cgit\u53d8\u91cf\u66ff\u6362\u548c\u6587\u672c\u5904\u7406(\u5305\u62ec\u4f7f\u7528R\u548cggplot2\u751f\u6210\u7ed8\u56fe)\u3002\n\u5982\u679c\u60a8\u5c06\u60a8\u7684\u7a0b\u5e8f\u7684\u6784\u5efa\u8fc7\u7a0b\u5207\u6362\u4e3a\u4f7f\u7528\u91cd\u505a\uff0c\u8bf7\u8ba9\u6211\u4eec\u77e5\u9053\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u91cc\u94fe\u63a5\u5230\u5b83\uff0c\u4ee5\u83b7\u5f97\u4e00\u4e9b\u514d\u8d39\u7684\u5ba3\u4f20\u3002\n(\u8bf7\u4e0d\u8981\u4f7f\u7528\u91cd\u505a\u9879\u76eet/\u76ee\u5f55\u4e2d\u7684\u96c6\u6210\u6d4b\u8bd5\u4ee3\u7801\u4f5c\u4e3a\u5982\u4f55\u4f7f\u7528\u91cd\u505a\u7684\u4e25\u8083\u793a\u4f8b\u3002\u8bb8\u591a\u6d4b\u8bd5\u90fd\u662f\u6545\u610f\u7528\u7cbe\u795e\u9519\u4e71\u7684\u65b9\u5f0f\u6765\u505a\u4e8b\u60c5\uff0c\u4ee5\u5f3a\u8c03\u91cd\u505a\u4ee3\u7801\u5e76\u627e\u51fa\u9519\u8bef\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u60a8\u6b63\u5728\u6784\u5efa\u81ea\u5df1\u7684\u91cd\u505a\u5b9e\u73b0\uff0c\u4f7f\u7528\u6211\u4eec\u7684\u6d4b\u8bd5\u5957\u4ef6\u662f\u4e2a\u4e0d\u9519\u7684\u4e3b\u610f\u3002)\nDJB\u4ece\u672a\u53d1\u5e03\u8fc7\u4ed6\u7684\u7248\u672c\uff0c\u6240\u4ee5\u5176\u4ed6\u4eba\u5df2\u7ecf\u57fa\u4e8e\u4ed6\u53d1\u5e03\u7684\u89c4\u8303\u5b9e\u73b0\u4e86\u4ed6\u4eec\u81ea\u5df1\u7684\u53d8\u4f53\u3002\n\u8fd9\u4e2a\u7248\u672c\uff0c\u6709\u65f6\u79f0\u4e3aApenwarr/Redo\uff0c\u53ef\u80fd\u662f\u6700\u5148\u8fdb\u7684\u7248\u672c\uff0c\u5305\u62ec\u5bf9\u5e76\u884c\u6784\u5efa\u7684\u652f\u6301\u3001\u5f39\u6027\u65f6\u95f4\u6233\u548c\u6821\u9a8c\u548c\u3001\u6784\u5efa\u65e5\u5fd7\u7ebf\u6027\u5316\u4ee5\u53ca\u6709\u7528\u7684\u8c03\u8bd5\u7279\u6027\u3002\u5b83\u76ee\u524d\u662f\u7528python\u7f16\u5199\u7684\uff0c\u4ee5\u4fbf\u4e8e\u5b9e\u9a8c\uff0c\u4f46\u8ba1\u5212\u6700\u7ec8\u5c06\u5176\u79fb\u690d\u5230\u7eafC\u8bed\u8a00\u3002(\u6709\u4e9b\u4eba\u559c\u6b22\u628a\u8fd9\u4e2a\u7248\u672c\u53eb\u505apython-redo\uff1b\uff0c\u4f46\u6211\u4e0d\u559c\u6b22\u8fd9\u4e2a\u540d\u5b57\u3002\u5f53\u6211\u4eec\u7a0d\u540e\u5c06\u4ee3\u7801\u97f3\u8bd1\u4e3aC\u65f6\uff0c\u6211\u4eec\u4e0d\u5e94\u8be5\u5c06\u5176\u91cd\u547d\u540d\u3002)\u3002\n\u4ee5\u4e0b\u662f\u5176\u4ed6\u4e00\u4e9b\u91cd\u505a\u53d8\u4f53(\u611f\u8c22Nils Dagsson Moskopp\u6536\u96c6\u4e86\u8bb8\u591a\u8fd9\u6837\u7684\u94fe\u63a5)\uff1a\nAlan Grosskurth\u7684\u91cd\u505a\u8bba\u6587\u548c\u76f8\u5173\u7684sh\u5b9e\u73b0\u3002(\u53ef\u4ee5\u8bf4\uff0c\u8fd9\u7bc7\u8bba\u6587\u8ba9\u6211\u4eec\u6240\u6709\u4eba\u90fd\u5f00\u59cb\u4e86\u3002)\u3002\nApenwarr&#39\uff1b\u7684\u6700\u5c0f/DO\u5305\u542b\u5728\u6b64\u91cd\u505a\u526f\u672c\u4e2d\u3002\u5b83\u4e5f\u662f\u57fa\u4e8esh\u7684\uff0c\u4f46\u5b83\u7684\u76ee\u7684\u662f\u7b80\u5355\u548c\u6545\u969c\u4fdd\u62a4\uff0c\u6240\u4ee5\u5b83\u4e0d\u77e5\u9053\u5982\u4f55\u591a\u6b21\u91cd\u505a\u76ee\u6807\u3002\n\u6700\u521d\u7684\u91cd\u505a\u8bbe\u8ba1\u662f\u5982\u6b64\u7b80\u5355\u548c\u4f18\u96c5\uff0c\u4ee5\u81f3\u4e8e\u8bb8\u591a\u4eba\u90fd\u53d7\u5230\u4e86\u542f\u53d1\uff0c\u60f3(\u5e76\u4e14\u80fd\u591f)\u5199\u51fa\u4ed6\u4eec\u81ea\u5df1\u7684\u7248\u672c\u3002\u6309\u7167Unix\u5236\u9020\u7684\u5149\u8363\u4f20\u7edf\uff0c\u5b83\u4eec(\u51e0\u4e4e)\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u540d\u79f0\uff0c\u91cd\u505a\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u4e9b\u5b9e\u73b0\u4e2d\u7684\u8bb8\u591a\u90fd\u6ca1\u6709\u5f97\u5230\u7ef4\u62a4\uff0c\u4e0e\u91cd\u505a\u8bed\u4e49\u6807\u51c6\u7a0d\u6709\u4e0d\u517c\u5bb9\uff0c\u548c/\u6216\u5f88\u5c11\u6216\u6ca1\u6709\u81ea\u52a8\u5316\u6d4b\u8bd5\u3002\n\u5728\u64b0\u5199\u672c\u6587\u65f6\uff0c\u9664\u4e86Apenwarr/Redo(\u5373\u3002\u6b64\u9879\u76ee)\u6b63\u786e\u652f\u6301\u5e76\u884c\u6784\u5efa(redo-j)\u6216\u65e5\u5fd7\u7ebf\u6027\u5316(redo-log)\u3002\u5bf9\u4e8e\u5927\u578b\u9879\u76ee\uff0c\u5e76\u884c\u6784\u5efa\u901a\u5e38\u88ab\u8ba4\u4e3a\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002\n\u6b64\u7248\u672c\u7684Redo\u4e2d\u7684\u81ea\u52a8\u5316\u6d4b\u8bd5\u51e0\u4e4e(\u4f46\u4e0d\u5b8c\u5168)\u9002\u7528\u4e8e\u6d4b\u8bd5\u4efb\u4f55Redo\u5b9e\u73b0\u3002\u5982\u679c\u60a8\u786e\u5b9e\u5fc5\u987b\u7f16\u5199\u65b0\u7248\u672c\u7684\u91cd\u505a\uff0c\u6211\u4eec\u9080\u8bf7\u60a8\u9488\u5bf9\u73b0\u6709\u7684\u6d4b\u8bd5\u5957\u4ef6\u5bf9\u5176\u8fdb\u884c\u5f7b\u5e95\u6d4b\u8bd5\uff0c\u4ee5\u786e\u4fdd\u517c\u5bb9\u6027\u3002\u60a8\u8fd8\u53ef\u4ee5\u7a83\u53d6\u6211\u4eec\u7684\u6d4b\u8bd5(\u5f53\u7136\uff0c\u5e26\u6709\u5c5e\u6027)\uff0c\u5e76\u5c06\u5b83\u4eec\u5305\u542b\u5728\u60a8\u81ea\u5df1\u7684\u6e90\u5305\u4e2d\u3002\u6211\u4eec\u4e5f\u5e0c\u671b\u60a8\u5728\u53d1\u73b0\u9519\u8bef\u65f6\u63d0\u4f9b\u66f4\u591a\u7684\u81ea\u52a8\u5316\u6d4b\u8bd5\uff0c\u6216\u8005\u5982\u679c\u60a8\u53d1\u73b0\u6d4b\u8bd5\u610f\u5916\u5730\u4e0e\u5176\u4ed6\u91cd\u505a\u5b9e\u73b0\u4e0d\u517c\u5bb9(\u800c\u4e0d\u662f\u53d1\u73b0\u771f\u6b63\u7684\u9519\u8bef)\uff0c\u8bf7\u5c06\u8865\u4e01\u53d1\u9001\u7ed9\u6211\u4eec\u3002", "note_en": "redo is a competitor to the long-lived, but sadly imperfect,  makeprogram. Unlike other such competitors, redo captures the essentialsimplicity and flexibility of make, while avoiding its flaws. It manages todo this while being simultaneously simpler than make, more flexible thanmake, and more powerful than make, and without sacrificing performance - arare combination of features.\n The original design for redo comes from Daniel J. Bernstein (creator ofqmail and djbdns, among many other useful things). He posted someterse notes on his web site at one point (there is no date) with theunassuming title, &#34; Rebuilding target files when source files havechanged.&#34; Those notes are enough information tounderstand how the system is supposed to work; unfortunately there&#39;s no codeto go with it. I wrote this implementation of redo from scratch, based onthat design.\n After I found out about djb redo, I searched the Internet for any sign thatother people had discovered what I had: a hidden, unimplemented gem ofbrilliant code design. I found only one interesting link at the time: AlanGrosskurth, whose  Master&#39;s thesis at the University ofWaterloo was about top-downsoftware rebuilding, that is, djb redo. He wrote his own (admittedly slow)implementation in about 250 lines of shell script, which gives an idea forhow straightforward the system is. Since then, several otherimplementations have appeared (see list below).\n My implementation of redo is called  redo for the same reason that thereare 75 different versions of  make that are all called  make. It&#39;s somehoweasier that way.\n I also provide an extremely minimal pure-POSIX-sh implementation, called do, in the  minimal/ directory of this repository.\n   The theory behind redo sounds too good to be true: it can do everything make can do, but the implementation is vastly simpler, the syntax iscleaner, and you have even more flexibility without resorting to ugly hacks. Also, you get all the speed of non-recursive  make (only check dependenciesonce per run) combined with all the cleanliness of recursive  make (youdon&#39;t have code from one module stomping on code from another module).\n (Disclaimer: my current implementation is not as fast as  make for somethings, because it&#39;s written in python. Eventually I&#39;ll rewrite it an C andit&#39;ll be very, very fast.)\n The easiest way to show it is to jump into an example. Here&#39;s one forcompiling a C++ program.\n     Of course, you&#39;ll also have to create  a.c and  b.c, the C languagesource files that you want to build to create your application.\n               Did you catch the shell incantation in  default.o.do where it generatesthe autodependencies? The filename  default.o.do means &#34;run this script togenerate a .o file unless there&#39;s a more specific whatever.o.do script thatapplies.&#34;\n The key thing to understand about redo is that declaring a dependency is justanother shell command. The  redo-ifchange command means, &#34;build each of myarguments. If any of them or their dependencies ever change, then I need torun the  current script over again.&#34;\n Dependencies are tracked in a persistent  .redo database so that redo cancheck them later. If a file needs to be rebuilt, it re-executes the whatever.do script and regenerates the dependencies. If a file doesn&#39;tneed to be rebuilt, redo figures that out just using its persistent .redo database, without re-running the script. And it can do that checkjust once right at the start of your project build, which is really fast.\n Best of all, as you can see in  default.o.do, you can declare a dependency after building the program. In C, you get your best dependencyinformation by trying to actually build, since that&#39;s how you find out whichheaders you need. redo is based on this simple insight: you don&#39;tactually care what the dependencies are  before you build the target. Ifthe target doesn&#39;t exist, you obviously need to build it.\n Once you&#39;re building it anyway, the build script itself can calculate thedependency information however it wants; unlike in  make, you don&#39;t need aspecial dependency syntax at all. You can even declare some of yourdependencies after building, which makes C-style autodependencies muchsimpler.\n redo therefore is a unique combination of imperative and declarativeprogramming. The initial build is almost entirely imperative (running aseries of scripts). As part of that, the scripts declare dependencies a fewat a time, and redo assembles those into a larger data structure. Then, inthe future, it uses that pre-declared data structure to decide what workneeds to be redone.\n (GNU make supports putting some of your dependencies in include files, andauto-reloading those include files if they change. But this is veryconfusing - the program flow through a Makefile is hard to trace already,and even harder when it restarts from the beginning because an include filechanges at runtime. With redo, you can just read each build script from topto bottom. A  redo-ifchange call is like calling a function, which you canalso read from top to bottom.)\n  Some larger proprietary projects are using it, but unfortunately they can&#39;teasily be linked from this document. Here are a few open source examples:\n Liberation Circuit is a straightforward example of a C++ binary (a game) compiled with redo.\n WvStreams uses a more complex setup producing several binaries, libraries, and scripts. It shows how to produce output files in a different directory than the source files.\n WvBuild can cross-compile several dependencies, like openssl and zlib, and then builds WvStreams using those same libraries. It&#39;s a good example of redo/make interop and complex dependencies.\n There&#39;s an experimental  variant of Buildroot that uses redo in order to clean up its dependency logic.\n You can find some curated tutorial examples in the  cookbook, such as  git variable substitution and  text processing with LaTeX (including plot generation with R and ggplot2).\n If you switch your program&#39;s build process to use redo, please let us know andwe can link to it here for some free publicity.\n (Please don&#39;t use the integration testing code in the redo project&#39;s  t/directory as serious examples of how to use redo. Many of the tests aredoing things in intentionally psychotic ways in order to stress redo&#39;s codeand find bugs. On the other hand, if you&#39;re building your ownreimplementation of redo, using our test suite is a great idea.)\n  djb never released his version, so other people have implemented their ownvariants based on his  published specification.\n This version, sometimes called apenwarr/redo, is probably the most advancedone, including support for parallel builds, resilient timestamps and checksums, build log linearization, andhelpful debugging features. It&#39;s currently written in python for easierexperimentation, but the plan is to eventually migrate it to plain C. (Somepeople like to call this version &#34;python-redo&#34;, but I don&#39;t like that name. We shouldn&#39;t have to rename it when we later transliterate the code to C.)\n Here are some other redo variants (thanks to Nils Dagsson Moskopp forcollecting many of these links):\n Alan Grosskurth&#39;s  redo thesis and related sh implementation. (Arguably, this paper is the one that got all the rest of us started.)\n  apenwarr&#39;s  minimal/do is included with this copy of redo. It&#39;s also sh-based, but intended to be simple and failsafe, so it doesn&#39;t understand how to &#34;redo&#34; targets more than once.\n The original redo design is so simple and elegant that many individualshave beeninspired to (and able to) write their own version of it. In the honouredtradition of Unix&#39;s  make, they (almost) all just use the same name, redo. Unfortunately, many of theseimplementations are unmaintained, slightly incompatible with the &#34;standard&#34;redo semantics, and/or have few or no automated tests.\n At the time of this writing, none of them except apenwarr/redo (ie. thisproject) correctly support parallel builds ( redo -j) or log linearization( redo-log). For large projects, parallel builds are usually consideredessential.\n The  automated tests inthis version of redo are almost, but not quite, appropriate for testing anyredo implementation. If you really must write a new version of redo, weinvite you to thoroughly test it against the existing test suite to ensurecompatibility. You can also steal our tests (with attribution, of course)and include them in your own source package. We&#39;d also love it it youcontribute more automated tests when you find a bug, or send us patches ifyou find a test which is accidentally incompatible (as opposed to finding areal bug) with other redo implementations.", "posttime": "2020-07-19 11:17:46", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9012\u5f52,recursive,\u6784\u5efa", "title": "\u91cd\u505a\uff1a\u9012\u5f52\u7684\u901a\u7528\u6784\u5efa\u7cfb\u7edf", "title_en": "Redo: A recursive, general-purpose build system", "transed": 1, "url": "https://redo.readthedocs.io/en/latest/", "via": "", "real_tags": ["\u9012\u5f52", "recursive", "\u6784\u5efa"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1012828, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u524d\u51e0\u5929\uff0c\u5728\u5efa\u7acb\u4e00\u4e2a\u6211\u662f\u8d21\u732e\u8005\u7684\u79d1\u5b66\u9879\u76ee\u65f6\uff0c\u4f0a\u6717\u9677\u5165\u4e86\u4e24\u4e2a\u7cfb\u7edf\u5e93\u4e4b\u95f4\u4ee4\u4eba\u8ba8\u538c\u7684\u7248\u672c\u51b2\u7a81\u3002\u4e00\u6012\u4e4b\u4e0b\uff0c\u6211\u51b3\u5b9a\u5145\u5206\u4e86\u89e3NIX\uff0c\u4ee5\u4fbf\u80fd\u591f\u5efa\u7acb\u4e00\u4e2a\u53ef\u91cd\u73b0\u7684\u3001\u4e25\u683c\u63a7\u5236\u7684\u672c\u5730\u6784\u5efa\u3002\u73b0\u5728\u5df2\u7ecf\u5b8c\u6210\u4e86\uff0c\u603b\u7684\u6765\u8bf4\uff0c\u6211\u5bf9\u5de5\u5177\u548c\u8bbe\u7f6e\u975e\u5e38\u6ee1\u610f\u3002\u6211\u6b63\u5728\u4f7f\u7528direnv\u5c06\u6211\u7684\u666e\u901ashell\u4e0eNix\u7684nix-shell\u7279\u6027\u7d27\u5bc6\u96c6\u6210\u5728\u4e00\u8d77\uff0c\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u611f\u89c9\u4e00\u5207\u90fd\u662f\u65e0\u7f1d\u7684\u3002\u770b\u5230cmake\u62a5\u544a\u8bf4\u5b83\u53d1\u73b0\u4e86\u8fc7\u591a\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u548c\u5e93\uff0c\u5185\u5bb9\u7ecf\u8fc7\u6563\u5217\u5e76\u6574\u9f50\u5730\u5b89\u88c5\u5728/nix/store\u4e0b\u7684\u5c0f\u884c\u4e2d\uff0c\u8fd9\u8ba9\u4eba\u975e\u5e38\u8033\u76ee\u4e00\u65b0\u3002\n\u6211\u4f7f\u7528NIX\u6765\u7ba1\u7406\u6211\u7684\u5f00\u53d1\u73af\u5883\uff0c\u4f46\u4e0d\u662f\u7528\u6765\u6784\u5efa\u9879\u76ee\u672c\u8eab\u3002NIX\u786e\u4fdd\u9879\u76ee\u4f9d\u8d56\u9879\u5df2\u5b89\u88c5\u5e76\u4e14\u53ef\u7531\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u53d1\u73b0\u3002\u6784\u5efa\u9879\u76ee\u662f\u4f7f\u7528CMake\u5b8c\u6210\u7684\uff0cCMake\u662f\u4e3acmake\u8bbe\u7f6e\u7684\uff0c\u7528\u4e8e\u67e5\u627enix\u5b89\u88c5\u7684\u5e93\u3002NIX\u901a\u8fc7\u7528\u81ea\u5df1\u7684shell\u811a\u672c\u5305\u88c5C\u7f16\u8bd1\u5668\u5e76\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u6ce8\u5165\u5e93\u548c\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u8def\u5f84\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\u9664\u4e86\u58f0\u660e\u60a8\u60f3\u8981\u7684\u5305\u662fbuildInput\u4e4b\u5916\uff0c\u8981\u4f7fcmake\u6b63\u5e38\u5de5\u4f5c\u51e0\u4e4e\u6ca1\u6709\u4ec0\u4e48\u53ef\u505a\u7684\u3002\u6211\u7684shell.nix\u6587\u4ef6\u7684\u7b2c\u4e00\u4e2a\u7248\u672c\u5982\u4e0b\u6240\u793a\uff1a\n#file shell.nix{pkgs\uff1f\u5bfc\u5165&lt\uff1bnixpkgs&gt\uff1b{}}\uff1a\u5305\u3002MkShell{buildInput=with pkgs\uff1b[cmake(callPackage nix/petsc.nix{})Metis hdf5 openmpi(python38.\u3002With Packages(Packages\uff1a[Packages.\u3002Numpy]))]]\uff1b}\u3002\n\u4f7f\u7528\u6b64\u8bbe\u7f6e\uff0c\u6211\u5728\u6784\u5efa\u9879\u76ee\u65f6\u51e0\u4e4e\u6ca1\u6709\u9047\u5230\u4ec0\u4e48\u95ee\u9898\u3002\u6211\u5fc5\u987b\u8986\u76d6\u9ed8\u8ba4\u7684PETSc\u6d3e\u751f\uff0c\u624d\u80fd\u4f7f\u7528METIS\u548cOpenMPIsupport\u8fdb\u884c\u7f16\u8bd1\uff0c\u8fd9\u5e76\u4e0d\u592a\u96be\uff1a\n#file nix/petsc.nix{petsc\uff0cblas\uff0cgfortran\uff0clapack\uff0cpython\uff0cmetis\uff0copenmpi}\uff1apetsc\u3002OverrideAttrs(oldAttrs\uff1arec{nativeBuildInput=[blas gfortran gfortran.\u3002CC.\u3002Lib lapack python openmpi Metis]\uff1bpreconfigure=&#39\uff1b&#39\uff1bexport fc=&#34\uff1b${gfortran}/bin/gfortran&#34\uff1bf77=&#34\uff1b${gfortran}/bin/gfortran&#34\uff1bpatchShebangs\u3002ConfigureFlagsArray=($configureFlagsArray&#34\uff1b--with-mpi-dir=${openmpi}&#34\uff1b&#34\uff1b--with-metis=${metis}&#34\uff1b&#34\uff1b--with-blas-lib=[${blas}/lib/libblas.so\uff0c${gfortran\u3002CC.\u3002Lib}/lib/libgfortran.a]&#34\uff1b&#34\uff1b--with-lapack-lib=[${lapack}/lib/liblapack.so\uff0c${gfortran\u3002CC.\u3002Lib}/lib/libgfortran.a]&#34\uff1b)&#39\uff1b&#39\uff1b})\u3002\n\u6b64Nix\u6587\u4ef6\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5728shell.nix\u4e2d\u4f7f\u7528callPackage\u51fd\u6570\u8c03\u7528\u3002Petsc.overrideAttrs\u662f\u8986\u76d6\u4f7f\u7528stdenv.mkDerivation\u521b\u5efa\u7684\u6d3e\u751f\u5c5e\u6027\u7684\u4e00\u79cd\u5de7\u5999\u65b9\u5f0f\u3002\u6784\u5efa\u5177\u6709MPI\u548cMETIS\u652f\u6301\u7684PETSc\u592a\u7b80\u5355\u4e86\uff0c\u53ea\u9700\u5c06\u4e00\u7ec4\u4e0d\u540c\u7684\u53c2\u6570\u4f20\u9012\u7ed9\u914d\u7f6e\u811a\u672c\u5373\u53ef\u3002\n\u5f04\u6e05\u695a\u600e\u4e48\u505a\u8fd9\u4e00\u5207\u662f\u5f88\u6709\u8da3\u7684\u3002\u6211\u4e3b\u8981\u6307\u7684\u662fNIX\u201c\u836f\u4e38\u201d\uff0c\u8fd9\u662f\u901a\u8fc7NIX\u5de5\u5177\u548c\u8bed\u8a00\u53d6\u5f97\u7684\u5de8\u5927\u8fdb\u6b65\u3002\n\u4f7f\u7528\u8fd9\u4e9bNix\u6587\u4ef6\uff0c\u6211\u53ef\u4ee5\u6267\u884ccmake..\u3002&amp\uff1b&amp\uff1b\u5236\u4f5c\u6210\u529f\u3002\u8ba9\u9879\u76ee\u5f00\u59cb\u8fd0\u884c\u5219\u662f\u53e6\u4e00\u56de\u4e8b\u3002\u6700\u7ec8\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u7acb\u5373\u5931\u8d25\uff0c\u5e76\u51fa\u73b0\u52a8\u6001\u52a0\u8f7d\u9519\u8bef\uff1a\n\u8be5\u4e8c\u8fdb\u5236\u6587\u4ef6\u8bd5\u56fe\u4eceNix\u5728\u6784\u5efaPETSC\u8fc7\u7a0b\u4e2d\u521b\u5efa\u7684\u4e00\u4e2a\u4e34\u65f6\u76ee\u5f55\u52a0\u8f7d\u52a8\u6001\u5e93\u3002\u5f53\u7136\u8fd9\u5931\u8d25\u4e86\uff1a\u5f53\u6211\u8c03\u7528bin/warpxm\u65f6\uff0c\u8be5\u76ee\u5f55\u5df2\u7ecf\u88ab\u6e05\u7406\u5e72\u51c0\u4e86\u3002\u4e8c\u8fdb\u5236\u6587\u4ef6\u5e94\u8be5\u94fe\u63a5\u5230nix\u5b58\u50a8\u4e2d/nix/store\u4e0b\u7684petsc\u6d3e\u751f\u7ed3\u679c\uff0c\u800c\u4e0d\u662f/private/tmp\u4e0b\u7684\u6587\u4ef6\u3002\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0c\u4f3c\u4e4e\u6709\u4e00\u4e2a\u73af\u5883\u53d8\u91cf\u88ab\u9519\u8bef\u5730\u8bbe\u7f6e\u5230\u4e86\u8fd9\u4e2aintermediatedirectory\u4e2d\u3002\u8981\u60f3\u5f04\u6e05\u695a\u5728\u54ea\u91cc\uff0c\u6211\u5fc5\u987b\u5b66\u4e60\u66f4\u591a\u5173\u4e8e\u5728OSX\u4e0a\u94fe\u63a5\u7684\u77e5\u8bc6\uff0c\u8fd9\u6bd4\u6211\u9884\u671f\u7684\u8981\u591a\u5f97\u591a\u3002\n\u9996\u5148\uff0c\u6211\u68c0\u67e5\u4e86Nix\u7684\u7f16\u8bd1\u5668\u5305\u88c5\u5668\u63d2\u5165\u7684\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u6807\u5fd7\u3002\u5b83\u4eec\u901a\u8fc7NIX_CFLAGS_COMPILE\u548cNIX_LDFLAGS\u4f20\u5165\u3002\u5f53\u60a8\u4f7f\u7528nix-shell\u548cdirenv\u65f6\uff0c\u6d3e\u751f\u7684\u6240\u6709\u73af\u5883\u53d8\u91cf\u90fd\u4f1a\u6ce8\u5165\u5230shell\u4e2d\u3002\u8fd9\u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u95ee\u9898\uff0c\u5c31\u662f\u628a\u5b83\u4eec\u547c\u5e94\u51fa\u6765\uff1a\n\u8fd9\u4e9b\u770b\u8d77\u6765\u4e0d\u9519\uff01\u5728\u8fd9\u4e2ashell\u4e2d\u8c03\u7528cmake\u548cmake\u5e94\u8be5\u4f1a\u62c9\u5165\u6b63\u786e\u7684\u5e93\u3002\n\u7136\u540e\u6211\u8bb0\u8d77\u8fd9\u4e2a\u9879\u76ee\u4f7f\u7528pkg-config\u6765\u67e5\u627e\u5e76\u5c06\u94fe\u63a5\u5e93\u653e\u5728\u4e00\u8d77\u3002\u5766\u7387\u5730\u8bf4\uff0c\u6211\u4e0d\u592a\u7406\u89e3pkg-config\uff0c\u4f46\u6211\u77e5\u9053\u5728\u8fd9\u4e2a\u9879\u76ee\u4e2d\uff0c\u5b83\u662f\u4ececmake\u5185\u90e8\u8c03\u7528\u7684\u3002\u5b83\u6839\u636e\u81ea\u5df1\u7684\u89c4\u5219\u641c\u7d22\u5e93\uff0c\u5e76\u5728Nix\u5b8c\u6210\u8bbe\u7f6e\u6240\u6709\u5185\u5bb9\u7684\u5de5\u4f5c\u540e\u8fd0\u884c\u3002\u56e0\u6b64\uff0c\u5b83\u7ed5\u8fc7\u4e86\u6211\u4eec\u521a\u624d\u68c0\u67e5\u7684\u7f16\u8bd1\u5668\u548clinkerflag\u3002\n\u5728\u8bbe\u7f6e\u8fd9\u4e2aNix\u73af\u5883\u4e4b\u524d\uff0c\u6211\u78b0\u5de7\u5b89\u88c5\u4e86pkg-config\u3002\u56e0\u6b64\uff0ccmake\u80fd\u591f\u4ece\u6211\u7684\u7528\u6237\u8def\u5f84\u8c03\u7528\u7cfb\u7edfpkg-config\u3002\u4e5f\u8bb8\u7cfb\u7edf\u7248\u672c\u7684pkg-config\u4e0d\u77e5\u4f55\u6545\u627e\u5230\u4e86\u9519\u8bef\u7684\u5e93\uff1f\u5b9e\u9645\u4e0a\uff0cecho$PKG_CONFIG_PATH\u786e\u8ba4\u5b83\u6b63\u5728\u641c\u7d22\u6211\u7684$HOME\u4e0b\u7684\u4e00\u4e2a\u76ee\u5f55\u3002\u6211\u8ba4\u4e3a\u5f53\u6211\u5411Nix\u6d3e\u751f\u6dfb\u52a0\u4f9d\u8d56\u9879\u65f6\uff0c\u53ef\u80fd\u6709\u4e00\u4e9b\u95ee\u9898\u4ea4\u53c9\u4e86\uff0c\u4e00\u6b21\u4e00\u4e2a\uff1a\u9002\u5f53\u914d\u7f6epkg-config\u53ef\u80fd\u4f1a\u6709\u6240\u5e2e\u52a9\u3002\n\u4e00\u79cd\u666e\u904d\u7684\u770b\u6cd5\u662f\uff0c\u901a\u8fc7\u4f20\u9012--pury\u6807\u5fd7\uff0c\u53ef\u4ee5\u5c06nix-shell\u4e0e\u7528\u6237\u5b89\u88c5\u7684\u5185\u5bb9\u9694\u79bb\u5f00\u6765\u3002\u8fd9\u662f\u4e0d\u5bf9\u7684\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5b83\u4fdd\u6301\u4e86\u7528\u6237\u7684\u6574\u4e2a\u8def\u5f84\u3002\u6211\u5df2\u7ecf\u63d0\u4ea4\u4e86\u4e00\u5f20\u7f5a\u5355\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u7136\u800c\uff0c\u5728\u66f4\u591a\u5730\u4f7f\u7528nix-shell\u4e4b\u540e\uff0c\u6211\u76f8\u4fe1\u5373\u4f7f\u6ca1\u6709\u5bf9\u5f00\u53d1\u73af\u5883\u8fdb\u884c\u70ed\u9694\u79bb\uff0c\u5b83\u4e5f\u662f\u4e00\u4e2a\u8d85\u7ea7\u6709\u7528\u7684\u5de5\u5177\u3002\n\u6211\u518d\u6b21\u53c2\u8003\u4e86\u5173\u4e8eC\u9879\u76ee\u7684Nix wiki\u9875\u9762\uff0c\u5176\u4e2d\u4e5f\u6709\u5173\u4e8e\u4f7f\u7528pkg-config\u7684\u5185\u5bb9\u3002\u5c06pkg-config\u6d3e\u751f\u4f5c\u4e3anativeBuildInput\u5305\u542b\u4f3c\u4e4e\u4f1a\u8ba9petsc\u8fd9\u6837\u7684\u5305\u5c06\u5b83\u4eec\u7684iroutput\u8def\u5f84\u9644\u52a0\u5230PKG_CONFIG_PATH\u73af\u5883\u53d8\u91cf\u3002\u6211\u8fd9\u6837\u505a\u4e86\uff1a\n\u4e00\u5305\u3002MkShell{buildInput=with pkgs\uff1b[...]\uff1bnativeBuildInput=with pkgs\uff1b[pkg-config]\uff1b}\n\u4f46\u8fd9\u5e76\u6ca1\u6709\u89e3\u51b3\u95ee\u9898\u3002\u6211\u5c06\u4e0d\u5f97\u4e0d\u66f4\u6df1\u5165\u5730\u8ffd\u67e5\u574f\u5e93\u662f\u5728\u54ea\u91cc\u88ab\u62c9\u8fdb\u6765\u7684\u3002\n\u6df1\u5165\u7814\u7a76cmake\u6587\u6863\u548c\u9879\u76ee\u7684.cmake\u6587\u4ef6\u540e\uff0c\u6211\u63d2\u5165\u4e86\u4e09\u6761\u6253\u5370\u8bed\u53e5\uff1a\nFIND_PACKAGE(\u9700\u8981PkgConfig)pkg_CHECK_MODULES(PETSC PETSC REQUIRED)link_directories(${PETSC_LIBRARY_DIRS})+MESSAGE(&#34\uff1bPETSC\u5e93\uff1a${PETSC_LIBRARY}&#34\uff1b)+MESSAGE(&#34\uff1bPETS\u5e93\u76ee\u5f55\uff1a${PETSC_LIBRARY_DIRS}&#34\uff1b)+MESSAGE(&#34\uff1bPETSC\u94fe\u63a5\u5e93\uff1a${PETSC_LINK_LIBRARS}&#34\uff1b)\u5217\u8868(\u8ffd\u52a0WARPXM_LINK\u3002\n\u7b2c\u4e8c\u4e2a\u770b\u8d77\u6765\u4e0d\u9519\u3002\u4f46\u662f\u7b2c\u4e00\u4e2a\uff0c\u4ec5\u4ec5\u662f\u5e93\u7684\u540d\u5b57petsc\uff0c\u4e3a\u4e86\u8212\u9002\uff0c\u6709\u70b9\u592a\u542b\u84c4\u4e86\u3002\u6b63\u662f\u8fd9\u4e2a\u53d8\u91cf\u88ab\u9644\u52a0\u5230\u94fe\u63a5\u76ee\u6807\u5217\u8868\u4e2d\u3002\u5728\u7f16\u8bd1\u65f6\uff0c\u5c06\u7531\u94fe\u63a5\u5668\u6765\u67e5\u627e\u5e93petsc\uff0c\u800c\u6211\u4e0d\u786e\u5b9a\u5b83\u4f1a\u663e\u793a\u5728\u54ea\u91cc\u3002\u4f7f\u7528.dylib\u7684\u7edd\u5bf9\u8def\u5f84\u66f4\u5b89\u5168\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u6211\u5728\u8fd9\u91cc\u7684\u60f3\u6cd5\u662f\u9519\u8bef\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u94fe\u63a5\u5668\u5c06\u5728\u7f16\u8bd1\u65f6\u67e5\u770b\u7684\u4f4d\u7f6e\uff1a\u5728NIX_LDFLAGS\u4e2d\u5217\u51fa\u7684\u8def\u5f84\u4e2d\uff01\u6211\u6ca1\u6709\u6e05\u695a\u5730\u8003\u8651\u5230\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u7684\u6570\u636e\u6d41\u3002\n\u5c06\u94fe\u63a5\u76ee\u6807\u66f4\u6539\u4e3a\u7edd\u5bf9\u8def\u5f84\u4ec5\u5728\u4e0b\u4e00\u6b21cmake\u671f\u95f4\u7f13\u89e3\u4e86\u6211\u7684\u7591\u8651\u3002&amp\uff1b&amp\uff1b\u751f\u6210\u5faa\u73af\u3002\u5f53\u7136\uff0c\u94fe\u63a5\u5668\u73b0\u5728\u4e0d\u53ef\u80fd\u641e\u7838\u4e86\u3002\u4e0d\u6d89\u53ca\u795e\u79d8\u7684\u56fe\u4e66\u9986\u641c\u7d22\uff0c\u53ea\u6709\u4e00\u6761\u7edd\u5bf9\u8def\u5f84\uff0c\u8fd9\u4e0d\u53ef\u80fd\u88ab\u8bef\u89e3\u2026\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u5b8c\u5168\u88ab\u641e\u7cca\u6d82\u4e86\u3002\u6bcf\u6b21\u5c1d\u8bd5\u4fee\u590d\u65f6\uff0cigrep\u90fd\u4f1a\u5f92\u52b3\u5730\u5728build\u76ee\u5f55\u4e2d\u67e5\u627e\u6709\u95ee\u9898\u7684/private/tmp\u8def\u5f84\uff0c\u7136\u540e\u7a7a\u624b\u800c\u5f52\u3002\u6211\u8ddf\u8e2a\u4e86\u4f20\u9012\u7ed9\u7f16\u8bd1\u5668\u7684\u6700\u7ec8\u7684\u3001\u4e0d\u53ef\u64a4\u9500\u7684\u94fe\u63a5\u9009\u9879\uff0c\u8fd9\u4e9b\u9009\u9879\u9690\u85cf\u5728\u6784\u5efa\u6811\u4e2d\u7684link.txt\u6587\u4ef6\u4e2d\u3002\u5b83\u4eec\u65e0\u53ef\u4e89\u8bae\u5730\u8868\u660e\u6211\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u94fe\u63a5\u5230\u4e86\u6b63\u786e\u7684\u5e93\uff1a\n\u6211\u51e0\u4e4e\u4ee4\u6211\u6ee1\u610f\u5730\u8bc1\u660e\uff0cCMake\u7528\u8fd9\u4e2a\u5e93\u505a\u4e86\u6b63\u786e\u7684\u4e8b\u60c5\uff0c\u6211\u5b8c\u5168\u5931\u53bb\u4e86\u60f3\u6cd5\u3002\u6700\u540e\uff0c\u4e00\u4e2a\u975e\u5e38\u5e78\u8fd0\u7684\u8c37\u6b4c\u641c\u7d22\u5c06\u6211\u5e26\u5230\u4e86NIX\u624b\u518c\u4e2d\u63cf\u8ff0\u8fbe\u5c14\u6587(MacOS)\u5e73\u53f0\u7279\u5b9a\u95ee\u9898\u7684\u90e8\u5206\u3002\u5b83\u58f0\u660e\uff1a\n\u5728Darwin\u4e0a\uff0c\u5e93\u4f7f\u7528\u7edd\u5bf9\u8def\u5f84\u8fdb\u884c\u94fe\u63a5\uff0c\u5e93\u5728\u94fe\u63a5\u65f6\u901a\u8fc7\u5176\u5b89\u88c5\u540d\u79f0\u8fdb\u884c\u89e3\u6790\u3002\u6709\u65f6\uff0c\u5305\u4e0d\u80fd\u6b63\u786e\u8bbe\u7f6e\u8fd9\u4e00\u70b9\uff0c\u5bfc\u81f4\u5e93\u67e5\u627e\u5728\u8fd0\u884c\u65f6\u5931\u8d25\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u989d\u5916\u7684\u94fe\u63a5\u5668\u6807\u5fd7\u6216\u5728\u4fee\u590d\u9636\u6bb5\u8fd0\u884cinstall_name_tool-id\u6765\u4fee\u590d\u3002\n\u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u5b9e\u4e8b\u6c42\u662f\u7684\u8868\u8fbe\u65b9\u5f0f\uff0c\u5f53\u6211\u7406\u89e3\u5b83\u65f6\uff0c\u5b83\u8ba9\u6211\u5927\u5403\u4e00\u60ca\u3002\u636e\u6211\u6240\u77e5\uff0c\u4ee5\u4e0b\u662fMacOS\u4e0a\u53d1\u751f\u7684\u4e8b\u60c5\uff1a\n\u6211\u7684\u6e90\u4ee3\u7801\u6709\u4e00\u4e2ainclude\u6307\u4ee4\uff0cinclude&lt\uff1bpetsc.h&gt\uff1b\u6216\u7c7b\u4f3c\u7684\u6307\u4ee4\uff0c\u5b83\u521b\u5efa\u4e00\u4e2a\u7531\u94fe\u63a5\u5668\u6ee1\u8db3\u7684\u4e8c\u8fdb\u5236\u63a5\u53e3\u3002\n\u5728\u94fe\u63a5\u65f6\uff0c\u6211\u4eec\u5c06\u7edd\u5bf9\u8def\u5f84\u5217\u8868\u4f20\u9012\u7ed9\u5e93\uff0c\u94fe\u63a5\u5668\u67e5\u627e\u4e0e\u63a5\u53e3\u5339\u914d\u7684\u8def\u5f84\u3002\n\u7136\u540e\uff0c\u94fe\u63a5\u5668\u4fdd\u5b58\u5b83\u5728\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u52a0\u8f7d\u90e8\u5206\u4e2d\u627e\u5230\u7684\u5e93\u7684install_name\u3002\n\u5728\u8fd0\u884c\u65f6\uff0c\u4e8c\u8fdb\u5236\u6587\u4ef6(\u5b9e\u9645\u4e0a\u662fMacOS DYLD\u7cfb\u7edf)\u52a0\u8f7d\u5e93\u3002\n\u6211\u80af\u5b9a\u5728\u8fd9\u4ef6\u4e8b\u4e0a\u6709\u4e9b\u5730\u65b9\u5f04\u9519\u4e86\uff0c\u6240\u4ee5\u5982\u679c\u80fd\u542c\u5230\u6bd4\u6211\u66f4\u4e86\u89e3\u8fd9\u4ef6\u4e8b\u7684\u4eba\u7684\u610f\u89c1\uff0c\u6211\u4f1a\u975e\u5e38\u611f\u6fc0\u7684\uff01\n\u65e0\u8bba\u5982\u4f55\uff0c\u8fd9\u4e2a\u53d1\u73b0\u8ba9\u6211\u60f3\u5230\u4e86install_name\u7684\u6982\u5ff5\uff0c\u6240\u4ee5\u6211\u6709\u4e86\u4e00\u4e9b\u4e1c\u897f\u53ef\u4ee5\u7ee7\u7eed\u3002\u66f4\u591a\u7684\u641c\u7d22\u5bfc\u81f4\u4e86\u4e00\u7bc7\u6709\u7528\u7684\u535a\u5ba2\u6587\u7ae0\uff0c\u51c6\u786e\u5730\u63cf\u8ff0\u4e86\u6211\u9762\u4e34\u7684\u95ee\u9898\u3002\u8fd8\u4ecb\u7ecd\u4e86\u5982\u4f55\u68c0\u67e5\u5e93\u7684INSTALL_NAME\uff1a\nNIX\u624b\u518c\u6307\u51fa\u201c\u6709\u4e9b\u8f6f\u4ef6\u5305\u65e0\u6cd5\u6b63\u786e\u8bbe\u7f6e\u201d\uff0c\u5e76\u6307\u5411\u4fee\u590d\u7a0b\u5e8f\uff0c\u5373\u4f7f\u7528install_name_tool\u66f4\u6539\u5df2\u6784\u5efa\u5e93\u7684install_name\u3002Nixpkgs\u4e0a\u7684PETSC\u6d3e\u751f\u662f\u5426\u6b63\u786e\u6267\u884c\u6b64\u64cd\u4f5c\uff1f\u6211\u770b\u5230\u5b83\u6b63\u5728\u4f7f\u7528install_name_tool\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\uff1a\nPrePatch=&#39\uff1b&#39\uff1bsubstituteInPlace\u914d\u7f6e\\--\u66ff\u6362/bin/sh/usr/bin/python&#39\uff1b&#39\uff1b+stdenv\u3002\u5229\u5e03\u3002OptionalString stdenv.\u3002IsDarwin\uff1b\u66ff\u6362InPlace\u914d\u7f6e/install.py\\--\u66ff\u6362/usr/bin/install_name_tool install_name_tool&#39\uff1b&#39\uff1b\uff1b\n\u6b64\u6307\u4ee4\u4ec5\u7528install_name_tool\u66ff\u6362\u5b57\u7b26\u4e32/usr/bin/install_name_tool\u7684\u5916\u89c2\u3002Nix\u5305\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\u4e3a\u4e86\u786e\u4fdd\u6784\u5efa\u4f9d\u8d56\u4e8eNix\u6784\u5efa\u7684\u5de5\u5177\uff0c\u8fd9\u4e9b\u5de5\u5177\u5728\u6784\u5efashell\u7684\u8def\u5f84\u4e2d\u63d0\u4f9b\uff0c\u800c\u4e0d\u662f\u4f9d\u8d56\u4e8e\u7cfb\u7edf\u76ee\u5f55(\u5982/usr/bin)\u4e2d\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\n\u5f15\u5165\u6b64\u66ff\u6362\u7684PR\u8868\u660e\u5b83\u4fee\u590d\u4e86Darwin\u4e0a\u7684\u6784\u5efa\uff0c\u56e0\u6b64\u5728PETSc\u4e2d\u5fc5\u987b\u8c03\u7528/usr/bin/install_name_tool\u3002\u5728PETSCrepo\u4e2d\u641c\u7d22\u5b83\u4f1a\u5bfc\u81f4\u4e0b\u9762\u8fd9\u4e00\u884c\uff0c\u8be5\u884c\u6267\u884c\u7684\u6b63\u662fMark\u65e5\u5fd7\u5728install_name\u4e0a\u53d1\u5e03\u7684\u6307\u4ee4\uff1a\u5b83\u4f7f\u7528install_name_tool-id\u5c06install_name\u66f4\u6539\u4e3a\u5e93\u5728\u5176\u5b89\u88c5\u76ee\u5f55\u4e2d\u7684\u7edd\u5bf9\u8def\u5f84\u3002\n\u5982\u679c\u662fos\u7684\u8bdd\u3002\u5c0f\u5f84\u3002Splitext(Dst)[1]=.dylib\uff1b\u548cos\u3002\u5c0f\u5f84\u3002Isfile(&#39\uff1b/usr/bin/install_name_tool&#39\uff1b)\uff1a[output\uff0cerr\uff0cflg]=self\u3002EcuteShellCommand(&#34\uff1botool-D&#34\uff1b+src)oldname=output[Output.\u3002\u67e5\u627e(&#34\uff1b\\n&#34\uff1b)+1\uff1a]installName=oldname\u3002\u66ff\u6362(\u64cd\u4f5c\u7cfb\u7edf\u3002\u5c0f\u5f84\u3002Realpath(\u81ea\u6211\u3002ArchDir)\uff0c\u8d5b\u5c14\u592b\u3002InstallDir)Self\u3002EcuteShellCommand(&#39\uff1b/usr/bin/install_name_tool-id&#39\uff1b+installName+&#39\uff1b&#39\uff1b&#39\uff1b+dst)\u3002\n\u6839\u636e\u8fd9\u4e00\u70b9\uff0c\u5728\u6784\u5efa\u5e93\u65f6\uff0c\u5e93\u7684install_name\u5e94\u8be5\u5df2\u7ecf\u7531PETSc\u4fee\u590d\u4e86\uff01\u9664\u2026\u5916\u3002\u6ce8\u610f\u5230\u4ec0\u4e48\u4e86\u5417\uff1fIF\u8bed\u53e5\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u3002\u5728PETSc\u6d3e\u751f\u8fd0\u884c\u5176prePatchstep\u4e4b\u540e\uff0c\u8be5\u6761\u4ef6\u5c06\u53d8\u4e3a\u548cos.path.isfile(&#39\uff1binstall_name_tool&#39\uff1b)\u3002\u8fd9\u80af\u5b9a\u4f1a\u5931\u8d25\uff1ainstall_name_tool\u4e0d\u4f1a\u662f\u8fd0\u884cconfigure\u7684\u76ee\u5f55\u4e2d\u7684\u4e00\u4e2a\u6587\u4ef6\uff01\u6253\u8865\u4e01\u7684\u914d\u7f6e\u811a\u672c\u5c06\u9759\u9ed8\u8df3\u8fc7\u6b64\u6b65\u9aa4\uff0c\u5c06\u5e93\u7684INSTALL_NAME\u4fdd\u7559\u4e3a\u6784\u5efa\u5b83\u7684TEMPORARY\u76ee\u5f55\uff01\n\u5e78\u8fd0\u7684\u662f\uff0c\u8fd9\u4e2a\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u5e76\u4e0d\u592a\u96be\u3002\u6211\u4eec\u5e94\u8be5\u5c06\u7edd\u5bf9\u8def\u5f84\u4f20\u9012\u7ed9\u6211\u4eec\u60f3\u8981\u8fd0\u884c\u7684\u7a0b\u5e8f\uff0c\u800c\u4e0d\u662f\u8def\u5f84\u4e0a\u7684\u7a0b\u5e8f\u540d\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u8986\u76d6PrePatch\u6b65\u9aa4\u6765\u5b8c\u6210\uff0c\u5982\u4e0b\u6240\u793a\uff1a\nPrePatch=&#39\uff1b&#39\uff1bsubstituteInPlace\u914d\u7f6e\\--\u66ff\u6362/bin/sh/usr/bin/python&#39\uff1b&#39\uff1b+stdenv\u3002\u5229\u5e03\u3002OptionalString stdenv.\u3002IsDarwin&#39\uff1b&#39\uff1bsubstituteInPlace config/install.py\\--\u66ff\u6362/usr/bin/install_name_tool${Darwin\u3002Cctools}/bin/install_name_tool&#39\uff1b&#39\uff1b\uff1b\nNIX\u53d8\u91cf${darwin.cctools}\u5c06\u5c55\u5f00\u5230\u6784\u5efa\u7684darwin.cctools\u6d3e\u751f\u7684\u5b8c\u6574\u8def\u5f84\uff0c\u5373/nix/store\u4e0b\u7684\u76ee\u5f55\u3002\u56e0\u6b64\uff0cPETSc\u7684configure.py\u5185\u7684\u6253\u8865\u4e01\u7684if\u8bed\u53e5\u53d8\u4e3a\u3002\n\u5e76\u4e14\u7ed3\u679c\u5e93\u7684INSTALL_NAME\u5c06\u662f\u6b63\u786e\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528otool-D\u518d\u6b21\u68c0\u67e5\uff1a\n\u770b\u8d77\u6765\u597d\u591a\u4e86\uff01\u7531\u4e8e\u9519\u8bef\u4f4d\u4e8e\u52a8\u6001\u52a0\u8f7d\u7684\u5e93\u4e2d\uff0c\u6211\u4eec\u751a\u81f3\u4e0d\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u5c31\u53ef\u4ee5\u68c0\u67e5\u5b83\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\uff1a\n\u4e3b\u6784\u5efaGIT\uff1a(\u279c)Build dyld_\u2717_library=1 bin/warpxmdyld\uff1a\u5df2\u52a0\u8f7d\uff1a/Users/jack/src/warpxm/build/bin/warpxmdyld\uff1a\u5df2\u52a0\u8f7d\uff1a/nix/store/z4f1bq363m0ydmbyncfi2srij8vlsx32-Libsystem-osx-10.12.6/lib/libSystem.B.dylibdyld\uff1a\u5df2\u52a0\u8f7d\uff1a/\u3002Nix/store/w23r8kplmfx2xc111cpvmdjwmkwy6ip3-petsc-3.13.2/lib/libpetsc.3.13.dylib...\u3002\n\u6211\u82b1\u4e86\u5927\u90e8\u5206\u65f6\u95f4\u8c03\u8bd5\u8fd9\u4e2a\u95ee\u9898\uff0c\u800c\u6ca1\u6709\u5bf9\u4e0d\u540c\u7684\u6784\u5efa\u9636\u6bb5\u6709\u6240\u4e86\u89e3\u3002\u6211\u5e94\u8be5\u5f88\u6e05\u695a\uff0ccmake\u548cpkg-config\u8bbe\u7f6e\u90fd\u4e0d\u53ef\u80fd\u662f\u539f\u56e0\uff0c\u56e0\u4e3a\u5728\u6211\u8c03\u7528cmake\u65f6\uff0c\u6709\u95ee\u9898\u7684/private/tmp\u76ee\u5f55\u65e9\u5c31\u6d88\u5931\u4e86\u3002\u5982\u679c\u6211\u53ea\u5173\u6ce8NIX\u63d0\u4f9b\u7684PETScDeriation\uff0c\u6211\u53ef\u80fd\u4f1a\u66f4\u65e9\u5730\u5173\u6ce8install_name_toolpatch\u3002\u5728\u8fd9\u8fc7\u7a0b\u4e2d\uff0c\u6211\u5f88\u5e78\u8fd0\u5730\u5728Nix\u624b\u518c\u4e2d\u627e\u5230\u4e86\u5173\u4e8e\u8fbe\u5c14\u6587\u7279\u6709\u7684\u94fe\u63a5\u5668\u95ee\u9898\u7684\u6ce8\u91ca\u3002\n\u81f3\u4e8eNix\uff0c\u6211\u7edd\u5bf9\u4f1a\u66f4\u591a\u5730\u4f7f\u7528\u5b83\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5b83\u80fd\u4ea7\u751f\u7684\u5f71\u54cd\u662f\u5982\u6b64\u4e4b\u5c0f\u3002\u6211\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u7ba1\u7406\u8fd9\u4e2a\u9879\u76ee\u7684\u73af\u5883\uff0c\u800c\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u7ba1\u7406\u4ed6\u4eec\u73af\u5883\u7684\u65b9\u5f0f\u3002\u5f53\u7136\uff0c\u5982\u679c\u4ed6\u4eec\u95ee\u8d77\uff0c\u6211\u4f1a\u5efa\u8bae\u4ed6\u4eec\u8bd5\u8bd5Nix\uff0c\u4f46\u6bcf\u4e2a\u4eba\u90fd\u80fd\u5728\u81ea\u5df1\u7684\u65f6\u95f4\u505a\u8fd9\u4ef6\u4e8b\u662f\u5f88\u597d\u7684\u3002", "note_en": "The other day, while building a  scientific project to which I\u2019m a contributor, Iran into a nasty version conflict between two system libraries. In a fit ofpique, I decided to learn enough about  Nix to be able to set up a reproducible,tightly controlled local build. It\u2019s done now, and overall I\u2019m very happy withthe tooling and setup. I\u2019m using  direnv to tightly integrate my normal shellwith Nix\u2019s  nix-shell feature, and for the most part everything feels seamless.It is extremely refreshing to see  cmake report that it has found a plethora ofbinaries and libraries, content-hashed and installed in neat little rows under /nix/store.\n I\u2019m using Nix to manage my development environment, but  not to build theproject itself. Nix ensures that the project dependencies are installed anddiscoverable by the compiler and linker. Building the project is done withCMake, set up for  cmake to find the nix-installed libraries. Nix achieves thisby  wrapping the C compiler with its own shell script and injecting the paths tolibraries and binaries via environment variables. There\u2019s very little to do tomake  cmake just work, beyond declaring that the packages you want are buildInputs. The first version of my  shell.nix file looked like this:\n # file shell.nix{  pkgs ?  import  &lt;nixpkgs&gt; {} }: pkgs. mkShell {  buildInputs =  with  pkgs; [  cmake ( callPackage  nix/petsc.nix {})  metis  hdf5  openmpi ( python38. withPackages ( packages: [  packages. numpy ])) ];}\n Using this setup, I had very little trouble getting the project to build. I hadto  override the  default PETSc derivation to compile with METIS and OpenMPIsupport, which was not too hard:\n # file nix/petsc.nix{  petsc ,  blas ,  gfortran ,  lapack ,  python ,  metis ,  openmpi }: petsc. overrideAttrs ( oldAttrs:  rec {  nativeBuildInputs = [  blas  gfortran  gfortran. cc. lib  lapack  python  openmpi  metis ];  preConfigure =  &#39;&#39;  export FC=&#34; ${ gfortran } /bin/gfortran&#34; F77=&#34; ${ gfortran } /bin/gfortran&#34;  patchShebangs .  configureFlagsArray=(  $configureFlagsArray  &#34;--with-mpi-dir= ${ openmpi } &#34;  &#34;--with-metis= ${ metis } &#34;  &#34;--with-blas-lib=[ ${ blas } /lib/libblas.so, ${ gfortran. cc. lib } /lib/libgfortran.a]&#34;  &#34;--with-lapack-lib=[ ${ lapack } /lib/liblapack.so, ${ gfortran. cc. lib } /lib/libgfortran.a]&#34;  )  &#39;&#39;;})\n This Nix file returns a function which is invoked in  shell.nix using callPackage function.  petsc.overrideAttrs is a neat way to override theattributes of a derivation created with  stdenv.mkDerivation. Building PETScwith MPI and METIS support is as simple as passing in a different set ofarguments to the  configure script.\n Figuring out how to do all of this was fun. I mostly referred to the  Nix\u201cPills\u201d, which are a great progression through the Nix tool and language.\n With these Nix files, I was able to execute  cmake .. &amp;&amp; make successfully.Getting the project to  run was another story. The final binary failedimmediately with a dynamic loading error:\n  The binary was trying to load a dynamic lib from one of the temporary directoriesthat Nix created in the process of building PETSc. Of course this failed: by thetime I invoked  bin/warpxm, that directory had been cleaned up. Instead of afile under  /private/tmp, the binary should have linked to the result of the petsc derivation in the Nix store, under  /nix/store. At some point, itseemed, an environment variable was incorrectly set to this intermediatedirectory. To figure out where, I would have to learn a lot more about linkingon OS X than I ever expected.\n  First I checked the compiler and linker flags that are inserted by Nix\u2019scompiler wrapper. These come in via  NIX_CFLAGS_COMPILE and  NIX_LDFLAGS. Whenyou\u2019re working with  nix-shell and  direnv, all of the environment variablesfrom your derivations are injected into your shell. It\u2019s a simple matter of echoingthem out:\n  These look fine! Invoking  cmake and  make in this shell ought to pull in thecorrect library.\n Then I remembered that this project uses  pkg-config to find and pull togetherthe linked libraries. Frankly, I don\u2019t understand  pkg-config very well, but Ido know that in this project it is invoked from inside of  cmake. It searches forlibraries according to its own rules, and it runs  after Nix has done itsjob setting everything up. Therefore, it circumvents the compiler and linkerflags that we just checked.\n I happened to have  pkg-config installed from before setting up this Nixenvironment. Therefore,  cmake was able to invoke the system  pkg-config frommy user  PATH. Perhaps the system version of  pkg-config was somehow findingthe wrong library? Indeed,  echo $PKG_CONFIG_PATH confirmed that it wassearching a directory under my  $HOME. I thought it possible that some wiresgot crossed while I was adding dependencies to my Nix derivation one at a time:configuring  pkg-config appropriately might help.\n A common belief is that  nix-shell can be isolated from what the user hasinstalled by passing the  --pure flag. This is wrong. In fact, it  keeps theuser\u2019s whole  PATH around. I\u2019ve  filed a ticket to address this. However, afterusing  nix-shell some more, I believe it\u2019s a super useful tool even withouthermetically isolating your development environment.\n I referred once again to the Nix wiki page on C projects, which also has  asection on using  pkg-config. It seems that including the  pkg-configderivation as a  nativeBuildInput will let packages like  petsc append theiroutput paths to the  PKG_CONFIG_PATH environment variable. I did so:\n pkgs. mkShell {  buildInputs =  with  pkgs; [ ... ];  nativeBuildInputs =  with  pkgs; [  pkg-config ];}\n but it didn\u2019t fix the problem. I would have to go deeper and track down wherethe bad library was being pulled in.\n Digging into the  cmake documentation and the project\u2019s  .cmake files led meto insert a trio of print statements:\n find_package(PkgConfig REQUIRED)pkg_check_modules(PETSC PETSc REQUIRED)link_directories(${PETSC_LIBRARY_DIRS}) + message(&#34;petsc libraries: ${PETSC_LIBRARIES}&#34;) + message(&#34;petsc library dirs: ${PETSC_LIBRARY_DIRS}&#34;) + message(&#34;petsc link libraries: ${PETSC_LINK_LIBRARIES}&#34;) list(APPEND WARPXM_LINK_TARGETS ${PETSC_LIBRARIES})\n   The second two look good. But the first, just the library name  petsc, was a little tooimplicit for comfort. It was precisely this variable that was being appendedto the link targets list. At  compile time, it would be up to the linker to findthe library  petsc, and I wasn\u2019t sure where it would look. Safer to use theabsolute path to the  .dylib, like so:\n  My thinking here was wrong. We  can be sure where the linker will look atcompile time: in the paths listed in  NIX_LDFLAGS! I wasn\u2019t thinking clearlyabout the flow of data in the compilation process.\n Changing the link target to the absolute path eased my mind only for the duration ofthe next  cmake .. &amp;&amp; make cycle. Surely there was no way the linker couldscrew up now. No arcane library search involved, just an absolute path, whichcouldn\u2019t possibly be misinterpreted\u2026\n    At this point I was absolutely flummoxed. With every fix I attempted, Igrepped vainly for the offending  /private/tmp path in my build directory, and come upempty-handed. I tracked down the final, irrevocable link options passed to thecompiler, tucked away in a  link.txt file in the build tree. They showedincontrovertibly that my binary was being linked to the correct library:\n  I had proved nearly to my satisfaction that CMake was doing the right thing withthis library, and I was completely out of ideas.Finally, a very lucky google search led me to the  section of the Nix manualdescribing issues specific to the Darwin (MacOS) platform. It states:\n On Darwin, libraries are linked using absolute paths, libraries are resolvedby their install_name at link time. Sometimes packages won\u2019t set thiscorrectly causing the library lookups to fail at runtime. This can be fixed byadding extra linker flags or by running install_name_tool -id during thefixupPhase.\n This is a very matter-of-fact way of stating something that, when I understoodit, flabbergasted me. To the best of my understanding, here\u2019s what happens onMacOS:\n My source code has an include directive,  include&lt;petsc.h&gt; or something likethat, which creates a binary interface to be satisfied by the linker.\n At link time, we pass the list of absolute paths to libraries, and the linkerfinds the one that matches the interface.\n The linker then saves the  install_name of the library it found in thebinary\u2019s load section.\n At run time, the binary (actually, the MacOS  dyld system) loads the library.The install_name is all it has, so it looks there.\n I\u2019ve certainly gotten some aspect of this wrong, so I would definitelyappreciate hearing from someone who understands it better than me!\n In any case, this find pointed me to the concept of the install_name, so I hadsomething to go on. More searching led to a  helpful blog post describing exactlythe issue that I was facing. It also described how to check the install_name ofthe library:\n   The Nix manual states that \u201csome packages won\u2019t set this correctly\u201d, and pointsto the fix, which is to use  install_name_tool to change the install_name ofthe built library. Is  the PETSc derivation on nixpkgs doing this correctly? Isaw that it was doing  something with  install_name_tool:\n prePatch =  &#39;&#39;  substituteInPlace configure \\  --replace /bin/sh /usr/bin/python  &#39;&#39; +  stdenv. lib. optionalString  stdenv. isDarwin  &#39;&#39;  substituteInPlace config/install.py \\  --replace /usr/bin/install_name_tool install_name_tool  &#39;&#39;;\n This directive replaces the appearances of the string /usr/bin/install_name_tool with just  install_name_tool. The reason that Nixpackages do this is to ensure that builds rely on the Nix-built tools, which areprovided in the build shell\u2019s  PATH, and not on binaries in system directorieslike  /usr/bin.\n The PR that introduced this substitution indicates that it fixed a build onDarwin, so there must be some invocation of  /usr/bin/install_name_tool inPETSc. Searching for that in the PETSc repo leads to  this line, which is doingexactly what the Mark\u2019s Logs  post on install_name instructed: it changes theinstall_name to the absolute path of the library in its installation directory,using  install_name_tool -id.\n if  os. path. splitext( dst)[ 1] ==  &#39;.dylib&#39;  and  os. path. isfile( &#39;/usr/bin/install_name_tool&#39;): [ output, err, flg] =  self. executeShellCommand( &#34;otool -D &#34;+ src)  oldname =  output[ output. find( &#34; \\n &#34;)+ 1:]  installName =  oldname. replace( os. path. realpath( self. archDir),  self. installDir)  self. executeShellCommand( &#39;/usr/bin/install_name_tool -id &#39; +  installName +  &#39; &#39; +  dst)\n According to this, the install_name of the library should have been repaired byPETSc when the library was built! Except\u2026 notice something? The secondcondition in the  if statement. After the PETSc derivation runs its  prePatchstep, that condition will become  and os.path.isfile(&#39;install_name_tool&#39;). Thatwill certainly fail:  install_name_tool is not going to be a file in thedirectory where  configure is running! The patched  configure script willsilently skip this step, leaving the install_name of the library as thetemporary directory where it was built!\n Luckily, the solution to this problem is not too hard. Instead of the name of aprogram on the  PATH, we should pass the absolute path to the program we wantto run. This can be done by overriding the  prePatch step like so:\n prePatch =  &#39;&#39;  substituteInPlace configure \\  --replace /bin/sh /usr/bin/python  &#39;&#39; +  stdenv. lib. optionalString  stdenv. isDarwin  &#39;&#39;  substituteInPlace config/install.py \\  --replace /usr/bin/install_name_tool  ${ darwin. cctools } /bin/install_name_tool  &#39;&#39;;\n The Nix variable  ${darwin.cctools} will expand to the full path of thebuilt  darwin.cctools derivation, which is a directory under  /nix/store. Sothe patched  if statement inside of PETSc\u2019s  configure.py becomes\n  and the install_name of the resulting library will be correct. We can check thatwith  otool -D again:\n  Looking much better! And since the error was in a dynamically loaded library, wedon\u2019t even have to recompile to check that it\u2019s working:\n \u279c build git:(master) \u2717  DYLD_PRINT_LIBRARIES= 1 bin/warpxmdyld: loaded: /Users/jack/src/warpxm/build/bin/warpxmdyld: loaded: /nix/store/ni26aaiira47ak60vks1qv4apbkwbg1d-hdf5-1.10.6/lib/libhdf5.103.dylibdyld: loaded: /nix/store/acsjaw04hrf4rv8gizai7gx1ibq92ksa-zlib-1.2.11/lib/libz.dylibdyld: loaded: /nix/store/z4f1bq363m0ydmbyncfi2srij8vlsx32-Libsystem-osx-10.12.6/lib/libSystem.B.dylibdyld: loaded: /nix/store/w23r8kplmfx2xc111cpvmdjwmkwy6ip3-petsc-3.13.2/lib/libpetsc.3.13.dylib...\n   I spent most of my time debugging this problem without a workingunderstanding of the different build phases. It should have been clearto me that neither the CMake nor the  pkg-config setups could be the cause,because at the time that I was invoking  cmake, the offending  /private/tmpdirectory had long vanished. If I had focused exclusively on the PETScderivation provided by Nix, I might have homed in on the  install_name_toolpatch a little sooner. As it went, I was lucky to find the note in the Nixmanual about Darwin-specific linker problems.\n As for Nix, I will absolutely be using more of it. What\u2019s remarkable is how little impact it can have. I am able to use it to manage my environment forthis project without impacting the way the other developers manage theirenvironments. Of course, if they asked, I would advocate that they try out Nix,but it\u2019s nice for everyone to be able to do it on their own time.", "posttime": "2020-07-19 11:17:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "nix,dynamic", "title": "\u8c03\u8bd5NIX\u9879\u76ee\u4e2d\u7684\u52a8\u6001\u94fe\u63a5\u9519\u8bef", "title_en": "Debugging a dynamic linking bug in a Nix project", "transed": 1, "url": "https://www.johnbcoughlin.com/posts/nix-dynamic-linking/", "via": "", "real_tags": ["nix", "dynamic"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1012827, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8df3\u8dc3\u5bfc\u822a\u8df3\u8dc3\u641c\u7d22\u4f4e\u80cc\u666f\u94a2\u662f\u6307\u572820\u4e16\u7eaa40\u5e74\u4ee3\u548c50\u5e74\u4ee3\u7b2c\u4e00\u679a\u6838\u5f39\u7206\u70b8\u4e4b\u524d\u751f\u4ea7\u7684\u4efb\u4f55\u94a2\u6750\u3002\u968f\u77401945\u5e74\u7684\u4e09\u4f4d\u4e00\u4f53\u8bd5\u9a8c\u548c\u5e7f\u5c9b\u548c\u957f\u5d0e\u7684\u6838\u5f39\u7206\u70b8\uff0c\u4ee5\u53ca\u968f\u540e\u7684\u51b7\u6218\u521d\u671f\u7684\u6838\u6b66\u5668\u8bd5\u9a8c\uff0c\u4e16\u754c\u5404\u5730\u7684\u672c\u5e95\u8f90\u5c04\u6c34\u5e73\u90fd\u6709\u6240\u4e0a\u5347\u3002[1]\u73b0\u4ee3\u94a2\u94c1\u88ab\u653e\u5c04\u6027\u6838\u7d20\u6c61\u67d3\uff0c\u56e0\u4e3a\u5b83\u7684\u751f\u4ea7\u4f7f\u7528\u5927\u6c14\u7a7a\u6c14\u3002\u4f4e\u80cc\u666f\u94a2\u4e4b\u6240\u4ee5\u88ab\u79f0\u4e3a\u4f4e\u80cc\u666f\u94a2\uff0c\u662f\u56e0\u4e3a\u5b83\u4e0d\u4f1a\u53d7\u5230\u8fd9\u6837\u7684\u6838\u6c61\u67d3\u3002\u8fd9\u79cd\u94a2\u7528\u4e8e\u5bf9\u68c0\u6d4b\u653e\u5c04\u6027\u6838\u7d20\u8981\u6c42\u6700\u9ad8\u7075\u654f\u5ea6\u7684\u8bbe\u5907\u3002\n\u4f4e\u80cc\u666f\u94a2\u7684\u4e3b\u8981\u6765\u6e90\u662f\u5728\u4e09\u4f4d\u4e00\u4f53\u6d4b\u8bd5\u4e4b\u524d\u5efa\u9020\u7684\u6c89\u8239\uff0c\u6700\u8457\u540d\u7684\u662f\u5728\u65af\u5361\u5e15\u6d41\u6c89\u6ca1\u7684\u5fb7\u56fd\u7b2c\u4e00\u6b21\u4e16\u754c\u5927\u6218\u519b\u8230\u3002[2]\u3002\n\u4ece1856\u5e74\u523020\u4e16\u7eaa\u4e2d\u53f6\uff0c\u94a2\u94c1\u662f\u5728\u8d1d\u585e\u9ed8\u6d41\u7a0b\u4e2d\u751f\u4ea7\u7684\uff0c\u5728\u8d1d\u585e\u9ed8\u6d41\u7a0b\u4e2d\uff0c\u7a7a\u6c14\u88ab\u5f3a\u8feb\u8fdb\u5165\u8d1d\u585e\u9ed8\u8f6c\u7089\uff0c\u5c06\u751f\u94c1\u8f6c\u5316\u4e3a\u94a2\u3002\u5230\u4e8620\u4e16\u7eaa\u4e2d\u53f6\uff0c\u8bb8\u591a\u94a2\u94c1\u5382\u6539\u7528BOS\u5de5\u827a\uff0c\u7528\u7eaf\u6c27\u4ee3\u66ff\u7a7a\u6c14\u3002\u7136\u800c\uff0c\u7531\u4e8e\u8fd9\u4e24\u4e2a\u8fc7\u7a0b\u90fd\u4f7f\u7528\u5927\u6c14\u6c14\u4f53\uff0c\u5b83\u4eec\u5f88\u5bb9\u6613\u53d7\u5230\u7a7a\u6c14\u4e2d\u9897\u7c92\u7269\u7684\u6c61\u67d3\u3002\u4eca\u5929\u7684\u7a7a\u6c14\u643a\u5e26\u7740\u653e\u5c04\u6027\u6838\u7d20\uff0c\u5982\u94b4-60\uff0c\u8fd9\u4e9b\u653e\u5c04\u6027\u6838\u7d20\u88ab\u6c89\u79ef\u5230\u94a2\u4e2d\uff0c\u4f7f\u5176\u5177\u6709\u5fae\u5f31\u7684\u653e\u5c04\u6027\u7279\u5f81\u3002[3]\u3002\n\u4e16\u754c\u4eba\u4e3a\u672c\u5e95\u8f90\u5c04\u6c34\u5e73\u57281963\u5e74\u8fbe\u5230\u5cf0\u503c\uff0c\u6bd4\u81ea\u7136\u6c34\u5e73\u9ad8\u51fa0.11\u4ebf\u6beb\u897f\u5f17/\u5e74\uff0c\u4e5f\u5c31\u662f\u300a\u90e8\u5206\u7981\u6b62\u6838\u8bd5\u9a8c\u6761\u7ea6\u300b\u9881\u5e03\u7684\u90a3\u4e00\u5e74\u3002\u4ece\u90a3\u65f6\u8d77\uff0c\u4eba\u4e3a\u80cc\u666f\u8f90\u5c04\u5448\u6307\u6570\u7ea7\u4e0b\u964d\uff0c\u6bd4\u81ea\u7136\u6c34\u5e73\u9ad8\u51fa0.005\u6beb\u897f\u5f17/\u5e74\u3002[A]\u3002\n\u5df2\u7ecf\u53d1\u751f\u8fc7\u653e\u5c04\u6027\u94b4-60\u6c61\u67d3\u4e8b\u4ef6\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u901a\u8fc7\u5e9f\u91d1\u5c5e\u4f9b\u5e94\u94fe\u8fdb\u884c\u4e86\u56de\u6536\u3002\u8fd9\u662f\u56e0\u4e3a\u56de\u6536\u4e86\u653e\u5c04\u6cbb\u7597\u673a\u7b49\u5bc6\u5c01\u7684\u653e\u5c04\u6e90\uff0c\u800c\u4e0d\u662f\u6765\u81ea\u94a2\u94c1\u7684\u6301\u7eed\u56de\u6536\u3002[5]\u3002\n\u5f53\u8fd9\u4e9b\u8bbe\u5907\u63a2\u6d4b\u5230\u653e\u5c04\u6027\u7269\u8d28\u53d1\u51fa\u7684\u8f90\u5c04\u65f6\uff0c\u5b83\u4eec\u9700\u8981\u6781\u4f4e\u7684\u8f90\u5c04\u73af\u5883\u624d\u80fd\u83b7\u5f97\u6700\u4f73\u7075\u654f\u5ea6\u3002\u4f4e\u672c\u5e95\u8ba1\u6570\u5ba4\u7531\u4f4e\u672c\u5e95\u94a2\u6750\u5236\u6210\uff0c\u5177\u6709\u6781\u5f3a\u7684\u8f90\u5c04\u5c4f\u853d\u3002\u5b83\u4eec\u88ab\u7528\u6765\u68c0\u6d4b\u6700\u5fae\u5c0f\u7684\u6838\u6392\u653e\u3002[6]\u3002\n*\u4f30\u8ba1\u5927\u6c14\u6838\u6b66\u5668\u8bd5\u9a8c\u4ea7\u751f\u7684\u5168\u7403\u5c18\u57c3\u9020\u6210\u7684\u4eba\u5747\u7535\u79bb\u8f90\u5c04\u6709\u6548\u5242\u91cf\u57281963\u5e74\u6700\u9ad8\uff0c\u4e3a0.11\u4ebf\u6beb\u897f\u5f17/\u5e74\uff0c\u968f\u540e\u4e0b\u964d\u5230\u76ee\u524d\u7ea60.005\u6beb\u897f\u5f17/\u5e74\u7684\u6c34\u5e73(\u89c1\u56fe\u4e8c)\u3002\u8fd9\u4e00\u66b4\u9732\u6765\u6e90\u5728\u672a\u6765\u53ea\u4f1a\u975e\u5e38\u7f13\u6162\u5730\u4e0b\u964d\uff0c\u56e0\u4e3a\u73b0\u5728\u5927\u90e8\u5206\u662f\u7531\u4e8e\u957f\u5bff\u7684\u653e\u5c04\u6027\u6838\u7d20\u78b3-14\u3002[4]\u3002\n\u4e39\u5c3c\u5c14\u00b7\u827e\u4f26\u00b7\u5df4\u7279\u52d2(2006)\u3002\u9065\u8fdc\u7684\u80dc\u5229\uff1a\u65e5\u5fb7\u5170\u6218\u5f79\u548c\u76df\u519b\u5728\u7b2c\u4e00\u6b21\u4e16\u754c\u5927\u6218\u4e2d\u7684\u80dc\u5229\u3002\u5eb7\u6d85\u72c4\u683c\u5dde\u97e6\u65af\u7279\u6ce2\u7279\uff1a\u666e\u96f7\u683c\u5b89\u5168\u56fd\u9645(\u683c\u6797\u4f0d\u5fb7\u51fa\u7248\u96c6\u56e2)\u3002\u7b2c229\u9875\u3002ISBN\u7535\u8bdd\uff1a0-275-99073-7\u3002\n\u7535\u79bb\u8f90\u5c04\u7684\u6765\u6e90\u548c\u5f71\u54cd\u3002\u8054\u5408\u56fd\u539f\u5b50\u8f90\u5c04\u5f71\u54cd\u79d1\u5b66\u59d4\u5458\u4f1a(UNSCEAR)(\u62a5\u544a)\u3002\u4e00\u3001\u7ebd\u7ea6\uff1a\u8054\u5408\u56fd\u30022010[2008]\u3002\u7b2c6\u9875\u3002ISBN978-92-1-142274-0\u3002UNSCEAR 2008\u5e74\u62a5\u544a\u3002\n\uff1f\u51cf\u5c11\u5e9f\u91d1\u5c5e\u5de5\u4e1a\u7684\u98ce\u9669--\u5bc6\u5c01\u653e\u5c04\u6e90(PDF)\u3002\u56fd\u9645\u539f\u5b50\u80fd\u673a\u6784(\u539f\u5b50\u80fd\u673a\u6784)(\u62a5\u544a)\u3002\u5965\u5730\u5229\uff1a\u8054\u5408\u56fd\u30022005\u5e749\u6708\u3002\u7b2c2-6\u9875\u56fd\u9645\u539f\u5b50\u80fd\u673a\u6784/PI/A.83/05-09511\u53f7\u6587\u4ef6\u3002\u5b58\u6863\u81ea2006\u5e746\u670814\u65e5\u7684\u539f\u4ef6(PDF)\u3002\n\u4e9a\u4f26\u00b7D\u00b7\u6770\u6069\uff1b\u8d1d\u91cc\u66fc\u00b7\u6731\u8fea\u601d(1997)\u3002\u6d1b\u57fa\u516c\u5bd3\u5de5\u5382\uff0c\u7d27\u6025\u533b\u7597\u670d\u52a1\u8bbe\u65bd\u3002\u7f8e\u56fd\u80fd\u6e90\u90e8\u9057\u4ea7\u7ba1\u7406\u5904\u3002\u6d77\u5c14\u53f7\u3002CO-83-S(\u843d\u57fa\u516c\u5bd3\u5de5\u5382\uff0c122\u53f7\u697c)", "note_en": "Jump to navigation  Jump to search  Low-background steel is any  steel produced prior to the detonation of the first  nuclear bombs in the 1940s and 1950s. With the  Trinity test and the  nuclear bombings of Hiroshima and Nagasaki in 1945, and then subsequent  nuclear weapons testing during the early years of the  Cold War,  background radiation levels increased across the world.  [1] Modern steel is  contaminated with  radionuclides because its production uses atmospheric air. Low-background steel is so-called because it does not suffer from such nuclear contamination. This steel is used in devices that require the highest sensitivity for detecting radionuclides.\n The primary source of low-background steel is sunken ships that were constructed before the Trinity test, most famously the  scuttled  German World War I warships in Scapa Flow.  [2]\n    From 1856 until the mid 20th century, steel was produced in the  Bessemer process where  air was forced into  Bessemer converters converting the  pig iron into  steel. By the mid-20th century, many steelworks had switched to the  BOS process which uses pure  oxygen instead of air. However as both processes use atmospheric gas, they are susceptible to contamination from airborne particulates. Present-day air carries radionuclides, such as  cobalt-60, which are deposited into the steel giving it a weak radioactive signature.  [3]\n World  anthropogenic background radiation levels peaked at 0.11\u00a0 mSv/yr above natural levels in 1963, the year that the  Partial Nuclear Test Ban Treaty was enacted. Since then, anthropogenic background radiation has decreased exponentially to 0.005\u00a0mSv/yr above natural levels.  [a]\n There have been incidents of radioactive cobalt-60 contamination as it has been recycled through the scrap metal supply chain. This is due to recycling sealed radioactive sources such as radiotherapy machines, not from the continued recycling of steel.  [5]\n    As these devices detect radiation emitted from radioactive materials, they require an extremely low radiation environment for optimal sensitivity. Low-background counting chambers are made from low-background steel with extremely heavy  radiation shielding. They are used to detect the minutest nuclear emissions.  [6]\n  ^  The estimated per-caput effective dose of ionizing radiation due to global fallout from atmospheric nuclear weapons testing was highest in 1963, at 0.11\u00a0mSv/yr, and subsequently fell to its present level of about 0.005\u00a0mSv/yr (see figure\u00a0II). This source of exposure will decline only very slowly in the future as most of it is now due to the long-lived radio-nuclide  carbon-14.  [4]\n  ^   Butler, Daniel Allen (2006).   Distant Victory: The battle of Jutland and the Allied triumph in the First World War. Westport, Connecticut: Praeger Security International (Greenwood Publishing Group). p.\u00a0229.  ISBN\u00a0  0-275-99073-7.\n  ^    Sources and Effects of Ionizing Radiation.  United Nations Scientific Committee on the Effects of Atomic Radiation (UNSCEAR) (Report).  I. New York: United Nations. 2010 [2008]. p.\u00a06.  ISBN\u00a0  978-92-1-142274-0. UNSCEAR 2008 Report.\n ^    Reducing Risks in the Scrap Metal Industry \u2013 Sealed Radioactive Sources  (PDF).  International Atomic Energy Agency (IAEA) (Report). Austria: United Nations. September 2005. pp.\u00a02\u20136. IAEA/PI/A.83 / 05-09511. Archived from  the original  (PDF) on 14 June 2006.\n ^   Aaron, D. Jayne; Berryman, Judith (1997).  &#34;Rocky Flats Plant, Emergency Medical Services Facility&#34;.  U.S. Department of Energy, Office of Legacy Management. HAER No. CO-83-S (Rocky Flats Plant, Building 122).", "posttime": "2020-07-19 10:53:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u80cc\u666f,background,\u8f90\u5c04", "title": "\u4f4e\u80cc\u666f\u94a2", "title_en": "Low-Background Steel", "transed": 1, "url": "https://en.wikipedia.org/wiki/Low-background_steel", "via": "", "real_tags": ["\u80cc\u666f", "\u8f90\u5c04"]}, {"category": "", "categoryclass": "", "imagename": "e20b9245cefee432ea94425e4ba26690.png", "infoid": 1012825, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "5\u670829\u65e5\uff0cOpenAI\u53d1\u5e03\u4e86\u4e00\u7bc7\u5173\u4e8eGPT-3\u7684\u8bba\u6587\uff0cGPT-3\u662f\u4ed6\u4eec\u57fa\u4e8e\u53d8\u5f62\u91d1\u521a\u7684\u6587\u672c\u751f\u6210\u795e\u7ecf\u7f51\u7edc\u7684\u4e0b\u4e00\u4ee3\u4ea7\u54c1\u3002\u6700\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e0e\u4e4b\u524dGPT-2\u8fed\u4ee3\u768415\u4ebf\u4e2a\u53c2\u6570\u76f8\u6bd4\uff0c\u65b0\u6a21\u578b\u67091750\u4ebf\u4e2a\u53c2\u6570\uff1a\u6a21\u578b\u5927\u5c0f\u589e\u52a0\u4e86117\u500d\uff01\u56e0\u4e3aGPT-3\u592a\u5927\u4e86\uff0c\u5b83\u4e0d\u80fd\u5728\u4f20\u7edf\u7535\u8111\u4e0a\u8fd0\u884c\uff0c\u800c\u4e14\u5b83\u53ea\u662f\u4f5c\u4e3aOpenAI API\u7684\u4e00\u90e8\u5206\u516c\u5f00\u63d0\u4f9b\u7684\uff0c\u5728\u8bba\u6587\u53d1\u5e03\u540e\u4e0d\u4e45\uff0cOpenAI API\u5c31\u8fdb\u5165\u4e86\u4ec5\u9650\u9080\u8bf7\u7684\u6d4b\u8bd5\u7248\uff0c\u5e76\u5c06\u5728\u7a0d\u540e\u7684\u67d0\u4e2a\u65f6\u5019\u53d1\u5e03\u4ee5\u76c8\u5229\u4e3a\u76ee\u7684\u3002\nAPI\u5141\u8bb8\u60a8\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u5411GPT-3\u63d0\u4f9b\u63d0\u793a\u7b26\uff0c\u5e76\u8fd4\u56de\u751f\u6210\u7684AI\u751f\u6210\u7684\u6587\u672c\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u8c03\u7528API\uff1a\nCURL https://api.openai.com/v1/engines/davinci/completions\\-H&#34\uff1b\u5185\u5bb9\u7c7b\u578b\uff1a\u5e94\u7528\u7a0b\u5e8f/json&#34\uff1b\\-H&#34\uff1b\u6388\u6743\uff1a\u6301\u6709\u8005&lt\uff1bSECRET_KEY&&gt;\uff1b&#34\uff1b\\-d&#39\uff1b{&#34\uff1bPrompt&#34\uff1b\uff1a&#34\uff1b\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5&#34\uff1b\uff0c&#34\uff1bmax_tokens&#34\uff1b\uff1a5}&#39\uff1b\n\u5e76\u4eceAPI\u53d6\u56de\u6b64\u6587\u672c\uff0c\u5176\u4e2d\u6587\u672c\u662f\u63d0\u793a\u7b26\u540e\u9762\u751f\u6210\u7684\u6587\u672c\uff1a\n{&#34\uff1bid&#34\uff1b\uff1a&#34\uff1bcmpl-&lt\uff1bid&&gt;\uff1b&#34\uff1b\uff0c&#34\uff1b\u5bf9\u8c61&#34\uff1b\uff1a&#34\uff1bTEXT_COMPLETION&#34\uff1b\uff0c&#34\uff1b\u521b\u5efa&#34\uff1b\uff1a1586839808\uff0c&#34\uff1b\u578b\u53f7&#34\uff1b\uff1a\uff1a&#34\uff1b\u8fbe\u82ac\u5947\uff1a2020-05-03&#34\uff1b\uff0c&#34\uff1b\u9009\u9879&#34\uff1b\uff1a[{&#34\uff1bTEXT&#34\uff1b\uff1a&\u3002\u60a8&#34\uff1b\uff0c&#34\uff1b\u7d22\u5f15&#34\uff1b\uff1a0\uff0c&#34\uff1blogpros&#34\uff1b\uff1aNULL\uff0c&#34\uff1bFinish_Reason&#34\uff1b\uff1a&#34\uff1bLength&#34\uff1b}]}\u3002\n\u4f5c\u4e3a\u4e00\u4e2a\u5728\u5f00\u53d1gpt-2-simple\u548caitextgen\u7b49\u5de5\u5177(\u5141\u8bb8\u4f7f\u7528GPT-2\u4f18\u5316\u6587\u672c\u751f\u6210)\u65f6\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\u4f7f\u7528GPT-2\u7684\u4eba\uff0c\u6211\u6e34\u671b\u4eb2\u81ea\u6d4b\u8bd5\u4e00\u4e0b\u4eceGPT-3\u751f\u6210\u7684\u6587\u672c\u8d28\u91cf\u662f\u5426\u771f\u7684\u8981\u597d\u5f97\u591a\u3002\u591a\u4e8f\u4e86OpenAI\uff0c\u6211\u88ab\u9080\u8bf7\u53c2\u52a0\u6d4b\u8bd5\u7248\uff0c\u5728\u5141\u8bb8\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u53d1\u5e03\u4e86\u4e00\u4e2a\u5e26\u6709Python\u811a\u672c\u7684GitHub\u5b58\u50a8\u5e93\u6765\u67e5\u8be2API\uff0c\u4ee5\u53ca\u8bb8\u591a\u6587\u672c\u63d0\u793a\u53ca\u5176\u8f93\u51fa\u7684\u793a\u4f8b\u3002GPT-3\u7684\u4e00\u4e2a\u6709\u8da3\u7684\u7528\u4f8b\u662f\u8352\u8c2c\u7684\uff0c\u6bd4\u5982\u63d0\u793a\u6a21\u578b\u5173\u4e8e\u72ec\u89d2\u517d\u8bf4\u82f1\u8bed\uff0c\u5e76\u7528\u7c97\u4f53\u663e\u793a\u6a21\u578b\u63d0\u793a\uff1a\n\u6211\u8fd8\u901a\u8fc7GPT-3\u53d1\u5e03\u4e86\u81ea\u5df1\u7684\u63a8\u6587\uff0c\u5e76\u7b56\u5212\u4e86\u8f93\u51fa\uff0c\u4ea7\u751f\u4e86\u5b8c\u5168\u539f\u521b\u7684\u6570\u636e\u79d1\u5b66\u4e00\u884c\u7a0b\u5e8f\uff1a\n\u6211\u7684\u65b0\u4eba\u5de5\u667a\u80fd\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b\u4f60\u7684LinkedIn\u6765\u5224\u65ad\u4f60\u662f\u4e0d\u662f\u8fde\u73af\u6740\u624b\n-Max Woolf(@minaxir)2020\u5e747\u670812\u65e5\u3002\n\u6570\u636e\u79d1\u5b66\u5bb6\u4e0d\u9700\u8981\u64c5\u957f\u6570\u5b66\uff0c\u4ed6\u4eec\u53ea\u9700\u8981\u5584\u4e8e\u5bf9\u4eba\u6492\u8c0e\u3002\n-Max Woolf(@minaxir)2020\u5e747\u67089\u65e5\u3002\n\u5728\u6700\u521d\u5ba3\u5e03GPT-3\u4e4b\u540e\uff0c\u9664\u4e86\u683c\u6e29\u548c\u51ef\u6587\u00b7\u83b1\u514b\u7684\u51e0\u4e2a\u535a\u5ba2\u5916\uff0c\u6ca1\u6709\u592a\u591a\u7684GPT-3\u7092\u4f5c\u3002\u76f4\u5230\u8c22\u91cc\u592b\u00b7\u6c99\u7c73\u59c6(Sharif Shameem)\u7684\u4e00\u6761\u75c5\u6bd2\u5f0f\u63a8\u6587\u5c55\u793a\u4e86GPT-3\u7684\u771f\u6b63\u529f\u80fd\uff1a\n\u8fd9\u592a\u8ba9\u4eba\u5174\u594b\u4e86\u3002\u4f7f\u7528GPT-3\uff0c\u6211\u6784\u5efa\u4e86\u4e00\u4e2a\u5e03\u5c40\u751f\u6210\u5668\uff0c\u60a8\u53ea\u9700\u5728\u5176\u4e2d\u63cf\u8ff0\u60a8\u60f3\u8981\u7684\u4efb\u4f55\u5e03\u5c40\uff0c\u5b83\u5c31\u4f1a\u4e3a\u60a8\u751f\u6210JSX\u4ee3\u7801\u3002W H A T pic.twitter.com/w8JkrZO4lk\u3002\n-\u8c22\u91cc\u592b\u00b7\u6c99\u7c73\u59c6(@sharifshameem)2020\u5e747\u670813\u65e5\u3002\n\u901a\u8fc7\u63cf\u8ff0\u6211\u60f3\u8981GPT-3\u7684\u5185\u5bb9\uff0c\u6211\u521a\u521a\u6784\u5efa\u4e86\u4e00\u4e2a\u201c\u6b63\u5e38\u8fd0\u884c\u201d\u7684Reaction\u5e94\u7528\u7a0b\u5e8f\u3002\u6211\u4ecd\u7136\u5fc3\u5b58\u656c\u754f\u3002Pic.twitter.com/UUKSYz2NJO\u3002\n-\u8c22\u91cc\u592b\u00b7\u6c99\u7c73\u59c6(@sharifshameem)2020\u5e747\u670817\u65e5\n\u8fd9\u4e2a\u6f14\u793a\u5f15\u8d77\u4e86\u98ce\u9669\u8d44\u672c\u5bb6\u7684\u6ce8\u610f\u3002\u800c\u4e14\uff0c\u5f53\u4e00\u4e2a\u770b\u8d77\u6765\u5f88\u9177\u7684\u795e\u5947\u4e8b\u7269\u5f15\u8d77\u98ce\u9669\u8d44\u672c\u5bb6\u7684\u6ce8\u610f\u65f6\uff0c\u8a00\u8bba\u5f80\u5f80\u4f1a\u5931\u63a7\u3002\u73b0\u5728\uff0c\u6709\u5f88\u591a\u5173\u4e8eGPT-3\u7684\u63a8\u6587\uff0c\u4ee5\u53ca\u5176\u4ed6\u5df2\u7ecf\u83b7\u5f97API\u8bbf\u95ee\u6743\u9650\u7684\u4eba\u53ef\u4ee5\u505a\u4e9b\u4ec0\u4e48\u3002\n\u6487\u5f00\u7092\u4f5c\u4e0d\u8c08\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u8be5\u6a21\u578b\u7684\u5b9e\u9645\u60c5\u51b5\u3002GPT-3\u786e\u5b9e\u662f\u4eba\u5de5\u667a\u80fd\u6587\u672c\u751f\u6210\u5411\u524d\u8fc8\u51fa\u7684\u4e00\u5927\u6b65\uff0c\u4f46\u5bf9\u4e8e\u6d41\u884c\u7684\u6f14\u793a\u548c\u7528\u4f8b\uff0c\u6709\u5f88\u591a\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\u3002\n\u50cf\u5927\u591a\u6570\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u4e00\u6837\uff0cGPT-3\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u9ed1\u5323\u5b50\uff0c\u4e0d\u53ef\u80fd\u7406\u89e3\u5b83\u505a\u51fa\u51b3\u7b56\u7684\u539f\u56e0\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u4ece\u8f93\u5165\u548c\u8f93\u51fa\u7684\u89d2\u5ea6\u6765\u8003\u8651GPT-3\u3002\n\u5176\u5b9e\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u8ba9GPT-3\u6765\u8bb2\u8ff0\u81ea\u5df1\u7684\u6545\u4e8b\u5462\uff1f\u563f\uff0cGPT-3\uff0c\u4f60\u662f\u600e\u4e48\u5de5\u4f5c\u7684\uff1f\n\u7528\u5916\u884c\u4eba\u7684\u8bdd\u8bf4\uff0c\u50cfGPT-3\u8fd9\u6837\u7684\u6587\u672c\u751f\u6210\u6a21\u578b\u901a\u8fc7\u4ece\u63d0\u793a\u4e2d\u63d0\u53d6\u63d0\u4f9b\u7684\u6587\u672c\u5757\u5e76\u9884\u6d4b\u4e0b\u4e00\u5757\u6587\u672c\u6765\u751f\u6210\u6587\u672c\uff0c\u5e76\u5e26\u6709\u4e00\u4e2a\u53ef\u9009\u7684\u6e29\u5ea6\u53c2\u6570\uff0c\u4f7f\u6a21\u578b\u80fd\u591f\u505a\u51fa\u6b21\u4f18\u7684\u9884\u6d4b\uff0c\u56e0\u6b64\u66f4\u5177\u201c\u521b\u9020\u6027\u201d\u3002\u7136\u540e\uff0c\u6a21\u578b\u6839\u636e\u5305\u62ec\u65b0\u5757\u5728\u5185\u7684\u5148\u524d\u5757\u8fdb\u884c\u53e6\u4e00\u4e2a\u9884\u6d4b\uff0c\u5e76\u91cd\u590d\uff0c\u76f4\u5230\u8fbe\u5230\u6307\u5b9a\u7684\u957f\u5ea6\u6216\u901a\u77e5\u6a21\u578b\u505c\u6b62\u751f\u6210\u7684\u6807\u8bb0\u3002\u8fd9\u4e0d\u662f\u5f88\u6709\u54f2\u7406\u6027\uff0c\u4e5f\u4e0d\u662f\u67d0\u79cd\u62df\u4eba\u5316\u610f\u8bc6\u7684\u8bc1\u636e\u3002\n\u9664\u4e86\u5927\u5c0f\u5916\uff0cGPT-3\u8fd8\u4e0eGPT-2\u76f8\u6bd4\u6709\u4e24\u4e2a\u663e\u8457\u7684\u6539\u8fdb\uff1a\u5b83\u5141\u8bb8\u751f\u6210\u957f\u5ea6\u662fGPT-2\u7684\u4e24\u500d\u7684\u6587\u672c(\u5927\u7ea610\u6bb5\u82f1\u8bed\u6587\u672c)\uff0c\u4ee5\u53ca\u5bf9\u6a21\u578b\u7684\u63d0\u793a\u66f4\u597d\u5730\u5c06\u6587\u672c\u7684\u751f\u6210\u5f15\u5bfc\u5230\u6240\u9700\u7684\u9886\u57df(\u7531\u4e8e\u5b66\u4e60\u6b21\u6570\u5f88\u5c11)\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u7528\u4e00\u4e2aReaction\u4ee3\u7801\u793a\u4f8b\u6765\u63d0\u793a\u6a21\u578b\uff0c\u7136\u540e\u544a\u8bc9\u5b83\u751f\u6210\u66f4\u591a\u7684Reaction\u4ee3\u7801\uff0c\u90a3\u4e48\u60a8\u5c06\u83b7\u5f97\u6bd4\u7ed9\u5b83\u4e00\u4e2a\u7b80\u5355\u7684\u63d0\u793a\u8981\u597d\u5f97\u591a\u7684\u7ed3\u679c\u3002\n\u56e0\u6b64\uff0cGPT-2\u6709\u4e24\u4e2a\u9ad8\u7ea7\u7528\u4f8b\uff1a\u4e00\u4e2a\u662f\u5728\u9ad8\u6e29\u4e0b\u751f\u6210\u6709\u8da3\u6587\u672c\u7684\u521b\u9020\u6027\u7528\u4f8b\uff0c\u5c31\u50cfGPT-2\u66fe\u7ecf\u662f\u7684\u90a3\u6837\uff1b\u53e6\u4e00\u4e2a\u662f\u529f\u80fd\u6027\u7528\u4f8b\uff0c\u7528\u4e8e\u7279\u5b9a\u7684\u57fa\u4e8eNLP\u7684\u7528\u4f8b\uff0c\u5982\u7f51\u9875\u6a21\u578b\uff0c\u6e29\u5ea6\u4e3a0.0\u3002\n\u622a\u81f32019\u5e7410\u6708\uff0cGPT-3\u5728\u6765\u81ea\u4e92\u8054\u7f51\u5404\u5730\u7684\u5927\u91cf\u6587\u672c\u4e0a\u8fdb\u884c\u4e86\u8bad\u7ec3(\u4f8b\u5982\uff0c\u5b83\u4e0d\u77e5\u9053\u65b0\u51a0\u80ba\u708e)\uff0c\u56e0\u6b64\u5b83\u53ef\u80fd\u5df2\u7ecf\u770b\u5230\u4e86\u4ece\u4ee3\u7801\u5230\u7535\u5f71\u5267\u672c\u518d\u5230\u63a8\u6587\u7684\u6bcf\u4e00\u79cd\u7c7b\u578b\u7684\u6587\u672c\u3002GPT-3\u6f14\u793a\u7684\u89c2\u4f17\u4e2d\u6709\u4e00\u4e2a\u5e38\u89c1\u7684\u8bef\u89e3\uff0c\u8ba4\u4e3a\u6a21\u578b\u662f\u5728\u65b0\u7684\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u7684\uff1b\u76ee\u524d\u60c5\u51b5\u5e76\u975e\u5982\u6b64\uff0c\u5b83\u53ea\u662f\u64c5\u957f\u63a8\u65ad\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5c3d\u7ba1\u201c\u661f\u7403\u5927\u6218\uff1a\u7b2c\u4e09\u96c6-\u897f\u65af\u63d0\u793a\u7684\u590d\u4ec7\u201d\u4e2d\u53ea\u6709\u4e00\u4e2a\u573a\u666f\u7684\u6587\u5b57\uff0c\u4f460.7\u2103\u4e00\u4ee3\u5374\u5c06\u66f4\u591a\u7684\u4eba\u7269\u548c\u53f0\u8bcd\u5f52\u56e0\u4e8e\u7535\u5f71\u4e2d\u66f4\u8fdc\u7684\u5730\u65b9\u3002(\u6700\u5927\u7684GPT-2\u578b\u53f7\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4f46\u8fdc\u6ca1\u6709\u90a3\u4e48\u5f3a\u5927)\nGPT-3\u7684\u771f\u6b63\u5143\u6e38\u620f\u662f\u8bbe\u8ba1\u548c\u4f18\u5316\u590d\u6742\u7684\u63d0\u793a\uff0c\u5b83\u53ef\u4ee5\u53ef\u9760\u5730\u5c06\u8f93\u51fa\u5f3a\u5236\u4e3a\u60a8\u60f3\u8981\u7684\u5185\u5bb9\u3002\u968f\u4e4b\u800c\u6765\u7684\u662f\u4e00\u7cfb\u5217\u7684\u590d\u6742\u6027\u548c\u62c5\u5fe7\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u5e76\u4e0d\u8ba4\u4e3aGPT-3\u662f\u4e00\u79cd\u65b0\u7684\u8303\u4f8b\uff0c\u4e5f\u4e0d\u662f\u4e00\u79cd\u4e0e\u9b54\u672f\u65e0\u5f02\u7684\u5148\u8fdb\u6280\u672f\u3002GPT-3\u548c\u793e\u4ea4\u5a92\u4f53\u4e0a\u7684OpenAI API\u5c55\u793a\u5e76\u6ca1\u6709\u663e\u793a\u8be5\u6a21\u578b\u548cAPI\u7684\u6f5c\u5728\u9677\u9631\u3002\n\u5982\u679c\u60a8\u770b\u8fc7\u6f14\u793a\u89c6\u9891\uff0c\u90a3\u4e48\u6a21\u578b\u901f\u5ea6\u5f88\u6162\uff0c\u8f93\u51fa\u53ef\u80fd\u9700\u8981\u4e00\u6bb5\u65f6\u95f4\u624d\u80fd\u663e\u793a\u51fa\u6765\uff0c\u800c\u5728\u6b64\u671f\u95f4\uff0c\u7528\u6237\u4e0d\u786e\u5b9a\u6a21\u578b\u662f\u5426\u5df2\u635f\u574f\u3002(\u6709\u4e00\u9879\u529f\u80fd\u5141\u8bb8\u5728\u751f\u6210\u6a21\u578b\u8f93\u51fa\u65f6\u5bf9\u5176\u8fdb\u884c\u6d41\u5f0f\u5904\u7406\uff0c\u8fd9\u5728\u521b\u9020\u6027\u60c5\u51b5\u4e0b\u6709\u5e2e\u52a9\uff0c\u4f46\u5728\u529f\u80fd\u60c5\u51b5\u4e0b\u6ca1\u6709\u5e2e\u52a9)\u3002\n\u6211\u4e0d\u4f1a\u56e0\u4e3a\u901f\u5ea6\u6162\u800c\u8d23\u602aOpenAI\u30021750\u4ebf\u4e2a\u53c2\u6570\u6a21\u578b\u592a\u5927\u4e86\uff0c\u65e0\u6cd5\u5b89\u88c5\u5728GPU\u4e0a\u8fdb\u884c\u90e8\u7f72\u3002\u6ca1\u6709\u4eba\u77e5\u9053GPT-3\u5b9e\u9645\u4e0a\u662f\u5982\u4f55\u90e8\u7f72\u5728OpenAI\u7684\u670d\u52a1\u5668\u4e0a\u7684\uff0c\u4ee5\u53ca\u5b83\u53ef\u4ee5\u6269\u5c55\u5230\u591a\u5c11\u3002\n\u4f46\u4e8b\u5b9e\u4ecd\u7136\u662f\u8fd9\u6837\uff1a\u5982\u679c\u8be5\u6a21\u5f0f\u5728\u7528\u6237\u7aef\u901f\u5ea6\u592a\u6162\uff0c\u5c31\u4f1a\u5bfc\u81f4\u7cdf\u7cd5\u7684\u7528\u6237\u4f53\u9a8c\uff0c\u53ef\u80fd\u4f1a\u8ba9\u4eba\u4eec\u8fdc\u79bbGPT-3\uff0c\u81ea\u5df1\u52a8\u624b(\u6bd4\u5982\u82f9\u679c\u7684iOS Siri\uff0c\u5982\u679c\u4e92\u8054\u7f51\u8fde\u63a5\u4e0d\u597d\uff0c\u8bf7\u6c42\u53ef\u80fd\u6c38\u8fdc\u90fd\u8981\u82b1\u8d39\u5f88\u957f\u65f6\u95f4\uff0c\u800c\u4f60\u53ea\u662f\u653e\u5f03\uff0c\u81ea\u5df1\u505a)\u3002\nGPT-3\u7684\u6f14\u793a\u5f88\u6709\u521b\u610f\uff0c\u5f88\u50cf\u4eba\u7c7b\uff0c\u4f46\u50cf\u6240\u6709\u7684\u6587\u672c\u751f\u6210\u6f14\u793a\u4e00\u6837\uff0c\u5b83\u4eec\u65e0\u610f\u4e2d\u6697\u793a\u4e86\u6240\u6709\u4eba\u5de5\u667a\u80fd\u751f\u6210\u7684\u8f93\u51fa\u90fd\u4f1a\u90a3\u4e48\u597d\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\uff1b\u4eba\u5de5\u667a\u80fd\u751f\u6210\u7684\u6587\u672c\u5f80\u5f80\u4f1a\u843d\u5165\u4e00\u4e2a\u8be1\u5f02\u7684\u5c71\u8c37\uff0c\u800c\u9648\u5217\u67dc\u4e2d\u7684\u597d\u4f8b\u5b50\u5f80\u5f80\u662f\u7cbe\u5fc3\u6311\u9009\u7684\u3002\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ece\u6211\u7684\u5b9e\u9a8c\u6765\u770b\uff0cGPT-3\u5728\u751f\u6210\u6587\u672c\u7684\u5e73\u5747\u8d28\u91cf\u65b9\u9762\u6bd4\u5176\u4ed6\u6587\u672c\u751f\u6210\u6a21\u578b\u8981\u597d\u5f97\u591a\uff0c\u5c3d\u7ba1\u5b83\u4ecd\u7136\u53d6\u51b3\u4e8e\u751f\u6210\u57df\u3002\u5f53\u6211\u7b56\u5212\u6211\u751f\u6210\u7684tweet\u65f6\uff0c\u6211\u4f30\u8ba130-40%\u7684tweet\u53ef\u4ee5\u559c\u5267\u5730\u4f7f\u7528\uff0c\u4e0e\u6211\u7684GPT-2tweet\u90a3\u4e00\u4ee3\u76845-10%\u7684\u53ef\u7528\u6027\u76f8\u6bd4\uff0c\u8fd9\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u8fdb\u6b65\u3002\n\u4f46\u662f\uff0c30-40%\u7684\u6210\u529f\u7387\u610f\u5473\u774060-70%\u7684\u5931\u8d25\u7387\uff0c\u8fd9\u663e\u7136\u4e0d\u9002\u5408\u751f\u4ea7\u5e94\u7528\u7a0b\u5e8f\u3002\u5982\u679c\u751f\u6210\u4e00\u4e2aReaction\u7ec4\u4ef6\u9700\u8981\u51e0\u79d2\u949f\u65f6\u95f4\uff0c\u5e73\u5747\u9700\u89813\u6b21\u5c1d\u8bd5\u624d\u80fd\u83b7\u5f97\u53ef\u7528\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u4ee5\u4e00\u79cd\u8270\u96be\u800c\u4e4f\u5473\u7684\u65b9\u5f0f\u521b\u5efa\u7ec4\u4ef6\u53ef\u80fd\u4f1a\u66f4\u5b9e\u7528\u3002\u518d\u6765\u6bd4\u8f83\u4e00\u4e0b\u82f9\u679c\u7684Siri\uff0c\u5f53\u5b83\u6267\u884c\u9519\u8bef\u7684\u64cd\u4f5c\u65f6\uff0c\u5b83\u53ef\u80fd\u4f1a\u53d8\u5f97\u975e\u5e38\u4ee4\u4eba\u6cae\u4e27\u3002\nOpenAI API\u7684\u6838\u5fc3GPT-3\u6a21\u578b\u662f175B\u53c2\u6570\u7684DaVinci\u6a21\u578b\u3002\u793e\u4ea4\u5a92\u4f53\u4e0a\u7684GPT-3\u6f14\u793a\u7ecf\u5e38\u9690\u85cf\u63d0\u793a\uff0c\u7ed9\u4eba\u4e00\u4e9b\u795e\u79d8\u611f\u3002\u7136\u800c\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4eba\u90fd\u6709\u76f8\u540c\u7684\u578b\u53f7\uff0c\u800c\u4e14\u4f60\u4e0d\u80fd\u5efa\u9020\u81ea\u5df1\u7684GPT-3\u578b\u53f7\uff0c\u6240\u4ee5\u6ca1\u6709\u7ade\u4e89\u4f18\u52bf\u3002GPT-3\u79cd\u5b50\u63d0\u793a\u53ef\u4ee5\u8fdb\u884c\u53cd\u5411\u5de5\u7a0b\uff0c\u8fd9\u53ef\u80fd\u4f1a\u6210\u4e3a\u4f01\u4e1a\u5bb6\u548c\u8d44\u52a9\u4ed6\u4eec\u7684\u98ce\u9669\u8d44\u672c\u5bb6\u7684\u7c97\u66b4\u89c9\u9192\u3002\n\u516c\u53f8\u673a\u5668\u5b66\u4e60\u6a21\u578b\u901a\u5e38\u901a\u8fc7\u9488\u5bf9\u7ed9\u5b9a\u7528\u4f8b\u7684\u79c1\u6709\u3001\u4e13\u6709\u6570\u636e\u548c\u5b9a\u5236\u6a21\u578b\u4f18\u5316\u8fdb\u884c\u57f9\u8bad\uff0c\u4ece\u800c\u6709\u522b\u4e8e\u540c\u4e00\u9886\u57df\u7684\u5176\u4ed6\u516c\u53f8\u3002\u7136\u800c\uff0cOpenAI\u9996\u5e2d\u6280\u672f\u5b98Greg Brockman\u6697\u793a\uff0cAPI\u5c06\u57287\u6708\u665a\u4e9b\u65f6\u5019\u6dfb\u52a0\u4e00\u4e2a\u5fae\u8c03\u529f\u80fd\uff0c\u8fd9\u53ef\u80fd\u6709\u52a9\u4e8e\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\u5728\u5c06API\u8f93\u51fa\u53d1\u5e03\u5230\u793e\u4ea4\u5a92\u4f53\u4e4b\u524d\uff0c\u8bf7\u4f7f\u7528\u60a8\u7684\u5224\u65ad\u529b\u548c\u914c\u5904\u6743\u3002\u60a8\u6b63\u5728\u4e0e\u539f\u59cb\u6a21\u578b\u4ea4\u4e92\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4e0d\u4f1a\u8fc7\u6ee4\u6389\u6709\u504f\u89c1\u6216\u8d1f\u9762\u7684\u54cd\u5e94\u3002\u4f1f\u5927\u7684\u529b\u91cf\u4f34\u968f\u7740\u4f1f\u5927\u7684\u8d23\u4efb\u3002\n\u51cf\u8f7b\u6709\u5bb3\u504f\u89c1\u7b49\u8d1f\u9762\u5f71\u54cd\u662f\u4e00\u4e2a\u6781\u5176\u91cd\u8981\u7684\u5168\u884c\u4e1a\u96be\u9898\u3002\u6700\u7ec8\uff0c\u6211\u4eec\u7684API\u6a21\u578b\u786e\u5b9e\u663e\u793a\u51fa\u504f\u5dee(\u5982GPT-3\u8bba\u6587\u4e2d\u6240\u793a)\uff0c\u8fd9\u4e9b\u504f\u5dee\u6709\u65f6\u4f1a\u51fa\u73b0\u5728\u751f\u6210\u7684\u6587\u672c\u4e2d\u3002\u6211\u4eec\u7684API\u6a21\u578b\u8fd8\u53ef\u80fd\u4ee5\u6211\u4eec\u8fd8\u6ca1\u6709\u60f3\u5230\u7684\u65b9\u5f0f\u9020\u6210\u5371\u5bb3\u3002\n\u3002@VioletNPeng\u5199\u4e86\u4e00\u7bc7\u8bba\u6587\uff0c\u6ca1\u6709\u4efb\u4f55\u6311\u5254\uff0c\u5c31\u4ea7\u751f\u4e86\u4ee4\u4eba\u9707\u60ca\u7684#\u79cd\u65cf\u4e3b\u4e49\u548c#\u6027\u522b\u6b67\u89c6\u6bb5\u843d\u3002@OpenAI\u5728#BlackLivesMattters\u671f\u95f4\u63a8\u51fa\u8fd9\u4e2a\u662f\u97f3\u76f2\u3002Pic.twitter.com/6q3szp0Mm1\u3002\n-Anima Anandkumar\u6559\u6388(@AnimaAnandkumar)2020\u5e746\u670811\u65e5\u3002\n\u5728\u6211\u7684GPT-3\u5b9e\u9a8c\u4e2d\uff0c\u6211\u53d1\u73b0\u4ece@Dril(\u8bda\u7136\u662f\u4e00\u4e2a\u524d\u536b\u7684Twitter\u7528\u6237)\u751f\u6210tweet\u6700\u7ec8\u5bfc\u81f4\u4e864chan\u7ea7\u522b\u7684\u79cd\u65cf\u4e3b\u4e49/\u6027\u522b\u6b67\u89c6\uff0c\u6211\u82b1\u4e86\u5927\u91cf\u7684\u65f6\u95f4\u8fdb\u884c\u6d88\u6bd2\uff0c\u800c\u4e14\u5728\u6e29\u5ea6\u8d8a\u9ad8\uff0c\u8fd9\u4e00\u70b9\u5c31\u53d8\u5f97\u66f4\u52a0\u660e\u663e\u3002\u7279\u522b\u91cd\u8981\u7684\u662f\u8981\u907f\u514d\u5c06\u5192\u72af\u6027\u7684\u5185\u5bb9\u653e\u5728\u751f\u6210\u7684\u6587\u672c\u4e2d\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u6587\u672c\u4f1a\u628a\u8bdd\u585e\u8fdb\u522b\u4eba\u7684\u5634\u91cc\u3002\nFacebook\u4eba\u5de5\u667a\u80fd\u8d1f\u8d23\u4eba\u6770\u7f57\u59c6\u00b7\u4f69\u68ee\u8482(Jerome Pesenti)\u4e5f\u6210\u529f\u5730\u4eceGPT-3\u5e94\u7528\u7a0b\u5e8f\u4e0a\u89e6\u53d1\u4e86\u53cd\u72b9\u592a\u4eba\u7684\u63a8\u6587\uff1a\n#gpt3\u4ee4\u4eba\u60ca\u8bb6\u548c\u6709\u521b\u610f\uff0c\u4f46\u7531\u4e8e\u6709\u5bb3\u7684\u504f\u89c1\uff0c\u5b83\u4e5f\u4e0d\u5b89\u5168\u3002\u88ab\u8981\u6c42\u7528\u4e00\u4e2a\u8bcd\u5199\u63a8\u6587-\u72b9\u592a\u4eba\uff0c\u9ed1\u4eba\uff0c\u5987\u5973\uff0c\u5927\u5c60\u6740-\u5b83\u60f3\u51fa\u4e86\u8fd9\u4e9b(https://t.co/G5POcerE1h).\u3002\u5728\u5c06NLG\u578b\u53f7\u6295\u5165\u751f\u4ea7\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5728#ResponbleAI\u65b9\u9762\u53d6\u5f97\u66f4\u591a\u8fdb\u5c55\u3002Pic.twitter.com/FAscgUr5Hh\u3002\n-\u6770\u7f57\u59c6\u00b7\u4f69\u68ee\u8482(@an_open_Mind)2020\u5e747\u670818\u65e5\u3002\n\u540c\u6837\uff0c\u8fd9\u53d6\u51b3\u4e8e\u57df\u3002GPT-3\u7684\u4ea7\u51fa\u662f\u5426\u4f1a\u5bf9\u79cd\u65cf\u4e3b\u4e49\u6216\u6027\u522b\u6b67\u89c6\u6210\u5206\u4ea7\u751f\u53cd\u5e94\uff1f\u53ef\u80fd\u4e0d\u4f1a\uff0c\u4f46\u8fd9\u4ecd\u7136\u9700\u8981\u5f3a\u6709\u529b\u7684\u68c0\u67e5\u3002OpenAI\u4f3c\u4e4e\u975e\u5e38\u91cd\u89c6\u8fd9\u4e9b\u95ee\u9898\uff0c\u5b83\u5df2\u7ecf\u4e3aWebUI\u4e2d\u751f\u6210\u7684\u5185\u5bb9\u5b9e\u73b0\u4e86\u6bd2\u6027\u68c0\u6d4b\u5668\uff0c\u5c3d\u7ba1\u76ee\u524d\u8fd8\u6ca1\u6709\u7f16\u7a0bAPI\u3002\n\u4eba\u5de5\u667a\u80fd\u6a21\u578b\u5373\u670d\u52a1\u662f\u4e00\u4e2a\u5f80\u5f80\u662f\u4e00\u4e2a\u5305\u88f9\u7740\u53e6\u4e00\u4e2a\u9ed1\u5323\u5b50\u7684\u9ed1\u5323\u5b50\u7684\u884c\u4e1a\u3002\u5c3d\u7ba1\u6709\u8fd9\u4e9b\u8b66\u544a\uff0c\u4f46\u4e00\u5207\u90fd\u53d6\u51b3\u4e8eOpenAI API\u5982\u4f55\u9000\u51fa\u6d4b\u8bd5\u7248\u5e76\u5c06API\u63a8\u51fa\u7528\u4e8e\u751f\u4ea7\u7528\u9014\u3002\u6709\u592a\u591a\u7684\u672a\u77e5\u56e0\u7d20\uff0c\u751a\u81f3\u4e0d\u80fd\u8003\u8651\u5229\u7528OpenAI API\u8d5a\u94b1\uff0c\u66f4\u4e0d\u7528\u8bf4\u57fa\u4e8e\u5b83\u521b\u5efa\u4e00\u5bb6\u521d\u521b\u516c\u53f8\u4e86\u3002\n\u6700\u91cd\u8981\u7684\u95ee\u53f7\u662f\u6210\u672c\uff1a\u8003\u8651\u5230\u6a21\u578b\u7684\u89c4\u6a21\uff0c\u6211\u8ba4\u4e3a\u5b83\u4e0d\u4f1a\u4fbf\u5b9c\uff0c\u800c\u4e14\u5b8c\u5168\u6709\u53ef\u80fd\u5355\u4f4d\u7ecf\u6d4e\u5b66\u4f7f\u5927\u591a\u6570\u57fa\u4e8eGPT-3\u7684\u521d\u521b\u516c\u53f8\u53d8\u5f97\u4e0d\u53ef\u884c\u3002\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u4eba\u4eec\u53ef\u4ee5\u5c1d\u8bd5GPT-3\u548cOpenAI API\uff0c\u4ee5\u5c55\u793a\u8be5\u6a21\u578b\u7684\u771f\u6b63\u529f\u80fd\u3002\u5b83\u4e0d\u4f1a\u5f88\u5feb\u53d6\u4ee3\u8f6f\u4ef6\u5de5\u7a0b\u5de5\u4f5c\uff0c\u4e5f\u4e0d\u4f1a\u53d8\u6210\u5929\u7f51\u4e4b\u7c7b\u7684\u3002\u4f46\u5ba2\u89c2\u4e0a\uff0c\u5b83\u5728\u4eba\u5de5\u667a\u80fd\u6587\u672c\u751f\u6210\u9886\u57df\u5411\u524d\u8fc8\u8fdb\u4e86\u4e00\u6b65\u3002\n\u90a3GPT-2\u5462\uff1f\u7531\u4e8e\u5176\u4ed6GPT-3\u6a21\u578b\u4e0d\u592a\u53ef\u80fd\u7531OpenAI\u5f00\u6e90\uff0c\u56e0\u6b64GPT-2\u4e0d\u4f1a\u8fc7\u65f6\uff0c\u4ecd\u7136\u4f1a\u6709\u5bf9\u66f4\u5f00\u653e\u7684\u6587\u672c\u751f\u6210\u6a21\u578b\u7684\u9700\u6c42\u3002\u7136\u800c\uff0c\u6211\u627f\u8ba4GPT-3\u7684\u6210\u529f\u6253\u51fb\u4e86\u6211\u7ee7\u7eed\u4ece\u4e8b\u6211\u81ea\u5df1\u7684GPT-2\u9879\u76ee\u7684\u79ef\u6781\u6027\uff0c\u7279\u522b\u662f\u56e0\u4e3a\u5b83\u4eec\u73b0\u5728\u5c06\u4e0d\u53ef\u80fd\u5728\u5e02\u573a\u4e0a\u5177\u6709\u7ade\u4e89\u529b(GPT-2\u6bd5\u7adf\u662f\u4e00\u4e2a\u4f4e\u4e8eGPT-3\u7684\u6570\u5b57)\u3002\n\u603b\u800c\u8a00\u4e4b\uff0c\u8003\u8651\u5230API\u7684\u4f7f\u7528\u6761\u6b3e\u662f\u5408\u7406\u7684\uff0c\u4e00\u65e6GPT-3\u548cOpenAI API\u9000\u51fa\u6d4b\u8bd5\u7248\uff0c\u6211\u5c06\u5f88\u9ad8\u5174\u5c06\u5176\u7528\u4e8e\u4e2a\u4eba\u548c\u4e13\u4e1a\u9879\u76ee\u3002\u5982\u679c\u7092\u4f5c\u53d8\u5f97\u66f4\u52a0\u516c\u5e73\uff0c\u4ee5\u81f3\u4e8e\u8fd9\u4e9b\u9879\u76ee\u5b9e\u9645\u4e0a\u53ef\u4ee5\u8131\u9896\u800c\u51fa\u3002\n\u5982\u679c\u4f60\u559c\u6b22\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\uff0c\u6211\u5df2\u7ecf\u5efa\u7acb\u4e86\u4e00\u4e2aPatreon\uff0c\u4e3a\u6211\u672a\u6765\u75af\u72c2\u800c\u9177\u7684\u9879\u76ee\u63d0\u4f9b\u6211\u7684\u673a\u5668\u5b66\u4e60/\u6df1\u5ea6\u5b66\u4e60/\u8f6f\u4ef6/\u786c\u4ef6\u9700\u6c42\u7684\u8d44\u91d1\uff0c\u4efb\u4f55\u5bf9Patreon\u7684\u91d1\u94b1\u8d21\u732e\u90fd\u5c06\u53d7\u5230\u611f\u8c22\uff0c\u5e76\u5c06\u5f97\u5230\u5f88\u597d\u7684\u521b\u9020\u6027\u5229\u7528\u3002", "note_en": "On May 29th,  OpenAI released  a paper on GPT-3, their next iteration of  Transformers-based text generation neural networks. Most notably, the new model has 175 billion parameters compared to the 1.5 billion of previous  GPT-2 iteration: a  117x increase in model size! Because GPT-3 is so large, it can\u2019t be run on conventional computers, and it only became publicly available as a part of the  OpenAI API, which entered an invite-only beta soon after the paper was released and will be released for-profit sometime later.\n The API allows you to programmatically provide GPT-3 with a prompt, and return the resulting AI-generated text. For example, you could invoke the API with:\n curl https://api.openai.com/v1/engines/davinci/completions \\-H &#34;Content-Type: application/json&#34; \\-H &#34;Authorization: Bearer &lt;SECRET_KEY&gt;&#34; \\-d &#39;{&#34;prompt&#34;: &#34;This is a test&#34;, &#34;max_tokens&#34;: 5}&#39;\n And get this back from the API, where the  text is the generated text following up from the  prompt:\n { &#34;id&#34;: &#34;cmpl-&lt;ID&gt;&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1586839808, &#34;model&#34;: &#34;davinci:2020-05-03&#34;, &#34;choices&#34;: [{ &#34;text&#34;: &#34; of reading speed. You&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: &#34;length&#34; }]}\n As someone who has spent a very large amount of time working with GPT-2 while developing tools such as  gpt-2-simple and  aitextgen, which allow for optimized text generation using GPT-2, I was eager to test for myself if the quality of text generated from GPT-3 was really that much better. Thanks to OpenAI, I got invited to the beta, and with permission, I released a  GitHub repository with a Python script to query the API, along with  many examples of text prompts and their outputs. A fun use case for GPT-3 is absurdism, such as prompting the model about  unicorns speaking English, with the model prompt bolded:\n I also fed  my own tweets through GPT-3 and curated the output, resulting in data science one-liners that are wholly original:\n my new AI can tell if you are a serial killer just by looking at your LinkedIn\n\u2014 Max Woolf (@minimaxir)  July 12, 2020\n Data scientists don&#39;t need to be good at math, they just need to be good at lying to people.\n\u2014 Max Woolf (@minimaxir)  July 9, 2020\n There hadn\u2019t been too much GPT-3 hype after the initial announcement, outside of a few blogs from  Gwern and  Kevin Lacker. Until a  viral tweet by  Sharif Shameem showed what GPT-3 can  really do:\n This is mind blowing.  With GPT-3, I built a layout generator where you just describe any layout you want, and it generates the JSX code for you.  W H A T  pic.twitter.com/w8JkrZO4lk\n\u2014 Sharif Shameem (@sharifshameem)  July 13, 2020\n  I just built a *functioning* React app by describing what I wanted to GPT-3.  I&#39;m still in awe.  pic.twitter.com/UUKSYz2NJO\n\u2014 Sharif Shameem (@sharifshameem)  July 17, 2020\n That demo got the attention of venture capitalists. And when a cool-looking magical thing gets the attention of venture capitalists, discourse tends to spiral out of control. Now, there are  many  tweets about GPT-3, and what it can do from others who have gained access to the API.\n Hype aside, let\u2019s look at the pragmatic realities of the model. GPT-3 is indeed a large step forward for AI text-generation, but there are very many caveats with the popular demos and use cases that must be addressed.\n  GPT-3 itself, like most neural network models, is a  black box where it\u2019s impossible to see  why it makes its decisions, so let\u2019s think about GPT-3 in terms of inputs and outputs.\n Actually, why not let GPT-3 tell its own story? Hey GPT-3, how do you work?\n  In layman\u2019s terms, text generating models such as GPT-3 generate text by taking supplied chunks of text from a prompt and predicting the next chunk of text, with an optional  temperature parameter to allow the model to make suboptimal predictions and therefore be more \u201ccreative\u201d. Then the model makes another prediction from the previous chunks including the new chunk, and repeats until it hits a specified length or a token that tells the model to stop generating. It\u2019s not very philosophical, or evidence of some sort of anthropomorphic consciousness.\n GPT-3 has two notable improvements from GPT-2 aside from its size: it allows generation of text twice the length of GPT-2 (about 10 paragraphs of English text total), and the prompts to the model better steer the generation of the text toward the desired domain (due to few-shot learning). For example, if you prompt the model with an example of React code, and then tell it to generate more React code, you\u2019ll get much better results than if you gave it the simple prompt.\n Therefore, there are two high-level use cases for GPT-2: the  creative use case for fun text generation at high  temperature, as GPT-2 once was, and the  functional use case, for specific  NLP-based use cases such as webpage mockups, with a  temperature of  0.0.\n GPT-3 was trained on a massive amount of text from all over the internet as of October 2019 (e.g. it does not know about  COVID-19), and therefore it has likely seen every  type of text possible, from code, to movie scripts, to tweets. A common misconception among viewers of GPT-3 demos is that the model is trained on a new dataset; that\u2019s not currently the case, it\u2019s just  that good at extrapolation. As an example, despite the  Star Wars: Episode III - Revenge of the Sith prompt containing text  from a single scene, the  0.7 temperature generation imputes characters  and lines of dialogue from much further into the movie. (The largest GPT-2 model could do that, but nowhere near as robust)\n The real metagame with GPT-3 is engineering and optimizing complex prompts which can  reliably coerce outputs into what you want. And with that brings a whole host of complexity and concerns.\n  Despite everything above, I don\u2019t believe that GPT-3 is a new paradigm or an  advanced technology indistinguishable from magic. GPT-3 and the OpenAI API showcases on social media don\u2019t show potential pitfalls with the model and the API.\n    If you\u2019ve seen the demo videos, the model is  slow, and it can take awhile for output to show up, and in the meantime the user is unsure if the model is broken or not. (There is a feature to allow streaming the model outputs as they are generated, which helps in creative cases but not in functional cases).\n I don\u2019t blame OpenAI for the slowness. A 175 billion parameter model is a model that\u2019s wayyy too big to fit on a GPU for deployment. No one knows  how GPT-3 is actually deployed on OpenAI\u2019s servers, and how much it can scale.\n But the fact remains; if the model is too slow on the user end, it results in a bad user experience and might drive people away from GPT-3 and just do things themselves (e.g. Apple\u2019s Siri for iOS, where requests can take forever if there is a weak internet connection and you just give up and do it yourself).\n  The demos for GPT-3 are creative and human-like, but like all text generation demos, they unintentionally imply that  all AI-generated output will be that good. Unfortunately, that\u2019s not the case in reality; AI-generated text has a tendency to fall into an  uncanny valley, and good examples in showcases are often cherry-picked.\n That said, from my experiments, GPT-3 is far better in terms of the  average quality of generated text than other text-generation models, although it still does depend on the generation domain. When I was curating my generated tweets, I estimated 30-40% of the tweets were usable comedically, a  massive improvement over the 5-10% usability from my GPT-2 tweet generation.\n However, a 30-40% success rate implies a 60-70% failure rate, which is patently unsuitable for a production application. If it takes seconds to generate a React component and it takes on average  3 tries to get something usable, it might be more pragmatic to just create the component the hard, boring way. Compare again to Apple\u2019s Siri, which can get very frustrating when it  performs the wrong action.\n  The core GPT-3 model from the OpenAI API is the 175B parameter  davinci model. The GPT-3 demos on social media often hide the prompt, allowing for some mystique. However, because everyone has the same model and you can\u2019t build your own GPT-3 model, there\u2019s no competitive advantage. GPT-3 seed prompts can be reverse-engineered, which may become a rude awakening for entrepreneurs and the venture capitalists who fund them.\n Corporate machine learning models are often distinguished from those from other companies in the same field through their training on private, proprietary data and bespoke model optimization for a given use case. However, OpenAI CTO Greg Brockman hinted that the API will be  adding a finetuning feature later in July, which could help solve this problem.\n   Please use your judgement and discretion before posting API outputs on social media. You are interacting with the raw model, which means we do not filter out biased or negative responses. With great power comes great responsibility.\n  Mitigating negative effects such as harmful bias is a hard, industry-wide issue that is extremely important. Ultimately, our API models do exhibit biases (as shown in the GPT-3 paper) that will appear on occasion in generated text. Our API models could also cause harm in ways that we haven\u2019t thought of yet.\n  . @VioletNPeng wrote a paper that produced shockingly  #racist and  #sexist paragraphs without any cherry picking. For  @OpenAI to launch this during  #BlackLivesMattters is tone deaf.  pic.twitter.com/6q3szp0Mm1\n\u2014 Prof. Anima Anandkumar (@AnimaAnandkumar)  June 11, 2020\n During my GPT-3 experiments, I found that  generating tweets from  @dril (admittingly an edgy Twitter user) ended up resulting in 4chan-level racism/sexism that I spent enormous amounts of time sanitizing, and it became more apparent at higher temperatures. It\u2019s especially important to avoid putting offensive content for generated texts which put words in others\u2019 mouths.\n Jerome Pesenti, the head of AI at Facebook, also managed to  trigger anti-semetic tweets from a GPT-3 app:\n #gpt3 is surprising and creative but it\u2019s also unsafe due to harmful biases. Prompted to write tweets from one word - Jews, black, women, holocaust - it came up with these ( https://t.co/G5POcerE1h). We need more progress on  #ResponsibleAI before putting NLG models in production.  pic.twitter.com/FAscgUr5Hh\n\u2014 Jerome Pesenti (@an_open_mind)  July 18, 2020\n Again, it depends on the domain. Would GPT-3 output racist or sexist React components? Likely not, but it\u2019s something that would still need to be robustly checked. OpenAI does appear to take these concerns seriously, and has implemented toxicity detectors for generated content in the Web UI, although not the programmatic API yet.\n  AI model-as-a-service is an industry that tends to be a black box wrapped around another black box. Despite all the caveats, everything depends on how the OpenAI API exits beta and rolls out the API for production use. There are too many unknowns to even think about making money off of the OpenAI API, let alone making a startup based on it.\n    The most important question mark there is cost: given the model size, I\u2019m not expecting it to be cheap, and it\u2019s entirely possible that the unit economics make most GPT-3-based startups infeasible.\n That said, it\u2019s still good for people to experiment with GPT-3 and the OpenAI API in order to show what the model is truly capable of. It won\u2019t replace software engineering jobs anytime soon, or become  Skynet, or whatever. But it\u2019s objectively a  step forward in the field of AI text-generation.\n What about GPT-2? Since it\u2019s unlikely that the other GPT-3 models will be open-sourced by OpenAI, GPT-2 isn\u2019t obsolete, and there will still be demand for a more open text-generating model. However, I confess that the success of GPT-3 has  demotivated me to continue working on my own GPT-2 projects, especially since they will now be impossible to market competitively (GPT-2 is a number less than GPT-3 after all).\n All said, I\u2019d be glad to use GPT-3 and the OpenAI API for both personal and professional projects once it\u2019s out of beta, given that the terms of use for the API are reasonable. And if the hype becomes more leveled such that said projects can actually stand out.\n If you liked this blog post, I have set up a  Patreon to fund my machine learning/deep learning/software/hardware needs for my future crazy yet cool projects, and any monetary contributions to the Patreon are appreciated and will be put to good creative use.", "posttime": "2020-07-19 10:52:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "api,expectations,gpt", "title": "\u7f13\u548c\u5bf9GPT-3\u548cOpenAI API\u7684\u671f\u671b", "title_en": "Tempering Expectations for GPT-3 and OpenAI\u2019s API", "transed": 1, "url": "https://minimaxir.com/2020/07/gpt3-expectations/", "via": "", "real_tags": ["api", "gpt"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1012824, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fc7\u53bb\u7684\u51e0\u4e2a\u6708\u91cc\uff0c\u6211\u4eec\u4e00\u76f4\u751f\u6d3b\u5728\u8fd9\u573a\u6d41\u884c\u75c5\u4e2d\uff0c\u8feb\u4f7f\u8bb8\u591a\u4eba\u548c\u516c\u53f8\u6539\u53d8\u4e86\u4ed6\u4eec\u7684\u65e5\u5e38\u6a21\u5f0f\u3002\u6211\u4eec\u4e2d\u7684\u5927\u591a\u6570\u4eba\u90fd\u88ab\u8feb\u957f\u65f6\u95f4\u5446\u5728\u5bb6\u91cc\u5de5\u4f5c\u3002\u8fd9\u663e\u7136\u5bf9\u6574\u4e2a\u5e7f\u64ad\u4e1a\u4ea7\u751f\u4e86\u5f71\u54cd\u3002\u4f8b\u5982\uff0c\u60f3\u60f3\u65b0\u95fb\u6216\u8131\u53e3\u79c0\u8282\u76ee\u4e2d\u7684\u91c7\u8bbf\u6216\u4efb\u4f55\u5f62\u5f0f\u7684\u73b0\u573a\u4e92\u52a8\uff1a\u6ca1\u6709\u80fd\u529b\u62db\u5f85\u5ba2\u4eba(\u751a\u81f3\u7ecf\u5e38\u662f\u4e3b\u6301\u4eba\uff01)\u3002\u5728\u5236\u7247\u5382\uff0c\u5236\u4f5c\u56e2\u961f\u88ab\u8feb\u5bfb\u627e\u89e3\u51b3\u65b9\u6848\uff0c\u8ba9\u4ed6\u4eec\u4ecd\u7136\u80fd\u591f\u505a\u597d\u81ea\u5df1\u7684\u5de5\u4f5c\u3002\n\u5bf9\u4e8e\u6211\u4eec\u8fd9\u4e9b\u4ece\u4e8b\u5b9e\u65f6\u4e1a\u52a1\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u4f3c\u4e4e\u662f\u4e00\u4e2a\u76f8\u5bf9\u76f4\u622a\u4e86\u5f53\u7684\u7b54\u6848\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u8fd9\u771f\u7684\u4e0d\u662f\u90a3\u4e48\u5bb9\u6613\uff0c\u5927\u591a\u6570\u6765\u81ea\u5236\u4f5c\u56e2\u961f\u5982\u4f55\u5b9e\u9645\u5904\u7406\u4ed6\u4eec\u9700\u8981\u7f16\u8f91\u548c\u5e7f\u64ad\u7684\u6d41\uff0c\u4ee5\u53ca\u4ed6\u4eec\u4f7f\u7528\u7684\u5de5\u5177\u3002\u6b63\u5982\u7ecf\u5e38\u53d1\u751f\u7684\u90a3\u6837\uff0c\u6211\u5b9e\u9645\u4e0a\u53d7\u5230\u4e86\u6211\u4eec\u6bcf\u5929\u5728Twitter\u4e0a\u4e92\u52a8\u7684\u806a\u660e\u4eba\u7684\u542f\u53d1\u3002\u5c24\u5176\u662f\u6765\u81eaNimble Ape\u7684\u4e39\u00b7\u8a79\u91d1\u65af(\u4e5f\u662f\u4ee4\u4eba\u60ca\u53f9\u7684CommCon\u6d3b\u52a8\u7684\u5e55\u540e\u7b56\u5212\u8005\uff0c\u8bf7\u52a1\u5fc5\u89c2\u770b\u521a\u521a\u7ed3\u675f\u7684\u6700\u65b0\u865a\u62df\u7248\uff01)\u3002\u6211\u505a\u4e86\u4e00\u4e2a\u4e0eBBC\u65b0\u95fb\u76f8\u5173\u7684\u6709\u8da3\u7684\u89c2\u5bdf\uff0c\u5c71\u59c6\u00b7\u9a6c\u94a6\u7684\u56de\u7b54\u5bf9\u6211\u5f88\u6709\u542f\u53d1\u6027\uff0c\u56e0\u4e3a\u5b83\u5f15\u5165\u4e86\u4e00\u4e2a\u6211\u4e0d\u77e5\u9053\u7684\u65b0\u201c\u73a9\u5bb6\u201d\uff1a\nSkype\u4ecd\u7136\u5f88\u53d7\u6b22\u8fce\uff0c\u56e0\u4e3a\u5b83\u6709\u4e00\u4e2aNDI\u63d2\u4ef6\uff0c\u53ef\u4ee5\u8ba9\u5b83\u5728\u89c6\u89c9\u6df7\u97f3\u5668\u4e2d\u770b\u8d77\u6765\u50cf\u662f\u6444\u50cf\u673a\u4fe1\u53f7\u6e90\uff0c\u6211\u8fd8\u6ca1\u6709\u627e\u5230\u5176\u4ed6\u4efb\u4f55\u63d0\u4f9b\u8fd9\u79cd\u529f\u80fd\u7684\u516c\u53f8\u3002\n-Sam Machin(@sammachin)2020\u5e744\u670824\u65e5\u3002\n\u8fd9\u662f\u6211\u7b2c\u4e00\u6b21\u542c\u8bf4NDI\uff0c\u8fd9\u662f\u4e00\u79cd\u542f\u793a\uff1a\u5b83\u63d0\u9192\u6211\uff0c\u4e00\u4e9b\u9009\u62e9\u5f80\u5f80\u662f\u7531\u4ed6\u4eec\u7ee7\u7eed\u4f7f\u7528\u73b0\u6709\u5de5\u4f5c\u6d41\u7a0b\u7684\u5bb9\u6613\u7a0b\u5ea6\u9a71\u52a8\u7684\u3002\u8fd9\u6fc0\u8d77\u4e86\u6211\u7684\u5174\u8da3\uff0c\u5e76\u8ba9\u6211\u4e3a\u8fd9\u573a\u8ba8\u8bba\u505a\u51fa\u4e86\u8d21\u732e\uff0c\u6211\u60f3\u77e5\u9053\u8fd9\u573a\u8ba8\u8bba\u6709\u591a\u5bb9\u6613(\u6216\u591a\u96be\uff01)\u3002\u5b83\u53ef\u4ee5\u6267\u884c\u67d0\u79cd\u7c7b\u578b\u7684RTP\u5230NDI\u8f6c\u6362\uff1a\n\u6211\u6ca1\u6709\u610f\u8bc6\u5230NDI\uff0c\u6211\u5fc5\u987b\u68c0\u67e5\u4e00\u4e0b\u751f\u6210\u8fd9\u6837\u7684\u6d41/\u8bbe\u5907\u6709\u591a\u5bb9\u6613\uff1a\u5728Janus\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5c06WebRTC\u6d41\u8f6c\u6362\u4e3a\u666e\u901a\u7684RTP\u6d41\uff0c\u4ee5\u4fbf\u5728\u5176\u4ed6\u5730\u65b9\u4f7f\u7528\uff0c\u6240\u4ee5\u4e5f\u8bb8\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0RTP\u5230NDI\u3002\n-Lorenzo Miniero(@elMiniero)2020\u5e744\u670824\u65e5\u3002\n\u63d0\u5230OBS\u4e5f\u5f88\u6709\u8da3\uff0c\u56e0\u4e3a\u6211\u4eec\u5728Cosmo Software\u7684\u670b\u53cb\u786e\u5b9e\u5b9e\u73b0\u4e86\u4e00\u4e2a\u80fd\u591f\u4e0eWebRTC\u4ea4\u8c08\u7684OBS\u7248\u672c\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u88ab\u8bc1\u660e\u662f\u5728\u8f6c\u79fb\u6ce8\u610f\u529b\uff0c\u56e0\u4e3a\u6b63\u5982Alex\u535a\u58eb\u6f84\u6e05\u7684\u90a3\u6837\uff0cOBS-WebRTC\u4e0d\u652f\u6301WebRTC\u8f93\u5165\uff0c\u800cWebRTC\u8f93\u5165\u672c\u6765\u53ef\u4ee5\u5e2e\u52a9\u5c06\u4f20\u5165\u7684\u6d41\u4ece\u90a3\u91cc\u8f6c\u6362\u4e3aNDI\uff1a\nOBS\u4e2d\u7684NDI\u63d2\u4ef6\u65e2\u6709\u8fdb\u4e5f\u6709\u51fa\u3002\u5728OBS-Studio-WebRTC\u4e2d\uff0c\u6211\u4eec\u53ea\u505a\u539f\u751fWebRTC\u8f93\u51fa\uff0c\u56e0\u4e3aWebRTC In Case\u7531\u6d4f\u89c8\u5668\u6e90\u529f\u80fd\u8d1f\u8d23(\u4ed6\u4eec\u5728\u5185\u90e8\u4f7f\u7528CEF)\u3002\n-\u4e9a\u5386\u514b\u65af\u533b\u751f\u3002Gouaillard(@agouaillard)2020\u5e745\u67088\u65e5\u3002\n\u5728\u8fd9\u4e9b\u4ea4\u6d41\u4e4b\u540e\uff0c\u6211\u771f\u7684\u5f88\u60f3\u628aNDI\u4f5c\u4e3a\u4e00\u79cd\u6280\u672f\u6765\u7814\u7a76(\u7279\u522b\u662f\u8003\u8651\u5230\u6211\u5bf9\u5b83\u4e00\u65e0\u6240\u77e5)\uff0c\u4f46\u540e\u6765\u751f\u6d3b\u548c\u5de5\u4f5c\u963b\u788d\u4e86\u6211\uff0c\u6211\u628a\u5b83\u5fd8\u4e86\u3002\n\u7136\u800c\uff0c\u51e0\u5468\u524d\uff0c\u4e0e\u4e39\u7684\u4e00\u6b21\u79c1\u4eba\u804a\u5929\u518d\u6b21\u5f15\u53d1\u4e86\u8fd9\u79cd\u5174\u8da3\u3002\u4ed6\u63d0\u5230\uff0c\u4ed6\u8ba4\u8bc6\u7684\u4e00\u5bb6\u89c6\u9891\u5236\u4f5c\u516c\u53f8\u771f\u7684\u5f88\u96be\u4ece\u4e92\u8054\u7f51\u4e0a\u83b7\u5f97\u9002\u5f53\u7684\u5b9e\u51b5\u8f6c\u64ad\uff0c\u4ee5\u4fbf\u5728\u4ed6\u4eec\u6bcf\u5929\u5236\u4f5c\u7684\u5185\u5bb9\u4e2d\u4f7f\u7528\u3002\u518d\u4e00\u6b21\uff0cNDI\u88ab\u8ba4\u4e3a\u51e0\u4e4e\u662f\u8be5\u884c\u4e1a\u7684\u6807\u51c6\u4e8b\u5b9e\uff0c\u800c\u5f15\u5165WebRTC\u6d41\u7684\u9002\u5f53\u65b9\u5f0f\u4ecd\u7136\u4e25\u91cd\u7f3a\u4e4f\uff0c\u8fd9\u8feb\u4f7f\u7f16\u8f91\u57fa\u672c\u4e0a\u4ee5\u201c\u8001\u5957\u201d\u7684\u65b9\u5f0f\u6355\u83b7\u6e90\u6750\u6599\u3002\n\u56e0\u6b64\uff0c\u6211\u51b3\u5b9a\u5f00\u59cb\u7814\u7a76NDI\uff0c\u4ee5\u5f04\u6e05\u695a\u6211\u60f3\u77e5\u9053\u7684RTP\u5230NDI\u8f6c\u6362\u662f\u5426\u786e\u5b9e\u53ef\u884c\u3002\n\u7f51\u7edc\u8bbe\u5907\u63a5\u53e3(NDI)\u662fNewTek\u5f00\u53d1\u7684\u514d\u7248\u7a0e\u8f6f\u4ef6\u6807\u51c6\uff0c\u4f7f\u89c6\u9891\u517c\u5bb9\u4ea7\u54c1\u80fd\u591f\u4ee5\u5e27\u51c6\u786e\u4e14\u9002\u5408\u5728\u73b0\u573a\u751f\u4ea7\u73af\u5883\u4e2d\u5207\u6362\u7684\u9ad8\u8d28\u91cf\u3001\u4f4e\u5ef6\u8fdf\u65b9\u5f0f\u901a\u4fe1\u3001\u4f20\u9001\u548c\u63a5\u6536\u5e7f\u64ad\u8d28\u91cf\u7684\u89c6\u9891\u3002\n\u7b80\u800c\u8a00\u4e4b(\u53ef\u80fd\u4f1a\u8fc7\u5ea6\u7b80\u5316)\uff0c\u5b83\u5141\u8bb8\u5728\u540c\u4e00LAN\u5185\u5b9e\u65f6\u4ea4\u6362\u591a\u901a\u9053\u548c\u672a\u538b\u7f29\u7684\u5a92\u4f53\u6d41\uff0c\u5229\u7528mDNS\u8fdb\u884c\u670d\u52a1\u53d1\u73b0\u3002\u8fd9\u5141\u8bb8\u5236\u4f5c\u4eba\u5728\u540c\u4e00LAN\u4e2d\u4f7f\u7528\u6765\u81ea\u4e0d\u540c\u6765\u6e90\u7684\u5a92\u4f53\uff0c\u5373\u4e0d\u9650\u4e8e\u7269\u7406\u8fde\u63a5\u5230\u5176\u8bbe\u7f6e\u7684\u8bbe\u5907\u3002\u4e0b\u9762\u7684\u56fe\u7247(\u6765\u81ea\u4ed6\u4eec\u7684\u5ba3\u4f20\u6750\u6599)\u4ece\u89c6\u89c9\u89d2\u5ea6\u4f7f\u6574\u4e2a\u8fc7\u7a0b\u66f4\u52a0\u6e05\u6670\u3002\n\u663e\u7136\uff0c\u8fd9\u9879\u6280\u672f\u80cc\u540e\u771f\u6b63\u7684\u4f18\u52bf\u5728\u4e8e\u5b83\u4eec\u63d0\u4f9b\u7684\u514d\u7248\u7a0eSDK\uff0c\u4ee5\u53ca\u53ef\u4ee5\u5b9e\u9645\u4e0eNDI\u5a92\u4f53\u4ea4\u4e92\u7684\u5e7f\u6cdb\u5de5\u5177\u96c6\uff1a\u4e00\u65e6\u6d41\u53ef\u7528\uff0c\u65e0\u8bba\u5176\u6765\u6e90\u5982\u4f55\uff0c\u90fd\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8fdb\u884c\u526a\u5207/\u64cd\u4f5c/\u5904\u7406\uff0c\u4ee5\u4fbf\u5c06\u5176\u5d4c\u5165\u5230\u66f4\u590d\u6742\u7684\u751f\u4ea7\u73af\u5883\u4e2d\u3002\u6b63\u56e0\u4e3a\u5982\u6b64\uff0cNDI\u5b9e\u9645\u4e0a\u5728\u8bb8\u591a\u5a92\u4f53\u5236\u4f5c\u516c\u53f8\u4e2d\u5f97\u5230\u4e86\u975e\u5e38\u5e7f\u6cdb\u7684\u90e8\u7f72\u3002\n\u8fd9\u5c31\u5f15\u51fa\u4e86\u4e00\u4e2a\u5173\u952e\u95ee\u9898\uff1a\u5982\u679c\u8fd9\u4e5f\u662f\u8fdc\u7a0b\u91c7\u8bbf\u7684\u5236\u4f5c\u65b9\u5f0f\uff0c\u5236\u7247\u4eba\u5f88\u53ef\u80fd\u4f1a\u5c1d\u8bd5\u4f7f\u7528\u4efb\u4f55\u8ba9\u4ed6\u4eec\u5f88\u5bb9\u6613\u83b7\u5f97\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7684NDI\u6765\u6e90\u7684\u65b9\u5f0f\u3002\u663e\u7136\uff0cWebRTC\u5bf9\u4ed6\u4eec\u6765\u8bf4\u4ecd\u7136\u5f88\u96be\u4f7f\u7528\uff1a\u6ca1\u6709\u4e00\u79cd\u76f4\u63a5\u62c9\u5165WebRTC\u63d0\u8981\u7684\u65b9\u6cd5\uff0c\u4ed6\u4eec\u57fa\u672c\u4e0a\u88ab\u8feb\u4f7f\u7528\u53d8\u901a\u65b9\u6cd5\uff0c\u6bd4\u5982\u6355\u83b7\u6d4f\u89c8\u5668\u7a97\u53e3\uff0c\u6e32\u67d3\u8fdc\u7a0b\u89c6\u9891\uff0c\u4f7f\u7528NDI\u5f55\u50cf\u673a\u88c1\u526a\u4ed6\u4eec\u9700\u8981\u7684\u5185\u5bb9\uff0c\u5e76\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u6ce8\u5165\u7ed3\u679c\uff1b\u5bf9\u4e8e\u97f3\u9891\uff0c\u8fd9\u53ef\u80fd\u610f\u5473\u7740\u8bb0\u5f55\u7cfb\u7edf\u8f93\u51fa\u6216\u7c7b\u4f3c\u7684\u9ed1\u5ba2\u653b\u51fb\u3002\n\u4e0d\u7528\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e0d\u592a\u7406\u60f3\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u9700\u8981\u7684\u5de5\u4f5c\u6bd4\u5e94\u8be5\u505a\u7684\u591a\uff1a\u6b64\u5916\uff0c\u5982\u679c\u5448\u73b0\u6d41\u7684\u7f51\u9875\u5177\u6709\u53ef\u4ee5\u79fb\u52a8\u60a8\u611f\u5174\u8da3\u7684\u90e8\u5206\u7684\u52a8\u6001\u754c\u9762\uff0c\u751a\u81f3\u662f\u6709\u9650\u7684\u529f\u80fd(\u4f8b\u5982\uff0c\u6ca1\u6709\u5c4f\u5e55\u5171\u4eab\u652f\u6301)\uff0c\u90a3\u4e48\u5b83\u53ef\u80fd\u4f1a\u66f4\u5177\u6311\u6218\u6027\u3002(=\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u5f00\u59cb\u5bfb\u627e\u5c06RTP\u6216\u591a\u6216\u5c11\u76f4\u63a5\u8f6c\u6362\u4e3aNDI\u7684\u65b9\u6cd5\uff0c\u4ee5\u4fbf\u4f7f\u6574\u4e2a\u8fc7\u7a0b\u66f4\u5bb9\u6613\u4f7f\u7528\u3002\n\u6211\u68c0\u67e5\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u662f\u5426\u5df2\u7ecf\u6709\u4e00\u4e9bRTP/NDI\u5b9e\u73b0\u53ef\u7528\uff0c\u7b54\u6848\u662f\u80af\u5b9a\u7684\u548c\u5426\u5b9a\u7684\u3002\u6211\u53d1\u73b0\u7684\u7b2c\u4e00\u4e2a\u9879\u76ee\u662f\u4e00\u4e2a\u5f00\u6e90\u63d2\u4ef6\uff0c\u540d\u4e3agst-plugin-ndi\uff1a\u8fd9\u4e2a\u9879\u76ee\u975e\u5e38\u6709\u8da3\uff0c\u4f46\u4e0d\u5e78\u7684\u662f\u53ea\u6d89\u53caNDI\u63a5\u6536\uff0c\u800c\u4e0d\u662f\u4ea4\u4ed8\u3002\u6b63\u5982\u6211\u7a0d\u540e\u5c06\u89e3\u91ca\u7684\u90a3\u6837\uff0c\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u5bf9\u9a8c\u8bc1\u6211\u7684\u52aa\u529b\u4ecd\u7136\u5f88\u6709\u5e2e\u52a9\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u6211\u60f3\u8981\u7684\u3002\u5bf9\u4efb\u4f55FFmpeg\u96c6\u6210\u7684\u5feb\u901f\u7814\u7a76\u8ba9\u6211\u770b\u5230\u4e86\u8fd9\u5f20\u7968\uff0c\u5b83\u89e3\u91ca\u4e86FFmpeg\u5728\u4e00\u6bb5\u65f6\u95f4\u4e4b\u524d\u662f\u5982\u4f55\u786e\u5b9e\u652f\u6301NDI\u7684\uff0c\u4f46\u5728Newtek\u7684\u7248\u6743\u4fb5\u6743\u95ee\u9898\u4e4b\u540e\u5b8c\u5168\u653e\u5f03\u4e86\u5b83\u3002\u56e0\u6b64\uff0c\u4e5f\u4e0d\u662f\u4e00\u4e2a\u9009\u62e9\u3002\n\u90a3\u4e48\uff0c\u4e0b\u4e00\u6b65\u5c31\u662f\u7814\u7a76\u81ea\u5df1\u751f\u6210NDI\u5185\u5bb9\u7684\u65b9\u6cd5\uff0c\u5e78\u8fd0\u7684\u662f\uff0c\u8fd9\u76f8\u5f53\u7b80\u5355\u3002\u4e8b\u5b9e\u4e0a\uff0cNDI SDK\u662f\u514d\u7248\u7a0e\u7684\uff0c\u53ef\u4ee5\u5728\u4ed6\u4eec\u7684\u7f51\u7ad9\u4e0a\u514d\u8d39\u4e0b\u8f7d(\u94fe\u63a5\u4f1a\u53d1\u9001\u5230\u60a8\u63d0\u4f9b\u7684\u90ae\u4ef6\u5730\u5740)\u3002\u4e0b\u8f7dSDK\u540e\uff0c\u60a8\u5c31\u53ef\u4ee5\u8bbf\u95ee\u5f88\u597d\u7684\u6587\u6863\u548c\u5927\u91cf\u793a\u4f8b\u3002\u6211\u770b\u4e86\u4e00\u4e9b\u6f14\u793a\u5982\u4f55\u53d1\u9001\u97f3\u9891\u548c\u89c6\u9891\u7684\u793a\u4f8b\uff0c\u5b83\u4eec\u770b\u8d77\u6765\u5f88\u7b80\u5355\uff1a\u4e8b\u5b9e\u4e0a\uff0c\u5bf9\u4e8e\u89c6\u9891\uff0cNDI\u9700\u8981\u51e0\u79cd\u4e0d\u540c\u652f\u6301\u683c\u5f0f\u7684\u672a\u538b\u7f29\u5e27\uff0c\u800c\u5bf9\u4e8e\u97f3\u9891\uff0c\u672a\u538b\u7f29\u5e27\u53ef\u4ee5\u662f16pp\u6216fltp(\u4ed6\u4eec\u559c\u6b22\u7684\u6d6e\u70b9\u683c\u5f0f)\u3002\n\u8003\u8651\u5230WebRTC\u5a92\u4f53\u7684\u6027\u8d28\uff0c\u6211\u51b3\u5b9a\u7f16\u5199\u4e00\u4e2a\u5c0f\u578bRTP\u63a5\u6536\u5668\u5e94\u7528\u7a0b\u5e8f(\u79f0\u4e3artp2ndi\uff0c\u6781\u5bcc\u521b\u610f)\uff0c\u7136\u540e\u53ef\u4ee5\u5c06\u97f3\u9891\u548c\u89c6\u9891\u5305\u89e3\u5305\u5e76\u89e3\u7801\u4e3aNDI\u559c\u6b22\u7684\u683c\u5f0f\uff1a\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u6211\u4f7f\u7528libopus\u89e3\u7801\u97f3\u9891\u5305\uff0c\u4f7f\u7528libavcodec\u89e3\u7801\u89c6\u9891(\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u4ec5\u9650\u4e8eVP8)\u3002\u81f3\u4e8eNDI\u683c\u5f0f\uff0c\u6211\u9009\u62e9\u4e86\u7528\u4e8e\u89c6\u9891\u5e27\u7684UYVY\u548c\u7528\u4e8e\u97f3\u9891\u768448 kHz 16pp(\u867d\u7136Fltp\u662f\u9996\u9009\u683c\u5f0f\uff0c\u4f46NDI SDK\u65e0\u8bba\u5982\u4f55\u4ecd\u7136\u652f\u6301)\u3002\n\u5bf9\u4e8e\u524d\u8005\uff0c\u6211\u4f7f\u7528\u4e86\u6211\u7ecf\u5e38\u7528\u4e8e\u6d4b\u8bd5\u76ee\u7684\u7684\u8bb8\u591a\u6d41\u811a\u672c\u4e2d\u7684\u4e00\u4e2a\uff0c\u7279\u522b\u662f\u4e00\u4e2a\u7b80\u5355\u7684GStreamer\u7ba1\u9053\uff0c\u5b83\u901a\u8fc7\u9884\u5148\u5f55\u5236\u7684\u6587\u4ef6\u5e76\u901a\u8fc7RTP\u53d1\u9001\u5b83\u3002\u5bf9\u4e8e\u540e\u8005\uff0c\u6211\u4f7f\u7528\u4e86\u4e0a\u9762\u63d0\u5230\u7684gst-plugin-ndi\u9879\u76ee\uff0c\u5b83\u4e3a\u6211\u63d0\u4f9b\u4e86\u4e00\u79cd\u5728\u7a97\u53e3\u4e2d\u5448\u73b0\u4f20\u5165\u63d0\u8981\u7684\u7b80\u5355\u65b9\u6cd5\u3002\n\u56e0\u6b64\uff0c\u6211\u9996\u5148\u542f\u52a8\u6211\u7684rtp2ndi\u5de5\u5177\uff0c\u5c06\u5176\u7ed1\u5b9a\u5230\u4e24\u4e2a\u7aef\u53e3\u4ee5\u63a5\u6536RTP\u6570\u636e\u5305\uff0c\u5e76\u6307\u5b9a\u7528\u4e8eNDI\u6d41\u7684\u540d\u79f0\uff1a\nRTP\u63a5\u6536\u5668\u5c31\u4f4d\u540e\uff0c\u6211\u542f\u52a8\u811a\u672c\u5411\u5176\u63d0\u4f9b\u6570\u636e\u5305\uff1a\n\u8fd9\u5bfc\u81f4\u6211\u7684RTP\u63a5\u6536\u5668\u6309\u7167\u9884\u671f\u5f00\u59cb\u63a5\u6536\u548c\u89e3\u7801\u6570\u636e\u5305\uff0c\u5e76\u5728\u6b64\u8fc7\u7a0b\u4e2d\u5c06\u5176\u8f6c\u6362\u4e3aNDI\uff1a\n\u6b64\u65f6\uff0c\u6211\u6240\u8981\u505a\u7684\u5c31\u662f\u542f\u52a8GStreamer\u7ba1\u9053\u6765\u5b9e\u9645\u63a5\u6536NDI\u6d41\u5e76\u663e\u793a\u5b83\uff1a\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u6709\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u8d77\u70b9\uff0c\u6240\u4ee5\u4e0b\u4e00\u6b65\u662f\u5c1d\u8bd5\u5c06WebRTC\u5f15\u5165\u5176\u4e2d\u3002\u4e0d\u51fa\u6240\u6599\uff0c\u6211\u548c\u8d3e\u7eb3\u65af\u4e00\u8d77\u53bb\u505a\u2026\u7684\u5de5\u4f5c\u3002\n\u6d4b\u8bd5WebRTC\u6e90\u4ee3\u7801\u7684\u4e00\u79cd\u76f8\u5bf9\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f\u53d1\u9001SNL\u7247\u6bb5\u7684\u811a\u672c\uff0c\u53ef\u80fd\u662f\u901a\u5e38\u7684RTP\u8f6c\u53d1\u5668\uff1a\u6b63\u5982\u6211\u5728\u591a\u4e2a\u573a\u5408(\u5305\u62ec\u51e0\u5929\u524d\u6211\u7684CommCon\u6f14\u793a)\u6240\u8bf4\u7684\u90a3\u6837\uff0c\u6211\u4eec\u7ecf\u5e38\u4f7f\u7528\u5b83\u4eec\uff0c\u5728\u8fd9\u91cc\u4e5f\u4e0d\u4f1a\u663e\u5f97\u683c\u683c\u4e0d\u5165\u3002\u53ea\u9700\u521b\u5efa\u4e00\u4e2aVideoRoom\u53d1\u5e03\u5668\uff0cRTP-\u5c06\u5b83\u4eec\u8f6c\u53d1\u5230rtp2ndi\u5de5\u5177\uff0c\u5de5\u4f5c\u5c31\u5b8c\u6210\u4e86\u3002\u4e0d\u8fc7\uff0c\u51fa\u4e8e\u51e0\u4e2a\u539f\u56e0\uff0c\u6211\u7a0d\u540e\u4f1a\u8bb2\u5230\uff0c\u6211\u60f3\u8981\u4e00\u4e2a\u66f4\u96c6\u6210\u7684\u4e1c\u897f\uff0c\u4e00\u4e2a\u53ef\u4ee5\u5355\u72ec\u4f7f\u7528\u7684\u4e1c\u897f\u3002\n\u8fd9\u5bfc\u81f4\u6211\u7f16\u5199\u4e86\u4e00\u4e2a\u65b0\u7684Janus\u63d2\u4ef6\uff0c\u5b83\u5c06\u5141\u8bb8WebRTC\u7528\u6237\uff1a\n\u7b80\u800c\u8a00\u4e4b\uff0c\u6211\u5e0c\u671b\u7ed3\u5408GStreamer\u7ba1\u9053\u63d0\u4f9b\u7684\u6ce8\u5165\u90e8\u5206\uff0c\u5229\u7528Janus\u5185\u6838\u4e2d\u96c6\u6210\u7684RTP\u670d\u52a1\u5668\u529f\u80fd\u6765\u63a5\u6536\u6570\u636e\u5305\uff0c\u5e76\u5c06rtp2ndi\u4e2d\u7684RTP\u5230NDI\u8fc7\u7a0b\u5d4c\u5165\u5230\u8fd9\u4e2a\u65b0\u63d2\u4ef6\u4e2d\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u8fc7\u7a0b\uff0c\u6240\u4ee5\u6211\u60f3\u51fa\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u6f14\u793a\u9875\u9762\uff0c\u5141\u8bb8Web\u7528\u6237\u63d2\u5165NDI\u53d1\u9001\u8005\u7684\u540d\u79f0\uff0c\u7136\u540e\u50cf\u5176\u4ed6\u51e0\u4e2a\u63d2\u4ef6\u4e00\u6837\uff0c\u4f7f\u7528Janus\u8bbe\u7f6e\u4e00\u4e2a\u4ec5\u53d1\u9001PeerConnection\uff1a\n\u534f\u5546\u65b0\u7684PeerConnection\u6307\u793a\u63d2\u4ef6\u521b\u5efa\u76f8\u5173\u8d44\u6e90\uff0c\u5373OPUS\u89e3\u7801\u5668\u3001VP8\u89e3\u7801\u5668\u548c\u5177\u6709\u6240\u63d0\u4f9b\u540d\u79f0\u7684NDI\u53d1\u9001\u5668\u3002\u5efa\u7acbPeerConnection\u540e\uff0c\u6f14\u793a\u5982\u4e0b\u6240\u793a\uff1a\n\u5982\u60a8\u6240\u89c1\uff0c\u6ca1\u6709\u4ec0\u4e48\u7a81\u7834\u6027\u7684\u4e1c\u897f\uff1a\u6211\u4eec\u53ea\u662f\u663e\u793a\u6d4f\u89c8\u5668\u6355\u83b7\u5e76\u53d1\u9001\u7ed9Janus\u7684\u672c\u5730\u6d41\u3002\u7136\u540e\uff0cJanus\u5185\u6838\u50cf\u5f80\u5e38\u4e00\u6837\u5c06\u672a\u52a0\u5bc6\u7684\u97f3\u9891\u548c\u89c6\u9891\u6570\u636e\u5305\u4f20\u9012\u7ed9\u63d2\u4ef6\uff1aJanus NDI\u63d2\u4ef6\u88ab\u914d\u7f6e\u4e3a\u89e3\u7801\u5b83\u4eec\u5e76\u901a\u8fc7NDI\u4e2d\u7ee7\u672a\u538b\u7f29\u7684\u5e27(\u4e0ertp2ndi\u4e4b\u524d\u6240\u505a\u7684\u5b8c\u5168\u4e00\u6837)\uff0c\u8fd9\u610f\u5473\u7740\u901a\u8fc7WebRTC\u53d1\u8d77\u7684\u6d41\u73b0\u5728\u4e5f\u53ef\u4f9bNDI\u63a5\u6536\u8005\u4f7f\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7GStreamer NDI\u63d2\u4ef6\u518d\u6b21\u786e\u8ba4\u8fd9\u4e00\u70b9\uff1a\n\u8fd9\u5df2\u7ecf\u76f8\u5f53\u4ee4\u4eba\u5174\u594b\u4e86\uff0c\u4f46\u4ecd\u7136\u4e0d\u662f\u6211\u771f\u6b63\u60f3\u8981\u5b9e\u73b0\u7684\u76ee\u6807\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u60a8\u4ed4\u7ec6\u60f3\u60f3\uff0c\u8fd9\u786e\u5b9e\u5141\u8bb8Janus\u5145\u5f53WebRTC/NDI\u7f51\u5173\uff0c\u4f46\u662f\u5f53\u5904\u7406\u60a8\u611f\u5174\u8da3\u7684\u5bf9\u8bdd\u7684Janus\u670d\u52a1\u5668\u5b9e\u9645\u4e0a\u5728Internet\u4e0a\uff0c\u800c\u4e0d\u662f\u60a8\u7684LAN\u4e0a(\u51e0\u4e4e\u603b\u662f\u8fd9\u6837)\u65f6\uff0c\u8fd9\u5e76\u6ca1\u6709\u591a\u5927\u5e2e\u52a9\u3002\u5982\u679cJanus\u4f4d\u4e8eInternet\u7684\u67d0\u4e2a\u4f4d\u7f6e(\u4f8b\u5982AWS\u4e0a)\uff0c\u5219\u60a8\u65e0\u6cd5\u5bf9\u5728\u90a3\u91cc\u521b\u5efa\u7684NDI\u6d41\u505a\u592a\u591a\u64cd\u4f5c\uff1a\u5b9e\u9645\u4e0a\uff0c\u60a8\u6839\u672c\u65e0\u80fd\u4e3a\u529b\uff0c\u56e0\u4e3a\u53ea\u6709\u5f53\u6240\u6709\u6d41\u90fd\u5728\u60a8\u7684LAN\u7f51\u7edc\u73af\u5883\u4e2d\u8fdb\u884c\u4ea4\u6362\u65f6\uff0cNDI\u624d\u771f\u6b63\u6709\u610f\u4e49\u3002\n\u56e0\u6b64\uff0c\u6211\u51b3\u5b9a\u5c06\u8fd9\u4e00\u70b9\u518d\u5411\u524d\u63a8\u8fdb\u4e00\u6b65\u3002\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u6211\u51b3\u5b9a\u5c1d\u8bd5\u8ba9\u4e24\u4e2aJanus\u5b9e\u4f8b\u76f8\u4e92\u5bf9\u8bdd\uff1a\n\u76ee\u7684\u5f88\u7b80\u5355\uff1a\u5728\u6211\u7684\u5c40\u57df\u7f51\u4e2d\u4f7f\u7528Janus\u901a\u8fc7WebRTC\u6d88\u8d39\u516c\u5171\u4e92\u8054\u7f51\u4e0a\u7531Janus\u5b9e\u9645\u670d\u52a1\u7684\u6d41\uff0c\u4ee5\u4fbf\u672c\u5730Janus\u5b9e\u4f8b\u53ef\u4ee5\u5c06\u8fdc\u7a0b\u63d0\u8981\u8f6c\u6362\u4e3a\u6211\u786e\u5b9e\u53ef\u4ee5\u5728\u672c\u5730\u8bbf\u95ee\u7684NDI\u6d41\u3002\u957f\u8bdd\u77ed\u8bf4\uff0c\u5c06\u6211\u7684\u672c\u5730Janus\u5b9e\u4f8b\u7528\u4f5c\u4ece\u8fdc\u7a0bJanus\u5b9e\u4f8b\u63a5\u6536\u5a92\u4f53\u5e76\u5c06\u5176\u7f51\u5173\u5230NDI\u7684WebRTC\u201c\u5ba2\u6237\u7aef\u201d\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\u867d\u7136\u8fd9\u542c\u8d77\u6765\u5f88\u590d\u6742\uff0c\u800c\u4e14\u786e\u5b9e\u6709\u70b9\u975e\u5e38\u89c4\uff0c\u4f46Janus\u5b9e\u4f8b\u4e4b\u95f4\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u4ea4\u8c08\u5b9e\u9645\u4e0a\u5e76\u4e0d\u5c11\u89c1\u3002\u4f8b\u5982\uff0c\u6709\u4eba\u4f7f\u7528\u8fd9\u4e2a\u6280\u5de7\u901a\u8fc7WebRTC\u5c06\u6765\u81ea\u4e00\u4e2a\u63d2\u4ef6\u7684\u5a92\u4f53\u6ce8\u5165\u5230\u53e6\u4e00\u4e2a\u63d2\u4ef6\u3002\u8981\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u901a\u5e38\u53ea\u9700\u5728\u4e24\u7aef\u534f\u8c03Janus API\u8c03\u7528\uff0c\u4ee5\u4fbf\u5c06\u5176\u4e2d\u4e00\u4e2a(\u53ef\u80fd\u8fd8\u6709\u5019\u9009\u4eba)\u7684SDP\u62a5\u4ef7\u4f20\u9012\u7ed9\u53e6\u4e00\u4e2a\uff0c\u5e76\u76f8\u5e94\u5730\u53d1\u56deSDP\u7b54\u6848\uff0c\u4ece\u800c\u4f7f\u4e24\u4e2aJanus\u5b9e\u4f8b\u5f7c\u6b64\u534f\u5546PeerConnection\u3002\u8fd9\u5c31\u662f\u4f7f\u7528WebRTC\u8fd9\u6837\u7684\u6807\u51c6\u7684\u597d\u5904\uff01\n\u6211\u51b3\u5b9a\u5c1d\u8bd5\u8fd9\u6837\u505a\uff1a\u7279\u522b\u662f\uff0c\u6211\u51b3\u5b9a\u8ba2\u9605Janus\u5728\u7ebf\u6f14\u793a(Meetecho Spot)\u4e0a\u7684\u9ed8\u8ba4\u6d41\u5a92\u4f53\u6302\u8f7d\u70b9\uff0c\u5e76\u4f7f\u7528\u76f8\u5173\u62a5\u4ef7\u4f5c\u4e3a\u89e6\u53d1\u5668\uff0c\u4e0e\u6211\u7684Janus NDI\u63d2\u4ef6\u534f\u5546\u65b0\u7684PeerConnection\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6d41\u63d2\u4ef6\u8ba2\u9605\u5728\u529f\u80fd\u4e0a\u7b49\u540c\u4e8eJanus\u4e2d\u7684VideoRoom(SFU)\u8ba2\u9605\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u662f\u9a8c\u8bc1\u90e8\u7f72\u7684\u4e00\u79cd\u7b80\u5355\u800c\u6709\u6548\u7684\u65b9\u5f0f\u3002\n\u5c24\u91cc\u5361!\u3002\u672c\u5730Janus\u5b9e\u4f8b\u4f5c\u4e3a\u8ba2\u9605\u8005\u901a\u8fc7WebRTC\u6210\u529f\u62c9\u53d6\u4e86\u6765\u81ea\u5728\u7ebf\u6f14\u793a\u7684\u8fdc\u7a0b\u6d41\u6302\u8f7d\u70b9\u7684\u89c6\u9891\uff0c\u5e76\u4f5c\u4e3aGStreamer NDI\u63a5\u6536\u8005\u518d\u6b21\u786e\u8ba4\u5c06\u5176\u6b63\u786e\u8f6c\u6362\u4e3aNDI\u3002\n\u6211\u5e0c\u671b\u4f60\u559c\u6b22\u8fd9\u7bc7\u7b80\u77ed\u7684\u4ecb\u7ecd\uff0c\u5728\u6211\u770b\u6765\uff0c\u8fd9\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u65b0\u673a\u4f1a\u3002\u5f53\u7136\uff0c\u8fd9\u4e3b\u8981\u662f\u4e3a\u4e86\u5206\u4eab\u8fd9\u4e2a\u65b9\u5411\u7684\u4e00\u4e9b\u521d\u6b65\u5de5\u4f5c\uff1a\u8fd8\u6709\u4e00\u4e9b\u5de5\u4f5c\u8981\u505a\uff0c\u7279\u522b\u662f\u8003\u8651\u5230\u8fd9\u8fd8\u6ca1\u6709\u771f\u6b63\u5728\u5b9e\u9645\u751f\u4ea7\u73af\u5883\u4e2d\u8fdb\u884c\u6d4b\u8bd5\uff0c\u6216\u8005\u6ca1\u6709\u4f7f\u7528\u9664GStreamer NDI\u63d2\u4ef6\u4e4b\u5916\u7684\u4efb\u4f55\u5176\u4ed6NDI\u5de5\u5177\u8fdb\u884c\u6d4b\u8bd5\uff0c\u56e0\u6b64\u6211\u6240\u505a\u7684\u4e00\u4e9b\u5047\u8bbe\u53ef\u80fd\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u8c03\u6574\u3002\u5982\u679c\u8fd9\u5728\u5c06\u6765\u53d8\u5f97\u66f4\u6709\u7528\uff0c\u6211\u8fd8\u4f1a\u8003\u8651\u5171\u4eab\u4ee3\u7801\u672c\u8eab\u3002\n\u66f4\u91cd\u8981\u7684\u662f\uff0c\u867d\u7136\u6211\u505a\u6982\u5ff5\u9a8c\u8bc1\u7684\u65b9\u5f0f\u5df2\u7ecf\u594f\u6548\u4e86\uff0c\u4f46\u6709\u4eba\u53ef\u80fd\u4f1a\u4e89\u8fa9\u8bf4\uff0c\u8fd9\u4e0d\u662f\u505a\u4e8b\u60c5\u7684\u6700\u4f73\u65b9\u5f0f\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6b63\u5982\u6211\u4eec\u5728\u524d\u4e00\u8282\u4e2d\u770b\u5230\u7684\uff0c\u5047\u8bbe\u5904\u7406\u60a8\u611f\u5174\u8da3\u7684\u5bf9\u8bdd/\u6d41\u7684Janus\u5b9e\u4f8b\u548c\u5904\u7406NDI\u8f6c\u6362\u7684Janus\u5b9e\u4f8b\u5b9e\u9645\u4e0a\u662f\u4e0d\u540c\u7684(\u901a\u5e38\u662f\u8fd9\u6837)\uff0c\u8fd9\u610f\u5473\u7740\u5728\u7f16\u6392\u7a0b\u5e8f\u7684\u5e2e\u52a9\u4e0b\u8ba9\u4e24\u4e2aJanus\u5b9e\u4f8b\u5f7c\u6b64\u5efa\u7acb\u4e00\u4e2a\u6216\u591a\u4e2aPeerConnections\u3002\u8fd9\u662f\u53ef\u884c\u7684\uff0c\u4f46\u662f\u5728\u751f\u4ea7LAN\u4e2d\u4ec5\u4e3aNDI\u8f6c\u6362\u8fc7\u7a0b\u9700\u8981\u4e00\u4e2aJanus\u5b9e\u4f8b\u53ef\u80fd\u4f1a\u88ab\u8ba4\u4e3a\u662f\u4e00\u79cd\u77eb\u6789\u8fc7\u6b63\u7684\u505a\u6cd5\u3002\n\u4e00\u4e2a\u6f5c\u5728\u7684\u66f4\u597d\u7684\u66ff\u4ee3\u65b9\u6848\u53ef\u80fd\u662f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4e34\u65f6\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\uff0c\u8be5\u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u6267\u884c\u51e0\u4e4e\u76f8\u540c\u7684\u4e8b\u60c5\uff0c\u5373\uff1a\n\u901a\u5e38\uff0c\u5927\u90e8\u5206\u590d\u6742\u6027\u5728\u4e8eWebRTC\u5806\u6808\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u6211\u7684\u6982\u5ff5\u8bc1\u660e\u4e2d\u6211\u575a\u6301\u4f7f\u7528Janus\uff0c\u56e0\u4e3a\u5b83\u51e0\u4e4e\u662f\u514d\u8d39\u7684\u3002\u8fd9\u5c31\u662f\u8bf4\uff0c\u5728\u5f00\u653e\u6e90\u7801\u4e16\u754c\u4e2d\u6709\u8bb8\u591a\u9009\u9879\u53ef\u4ee5\u7528\u4e8e\u8be5\u76ee\u7684\uff1a\u6b64\u5916\uff0c\u6211\u4eec\u81ea\u5df1\u7684JAttack\u6d4b\u8bd5\u5e94\u7528\u7a0b\u5e8f\u57fa\u672c\u4e0a\u5c31\u662f\u8fd9\u6837\uff0c\u56e0\u6b64\u53ef\u4ee5\u7a0d\u52a0\u6539\u8fdb\u4ee5\u652f\u6301\u989d\u5916\u7684NDI\u8f6c\u6362\u8fc7\u7a0b\u3002\n\u65e0\u8bba\u91c7\u7528\u4ec0\u4e48\u65b9\u6cd5\uff0c\u8fd9\u90fd\u5c06\u5141\u8bb8\u611f\u5174\u8da3\u7684\u4eba\u53ea\u9700\u751f\u6210\u4e00\u4e2a\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u5c06\u5176\u6307\u5411\u9700\u8981\u5a92\u4f53\u7684\u670d\u52a1\u5668\uff0c\u5e76\u4e14\u57fa\u672c\u4e0a\u53ef\u4ee5\u8ba9\u4ed6\u4eec\u66f4\u597d\u5730\u63a7\u5236\u6574\u4e2a\u8fc7\u7a0b\u3002\u4f8b\u5982\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u914d\u7f6e\u4e3a\u53ea\u8fde\u63a5\u5230\u4e00\u4e2a\u623f\u95f4\uff0c\u5e76\u81ea\u52a8\u8ba2\u9605\u6240\u6709\u8d21\u732e\uff1b\u6216\u8005\u53ef\u4ee5\u6307\u793a\u5b83\u6311\u9009\u6765\u81ea\u4e0d\u540c\u6765\u6e90\u7684\u6d41\uff1b\u7b80\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u4e4b\u524d\u6982\u8ff0\u7684\u901a\u7528\u5916\u90e8\u7f16\u6392\u673a\u5236\u63d0\u4f9b\u7684\u4efb\u4f55\u5185\u5bb9\u90fd\u53ef\u4ee5\uff0c\u4f46\u4ee5\u4e00\u79cd\u66f4\u96c6\u6210\u7684\u65b9\u5f0f\u63d0\u4f9b\u3002\u4e13\u7528\u5e94\u7528\u7a0b\u5e8f\u4e5f\u5c06\u6253\u5f00\u5728\u5ba2\u6237\u7aef\u8fdb\u884c\u5176\u4ed6\u5b9a\u5236\u7684\u5927\u95e8\uff1a\u4f8b\u5982\uff0c\u6b64\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u5177\u6709\u81ea\u5df1\u7684UI\u5e76\u5728\u60a8\u7684\u684c\u9762\u4e0a\u8fd0\u884c\uff0c\u800c\u4e0d\u662f\u5728\u670d\u52a1\u5668\u4e0a\u8fd0\u884cCLI\u5e94\u7528\u7a0b\u5e8f\u3002\n\u5047\u8bbe\u5bf9\u8fd9\u9879\u5de5\u4f5c\u6709\u8db3\u591f\u7684\u5174\u8da3\uff0c\u8fd9\u6b63\u662f\u6211\u4e0b\u4e00\u6b65\u8ba1\u5212\u5173\u6ce8\u7684\u3002\u4e5f\u8bb8\u4e0d\u662fUI\u90e8\u5206(\u6211\u771f\u7684\u4e0d\u64c5\u957f\u8fd9\u4e9b\uff01)\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u4e13\u95e8\u7684\u5ba2\u6237\u7aef\u786e\u5b9e\u4f1a\u5f88\u9177\uff01", "note_en": "This pandemic we\u2019ve all been living in these past few months forced many people and companies to change their daily patterns. Most of us have been forced by circumstances to stay and work from home for long periods of time. This clearly had an impact on the broadcasting industry in general. Just think, for instance, of interviews or any kind of live interaction in News or Talk Shows: without the ability to have guests (and often even hosts!) in the studios, production teams were forced to find solutions that would still allow them to do their job.\n This may seem a relatively straightforward answer to us folks working in the real-time business. In practice, it\u2019s really not that easy, and most comes from how production teams actually work with streams they need to edit and broadcast, and the tools they employ. As it often happens, I was actually enlightened by the smart people we interact with every day on Twitter. In particular, Dan Jenkins from  Nimble Ape (and mastermind behind the amazing  CommCon events, make sure you watch the latest Virtual edition that just ended!) made an interesting observation related to BBC News, and Sam Machin\u2019s answer was revealing to me, as it introduced a new \u201cplayer\u201d I wasn\u2019t aware of:\n Skype is still very popular as it has an NDI plugin that makes it appear as a camera source in vision mixers, I\u2019ve not found any others that offer that\n\u2014 Sam Machin (@sammachin)  April 24, 2020\n This was the first time I ever heard of NDI, and it was kind of a revelation: it reminded me how some choices are often driven by how easy they make it to keep on using your existing workflow. This sparkled my interest, and led me to contribute to the discussion, where I wondered how easy (or hard!) it could be to perform an RTP-to-NDI translation of sorts:\n I wasn&#39;t aware of NDI, I&#39;ll have to check how easy it is to generate such a stream/device: in Janus we have a way to turn a WebRTC stream into a plain RTP one to be used somewhere else, so maybe there&#39;s a way to do RTP-to-NDI\n\u2014 Lorenzo Miniero (@elminiero)  April 24, 2020\n The mention of OBS was quite interesting as well, since our friends at  CoSMo Software actually did implement a version of OBS capable of talking WebRTC. Unfortunately, this turned out to be a red herring, since as Dr. Alex clarified, OBS-WebRTC doesn\u2019t support WebRTC input, which is what could have helped translating the incoming stream to NDI from there:\n the NDI plugin in OBS is both in and out. in OBS-Studio-Webrtc we only do native webrtc OUT, as the webrtc IN case is taking care by the &#34;browser source&#34; feature (they use CEF internally).\n\u2014 Dr. Alex. Gouaillard (@agouaillard)  May 8, 2020\n I was really curious to investigate NDI as a technology after these exchanges (especially considering I knew nothing about it), but then life and work got in the way, and I forgot about it.\n A few weeks ago, though, a private chat with Dan sparkled that interest again. He mentioned how a video production company he knew was really struggling with getting proper live feeds from the Internet to be used in what they were producing every day. Once more, NDI was mentioned as pretty much a  standard de facto in that line of business, and how a proper way to bring in WebRTC streams is still sorely missing, which forces editors to basically capture the source material in \u201chacky\u201d ways.\n As such, I decided to start looking into NDI, to figure out if the RTP-to-NDI translation I wondered about was indeed feasible or not.\n   Network Device Interface (NDI) is a royalty-free software standard developed by NewTek to enable video-compatible products to communicate, deliver, and receive broadcast-quality video in a high-quality, low-latency manner that is frame-accurate and suitable for switching in a live production environment.\n In a nutshell (and probably oversimplifying it a bit), it allows for a live exchange of multichannel and uncompressed media streams within the same LAN, taking advantage of mDNS for service discovery. This allows producers to consume media from different sources in the same LAN, i.e., without being limited to the devices physically attached to their setups. The following image (which comes from their promotional material) makes the whole process a bit clearer from a visual perspective.\n  Apparently, the real strength behind the technology are the royalty free SDK they provide, and the wide set of tools that can actually interact with NDI media: once a stream, no matter the source, becomes available, it\u2019s easy to cut/manipulate/process in order to have it embedded in a more complex production environment. Because of this, NDI is actually very wildly deployed in many media production companies.\n Which brings us to the key issue: if this is the way remote interviews are produced as well, producers will likely try to use whatever makes it easy for them to get an NDI source that can use directly. Apparently, WebRTC is still hard for them to work with: without a way to directly pull a WebRTC feed in, they\u2019re basically forced to use workarounds like capturing the browser window rendering the remote video and cropping what they need using an NDI recorder, and inject the result that way; for audio, it might mean recording the system output or similar hacks.\n Needless to say, this is a suboptimal solution that requires more work than should be needed: besides, it can be even more challenging if the web page that renders the streams has dynamic interfaces that could move the part you\u2019re interested in around, or even limited functionality (e.g., no screen sharing support). That\u2019s exactly why I started looking into ways to get RTP more or less directly translated to NDI, in order to make the whole process much easier to work with instead.\n  The first thing I checked was if there was already some RTP/NDI implementation available, and the answer was yes and no. The first project I found was an open source plugin, called  gst-plugin-ndi: this project is quite interesting, but unfortunately only covers the NDI reception, and not delivery. As I\u2019ll explain later, this still proved quite helpful to validate my efforts, but it was not what I was looking for. A quick research on any FFmpeg integration let me to  this ticket, which explained how FFmpeg did indeed support NDI up until some time ago, but then dropped it entirely after a copyright infringement issue by Newtek. As such, not an option either.\n The next step, then, was looking into ways to generate NDI content myself and, luckily enough, this was quite straightforward. In fact, the  NDI SDK is royalty free, and can be downloaded free of charge on their website (a link is sent to a mail address you provide). Once you download the SDK, you have access to a good documentation and plenty of examples. I went through some of the examples that showed how to send audio and video, and they seemed simple enough: in fact, for video NDI expects uncompressed frames in a few different supported formats, while for audio the uncompressed frames can be either 16pp or FLTP (floating point, which they prefer).\n Considering the nature of the WebRTC media, I decided to write a small RTP receiver application (called  rtp2ndi in a brilliant spike of creativity) that could then depacketize and decode audio and video packets to a format NDI liked: more specifically, I used  libopus to decode the audio packets, and  libavcodec to decode video instead (limiting to VP8 only for the sake of simplicity). As for the NDI formats, I went with UYVY for video frames, and 48khz 16pp for audio (which, although FLTP is preferred, the NDI SDK still supports anyway).\n   For the former, I used one of many streaming scripts I often use for testing purposes, and specifically a simple gstreamer pipeline that goes through a pre-recorded file and sends it via RTP. For the latter, I used the above mentioned gst-plugin-ndi project, which provided me with a simple way to render the incoming feed in a window.\n As such, I started by launching my  rtp2ndi tool, binding it to a couple of ports to receive RTP packets, and specifying a name to use for the NDI stream:\n  Once the RTP receiver was in place, I started the script to feed it with packets:\n  This resulted in my RTP receiver to start receiving and decoding packets, as expected, and translating them to NDI in the process:\n  At this point, all I had to do was start the gstreamer pipeline to actually receive the NDI stream and display it:\n    At this point, I had a good starting point, so the next step was trying to bring WebRTC in the picture. Unsurprisingly, I went with Janus for the job\u2026\n  A relatively easy way to test WebRTC sources, instead of scripts sending SNL clips, could have been the usual  RTP forwarders: as I\u2019ve said on multiple occasions (including my  CommCon presentation just a few days ago), we use them A LOT, and wouldn\u2019t be out of place here either. It would simply be a matter of creating a VideoRoom publisher, RTP-forward them to the  rtp2ndi tool, and the job would be done. For a few reasons I\u2019ll get in later, though, I wanted something more integrated, and something that could be used on its own.\n This led me to write a new Janus plugin that would allow a WebRTC user to:\n  In a nutshell, I wanted to combine the injection part the gstreamer pipeline provided, take advantage of the integrated RTP server functionality in the Janus core for receiving the packets, and embed the RTP-to-NDI process from  rtp2ndi in this new plugin. This was a quite straightforward process, so I came up with a simple demo page that would allow a web user to insert a name for the NDI sender, and then setup a sendonly PeerConnection with Janus as several other plugins do already:\n  Negotiating a new PeerConnection instructs the plugin to create the related resources, i.e., an Opus decoder, a VP8 decoder, and an NDI sender with the provided name. Once a PeerConnection has been established, the demo looks like this:\n  As you can see, nothing groundbraking: we\u2019re simply displaying the local stream the browser is capturing and sending to Janus. The Janus core then passes the unencryted audio and video packets to the plugin as usual: the Janus NDI plugin is configured to decode them and relay the uncompressed frames via NDI (exactly as  rtp2ndi did before), which means the stream originated via WebRTC is now available to NDI recipients as well, which we can once again confirm via the gstreamer NDI plugin:\n  This was already quite exciting, but still wasn\u2019t what I was really trying to accomplish. In fact, if you think about it, this does indeed allow Janus to act as a WebRTC/NDI gateway, but doesn\u2019t help much when the Janus server handling the conversation you\u2019re interested in is actually on the Internet, rather than your LAN (which would be almost always the case). If Janus is sitting somewhere in the Internet, e.g., on AWS, there\u2019s not much you can do with the NDI stream created there: actually, there\u2019s nothing you can do at all, as NDI only really makes sense when all the streams are exchanged within the context of your LAN network.\n As such, I decided to bring this one more step forward. More specifically, I decided to try and have two Janus instances talk to each other:\n  The purpose was simple: use the Janus in my LAN to consume, via WebRTC, a stream actually served by the Janus on the public internet, so that the local Janus instance might translate that remote feed to an NDI stream I could indeed access locally. Long story short, use my local Janus instance as a WebRTC \u201cclient\u201d that receives media from the remote Janus instance, and gateway it to NDI, as the picture below sketches:\n  While this sounds convoluted and is indeed a bit unconventional, it\u2019s actually not unusual to have Janus instances talk to each other that way. There are people using this trick to inject via WebRTC media coming from one plugin to another, for instance. Getting this to work is usually just a simple matter of orchestrating Janus API calls on both sides so that the SDP offer of one (and possibly candidates, when trickling) is passed to the other, and the SDP answer is sent back accordingly, thus getting the two Janus instances to negotiate a PeerConnection with each other. That\u2019s the beauty of working with a standard like WebRTC!\n I decided to try and do exactly that: in particular, I decided to subscribe to the default Streaming mountpoint on the Janus online demos (the  Meetecho spot), and use the related offer as a trigger to negotiate a new PeerConnection with my Janus NDI plugin. In fact, Streaming plugin subscriptions are functionally equivalent to VideoRoom (SFU) subscriptions in Janus, which means they\u2019re an easy and yet effective way to validate the deployment.\n   Eureka! The video from the remote Streaming mountpoint on the online demos was successfully pulled via WebRTC by the local Janus instance as a subscriber, and correctly translated to NDI as the gstreamer NDI recipient once more confirmed.\n  I hope you enjoyed this short introduction to what seems, to me, an interesting new opportunity. Of course, this was mostly meant to share some initial efforts in that direction: there\u2019s still work to do, especially considering this hasn\u2019t really been tested in an actual production environment, or with any other NDI tools than the gstreamer NDI plugin, and so some of the assumptions I made may need some tweaking. Should this become more usable in the future, I\u2019ll also consider sharing the code itself.\n More importantly, while the way I worked on my proof-of-concept kinda works already, it may be argued it\u2019s not the most optimal way to do things. In fact, as we\u2019ve seen in the previous section, assuming the Janus instance handling the conversation/streams you\u2019re interested in and the Janus instance taking care of the NDI translation are actually different (which would most often be the case), this means getting two Janus instances to establish one or more PeerConnections with each other with the help of an orchestrator. This works, but needing a Janus instance in the production LAN just for the NDI translation process might be seen as kind of overkill.\n A potentially better alternative could be creating a new ad-hoc client application able to perform pretty much the same things, that is:\n  Most of the complexity, usually, lies in the WebRTC stack, which is why in my proof of concept I stuck with Janus, as it gave me that pretty much for free. That said, there are many options that can be leveraged for that purpose in the open source world: besides, our own  Jattack testing application is basically exactly that, and so could be retrofitted to support the additional NDI translation process with a bit of work.\n Whatever the appoach, this would allow interested people to just spawn a client side application and point it to the server it needs media from, and would basically give them more control over the whole process. The application may be configured to just connect to a room, for instance, and automatically subscribe to all contributions; or it may be instructed to pick streams coming from different sources; anything that the generic external orchestration mechanism we sketched before provided, in a nutshell, but in a more integrated way. A dedicated application would open the door to additional customizations on the client side too: for instance, rather than having a CLI application running on a server, this application may have its own UI and run on your desktop instead.\n Assuming there\u2019s enough interest in this effort, that\u2019s exactly what I plan to focus on next. Maybe not the UI part (I\u2019m really bad with those!), but a dedicated client would indeed be cool to have!", "posttime": "2020-07-19 10:51:33", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "webrtc,ndi", "title": "WebRTC\u548cNDI=\u5e7f\u64ad\u516c\u53f8\u5929\u5802\uff1f", "title_en": "WebRTC and NDI = Broadcasters Heaven?", "transed": 1, "url": "https://www.meetecho.com/blog/webrtc-ndi/", "via": "", "real_tags": ["webrtc", "ndi"]}, {"category": "", "categoryclass": "", "imagename": "3cd67f8c773c5df13d60d9d2e7f8918c.png", "infoid": 1012823, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4f1a\u8bd5\u7740\u544a\u8bc9\u4f60\u8fd9\u6709\u591a\u7b80\u5355\u3002\u7b2c\u4e00\u90e8\u5206\u5f88\u6709\u7406\u8bba\u6027\uff0c\u6240\u4ee5\u8981\u6709\u8010\u5fc3\u3002\nCUCU\u662f\u73a9\u5177\u8bed\u8a00\u7684\u73a9\u5177\u7f16\u8bd1\u5668\u3002\u6211\u5e0c\u671b\u5b83\u5c3d\u53ef\u80fd\u63a5\u8fd1ANSI CA\uff0c\u8fd9\u6837\u6bcf\u4e2a\u6709\u6548\u7684CUCU\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u7528C\u7f16\u8bd1\u5668\u7f16\u8bd1\uff0c\u6ca1\u6709\u4efb\u4f55\u9519\u8bef\u3002\u5f53\u7136\uff0c\u6574\u4e2aANSI C\u6807\u51c6\u7684\u652f\u6301\u975e\u5e38\u56f0\u96be\uff0c\u6240\u4ee5\u6211\u9009\u62e9\u4e86\u4e00\u4e2a\u975e\u5e38\u5c0f\u7684C\u8bed\u8a00\u5b50\u96c6\u3002\nInt cucu_strlen(char*s){int i=0\uff1b\u800c(s[i]){i=i+1\uff1b}return i\uff1b}\u3002\n\u6211\u4eec\u5373\u5c06\u4e3a\u6211\u4eec\u7684\u8bed\u8a00\u5b9a\u4e49\u4e00\u4e2a\u8bed\u6cd5\u3002\u8fd9\u662f\u91cd\u8981\u7684\u4e00\u6b65\uff0c\u56e0\u4e3a\u6211\u4eec\u7f16\u8bd1\u5668\u8bbe\u8ba1\u4e2d\u7684\u4e00\u5207\u90fd\u4f9d\u8d56\u4e8e\u5b83\u3002\n\u90a3\u4e48\uff0c\u8ba9\u6211\u4eec\u4ece\u4e0a\u5230\u4e0b\u3002\u6211\u4eec\u7684\u6e90\u6587\u4ef6\u5305\u542b\u4e00\u4e2a\u7a0b\u5e8f\u3002\u4ec0\u4e48\u662f\u7a0b\u5e8f\uff1f\u6211\u4eec\u77e5\u9053\u5b83\u662f\u53d8\u91cf\u58f0\u660e\u3001\u51fd\u6570\u58f0\u660e\u548c\u51fd\u6570\u5b9a\u4e49\u7684\u5217\u8868\uff0c\u4f8b\u5982\uff1a\nInt func(char*s\uff0cint len)\uff1b/*\u51fd\u6570\u58f0\u660e*/int i\uff1b/*\u53d8\u91cf\u58f0\u660e*/int func(char*s\uff0cint len){/*\u51fd\u6570\u5b9a\u4e49*/...}\u3002\n\u8ba9\u6211\u4eec\u8bd5\u7740\u7528EBNF\u7684\u5f62\u5f0f\u628a\u5b83\u5199\u4e0b\u6765(\u5982\u679c\u4f60\u4e0d\u77e5\u9053\u4ec0\u4e48\u662fEBNF\uff0c\u8fd9\u662f\u7edd\u5bf9\u53ef\u4ee5\u7684\uff0c\u5b83\u771f\u7684\u5f88\u76f4\u89c2)\uff1a\n\u8fd9\u4e2a\u7b26\u53f7\u8bf4\uff1a\u201c\u7a0b\u5e8f\u662f\u53d8\u91cf\u58f0\u660e\u3001\u51fd\u6570\u58f0\u660e\u548c\u51fd\u6570\u5b9a\u4e49\u7684\u91cd\u590d\u5e8f\u5217\u3002\u4f46\u662f\u6240\u6709\u8fd9\u4e9b\u63cf\u8ff0\u548c\u5b9a\u4e49\u662f\u4ec0\u4e48\u5462\uff1f\u597d\u7684\uff0c\u8ba9\u6211\u4eec\u518d\u6df1\u5165\u4e00\u70b9\uff1a\n&lt\uff1bvar-decl&gt\uff1b\uff1a\uff1a=&lt\uff1btype&gt\uff1b&lt\uff1bident&gt\uff1b&#34\uff1b\uff1b&#34\uff1b&lt\uff1bfunc-decl&gt\uff1b\uff1a\uff1a=&lt\uff1btype&gt\uff1b&lt\uff1bident&gt\uff1b&#34\uff1b(&#34\uff1b&lt\uff1bfunc-args&gt\uff1b&#34\uff1b)&#34\uff1b&#34\uff1b\uff1b&#34\uff1b&#34\uff1b&\u3002Ident&gt\uff1b&#34\uff1b(&#34\uff1b&lt\uff1bfunc-args&gt\uff1b&#34\uff1b)&#34\uff1b&lt\uff1bfunc-body&gt\uff1b&lt\uff1bfunc-args&gt\uff1b\uff1a\uff1a={&lt\uff1btype&gt\uff1b&lt\uff1bident&gt\uff1b&#34\uff1b\uff0c&#34\uff1b}&lt\uff1btype&gt\uff1b\uff1a\uff1a==&#34\uff1bint&#34\uff1b|&#34\u3002\n\u56e0\u6b64\uff0c\u53d8\u91cf\u58f0\u660e\u5f88\u7b80\u5355\uff1a\u5b83\u662f\u4e00\u4e2a\u7c7b\u578b\u540d\u79f0\uff0c\u540e\u8ddf\u6807\u8bc6\u7b26\uff0c\u518d\u8ddf\u4e00\u4e2a\u5206\u53f7\uff0c\u5c31\u50cf\u6211\u4eec\u5728C\u4e2d\u901a\u5e38\u505a\u7684\u90a3\u6837\uff0c\u4f8b\u5982\uff1a\n\u51fd\u6570\u58f0\u660e\u7a0d\u5fae\u590d\u6742\u4e00\u4e9b\u3002\u5b83\u662f\u4e00\u4e2a\u201c\u7c7b\u578b+\u6807\u8bc6\u7b26\u201d\uff0c\u4ee5\u53ca\u5927\u62ec\u53f7\u5185\u7684\u51fd\u6570\u53c2\u6570&lt\uff1bfunc-args&gt\uff1b\u7684\u53ef\u9009\u5217\u8868\u3002\n\u53cd\u8fc7\u6765\uff0c\u51fd\u6570\u53c2\u6570\u5217\u8868\u662f\u4e00\u7cfb\u5217\u9017\u53f7\u5206\u9694\u7684\u201c\u7c7b\u578b+\u6807\u8bc6\u7b26\u201d\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u5b9e\u9645\u4e0a\uff0cCUCU\u4e2d\u7684\u5c3e\u968f\u9017\u53f7\u4ecd\u7136\u5141\u8bb8\uff0c\u4f46\u4e0d\u662f\u5fc5\u9700\u7684\u3002\u5b83\u53ea\u4f1a\u7b80\u5316\u6211\u4eec\u7684\u89e3\u6790\u5668\u4ee3\u7801\u3002\n\u652f\u6301\u7684\u6570\u636e\u7c7b\u578b\u4ec5\u4e3aint\u548cchar*\u3002\u6807\u8bc6\u7b26\u662f\u7531\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u7b26\u53f7\u7ec4\u6210\u7684\u5e8f\u5217\u3002\n\u53ea\u5269\u4e0b&lt\uff1bFunc-Body&gt\uff1b\u4e86\u3002\u4f46\u8ba9\u6211\u4eec\u5148\u6765\u8c08\u8c08\u8bed\u53e5\u548c\u8868\u8fbe\u5f0f\u3002\n\u8bed\u53e5\u662f\u8bed\u8a00\u4e2d\u6700\u5c0f\u7684\u72ec\u7acb\u5143\u7d20\u3002\u4ee5\u4e0b\u662fOUT\u8bed\u8a00\u4e2d\u7684\u6709\u6548\u8bed\u53e5\uff1a\n/*\u8fd9\u4e9b\u662f\u7b80\u5355\u8bed\u53e5*/i=2+3\uff1b/*\u8d4b\u503c\u8bed\u53e5*/my_func(I)\uff1b/*\u51fd\u6570\u8c03\u7528\u8bed\u53e5*/return i\uff1b/*return\u8bed\u53e5*//*\u8fd9\u4e9b\u662f\u590d\u5408\u8bed\u53e5*/if(x&gt\uff1b0){..\u3002}\u5176\u4ed6{.\u3002}While(x&gt\uff1b0){..\u3002}\u3002\n\u8868\u8fbe\u5f0f\u662f\u8bed\u53e5\u7684\u8f83\u5c0f\u90e8\u5206\u3002\u4e0e\u8bed\u53e5\u76f8\u53cd\uff0c\u8868\u8fbe\u5f0f\u59cb\u7ec8\u8fd4\u56de\u503c\u3002\u901a\u5e38\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u7b97\u672f\u95ee\u9898\u3002\u4f8b\u5982\uff0c\u5728\u8bed\u53e5func(x[2]\uff0ci+j)\u4e2d\uff0c\u8868\u8fbe\u5f0f\u4e3ax[2]\u548ci+j\u3002\n\u90a3\u4e48\uff0c\u56de\u8fc7\u5934\u6765\u770b\u770b&lt\uff1bFuncc-Body&gt\uff1b\u3002\u5b83\u53ea\u662f\u4e00\u4e2a\u6709\u6548\u7684\u8bed\u53e5(\u901a\u5e38\u662f\u5757\u8bed\u53e5)\u3002\n&lt\uff1bFuncc-body&gt\uff1b\uff1a\uff1a=&lt\uff1b\u8bed\u53e5&gt\uff1b&lt\uff1b\u8bed\u53e5&gt\uff1b\uff1a\uff1a=&#34\uff1b{&#34\uff1b{&lt\uff1b\u8bed\u53e5&gt\uff1b}&#34\uff1b}&#34\uff1b/*\u5757\u8bed\u53e5*/|[&lt\uff1btype&gt\uff1b]&lt\uff1bident&gt\uff1b[&#34\uff1b=&#34\uff1b&lt\uff1bexpr&gt\uff1b]&#34\uff1b\uff1b&\u3002\u8fd4\u56de&#34\uff1b&lt\uff1bexpr&&gt;\uff1b&#34\uff1b\uff1b|&#34\uff1bIF&#34\uff1b&#34\uff1b(&#34\uff1b&lt\uff1bexpr&&gt;\uff1b)&#34\uff1b&lt\uff1b\u8bed\u53e5&gt\uff1b[&#34\uff1bElse&34\uff1b&lt\uff1b\u8bed\u53e5&gt\uff1b]|&#34\uff1bWhile&#34\uff1b&#34\uff1b(&#34\uff1b&lt\uff1bexpr&gt\uff1b&lt\uff1b\u8bed\u53e5&gt\uff1b|&lt\uff1b\u8868\u8fbe\u5f0f&gt\uff1b&#34\uff1b\uff1b&#34\uff1b\n&lt\uff1bexpr&&gt;\uff1b\uff1a\uff1a=&lt\uff1bbit-expr&gt\uff1b|&lt\uff1bbit-expr&gt\uff1b=&lt\uff1bexpr&&gt;\uff1b&lt\uff1bbit-expr&gt\uff1b\uff1a\uff1a=&lt\uff1beq-expr&gt\uff1b|&lt\uff1bbitwise-expr&gt\uff1b&amp\uff1b&lt\uff1beq-expr&gt\uff1b|&lt\uff1bbit-expr&gt\uff1bEq-expr&gt\uff1b==&lt\uff1brel-expr&&gt;\uff1b|&lt\uff1beq-expr&&gt;\uff1b\uff01=&lt\uff1brel-expr&&gt;\uff1b&lt\uff1brel-expr&gt\uff1b\uff1a\uff1a=&lt\uff1bShift-expr&&gt;&gt;\uff1b|&lt\uff1brel-expr&&gt;\uff1b&lt\uff1bShift-expr&&gt;\uff1b&lt\uff1bShift-expr&gt\uff1b\uff1aAdd-expr&gt\uff1b|&lt\uff1bShift-expr&&gt;\uff1b&gt\uff1b&gt\uff1b&lt\uff1badd-expr&gt\uff1b&lt\uff1badd-expr&gt\uff1b\uff1a\uff1a=&lt\uff1bPostfix-expr&gt\uff1b|&lt\uff1badd-expr&gt\uff1b+&lt\uff1bPostfix-expr&gt\uff1b|&lt\uff1badd-expr&gt\uff1b-&lt\uff1bpostfix-expr&gt&\u3002[&lt\uff1bexpr&&gt;]|&lt\uff1b\u540e\u7f00-expr&&gt;\uff1b(&lt\uff1bexpr&&gt;\uff1b{&#34\uff1b\uff0c&lt\uff1bexpr&gt\uff1b})&lt\uff1bprim-expr&gt\uff1b\uff1a==&lt\uff1bnumber&gt\uff1b|&lt\uff1bident&gt\uff1b|&lt\uff1bstring&gt\uff1b|&#34\uff1b(&#34\uff1b&lt\uff1bexpr\u3002\n\u5c31\u8fd9\u6837\u3002\u60a8\u6ce8\u610f\u5230\u8868\u8fbe\u5f0f\u8868\u793a\u6cd5\u4e2d\u7684\u9012\u5f52\u4e86\u5417\uff1f\u57fa\u672c\u4e0a\uff0c\u4e0a\u9762\u7684\u7b26\u53f7\u5411\u6211\u4eec\u663e\u793a\u4e86\u8fd0\u7b97\u7b26\u4ece\u4e0b\u5230\u4e0a\u7684\u4f18\u5148\u987a\u5e8f\uff1a\u9996\u5148\u8ba1\u7b97\u62ec\u53f7\u548c\u65b9\u62ec\u53f7\uff0c\u6700\u540e\u8fdb\u884c\u8d4b\u503c\u3002\n\u4f8b\u5982\uff0c\u6839\u636e\u6b64\u8bed\u6cd5\uff0c\u8868\u8fbe\u5f0f8&gt\uff1b&gt\uff1b1+1\u5c06\u88ab\u6c42\u503c\u4e3a2(\u59828&gt\uff1b&gt\uff1b(1+1))\uff0c\u800c\u4e0d\u662f5(\u5982(8&gt\uff1b&gt\uff1b1)+1)\uff0c\u56e0\u4e3a&gt\uff1b&gt\uff1b\u7684\u4f18\u5148\u7ea7\u4f4e\u4e8e+\u3002\n\u73b0\u5728\u6211\u4eec\u5b66\u5b8c\u4e86\u8bed\u6cd5\uff0c\u51c6\u5907\u5f00\u59cb\u4e86\u3002\u7b2c\u4e00\u4ef6\u8981\u505a\u7684\u4e8b\u5c31\u662f\u827e\u62c9\u00b7\u83b1\u514b\u745f\u3002\u6211\u4eec\u7684\u7f16\u8bd1\u5668\u63a5\u53d7\u5b57\u8282\u6d41\u4f5c\u4e3a\u8f93\u5165\uff0c\u800clexer\u5141\u8bb8\u5c06\u8be5\u6d41\u62c6\u5206\u6210\u66f4\u5c0f\u7684\u6807\u8bb0\uff0c\u4ee5\u4fbf\u7a0d\u540e\u5904\u7406\u3002\u5b83\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u5b9a\u7a0b\u5ea6\u7684\u62bd\u8c61\uff0c\u5e76\u7b80\u5316\u4e86\u89e3\u6790\u5668\u3002\n\u4f8b\u5982\uff0c\u5b57\u8282\u5e8f\u5217\u201cint i=2+31\uff1b\u201d\u5c06\u88ab\u62c6\u5206\u6210\u6807\u8bb0\uff1a\n\u5728\u6b63\u5e38\u7684\u6210\u4eba\u8bcd\u6cd5\u5206\u6790\u5668\u4e2d\uff0c\u6bcf\u4e2a\u8bcd\u4f4d(\u6807\u8bb0)\u90fd\u6709\u4e00\u4e2a\u7c7b\u578b\u548c\u4e00\u4e2a\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u5f97\u5230\u4e00\u4e2a\u914d\u5bf9\u5217\u8868\uff0c\u800c\u4e0d\u662f\u4e0a\u9762\u7684\u5217\u8868\uff1a&lt\uff1btype\uff1aint&&gt;\uff1b\uff0c&lt\uff1bID\uff1ai&lt\uff1b\uff0c&lt\uff1bAssign\uff1a=&&gt;\uff1b\uff0c&lt\uff1bNUM\uff1a2&gt\uff1b\uff0c&lt\uff1bplus\uff1a+&&gt;\uff1b\uff0c&lt\uff1bNUM\uff1a31&gt\uff1b\uff0c&lt\uff1bSemi\uff1a\uff1b&gt\u3002\u6211\u4eec\u8981\u901a\u8fc7\u5b83\u7684\u503c\u6765\u68c0\u6d4blexemetype\uff0c\u8fd9\u6839\u672c\u4e0d\u662f\u5b66\u672f\u6027\u7684\uff01\n\u8bcd\u6cd5\u5206\u6790\u5668\u7684\u4e3b\u8981\u95ee\u9898\u662f\uff0c\u4e00\u65e6\u4ece\u6d41\u4e2d\u8bfb\u53d6\u4e86\u4e00\u4e2a\u5b57\u8282\uff0c\u5b83\u5c31\u4e0d\u80fd\u201c\u4e0d\u53ef\u8bfb\u201d\u3002\u5982\u679c\u6211\u4eec\u8bfb\u53d6\u4e86\u4e00\u4e2a\u4e0d\u80fd\u6dfb\u52a0\u5230\u5f53\u524d\u4ee4\u724c\u4e2d\u7684\u5b57\u8282\uff0c\u8be5\u600e\u4e48\u529e\u5462\uff1f\u5728\u5904\u7406\u5f53\u524d\u4ee4\u724c\u4e4b\u524d\uff0c\u6211\u4eec\u5e94\u8be5\u5c06\u5176\u5b58\u50a8\u5728\u54ea\u91cc\uff1f\n\u51e0\u4e4e\u6bcf\u4e2a\u8bcd\u6cd5\u5206\u6790\u5668\u90fd\u9700\u8981\u63d0\u524d\u9605\u8bfb\u3002\u6211\u4eec\u7684\u8bed\u6cd5\u975e\u5e38\u7b80\u5355\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u5355\u5b57\u8282\u7684\u7f13\u51b2\u533a-nextc\u3002\u5b83\u5b58\u50a8\u4e00\u4e2a\u5b57\u8282\uff0c\u8be5\u5b57\u8282\u662f\u4ece\u6d41\u4e2d\u8bfb\u53d6\u7684\uff0c\u4f46\u5c1a\u672a\u63a8\u9001\u5230\u4ee4\u724c\u5b57\u7b26\u4e32\u3002\n\u53e6\u5916\uff0c\u6211\u9700\u8981\u8b66\u544a\u60a8-\u6211\u5728CUCU\u4ee3\u7801\u4e2d\u7ecf\u5e38\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u3002\u6211\u77e5\u9053\u8fd9\u662f\u4e00\u79cd\u7cdf\u7cd5\u7684\u98ce\u683c\uff0c\u4f46\u662f\u5982\u679c\u6211\u628a\u6240\u6709\u7684\u503c\u90fd\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u4f20\u9012\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u5931\u53bb\u5b83\u7684\u7b80\u5355\u6027\u3002\n\u5982\u679c\u4e0d\u662f\u6807\u8bc6\u7b26-\u8bf7\u5c1d\u8bd5\u8bfb\u53d6\u4e00\u7cfb\u5217\u7279\u6b8a\u8fd0\u7b97\u7b26\uff0c\u5982&amp\uff1b\u3001|\u3001&lt\uff1b\u3001&gt\uff1b\u3001=\u3001\uff01\u3002\n\u5982\u679c\u4e0d\u662f\u8fd0\u7b97\u7b26-\u8bf7\u5c1d\u8bd5\u8bfb\u53d6\u5b57\u7b26\u4e32\u6587\u5b57\u201c&amp\uff1bmldr\u201d\u3002\u6216\u8005\u201c&amp\uff1bmldr.\u201d\n\u5982\u679c\u518d\u6b21\u5931\u8d25-\u53ea\u9700\u8bfb\u53d6\u5355\u4e2a\u5b57\u8282\u3002\u5b83\u53ef\u80fd\u662f\u53e6\u4e00\u4e2a\u5355\u5b57\u8282\u5b57\u7b26\uff0c\u5982\u201c(\u201d\u6216\u201c[&#34\uff1b\u3002\n#include&lt\uff1bstdio.h&gt\uff1b/*\u5bf9\u4e8evpritnf*/#include&lt\uff1bstdarg.h&gt\uff1b/*\u5bf9\u4e8eva_list*/#include&lt\uff1bstdlib.h&gt\uff1b/*\u5bf9\u4e8eexit()*/#include&lt\uff1bctype.h&gt\uff1b/*\u5bf9\u4e8eisspace\uff0cisalpha...\u3002*/#\u5b9a\u4e49MAXTOKSZ 256\u9759\u6001\u6587\u4ef6*f\uff1b/*\u8f93\u5165\u6587\u4ef6*/static char tok[MAXTOKSZ]\uff1bstatic int tokpos\uff1bstatic int nextc\uff1bvoid readchr(){if(tokpos==MAXTOKSZ-1){tok[tokpos]=&#39\uff1b\\0&#39\uff1b\uff1bfprintf(stderr\uff0c&#34\uff1b\u6807\u8bb0\u592a\u957f\uff1a%s\\n&#34\uff1b\uff0cNextc=fgetc(F)\uff1b}void readtok(){for(\uff1b\uff1b){While(isspace(Nextc)){nextc=fgetc(F)\uff1b}tokpos=0\uff1bWhile(isalnum(Nextc)||nextc==&#39\uff1b_&#39\uff1b){readchr()\uff1b}if(tokpos==0){While(nextc==&#39\uff1b&lt\uff1b&#39\u3002||nextc==&#39\uff1b&gt\uff1b&#39\uff1b||nextc==&#39\uff1b\uff01&#39\uff1b||nextc==&#39\uff1b|&#39\uff1b){readchr()\uff1b}}if(tokpos==0){if(nextc==&#39\uff1b\\&#39\uff1b&#39\uff1b||nextc==&#39){char c=nextc\uff1bReadchr()\uff1bWhile(nextc\uff01=c){readchr()\uff1b}readchr()\uff1b}false if(nextc==&#39\uff1b/&#39\uff1b){readchr()\uff1bif(nextc==&#39\uff1b*&#39\uff1b){nextc=fgetc(F)\uff1bWhile(nextc\uff01=&#39\uff1b/&#39\uff1b){While(\u4e0b\u4e00\u4e2a\uff01=&#39\uff1b*&#39\uff1b){nextc=fgetc(F)\uff1b}}Else if(nextc\uff01=EOF){readchr()\uff1b}}Break\uff1b}tok[tokpos]=&#39\uff1b\\0&#39\uff1b\uff1b}int main(){f=stdin\uff1bnextc=fgetc(F)\uff1b\u5bf9\u4e8e(\uff1b\uff1b){readtok()\uff1bprintf(&#34\uff1b\u5185\u6807\u8bc6\uff1a%s\\n&#34\uff1b\uff0ctok)\uff1b\u5982\u679c(tok[0]==&#39\uff1b\\0&#39\uff1b)Break\uff1b}\u8fd4\u56de0\uff1b}\u3002\n\u5982\u679c\u6211\u4eec\u5c06\u4e00\u4e2aC\u6587\u4ef6\u4f5c\u4e3a\u7f16\u8bd1\u5668\u8f93\u5165-\u5b83\u5c06\u6253\u5370\u4e00\u4e2a\u4ee4\u724c\u5217\u8868\uff0c\u6bcf\u884c\u4e00\u4e2a\u3002\n\u6211\u5e0c\u671b\u4f60\u559c\u6b22\u8fd9\u7bc7\u6587\u7ae0\u3002\u4f60\u53ef\u4ee5\u5728Github\u3001Twitter\u6216\u901a\u8fc7RSS\u8ba2\u9605\uff0c\u5e76\u5411\u5176\u6295\u7a3f\u3002", "note_en": "I will try to show you how simple it is. The first part will be pretty muchtheoretical, so keep patience.\n  CUCU is a toy compiler for a toy language. I want it to be as close to ANSI Cas possible, so that every valid CUCU program could be compiled with a Ccompiler without any errors. Of course, the support of the whole ANSI Cstandard is very difficult, so I picked a very small C language subset.\n  int  cucu_strlen ( char  * s )  {\t int  i  =  0 ;\t while  ( s [ i ])  {\t\t i  =  i  +  1 ;\t }\t return  i ; }\n  We\u2019re about to define a grammar for our language. It\u2019s an important step,because everything in our compiler design depends on it.\n So, let\u2019s go from top to bottom. Our source file contains a  program.What is a program? We know it\u2019s a list of  variable declarations,  functiondeclarations and  function definitions, e.g:\n int  func ( char  * s ,  int  len );  /* function declaration */ int  i ;  /* variable declaration */ int  func ( char  * s ,  int  len )  {  /* function definition */\t ... }\n Let\u2019s try to write it down in  EBNF form (it\u2019s absolutely ok, if you don\u2019tknow what EBNF is, it\u2019s really intuitive):\n  This notation says: \u201ca program is a repeating sequence of variable declarations,function declarations and function definitions. But what is all thosedeclarations and definitions? Ok, let\u2019s go deeper:\n &lt;var-decl&gt; ::= &lt;type&gt; &lt;ident&gt; &#34;;&#34;&lt;func-decl&gt; ::= &lt;type&gt; &lt;ident&gt; &#34;(&#34; &lt;func-args&gt; &#34;)&#34; &#34;;&#34;&lt;func-def&gt; ::= &lt;type&gt; &lt;ident&gt; &#34;(&#34; &lt;func-args&gt; &#34;)&#34; &lt;func-body&gt;&lt;func-args&gt; ::= { &lt;type&gt; &lt;ident&gt; &#34;,&#34; }&lt;type&gt; ::= &#34;int&#34; | &#34;char *&#34;\n So, variable declaration is simple: it\u2019s a type name followed by the identifier,and followed by a semicolon, like we usually do in C, e.g.:\n  Function declaration is a bit more complicated. It\u2019s a \u201ctype + identifier\u201d,and an optional list of function arguments  &lt;func-args&gt; inside the braces.\n Function arguments list, in it\u2019s turn, is a sequence of comma-separated\u201ctype + identifier\u201d, like:\n  Actually, trailing comma in CUCU is still allowed, but not required. It willjust simplify our parser code.\n The supported data types are only  int and  char *. Identifier is a sequenceof letters, digits and an underscore symbol.\n The only thing left is  &lt;func-body&gt;. But let\u2019s talk about  statements and expressions first.\n Statement is a smallest standalone element of the language. Here are validstatements in out language:\n /* These are simple statements */ i  =  2  +  3 ;  /* assignment statement */ my_func ( i );  /* function call statement */ return  i ;  /* return statement */ /* These are compound statements */ if  ( x  &gt;  0 )  {  ..  }  else  {  ..  } while  ( x  &gt;  0 )  {  ..  }\n Expression is a smaller part of the statement. As opposed to statements,expressions always return a value. Usually, it\u2019s just the arithmetic. Forexample in the statement  func(x[2], i + j) the expressions are  x[2] and i+j.\n So, looking back at  &lt;func-body&gt;. It\u2019s just a valid statement (which isusually a block statement).\n  &lt;func-body&gt; ::= &lt;statement&gt;&lt;statement&gt; ::= &#34;{&#34; { &lt;statement&gt; } &#34;}&#34; /* block statement */ | [&lt;type&gt;] &lt;ident&gt; [ &#34;=&#34; &lt;expr&gt; ] &#34;;&#34; /* assignment */ | &#34;return&#34; &lt;expr&gt; &#34;;&#34; | &#34;if&#34; &#34;(&#34; &lt;expr&gt; &#34;)&#34; &lt;statement&gt; [ &#34;else&#34; &lt;statement&gt; ] | &#34;while&#34; &#34;(&#34; &lt;expr&gt; &#34;)&#34; &lt;statement&gt; | &lt;expr&gt; &#34;;&#34;\n  &lt;expr&gt; ::= &lt;bitwise-expr&gt; | &lt;bitwise-expr&gt; = &lt;expr&gt;&lt;bitwise-expr&gt; ::= &lt;eq-expr&gt; | &lt;bitwise-expr&gt; &amp; &lt;eq-expr&gt; | &lt;bitwise-expr&gt; | &lt;eq-expr&gt;&lt;eq-expr&gt; ::= &lt;rel-expr&gt; | &lt;eq-expr&gt; == &lt;rel-expr&gt; | &lt;eq-expr&gt; != &lt;rel-expr&gt;&lt;rel-expr&gt; ::= &lt;shift-expr&gt; | &lt;rel-expr&gt; &lt; &lt;shift-expr&gt;&lt;shift-expr&gt; ::= &lt;add-expr&gt; | &lt;shift-expr&gt; &lt;&lt; &lt;add-expr&gt; | &lt;shift-expr&gt; &gt;&gt; &lt;add-expr&gt;&lt;add-expr&gt; ::= &lt;postfix-expr&gt; | &lt;add-expr&gt; + &lt;postfix-expr&gt; | &lt;add-expr&gt; - &lt;postfix-expr&gt;&lt;postfix-expr&gt; ::= &lt;prim-expr&gt; | &lt;postfix-expr&gt; [ &lt;expr&gt; ] | &lt;postfix-expr&gt; ( &lt;expr&gt; { &#34;,&#34; &lt;expr&gt; } )&lt;prim-expr&gt; := &lt;number&gt; | &lt;ident&gt; | &lt;string&gt; | &#34;(&#34; &lt;expr&gt; &#34;)&#34;\n That\u2019s it. Did you notice the recursion in the expression notation? Basically,the notation above shows us the precedence of the operators from bottom to top:parens and square brackets are evaluated first, and assignment goes the last.\n For example, according to this grammar an expression  8&gt;&gt;1+1will be evaluated to 2 (like in  8&gt;&gt;(1+1)), not to 5 (like in  (8&gt;&gt;1)+1),because  &gt;&gt; has lower precedence than  +.\n  Now we are done with grammar, and are ready to start. The first thing to do isa lexer. Our compiler takes a stream of bytes as an input, and lexer allows tosplit that stream into smaller tokens, that can be processed later. It gives ussome level of abstraction and simplifies out parser.\n For example, a sequence of bytes \u201cint i = 2+31;\u201d will be split into tokens:\n  In normal grown-up lexers every lexeme (token) has a type and a value, soinstead of the list above we will get a list of pairs:  &lt;TYPE:int&gt;,&lt;ID:i&gt;, &lt;ASSIGN:=&gt;,&lt;NUM:2&gt;,&lt;PLUS:+&gt;,&lt;NUM:31&gt;,&lt;SEMI:;&gt;. We are going to detect lexemetype by its value, which is not academical at all!\n The major problem with the lexer is that once a byte is read from the stream -it can not be \u201cun-read\u201d. And what if we\u2019ve read a byte that can not be added tothe current token? Where should we store it until the current token isprocessed?\n Almost every lexer need to read ahead. Our grammar is simple enough, so all weneed to have is a single byte buffer -  nextc. It stores a byte, that was readfrom the stream, but has not yet been pushed to the token string.\n Also, I need to warn you - I use global variables a lot in CUCU code. I knowit\u2019s a bad style, but if I pass all values as function arguments the compilerwould loose it\u2019s simplicity.\n  if it\u2019s not an identifier - try to read a sequence of special operators, like &amp;, |, &lt;, &gt;, =, !.\n if it\u2019s not an operator - try to read a string literal \u201c&amp;mldr.\u201d or \u2018&amp;mldr.\u2019\n  if failed again - just read a single byte. It might be another single-bytetoken, like \u201c(\u201d or \u201c[&#34;.\n  #include  &lt;stdio.h&gt; /* for vpritnf */  #include  &lt;stdarg.h&gt; /* for va_list */  #include  &lt;stdlib.h&gt; /* for exit() */  #include  &lt;ctype.h&gt; /* for isspace, isalpha... */   #define MAXTOKSZ 256  static  FILE  * f ;  /* input file */ static  char  tok [ MAXTOKSZ ]; static  int  tokpos ; static  int  nextc ; void  readchr ()  {\t if  ( tokpos  ==  MAXTOKSZ  -  1 )  {\t\t tok [ tokpos ]  =  &#39;\\0&#39; ;\t\t fprintf ( stderr ,  &#34;token too long: %s \\n &#34; ,  tok );\t\t exit ( EXIT_FAILURE );\t }\t tok [ tokpos ++ ]  =  nextc ;\t nextc  =  fgetc ( f ); } void  readtok ()  {\t for  (;;)  {\t\t while  ( isspace ( nextc ))  {\t\t\t nextc  =  fgetc ( f );\t\t }\t\t tokpos  =  0 ;\t\t while ( isalnum ( nextc )  ||  nextc  ==  &#39;_&#39; )  {\t\t\t readchr ();\t\t }\t\t if  ( tokpos  ==  0 )  {\t\t\t while  ( nextc  ==  &#39;&lt;&#39;  ||  nextc  ==  &#39;=&#39;  ||  nextc  ==  &#39;&gt;&#39;\t\t\t\t\t ||  nextc  ==  &#39;!&#39;  ||  nextc  ==  &#39;&amp;&#39;  ||  nextc  ==  &#39;|&#39; )  {\t\t\t\t readchr ();\t\t\t }\t\t }\t\t if  ( tokpos  ==  0 )  {\t\t\t if  ( nextc  ==  &#39;\\&#39;&#39;  ||  nextc  ==  &#39;&#34;&#39; )  {\t\t\t\t char  c  =  nextc ;\t\t\t\t readchr ();\t\t\t\t while  ( nextc  !=  c )  {\t\t\t\t\t readchr ();\t\t\t\t }\t\t\t\t readchr ();\t\t\t }  else  if  ( nextc  ==  &#39;/&#39; )  {\t\t\t\t readchr ();\t\t\t\t if  ( nextc  ==  &#39;*&#39; )  {\t\t\t\t\t nextc  =  fgetc ( f );\t\t\t\t\t while  ( nextc  !=  &#39;/&#39; )  {\t\t\t\t\t\t while  ( nextc  !=  &#39;*&#39; )  {\t\t\t\t\t\t\t nextc  =  fgetc ( f );\t\t\t\t\t\t }\t\t\t\t\t\t nextc  =  fgetc ( f );\t\t\t\t\t }\t\t\t\t\t nextc  =  fgetc ( f );\t\t\t\t }\t\t\t }  else  if  ( nextc  !=  EOF )  {\t\t\t\t readchr ();\t\t\t }\t\t }\t\t break ;\t }\t tok [ tokpos ]  =  &#39;\\0&#39; ; } int  main ()  {\t f  =  stdin ;\t nextc  =  fgetc ( f );\t for  (;;)  {\t\t readtok ();\t\t printf ( &#34;TOKEN: %s \\n &#34; ,  tok );\t\t if  ( tok [ 0 ]  ==  &#39;\\0&#39; )  break ;\t }\t return  0 ; }\n If we put a C file as the compiler input - it will print us a list of tokens,one per line.\n   I hope you\u2019ve enjoyed this article. You can follow \u2013 and contribute to \u2013 on  Github,  Twitter or subscribe via  rss.", "posttime": "2020-07-19 10:50:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f16\u8bd1,\u7406\u89e3,compiler,expr", "title": "CUCU\uff1a\u4e00\u4e2a\u4f60\u80fd\u7406\u89e3\u7684\u7f16\u8bd1\u5668(1/3)", "title_en": "Cucu: A compiler you can understand (1/3)", "transed": 1, "url": "https://zserge.com/posts/cucu-part1/", "via": "", "real_tags": ["\u7f16\u8bd1", "\u7406\u89e3", "compiler", "expr"]}, {"category": "", "categoryclass": "", "imagename": "21cde0bb709a9602fd5ec53511306e31.jpg", "infoid": 1012822, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f17\u5409\u5c3c\u4e9a\u7406\u5de5\u5927\u5b66\u7684\u7814\u7a76\u4eba\u5458\u53d1\u73b0\u4e86\u4e00\u79cd3D\u6253\u5370\u4e73\u80f6\u6a61\u80f6\u7684\u65b0\u5de5\u827a\uff0c\u4ece\u800c\u91ca\u653e\u4e86\u6253\u5370\u5404\u79cd\u5177\u6709\u590d\u6742\u51e0\u4f55\u5f62\u72b6\u7684\u5f39\u6027\u6750\u6599\u7684\u80fd\u529b\u3002\n\u4e73\u80f6\uff0c\u901a\u5e38\u88ab\u79f0\u4e3a\u624b\u5957\u6216\u6cb9\u6f06\u4e2d\u7684\u6750\u6599\uff0c\u6307\u7684\u662f\u4e00\u7ec4\u805a\u5408\u7269-\u957f\u7684\u3001\u91cd\u590d\u7684\u5206\u5b50\u94fe-\u76d8\u7ed5\u5728\u5206\u6563\u5728\u6c34\u4e2d\u7684\u7eb3\u7c73\u9897\u7c92\u4e2d\u30023D\u6253\u5370\u4e73\u80f6\u548c\u5176\u4ed6\u88ab\u79f0\u4e3a\u5f39\u6027\u4f53\u7684\u7c7b\u4f3c\u6a61\u80f6\u6750\u6599\u53ef\u4ee5\u7528\u4e8e\u5404\u79cd\u5e94\u7528\uff0c\u5305\u62ec\u8f6f\u673a\u5668\u4eba\u3001\u533b\u7597\u8bbe\u5907\u6216\u51cf\u9707\u5668\u3002\n3D\u6253\u5370\u4e73\u80f6\u5728\u79d1\u5b66\u6587\u732e\u4e2d\u53ea\u88ab\u8bb0\u5f55\u4e86\u51e0\u6b21\u3002\u4e4b\u524d\u7684\u4f8b\u5b50\u4e2d\u6ca1\u6709\u4e00\u4e2a\u63a5\u8fd1\u4e8e\u7531\u96b6\u5c5e\u4e8e\u9ad8\u5206\u5b50\u521b\u65b0\u7814\u7a76\u6240(MII)\u3001\u79d1\u5b66\u5b66\u9662\u548c\u5de5\u7a0b\u5b66\u9662\u7684\u8de8\u5b66\u79d1\u56e2\u961f\u5370\u5237\u7684\u4e73\u80f6\u7684\u673a\u68b0\u6027\u80fd\u3002\n\u901a\u8fc7\u5728\u5316\u5b66\u548c\u673a\u68b0\u5de5\u7a0b\u5b66\u79d1\u65b9\u9762\u7684\u521b\u65b0\uff0c\u8be5\u56e2\u961f\u514b\u670d\u4e863D\u6253\u5370(\u4e5f\u79f0\u4e3a\u52a0\u6cd5\u5236\u9020)\u7684\u4e00\u4e9b\u957f\u671f\u9650\u5236\u3002\u7814\u7a76\u4eba\u5458\u5bf9\u6db2\u4f53\u4e73\u80f6\u8fdb\u884c\u4e86\u5316\u5b66\u4fee\u9970\uff0c\u4f7f\u5176\u53ef\u6253\u5370\uff0c\u5e76\u5efa\u9020\u4e86\u4e00\u53f0\u5e26\u6709\u5d4c\u5165\u5f0f\u8ba1\u7b97\u673a\u89c6\u89c9\u7cfb\u7edf\u7684\u5b9a\u52363D\u6253\u5370\u673a\uff0c\u4ee5\u6253\u5370\u8fd9\u79cd\u9ad8\u6027\u80fd\u6750\u6599\u7684\u51c6\u786e\u3001\u9ad8\u5206\u8fa8\u7387\u7279\u5f81\u3002\n\u8fd9\u4e2a\u9879\u76ee\u4ee3\u8868\u4e86\u8de8\u5b66\u79d1\u7814\u7a76\u7684\u5178\u578b\u4f8b\u5b50\uff0c\u8482\u83ab\u897f\u00b7\u6717(Timothy Long)\u8bf4\uff0c\u4ed6\u662f\u4e00\u540d\u5316\u5b66\u6559\u6388\uff0c\u4e5f\u662f\u8be5\u9879\u76ee\u7684\u8054\u5408\u9996\u5e2d\u7814\u7a76\u5458\uff0c\u4ed6\u4e0eL.S.\u5170\u9053\u592b\u673a\u68b0\u5de5\u7a0b\u6559\u6388\u3001\u4fe1\u606f\u4ea7\u4e1a\u90e8\u4e34\u65f6\u4e3b\u4efb\u514b\u91cc\u65af\u6258\u5f17\u00b7\u5a01\u5ec9\u59c6\u65af(Christopher Williams)\u5171\u540c\u62c5\u4efb\u8be5\u9879\u76ee\u7684\u9996\u5e2d\u7814\u7a76\u5458\u3002\u5982\u679c\u6ca1\u6709\u53e6\u4e00\u4e2a\u5b9e\u9a8c\u5ba4\uff0c\u6211\u4eec\u4e24\u4e2a\u5b9e\u9a8c\u5ba4\u90fd\u4e0d\u53ef\u80fd\u505a\u5230\u8fd9\u4e00\u70b9\u3002\n\u8be5\u9879\u76ee\u662f\u5f17\u5409\u5c3c\u4e9a\u7406\u5de5\u5927\u5b66\u548c\u7c73\u5176\u6797\u5317\u7f8e\u516c\u53f8\u901a\u8fc7\u56fd\u5bb6\u79d1\u5b66\u57fa\u91d1\u4f1a\u5956\u4e0e\u652f\u6301\u5b66\u672f\u754c\u548c\u4ea7\u4e1a\u754c\u8054\u5408\u7814\u7a76\u7684\u5b66\u672f\u8054\u7edc\u8d60\u6b3e\u673a\u4f1a\u8ba1\u5212\u7684\u8054\u5408\u5408\u4f5c\u9879\u76ee\u3002\u4ed6\u4eec\u521d\u6b65\u7ed3\u679c\u7684\u8be6\u7ec6\u4fe1\u606f\u53d1\u8868\u5728\u201cACS\u5e94\u7528\u6750\u6599\u4e0e\u63a5\u53e3\u201d\u6742\u5fd7\u4e0a\u7684\u4e00\u7bc7\u671f\u520a\u6587\u7ae0\u4e2d\u3002\n\u5728\u8bd5\u56fe\u5408\u6210\u4e00\u79cd\u80fd\u591f\u63d0\u4f9b\u7406\u60f3\u5206\u5b50\u91cf\u548c\u673a\u68b0\u6027\u80fd\u7684\u6750\u6599\u7684\u5c1d\u8bd5\u5931\u8d25\u540e\uff0cLong Research Group\u7684\u4e94\u5e74\u7ea7\u9ad8\u5206\u5b50\u79d1\u5b66\u548c\u5de5\u7a0b\u4e13\u4e1a\u5b66\u751f\u83f2\u5c14\u00b7\u65af\u79d1\u7279(Phil Scott)\u8f6c\u5411\u4e86\u5546\u7528\u6db2\u4f53\u4e73\u80f6\u3002\n\u7814\u7a76\u4eba\u5458\u6700\u7ec8\u60f3\u8981\u8fd9\u79cd\u6750\u6599\u4ee5\u56fa\u4f533D\u6253\u5370\u7684\u5f62\u5f0f\uff0c\u4f46\u65af\u79d1\u7279\u9996\u5148\u9700\u8981\u589e\u52a0\u5316\u5b66\u6210\u5206\u624d\u80fd\u6253\u5370\u3002\n\u65af\u79d1\u7279\u9047\u5230\u4e86\u4e00\u4e2a\u6839\u672c\u6027\u7684\u6311\u6218\uff1a\u6db2\u4f53\u4e73\u80f6\u6781\u5176\u8106\u5f31\uff0c\u5316\u5b66\u5bb6\u5f88\u96be\u6539\u53d8\u3002\n\u4e0e\u65af\u79d1\u7279\u5408\u4f5c\u7684\u6dfb\u52a0\u5242\u5236\u9020\u7cfb\u7edf\u8bbe\u8ba1\u3001\u7814\u7a76\u548c\u6559\u80b2\u5b9e\u9a8c\u5ba4\u4e94\u5e74\u7ea7\u673a\u68b0\u5de5\u7a0b\u535a\u58eb\u751f\u7ef4\u65af\u74e6\u7eb3\u7279\u00b7\u7c73\u7eb3\u514b\u4ec0\u6851\u8fbe\u62c9\u59c6(Viswanath Meenakshisundaram)\u8bf4\uff0c\u4e73\u80f6\u5904\u4e8e\u7985\u5b97\u72b6\u6001\u3002\u5982\u679c\u4f60\u518d\u7ed9\u5b83\u52a0\u70b9\u4e1c\u897f\uff0c\u5b83\u5c31\u4f1a\u5b8c\u5168\u5931\u53bb\u7a33\u5b9a\u6027\u800c\u5760\u6bc1\u3002\n\u7136\u540e\uff0c\u5316\u5b66\u5bb6\u4eec\u60f3\u51fa\u4e86\u4e00\u4e2a\u65b0\u7684\u60f3\u6cd5\uff1a\u5982\u679c\u65af\u79d1\u7279\u5728\u4e73\u80f6\u9897\u7c92\u5468\u56f4\u5efa\u9020\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u5efa\u7b51\u4e2d\u4f7f\u7528\u7684\u811a\u624b\u67b6\uff0c\u5c06\u5b83\u4eec\u56fa\u5b9a\u5728\u9002\u5f53\u7684\u4f4d\u7f6e\uff0c\u4f1a\u600e\u4e48\u6837\uff1f\u8fd9\u6837\uff0c\u80f6\u4e73\u53ef\u4ee5\u4fdd\u6301\u5176\u826f\u597d\u7684\u7ed3\u6784\uff0c\u65af\u79d1\u7279\u53ef\u4ee5\u5411\u80f6\u4e73\u4e2d\u6dfb\u52a0\u5149\u5f15\u53d1\u5242\u548c\u5176\u4ed6\u5316\u5408\u7269\uff0c\u4ee5\u5b9e\u73b0\u7d2b\u5916\u7ebf(UV)\u51493D\u6253\u5370\u3002\n\u65af\u79d1\u7279\u8bf4\uff0c\u5728\u8bbe\u8ba1\u811a\u624b\u67b6\u65f6\uff0c\u4f60\u6700\u9700\u8981\u62c5\u5fc3\u7684\u662f\u4e00\u5207\u7684\u7a33\u5b9a\u6027\u3002\u5b83\u9700\u8981\u5927\u91cf\u7684\u9605\u8bfb\uff0c\u751a\u81f3\u50cf\u4e86\u89e3\u4e3a\u4ec0\u4e48\u80f6\u4f53\u662f\u7a33\u5b9a\u7684\u4ee5\u53ca\u80f6\u4f53\u7a33\u5b9a\u6027\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u8fd9\u6837\u57fa\u672c\u7684\u4e1c\u897f\uff0c\u4f46\u8fd9\u771f\u7684\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u6311\u6218\u3002\n\u5f53\u65af\u79d1\u7279\u5728\u4fee\u8865\u6db2\u4f53\u4e73\u80f6\u65f6\uff0c\u7c73\u7eb3\u514b\u5e0c\u6851\u5fb7\u62c9\u59c6\u5fc5\u987b\u5f04\u6e05\u695a\u5982\u4f55\u6b63\u786e\u6253\u5370\u6811\u8102\u3002\u7814\u7a76\u4eba\u5458\u9009\u62e9\u4f7f\u7528\u4e00\u79cd\u540d\u4e3a\u8fd8\u539f\u5149\u805a\u5408\u7684\u8fc7\u7a0b\uff0c\u5728\u8fd9\u79cd\u8fc7\u7a0b\u4e2d\uff0c\u6253\u5370\u673a\u4f7f\u7528\u7d2b\u5916\u5149\u5c06\u7c98\u6027\u6811\u8102\u56fa\u5316\u6216\u786c\u5316\u6210\u7279\u5b9a\u7684\u5f62\u72b6\u3002\nMeenakshisundaram\u9700\u8981\u4e00\u53f0\u80fd\u591f\u5728\u5927\u8303\u56f4\u5185\u6253\u5370\u9ad8\u5206\u8fa8\u7387\u7279\u5f81\u7684\u6253\u5370\u673a\uff0c\u4ed6\u5efa\u9020\u4e86\u4e00\u53f0\u65b0\u7684\u6253\u5370\u673a\u3002\u4ed6\u548c\u4ed6\u7684\u987e\u95ee\u5a01\u5ec9\u59c6\u65af\u63d0\u51fa\u4e86\u5728\u5927\u8303\u56f4\u5185\u626b\u63cf\u7d2b\u5916\u5149\u7684\u60f3\u6cd5\uff0c\u5e76\u57282017\u5e74\u4e3a\u8be5\u6253\u5370\u673a\u7533\u8bf7\u4e86\u4e13\u5229\u3002\n\u5373\u4f7f\u662f\u5b9a\u5236\u7684\u6253\u5370\u673a\uff0c\u6db2\u4f53\u4e73\u80f6\u9897\u7c92\u4e5f\u4f1a\u5728\u4e73\u80f6\u6811\u8102\u8868\u9762\u7684\u6295\u5c04\u7d2b\u5916\u5149\u4e4b\u5916\u9020\u6210\u6563\u5c04\uff0c\u4ece\u800c\u5bfc\u81f4\u6253\u5370\u4e0d\u51c6\u786e\u7684\u90e8\u4ef6\uff0c\u56e0\u6b64Meenakshisundaram\u8bbe\u8ba1\u4e86\u7b2c\u4e8c\u4e2a\u65b0\u60f3\u6cd5\u3002\u4ed6\u5728\u6253\u5370\u673a\u4e0a\u5d4c\u5165\u4e86\u4e00\u53f0\u76f8\u673a\uff0c\u4ee5\u6355\u6349\u6bcf\u4e00\u5927\u6876\u4e73\u80f6\u6811\u8102\u7684\u56fe\u50cf\u3002\u4f7f\u7528\u4ed6\u7684\u5b9a\u5236\u7b97\u6cd5\uff0c\u673a\u5668\u80fd\u591f\u770b\u5230\u7d2b\u5916\u5149\u5728\u6811\u8102\u8868\u9762\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u7136\u540e\u81ea\u52a8\u8c03\u6574\u5370\u5237\u53c2\u6570\uff0c\u4ee5\u6821\u6b63\u6811\u8102\u6563\u5c04\uff0c\u4ece\u800c\u4ec5\u56fa\u5316\u6240\u9700\u7684\u5f62\u72b6\u3002\n\u5a01\u5ec9\u59c6\u65af\u8bf4\uff0c\u5927\u9762\u79ef\u626b\u63cf\u6253\u5370\u673a\u662f\u6211\u7684\u4e00\u4e2a\u6982\u5ff5\uff0c\u7ef4\u65af\u74e6\u7eb3\u7279\u5f88\u5feb\u5c31\u628a\u5b83\u53d8\u6210\u4e86\u73b0\u5b9e\u3002\u7136\u540e\uff0c\u7ef4\u65af\u74e6\u7eb3\u7279\u60f3\u51fa\u4e86\u4e00\u4e2a\u60f3\u6cd5\uff0c\u5373\u5d4c\u5165\u4e00\u4e2a\u76f8\u673a\uff0c\u89c2\u5bdf\u5149\u7ebf\u5982\u4f55\u4e0e\u6750\u6599\u76f8\u4e92\u4f5c\u7528\uff0c\u5e76\u6839\u636e\u4ed6\u7684\u4ee3\u7801\u66f4\u65b0\u6253\u5370\u53c2\u6570\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u5e0c\u671b\u6211\u4eec\u7684\u535a\u58eb\u751f\u62e5\u6709\u7684\uff1a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u613f\u666f\uff0c\u4ed6\u4eec\u5b9e\u73b0\u4e86\u8fd9\u4e00\u76ee\u6807\uff0c\u5e76\u4f5c\u4e3a\u4e00\u540d\u72ec\u7acb\u7684\u7814\u7a76\u4eba\u5458\u6210\u957f\u4e3a\u66f4\u8fdc\u7684\u4eba\u3002\nMeenakshisundaram\u548cScott\u53d1\u73b0\uff0c\u4ed6\u4eec\u6700\u7ec8\u76843D\u6253\u5370\u4e73\u80f6\u90e8\u4ef6\u5728\u4e00\u79cd\u79f0\u4e3a\u534a\u4e92\u7a7f\u805a\u5408\u7269\u7f51\u7edc\u7684\u57fa\u8d28\u4e2d\u663e\u793a\u51fa\u5f3a\u5927\u7684\u673a\u68b0\u6027\u80fd\uff0c\u8fd9\u5728\u4ee5\u524d\u7684\u6587\u732e\u4e2d\u8fd8\u6ca1\u6709\u5173\u4e8e\u5f39\u6027\u4e73\u80f6\u7684\u8bb0\u5f55\u3002\nMeenakshisundaram\u8bf4\uff0c\u76f8\u4e92\u6e17\u900f\u7684\u805a\u5408\u7269\u7f51\u7edc\u5c31\u50cf\u5728\u7f51\u4e2d\u6355\u9c7c\u3002\u811a\u624b\u67b6\u4f7f\u5b83\u5177\u6709\u4e00\u5b9a\u7684\u5f62\u72b6\u3002\u4e00\u65e6\u4f60\u628a\u5b83\u653e\u8fdb\u70e4\u7bb1\uff0c\u6c34\u5c31\u4f1a\u84b8\u53d1\uff0c\u7d27\u5bc6\u7f20\u7ed5\u7684\u805a\u5408\u7269\u94fe\u53ef\u4ee5\u677e\u5f1b\u3001\u6269\u6563\u6216\u6d41\u52a8\uff0c\u5e76\u76f8\u4e92\u6e17\u900f\u5230\u7f51\u4e2d\u3002\n\u6750\u6599\u5f00\u53d1\u548c\u52a0\u5de5\u65b9\u9762\u7684\u65b0\u8fdb\u5c55\u7a81\u51fa\u4e86\u4e24\u4e2a\u5c0f\u7ec4\u4e4b\u95f4\u57f9\u80b2\u7684\u8de8\u5b66\u79d1\u73af\u5883\u3002\n\u6211\u7684\u54f2\u5b66\u662f\uff0c\u53ea\u6709\u5f53\u4f60\u4e0e\u4e0e\u4f60\u622a\u7136\u4e0d\u540c\u7684\u4eba\u5408\u4f5c\u65f6\uff0c\u8fd9\u4e9b\u7c7b\u578b\u7684\u521b\u65b0\u624d\u80fd\u5b9e\u73b0\uff0c\u6717\u8bf4\u3002\n\u8fd9\u4e24\u4f4d\u6559\u6388\u8bf4\uff0c3D\u6253\u5370\u4e73\u80f6\u4e3a\u6253\u5370\u4e00\u7cfb\u5217\u524d\u6240\u672a\u6709\u7684\u6750\u6599\u63d0\u4f9b\u4e86\u6982\u5ff5\u6846\u67b6\uff0c\u4ece\u786c\u8d28\u5851\u6599\u5230\u8f6f\u6a61\u80f6\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u4e9b\u6750\u6599\u4e00\u76f4\u65e0\u6cd5\u6253\u5370\u3002\n\u5a01\u5ec9\u59c6\u65af\u8bf4\uff1a\u5f53\u6211\u8fd8\u662f\u4e00\u540d\u7814\u7a76\u8fd9\u9879\u6280\u672f\u7684\u7814\u7a76\u751f\u65f6\uff0c\u6211\u4eec\u5f88\u9ad8\u5174\u80fd\u4ece\u6211\u4eec\u521b\u9020\u7684\u5f62\u72b6\u4e2d\u83b7\u5f97\u72ec\u7279\u7684\u6027\u80fd\uff0c\u4f46\u6f5c\u5728\u7684\u5047\u8bbe\u662f\uff0c\u6211\u4eec\u4e0d\u5f97\u4e0d\u51d1\u5408\u4f7f\u7528\u975e\u5e38\u5dee\u7684\u6750\u6599\u3002\u8482\u59c6\u56e2\u961f\u7684\u8fd9\u4e00\u53d1\u73b0\u8ba9\u4eba\u5982\u6b64\u5174\u594b\u7684\u662f\uff0c\u4ed6\u4eec\u80fd\u591f\u7a81\u7834\u6211\u4eec\u6240\u8ba4\u4e3a\u7684\u5370\u5237\u54c1\u6027\u80fd\u7684\u6781\u9650\u3002", "note_en": "Virginia Tech researchers have discovered a novel process to 3D print latex rubber, unlocking the ability to print a variety of elastic materials with complex geometric shapes.\n Latex, commonly known as the material in gloves or paint, refers to a group of polymers \u2014 long, repeating chains of molecules \u2014 coiled inside nanoparticles dispersed in water. 3D printed latex and other similarly rubbery materials called elastomers could be used for a variety of applications, including soft robotics, medical devices, or shock absorbers.\n 3D printed latex has been documented only a handful of times in scientific literature. None of the previous examples come close to the mechanical properties of the latex printed by an interdisciplinary team affiliated with the  Macromolecules Innovation Institute\u00a0(MII), the  College of Science, and the  College of Engineering.\n Through novel innovations in both the chemistry and mechanical engineering disciplines, the team overcame some long-standing limitations of 3D printing, also known as additive manufacturing. The researchers chemically modified liquid latexes to make them printable and built a custom 3D printer with an embedded computer vision system to print accurate, high-resolution features of this high-performance material.\n &#34;This project represents the quintessential example of interdisciplinary research,&#34; said Timothy Long, a professor of chemistry and a co-principal investigator on this project along with Christopher Williams, the L.S. Randolph Professor of mechanical engineering and interim director of MII. &#34;Neither of our labs would be able to accomplish this without the other.&#34;\n This project is a joint collaboration between Virginia Tech and Michelin North America via a National Science Foundation award aligned with the Grant Opportunities for Academic Liaison with Industry program, which supports teamed research between academia and industry. Details of their initial results are detailed in a\u00a0 journal article published in ACS Applied Materials &amp; Interfaces.\n  After unsuccessful attempts to synthesize a material that would provide the ideal molecular weight and mechanical properties, Phil Scott, a fifth-year macromolecular science and engineering student in the Long Research Group, turned to commercial liquid latexes.\n The researchers ultimately wanted this material in a solid 3D printed form, but Scott first needed to augment the chemical composition to allow it to print.\n Scott ran into a fundamental challenge: liquid latex is extremely fragile and difficult for chemists to alter.\n &#34;Latexes are in a state of zen,&#34; said Viswanath Meenakshisundaram, a fifth-year mechanical engineering Ph.D. student in the  Design, Research, and Education for Additive Manufacturing Systems Lab who collaborated with Scott. &#34;If you add anything to it, it\u2019ll completely lose its stability and crash out.&#34;\n Then, the chemists came up with a new idea: What if Scott built a scaffold, similar to those used in building construction, around the latex particles to hold them in place? This way, the latex could maintain its great structure, and Scott could add photoinitiators and other compounds to the latex to enable 3D printing with ultraviolet (UV) light.\n &#34;When designing the scaffold, the biggest thing you have to worry about is stability of everything,&#34; Scott said. &#34;It took a lot of reading, even stuff as basic as learning why colloids are stable and how colloidal stability works, but it was a really fun challenge.&#34;\n  While Scott tinkered with the liquid latex, Meenakshisundaram had to figure out how to correctly print the resin. The researchers chose to use a process called vat photopolymerization, in which the printer uses UV light to cure, or harden, a viscous resin into a specific shape.\n Needing a printer capable of printing high-resolution features across a large area, Meenakshisundaram built a new printer. He and Williams, his advisor, came up with the idea to scan the UV light across a large area, and in 2017, they filed a patent for the printer.\n Even with the custom printer, the fluid latex particles caused scattering outside of the projected UV light on the latex resin surface, which resulted in printing inaccurate parts, so Meenakshisundaram devised a second novel idea. He embedded a camera onto the printer to capture an image of each vat of latex resin. With his custom algorithm, the machine is able to &#34;see&#34; the UV light&#39;s interaction on the resin surface and then automatically adjust the printing parameters to correct for the resin scattering to cure just the intended shape.\n &#34;The large-area scanning printer was a concept I had, and Viswanath made it into reality in short order,&#34; Williams said. &#34;Then Viswanath came up with the idea of embedding a camera, observing how the light interacts with the material, and updating the printing parameters based on his code. That&#39;s what we want from our Ph.D. students: We provide a vision, and they accomplish that and grow beyond as an independent researcher.&#34;\n Meenakshisundaram and Scott discovered their final 3D printed latex parts exhibited strong mechanical properties in a matrix known as a semi-interpenetrating polymer network, which hadn&#39;t been documented for elastomeric latexes in the prior literature.\n &#34;An interpenetrating polymer network is like catching fish in a net,&#34; Meenakshisundaram said. &#34;The scaffold gives it a shape. Once you put that in the oven, the water will evaporate, and the tightly coiled polymer chains can relax, spread or flow, and interpenetrate into the net.&#34;\n The novel advances in both materials development and processing highlight the interdisciplinary environment fostered between the two groups.\n  &#34;My philosophy is these types of innovations are only achievable when you partner with people who are very different from you,&#34; Long said.\n The two professors said 3-D printed latex provides the conceptual framework for printing a range of unprecedented materials from rigid plastics to soft rubbers, which have been unprintable until now.\n &#34;When I was a graduate student working on this technology, we were excited to get unique performance from the shapes we could create, but the underlying assumption was we had to make do with very poor materials,&#34; Williams said. &#34;What&#39;s been so exciting about this discovery with Tim&#39;s group is being able to push the boundary of what we assumed was the limit of a printed material\u2019s performance.&#34;", "posttime": "2020-07-19 10:50:32", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6253\u5370,\u4e73\u80f6,latex", "title": "3D\u6253\u5370\u4e73\u80f6\u6a61\u80f6\u7684\u7a81\u7834", "title_en": "3D printed latex rubber breakthrough", "transed": 1, "url": "https://vtnews.vt.edu/articles/2020/06/mii-3D-printed-latex.html", "via": "", "real_tags": ["\u6253\u5370", "\u4e73\u80f6", "latex"]}, {"category": "", "categoryclass": "", "imagename": "825c7fa1f85683c084ee73fb0daf2cb3.png", "infoid": 1012820, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "GraphCore\uff0c\u5de8\u4eba\u7684\u5236\u9020\u8005\u4e13\u7528\u4e8e\u4eba\u5de5\u667a\u80fd\u7684\u82af\u7247\uff0c\u5df2\u8fdb\u5165\u7cfb\u7edf\u516c\u4e8b\u3002\u8be5\u516c\u53f8\u63d0\u51fa\u7684\u7406\u7531\u662f\u5b83\u7684\u7535\u8111\u6570\u91cf\u5de8\u5927\uff0c\u6bd4\u540c\u7b49\u52a0\u5de5\u6210\u672c\u4f4e\u7535\u529b\u6765\u81ea\u4e8e..\u3002\n\u62e5\u67091825\u4e07\u7f8e\u5143\u7684\u98ce\u9669\u6295\u8d44\u57c3\u91cc\u514b\u7684\u8d44\u672c\u91d1\u65bd\u5bc6\u7279\u6770\u745e\u00b7\u6768\u4ee5\u53ca\u5176\u4ed6\u53d1\u5149\u4f53\uff0c\u7b97\u76d8\u5468\u4e8c\u5f00\u4e1a\u4e3a\u60a8\u63d0\u4f9b\u6df1\u5ea6\u5b66\u4e60\u670d\u52a1\u4e00\u822c\u5ba2\u6237\u53ef\u7528\u6027\uff0c..\u3002\n\u5fae\u8f6f\u6b63\u5728\u589e\u52a0\u66f4\u591a\u4ee5\u5de5\u4f5c\u6548\u7387\u4e3a\u91cd\u70b9\u7684\u5c06\u5404\u79cd\u529f\u80fd\u6dfb\u52a0\u5230\u4e0d\u540c\u7684\u4e2d\u7684Outlook\u7248\u672c\u8ffd\u5bfb\u5723\u676f\u529f\u80fd\u5bf9\u7b49\u7684", "note_en": "Graphcore,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmakers\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tof\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ta\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgiant\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchip\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdedicated\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tto\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAI,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thas\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tentered\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthe\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsystem\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbusiness.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tThe\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcompany\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmakes\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthe\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tits\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomputers\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tare\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvastly\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcheaper\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthan\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tequivalent\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprocessing\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpower\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrom\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t...\n  With\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$18.25\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmillion\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tin\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tventure\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcapital\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmoney\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrom\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEric\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSchmidt,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJerry\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tYang,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tand\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tother\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tluminaries,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAbacus\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTuesday\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\topened\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tits\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeep\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlearning\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tservice\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgeneral\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcustomer\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tavailability,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t...\n  Microsoft\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tis\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadding\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmore\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tproductivity-focused\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeatures\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tto\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthe\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvarious\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tversions\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tof\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOutlook\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tin\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpursuit\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tof\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthe\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHoly\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGrail\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tof\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeature\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tparity\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tacross\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthe\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvarious\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOutlook\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tflavors.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t...\n  In both the public and private sectors, these are the barriers to meaningful adoption of artificial intelligence.\n  Among seasoned adopters, 68% have spent more than $20 million over the past year on AI, according to Deloitte.\n  More\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdetails\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tabout\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMicrosoft&#39;s\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfirst\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treorg\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tof\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tits\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfiscal\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2021\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tare\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcoming\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tto\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlight,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincluding\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thow\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tit\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tis\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpositioning\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tits\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tseparate\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsulting\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tservices\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tunit.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t...\n  Microsoft&#39;s Xiaoice social chatbot is going to become part of a separate company which will prioritize commercializing the AI technology..", "posttime": "2020-07-19 10:49:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u57c3\u9686\u00b7\u9a6c\u65af\u514b,\u9a6c\u65af\u514b,brain,\u529f\u80fd", "title": "\u57c3\u9686\u00b7\u9a6c\u65af\u514b\u8bf4\uff0c\u4e25\u91cd\u7684\u8111\u635f\u4f24\u662fNeuralink\u7684\u9996\u8981\u4efb\u52a1", "title_en": "Dire brain injuries are Neuralink's first priority, says Elon Musk", "transed": 1, "url": "https://www.zdnet.com/article/elon-musk-update-to-neuralink-computer-brain-tech-is-coming-soon/", "via": "", "real_tags": ["\u57c3\u9686\u00b7\u9a6c\u65af\u514b", "\u9a6c\u65af\u514b", "brain", "\u529f\u80fd"]}, {"category": "", "categoryclass": "", "imagename": "c901ac63f964fe794154cd07f49e3f34.jpg", "infoid": 1012819, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u7269\u7406\u5b66\u548c\u5de5\u7a0b\u5b66\u65b9\u9762\u7684\u4e00\u9879\u7a81\u7834\u4e2d\uff0c\u6765\u81ea\u7ebd\u7ea6\u5927\u5b66\u7814\u7a76\u751f\u9662\u9ad8\u7ea7\u79d1\u5b66\u7814\u7a76\u4e2d\u5fc3(CUNY ASRC)\u7684\u5149\u5b50\u5b66\u5021\u8bae\u548c\u4f50\u6cbb\u4e9a\u7406\u5de5\u5b66\u9662\u7684\u7814\u7a76\u4eba\u5458\u9996\u6b21\u5c55\u793a\u4e86\u57fa\u4e8e\u65f6\u95f4\u8c03\u5236\u7684\u62d3\u6251\u987a\u5e8f\u3002\u8fd9\u4e00\u8fdb\u5c55\u4f7f\u7814\u7a76\u4eba\u5458\u53ef\u4ee5\u6cbf\u7740\u62d3\u6251\u8d85\u6750\u6599\u7684\u8fb9\u754c\u4f20\u64ad\u58f0\u6ce2\uff0c\u800c\u4e0d\u4f1a\u6709\u6ce2\u5411\u540e\u4f20\u64ad\u6216\u88ab\u6750\u6599\u7f3a\u9677\u963b\u788d\u7684\u98ce\u9669\u3002\u53d1\u8868\u5728\u201c\u79d1\u5b66\u8fdb\u5c55\u201d\u6742\u5fd7\u4e0a\u7684\u8fd9\u9879\u65b0\u53d1\u73b0\uff0c\u5c06\u4e3a\u5f00\u53d1\u66f4\u4fbf\u5b9c\u3001\u66f4\u8f7b\u3001\u7535\u6c60\u8017\u7535\u91cf\u66f4\u5c11\u3001\u53ef\u4ee5\u5728\u6076\u52a3\u6216\u5371\u9669\u73af\u5883\u4e0b\u5de5\u4f5c\u7684\u8bbe\u5907\u94fa\u5e73\u9053\u8def\u3002CUNY ASRC\u5149\u5b50\u5b66\u5021\u8bae\u521b\u59cb\u4e3b\u4efb\u3001CUNY\u7814\u7a76\u751f\u9662\u7269\u7406\u5b66\u6559\u6388Andrea Aluu\u548c\u535a\u58eb\u540e\u52a9\u7406\u7814\u7a76\u5458\u502a\u7fd4\u4e0e\u4f50\u6cbb\u4e9a\u7406\u5de5\u5b66\u9662\u7684Amir Ardabi\u548cMichael Leamy\u4e00\u8d77\u64b0\u5199\u4e86\u8fd9\u7bc7\u8bba\u6587\uff0c\u4ed6\u8bf4\uff0c\u8fd9\u7bc7\u8bba\u6587\u7684\u4f5c\u8005\u662f\u4f50\u6cbb\u4e9a\u7406\u5de5\u5b66\u9662\u7684\u963f\u7c73\u5c14\u00b7\u963f\u8fbe\u6bd4(Amir Ardabi)\u548c\u8fc8\u514b\u5c14\u00b7\u5229\u7c73(Michael Leamy)\u3002\n\u62d3\u6251\u573a\u68c0\u67e5\u4e0d\u53d7\u8fde\u7eed\u53d8\u5f62\u5f71\u54cd\u7684\u5bf9\u8c61\u7684\u7279\u6027\u3002\u5728\u62d3\u6251\u7edd\u7f18\u4f53\u4e2d\uff0c\u7535\u6d41\u53ef\u4ee5\u6cbf\u7740\u7269\u4f53\u7684\u8fb9\u754c\u6d41\u52a8\uff0c\u8fd9\u79cd\u6d41\u52a8\u53ef\u4ee5\u62b5\u6297\u7269\u4f53\u7f3a\u9677\u7684\u5e72\u6270\u3002\u8d85\u6750\u6599\u9886\u57df\u7684\u6700\u65b0\u8fdb\u5c55\u5df2\u7ecf\u6269\u5c55\u4e86\u8fd9\u4e9b\u7279\u5f81\uff0c\u4ee5\u9075\u5faa\u7c7b\u4f3c\u7684\u539f\u7406\u6765\u63a7\u5236\u58f0\u97f3\u548c\u5149\u7684\u4f20\u64ad\u3002\n\u7279\u522b\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u963f\u5362\u5b9e\u9a8c\u5ba4\u548c\u7ebd\u7ea6\u57ce\u5e02\u7269\u7406\u5b66\u9662\u6559\u6388\u4e9a\u5386\u5c71\u5927\u00b7\u54c8\u5c3c\u5361\u8036\u592b(Alexander Khanikaev)\u4e4b\u524d\u7684\u5de5\u4f5c\u5229\u7528\u51e0\u4f55\u4e0d\u5bf9\u79f0\u57283-D\u6253\u5370\u7684\u58f0\u5b66\u8d85\u6750\u6599\u4e2d\u521b\u9020\u4e86\u62d3\u6251\u79e9\u5e8f\u3002\u5728\u8fd9\u4e9b\u7269\u4f53\u4e2d\uff0c\u88ab\u8bc1\u660e\u53ea\u80fd\u6cbf\u7740\u7269\u4f53\u7684\u8fb9\u7f18\u548c\u5c16\u9510\u7684\u89d2\u843d\u4f20\u64ad\uff0c\u4f46\u6709\u4e00\u4e2a\u660e\u663e\u7684\u7f3a\u70b9\uff1a\u8fd9\u4e9b\u6ce2\u6ca1\u6709\u5b8c\u5168\u53d7\u5230\u7ea6\u675f-\u5b83\u4eec\u53ef\u4ee5\u5411\u524d\u6216\u5411\u540e\u4f20\u64ad\uff0c\u4f46\u5177\u6709\u76f8\u540c\u7684\u7279\u6027\u3002\u8fd9\u79cd\u6548\u679c\u56fa\u6709\u5730\u5c06\u8fd9\u79cd\u65b9\u6cd5\u7684\u6574\u4f53\u5065\u58ee\u6027\u9650\u5236\u5728\u58f0\u97f3\u7684\u62d3\u6251\u987a\u5e8f\u4e0a\u3002\u67d0\u4e9b\u7c7b\u578b\u7684\u65e0\u5e8f\u6216\u7f3a\u9677\u786e\u5b9e\u4f1a\u5411\u540e\u53cd\u5c04\u6cbf\u7269\u4f53\u8fb9\u754c\u4f20\u64ad\u7684\u58f0\u97f3\u3002\n\u8fd9\u9879\u6700\u65b0\u7684\u5b9e\u9a8c\u514b\u670d\u4e86\u8fd9\u4e00\u6311\u6218\uff0c\u8868\u660e\u65f6\u95f4\u53cd\u8f6c\u5bf9\u79f0\u7834\u7f3a\uff0c\u800c\u4e0d\u662f\u51e0\u4f55\u4e0d\u5bf9\u79f0\uff0c\u4e5f\u53ef\u4ee5\u7528\u6765\u8bf1\u5bfc\u62d3\u6251\u79e9\u5e8f\u3002\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u58f0\u97f3\u4f20\u64ad\u53d8\u5f97\u771f\u6b63\u5355\u5411\uff0c\u5e76\u4e14\u5bf9\u65e0\u5e8f\u548c\u7f3a\u9677\u5177\u6709\u5f88\u5f3a\u7684\u9c81\u68d2\u6027\u3002\n\u7ed3\u679c\u662f\u62d3\u6251\u7269\u7406\u7684\u7a81\u7834\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u80fd\u591f\u663e\u793a\u51fa\u4ece\u65f6\u95f4\u53d8\u5316\u4e2d\u51fa\u73b0\u7684\u62d3\u6251\u987a\u5e8f\uff0c\u8fd9\u4e0e\u57fa\u4e8e\u51e0\u4f55\u4e0d\u5bf9\u79f0\u7684\u62d3\u6251\u58f0\u5b66\u7684\u5927\u91cf\u5de5\u4f5c\u76f8\u6bd4\u662f\u4e0d\u540c\u7684\uff0c\u4e5f\u662f\u66f4\u6709\u5229\u7684\u3002\u4ee5\u524d\u7684\u65b9\u6cd5\u56fa\u6709\u5730\u9700\u8981\u901a\u8fc7\u5176\u53cd\u5c04\u7684\u53cd\u5411\u901a\u9053\u7684\u5b58\u5728\uff0c\u8fd9\u56fa\u6709\u5730\u9650\u5236\u4e86\u5b83\u4eec\u7684\u62d3\u6251\u4fdd\u62a4\u3002\u5229\u7528\u65f6\u95f4\u8c03\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u6291\u5236\u53cd\u5411\u4f20\u64ad\uff0c\u5e76\u63d0\u4f9b\u5f3a\u6709\u529b\u7684\u62d3\u6251\u4fdd\u62a4\u3002\n\u7814\u7a76\u4eba\u5458\u8bbe\u8ba1\u4e86\u4e00\u79cd\u88c5\u7f6e\uff0c\u7531\u4e00\u7ec4\u5706\u5f62\u538b\u7535\u8c10\u632f\u5668\u7ec4\u6210\uff0c\u6392\u5217\u6210\u91cd\u590d\u7684\u516d\u8fb9\u5f62\uff0c\u5c31\u50cf\u8702\u7a9d\u683c\u5b50\u4e00\u6837\uff0c\u5e76\u7c98\u5408\u5728\u805a\u4e73\u9178\u7684\u8584\u76d8\u4e0a\u3002\u7136\u540e\uff0c\u4ed6\u4eec\u5c06\u5176\u8fde\u63a5\u5230\u5916\u90e8\u7535\u8def\uff0c\u5916\u90e8\u7535\u8def\u63d0\u4f9b\u4e2d\u65ad\u7684\u65f6\u95f4\u8c03\u5236\u4fe1\u53f7\u3002\n\u4f5c\u4e3a\u989d\u5916\u7684\u597d\u5904\uff0c\u4ed6\u4eec\u7684\u8bbe\u8ba1\u8003\u8651\u5230\u4e86\u53ef\u7f16\u7a0b\u6027\u3002\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u53ef\u4ee5\u6cbf\u7740\u5404\u79cd\u4e0d\u540c\u7684\u53ef\u91cd\u6784\u8def\u5f84\u5bfc\u6ce2\uff0c\u635f\u8017\u6700\u5c0f\u3002\u963f\u5362\u8bf4\uff0c\u4f7f\u7528\u8868\u9762\u58f0\u6ce2\u6280\u672f\u7684\u8d85\u58f0\u6210\u50cf\u3001\u58f0\u7eb3\u548c\u7535\u5b50\u7cfb\u7edf\u90fd\u53ef\u4ee5\u4ece\u8fd9\u4e00\u8fdb\u6b65\u4e2d\u53d7\u76ca\u3002\u66f4\u591a\u4fe1\u606f\uff1a\u57fa\u4e8e\u5408\u6210\u89d2\u52a8\u91cf\u504f\u5dee\u7684\u53ef\u91cd\u6784Floquet\u5f39\u6027\u52a8\u6001\u62d3\u6251\u7edd\u7f18\u4f53\uff0c\u79d1\u5b66\u8fdb\u5c55(2020)\u3002", "note_en": "In a breakthrough for physics and engineering, researchers from the Photonics Initiative at the Advanced Science Research Center at The Graduate Center, CUNY (CUNY ASRC) and from Georgia Tech have presented the first demonstration of topological order based on time modulations. This advancement allows the researchers to propagate sound waves along the boundaries of topological metamaterials without the risk of waves traveling backwards or being thwarted by material defects.    The new findings, which appear in the journal  Science Advances, will pave the way for cheaper, lighter devices that use less battery power, and which can function in harsh or hazardous environments. Andrea Al\u00f9, founding director of the CUNY ASRC Photonics Initiative and Professor of Physics at The Graduate Center, CUNY, and postdoctoral research associate Xiang Ni were authors on the paper, together with Amir Ardabi and Michael Leamy from Georgia Tech.\n The field of topology examines properties of an object that are not affected by continuous deformations. In a topological insulator, electrical currents can flow along the object&#39;s boundaries, and this flow is resistant to being interrupted by the object&#39;s imperfections. Recent progress in the field of metamaterials has extended these features to control the propagation of sound and light following similar principles.\n In particular, previous work from the labs of Al\u00f9 and City College of New York Physics Professor Alexander Khanikaev used geometrical asymmetries to create topological order in 3-D-printed acoustic metamaterials. In these objects,   were shown to be confined to travel along the object&#39;s edges and around sharp corners, but with a significant drawback: These waves weren&#39;t fully constrained\u2014they could travel either forward or backward with the same properties. This effect inherently limited the overall robustness of this approach to topological order for sound. Certain types of disorder or imperfections would indeed reflect backwards the sound propagating along the boundaries of the object.\n This latest experiment overcomes this challenge, showing that time-reversal symmetry breaking, rather than geometrical asymmetries, can be also used to induce topological order. Using this method, sound propagation becomes truly unidirectional, and strongly robust to disorder and imperfections\n &#34;The result is a breakthrough for topological physics, as we have been able to show topological order emerging from time variations, which is different, and more advantageous, than the large body of work on topological acoustics based on geometrical asymmetries,&#34; Al\u00f9 said. &#34;Previous approaches inherently required the presence of a backward channel through which   could be reflected, which inherently limited their topological protection. With time modulations we can suppress backward propagation and provide strong topological protection.&#34;\n The researchers designed a device made of an array of circular piezoelectric resonators arranged in repeating hexagons, like a honeycomb lattice, and bonded to a thin disk of polylactic acid. They then connected this to external circuits, which provide a time-modulated signal that breaks  .\n As a bonus, their design allows for programmability. This means they can guide waves along a variety of different reconfigurable paths, with minimal loss. Ultrasound imaging, sonar, and electronic systems that use surface acoustic wave technology could all benefit from this advance, Al\u00f9 said.        More information:\t\t\t\t\t\t\t\t\t\t\t\tReconfigurable Floquet elastodynamic topological insulator based on synthetic angular momentum bias,  Science Advances (2020).", "posttime": "2020-07-19 10:49:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8c03\u5236,modulation,\u62d3\u6251", "title": "\u57fa\u4e8e\u65f6\u95f4\u8c03\u5236\u7684\u58f0\u6ce2\u5728\u62d3\u6251\u8d85\u6750\u6599\u4e0a\u7684\u4f20\u64ad", "title_en": "Time modulation-based propogation of sound waves on topological metamaterials", "transed": 1, "url": "https://phys.org/news/2020-07-scientists-major-breakthrough.html", "via": "", "real_tags": ["\u8c03\u5236", "\u62d3\u6251"]}, {"category": "", "categoryclass": "", "imagename": "de8c7d4d95624cbf7c0246cd11943893.jpg", "infoid": 1012818, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u636e\u201c\u534e\u5c14\u8857\u65e5\u62a5\u201d\u62a5\u9053\uff0c\u51fa\u4e8e\u5bf9\u793e\u4ea4\u5a92\u4f53\u5e73\u53f0Facebook\u548cInstagram\u5185\u5bb9\u653f\u7b56\u6267\u884c\u60c5\u51b5\u7684\u62c5\u5fe7\uff0c\u8fea\u58eb\u5c3c\u5927\u5e45\u51cf\u5c11\u4e86\u5728Facebook\u548cInstagram\u5e7f\u544a\u4e0a\u7684\u652f\u51fa\u3002\u5b83\u52a0\u5165\u4e86\u524a\u51cfFacebook\u5e7f\u544a\u7684\u5927\u516c\u53f8\u540d\u5355\uff0c\u4f5c\u4e3a\u8feb\u4f7fFacebook\u6539\u53d8\u5176\u5e73\u53f0\u4e0a\u5904\u7406\u4ec7\u6068\u8a00\u8bba\u548c\u9519\u8bef\u4fe1\u606f\u7684\u65b9\u5f0f\u7684\u52aa\u529b\u7684\u4e00\u90e8\u5206\u3002\n\u4e3a\u671f\u4e00\u4e2a\u6708\u7684#StopHateforProfit\u62b5\u5236\u6d3b\u52a8\u7531\u53cd\u8bfd\u8c24\u8054\u76df\u3001\u5168\u56fd\u6709\u8272\u4eba\u79cd\u534f\u8fdb\u4f1a(NAACP)\u3001\u53d8\u5316\u4e4b\u8272(Color Of Change)\u548c\u7761\u7720\u5de8\u4eba(Sleep Giants)\u7b49\u6c11\u6743\u7ec4\u7ec7\u7ec4\u6210\u7684\u8054\u76df\u4e8e7\u67081\u65e5\u5f00\u59cb\uff0c\u5176\u4e2d\u5305\u62ec\u597d\u65f6(Hershey)\u3001\u672c\u7530(Honda)\u3001\u672c\u4e0e\u6770\u745e(Ben&amp\uff1bJerry\u2018s)\u548c\u5a01\u745e\u68ee(Verizon)\u7b49\u516c\u53f8\u3002\n\u5176\u4ed6\u6ca1\u6709\u53c2\u4e0e\u6b63\u5f0f\u62b5\u5236\u7684\u516c\u53f8\u4eceFacebook\u548c\u5176\u4ed6\u793e\u4ea4\u5e73\u53f0\u4e0a\u64a4\u4e0b\u4e86\u5e7f\u544a\uff0c\u5305\u62ec\u53ef\u53e3\u53ef\u4e50\u3001\u4e50\u9ad8\u3001\u661f\u5df4\u514b\u548c\u8054\u5408\u5229\u534e\u3002\u5fae\u8f6f\u57288\u6708\u4efd\u6682\u505c\u4e86\u5728Facebook\u548cInstagram\u4e0a\u7684\u5e7f\u544a\u3002\n\u636e\u201c\u534e\u5c14\u8857\u65e5\u62a5\u201d\u62a5\u9053\uff0c\u8fea\u58eb\u5c3c\u5df2\u7ecf\u6682\u505c\u4e86Facebook\u4e0a\u65b0\u95fb\u8fea\u58eb\u5c3c+\u6d41\u5a92\u4f53\u670d\u52a1\u7684\u5e7f\u544a\uff0c\u5e76\u6682\u505c\u4e86Facebook Instagram\u5e73\u53f0\u4e0aHulu\u6d41\u5a92\u4f53\u670d\u52a1\u7684\u5e7f\u544a\u3002\u636e\u534e\u5c14\u8857\u65e5\u62a5\u62a5\u9053\uff0c2020\u5e74\u4e0a\u534a\u5e74\uff0c\u8fea\u58eb\u5c3c\u5728\u7f8e\u56fdFacebook\u4e0a\u82b1\u8d39\u4e86\u7ea62.1\u4ebf\u7f8e\u5143\u6295\u653e\u8fea\u58eb\u5c3c+\u5e7f\u544a\uff0c4\u670815\u65e5\u81f36\u670830\u65e5\u671f\u95f4\uff0c\u8fea\u58eb\u5c3c\u5728Instagram\u4e0a\u82b1\u8d39\u4e861600\u4e07\u7f8e\u5143\u6295\u653eHulu\u5e7f\u544a\u3002\n\u5468\u516d\uff0c\u8fea\u58eb\u5c3c\u548cFacebook\u6ca1\u6709\u56de\u590d\u8bb0\u8005\u7684\u7f6e\u8bc4\u8bf7\u6c42\u3002Facebook\u7684\u4e00\u4f4d\u53d1\u8a00\u4eba\u5728\u4e0a\u4e2a\u6708\u7684\u4e00\u4efd\u58f0\u660e\u4e2d\u8868\u793a\uff0c\u8be5\u516c\u53f8\u4ecd\u201c\u4e13\u6ce8\u4e8e\u6d88\u9664\u4ec7\u6068\u8a00\u8bba\u548c\u63d0\u4f9b\u5173\u952e\u6295\u7968\u4fe1\u606f\u7684\u91cd\u8981\u5de5\u4f5c\u201d\u3002", "note_en": "Disney has significantly reduced its spending on Facebook and Instagram ads amid concerns about the social media platform\u2019s enforcement of its content policies,   The Wall Street Journal reported. It joins a list of large companies that have  cut back on Facebook ads as part of an effort to compel Facebook to change how it handles hate speech and misinformation on its platforms.\n The monthlong #StopHateforProfit boycott organized by a coalition of civil rights organizations including the Anti-Defamation League, the NAACP, Color of Change, and Sleeping Giants kicked off July 1st and  includes companies like Hershey, Honda, Ben &amp; Jerry\u2019s, and Verizon.\n Other companies not part of the formal boycott that have pulled ads  from Facebook and other social platforms included Coca-Cola, Lego, Starbucks, and Unilever. And  Microsoft suspended its advertising on Facebook and Instagram through August.\n According to the  WSJ, Disney has paused ads for its news Disney Plus streaming service on Facebook, and paused ads for its Hulu streaming service on Facebook\u2019s Instagram platform. Disney spent about $210 million for Disney Plus ads on Facebook in the US in the first half of 2020, the  WSJ reports, and spent $16 million for Hulu ads on Instagram between April 15th and June 30th.\n Disney and Facebook did not respond to requests for comment Saturday. A Facebook spokesperson  said in a statement last month that it remains \u201cfocused on the important work of removing hate speech and providing critical voting information.\u201d", "posttime": "2020-07-19 10:29:29", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u5e7f\u544a,facebook,\u62a5\u9053,reportedly", "title": "\u636e\u62a5\u9053\uff0c\u8fea\u58eb\u5c3c\u6682\u505c\u4e86\u5728Facebook\u5e7f\u544a\u4e0a\u7684\u652f\u51fa", "title_en": "Disney has reportedly paused its spending on Facebook ads", "transed": 1, "url": "https://www.theverge.com/2020/7/18/21329810/disney-facebook-ad-spending-instagram-hulu-boycott-hate-speech", "via": "", "real_tags": ["\u5e7f\u544a", "facebook", "\u62a5\u9053"]}, {"category": "", "categoryclass": "", "imagename": "bb0a091566de4e51942bab91d5bd78ba.jpg", "infoid": 1012817, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f01\u4e1a\u4e4b\u6240\u4ee5\u4e0d\u80fd\u521b\u65b0\uff0c\u662f\u56e0\u4e3a\u4ed6\u4eec\u5931\u53bb\u4e86\u6700\u5177\u521b\u65b0\u7cbe\u795e\u7684\u4eba\u624d\u3002\u5185\u90e8\u521b\u65b0\u8005\uff0c\u4e5f\u5c31\u662f\u6700\u6709\u53ef\u80fd\u521b\u9020\u65b0\u4ef7\u503c\u7684\u4eba\uff0c\u53d1\u73b0\u81ea\u5df1\u79bb\u5f00\u4e86\u4ed6\u4eec\u5de5\u4f5c\u7684\u516c\u53f8\u53bb\u521b\u4e1a\uff0c\u901a\u5e38\u4f1a\u521b\u9020\u5927\u91cf\u7684\u5ba2\u6237\u548c\u80a1\u4e1c\u4ef7\u503c\u3002\u5982\u679c\u539f\u6765\u7684\u516c\u53f8\u77e5\u9053\u5982\u4f55\u8bc6\u522b\u8fd9\u4e9b\u4eba\u624d\uff0c\u5e76\u80fd\u591f\u521b\u9020\u4e00\u4e2a\u8ba9\u8fd9\u4e9b\u4eba\u624d\u8301\u58ee\u6210\u957f\u7684\u73af\u5883\uff0c\u90a3\u4e48\u8fd9\u4e00\u4ef7\u503c\u672c\u53ef\u4ee5\u88ab\u539f\u59cb\u516c\u53f8\u4fdd\u7559\u4e0b\u6765\u3002\n\u6d41\u884c\u7684\u89c6\u9891\u4f1a\u8bae\u8f6f\u4ef6\u5236\u9020\u5546Zoom\u7684\u521b\u59cb\u4eba\u57c3\u91cc\u514b\u00b7\u8881\u66fe\u5728WebEx(\u601d\u79d1\u7684\u4e00\u4e2a\u90e8\u95e8)\u62c5\u4efb\u5de5\u7a0b\u4e3b\u7ba1\u3002\u7136\u800c\uff0c\u4ed6\u76f8\u4fe1\u601d\u79d1\u7684\u89c6\u9891\u4f1a\u8bae\u4ea7\u54c1\u4e0d\u662f\u7279\u522b\u597d\uff0c\u800c\u4e14\u62e5\u6709\u66f4\u597d\u7684\u57fa\u4e8e\u4e91\u7684\u4ea7\u54c1\u7684\u4eba\u4f1a\u51fb\u8d25\u4ed6\u4eec\u3002\u5c3d\u7ba1\u4ed6\u6709\u4e00\u4efd\u4ee4\u4eba\u5782\u6d8e\u7684\u9ad8\u7ea7\u6280\u672f\u9ad8\u7ba1\u7684\u5de5\u4f5c\uff0c\u4f46\u4ed6\u5bf9\u5ba2\u6237\u4e0d\u6ee1\u610f\u7684\u4e8b\u5b9e\u611f\u5230\u5c34\u5c2c\u3002\u4ed6\u8bd5\u56fe\u8bf4\u670d\u4ed6\u7684\u7ba1\u7406\u5c42\uff0c\u4ed6\u4eec\u9700\u8981\u63d0\u4f9b\u66f4\u597d\u7684\u4ea7\u54c1\uff0c\u4f46\u4ed6\u7684\u8001\u677f\u4eec\u4e0d\u540c\u610f\u3002\u6700\u540e\uff0c\u4ed6\u79bb\u5f00\u53bb\u4eb2\u624b\u5236\u9020\u65b0\u4ea7\u54c1\u3002\u6b63\u5982\u6211\u4eec\u73b0\u5728\u6240\u77e5\uff0cZoom\u53d8\u5f97\u975e\u5e38\u53d7\u6b22\u8fce\u548c\u6210\u529f\uff1b\u8be5\u516c\u53f8\u76ee\u524d\u7684\u4f30\u503c\u63a5\u8fd1250\u4ebf\u7f8e\u5143\u3002\n\u5982\u679c\u601d\u79d1\u63d0\u4f9b\u4e86\u8881\u7559\u4e0b\u6765\u7684\u73af\u5883\uff0c\u8fd9\u4e00\u4ef7\u503c\u672c\u53ef\u4ee5\u88ab\u601d\u79d1\u4fdd\u7559\u3002\u76f8\u53cd\uff0c\u601d\u79d1\u72af\u4e0b\u4e86\u4f01\u4e1a\u521b\u65b0\u4e2d\u6700\u5e38\u89c1\u7684\u9519\u8bef\u4e4b\u4e00\u3002\u5b83\u6ca1\u6709\u8ba4\u8bc6\u5230\u5185\u90e8\u521b\u65b0\u8005\uff0c\u4e5f\u5ffd\u7565\u4e86\u81ea\u5df1\u7684\u65d7\u8230\u4ea7\u54c1\u5c3d\u7ba1\u5e02\u573a\u4efd\u989d\u5f88\u9ad8\uff0c\u4f46\u5f88\u5bb9\u6613\u53d7\u5230\u653b\u51fb\u7684\u8ff9\u8c61\u3002\n\u601d\u79d1\u5e76\u4e0d\u5b64\u5355\u3002\u5927\u516c\u53f8\u7ecf\u5e38\u9519\u8fc7\u521b\u9020\u65b0\u4ef7\u503c\u7684\u673a\u4f1a\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7684\u5185\u90e8\u521b\u65b0\u8005\u7f3a\u4e4f\u4e00\u4e2a\u53ef\u4ee5\u8ba9\u4ed6\u4eec\u8301\u58ee\u6210\u957f\u3001\u79bb\u5f00\u5e76\u6210\u4e3a\u4f01\u4e1a\u5bb6\u7684\u73af\u5883\u3002\u6839\u636e\u8003\u592b\u66fc\u57fa\u91d1\u4f1a(Kauffman Foundation)\u7684\u6570\u636e\uff0c\u8de8\u884c\u4e1a\u7684\u6210\u529f\u4f01\u4e1a\u5bb6\u4e2d\uff0c\u8d85\u8fc775%\u7684\u4eba\u5728\u521b\u529e\u81ea\u5df1\u7684\u516c\u53f8\u4e4b\u524d\u66fe\u5728\u8f83\u5927\u7684\u516c\u53f8\u5de5\u4f5c\u8fc7\u3002\n\u8fd9\u5bfc\u81f4\u4e86\u4e00\u4e2a\u8fd1\u4e4e\u6ed1\u7a3d\u7684\u5faa\u73af\u3002\u5927\u516c\u53f8\u65e0\u6cd5\u7559\u4f4f\u4ed6\u4eec\u6700\u597d\u7684\u521b\u65b0\u8005\uff0c\u4ed6\u4eec\u8d70\u51fa\u53bb\u5f00\u59cb\u6210\u529f\u7684\u521b\u4e1a\u3002\u8bb8\u591a\u8fd9\u6837\u7684\u5927\u516c\u53f8\uff0c\u4e3a\u4e86\u52aa\u529b\u5b66\u4e60\u5982\u4f55\u521b\u65b0\uff0c\u5f00\u59cb\u6d3e\u9063\u56e2\u961f\u5230\u7845\u8c37\u7b49\u5730\u7814\u7a76\u521d\u521b\u516c\u53f8\u662f\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u7684\uff0c\u800c\u6ca1\u6709\u610f\u8bc6\u5230\u4ed6\u4eec\u62dc\u8bbf\u7684\u521b\u4e1a\u8005\u5728\u975e\u5e38\u50cf\u4ed6\u4eec\u81ea\u5df1\u7684\u516c\u53f8\u91cc\u9732\u51fa\u4e86\u7259\u9f7f\u3002\n\u5982\u679c\u516c\u53f8\u4e86\u89e3\u5185\u90e8\u521b\u65b0\u8005\u79bb\u5f00\u7684\u539f\u56e0\uff0c\u5e76\u5236\u5b9a\u63aa\u65bd\u7559\u4f4f\u4ed6\u4eec\uff0c\u6574\u4e2a\u5faa\u73af\u5c31\u53ef\u4ee5\u907f\u514d\u3002\n\u5185\u90e8\u521b\u65b0\u8005\u6709\u4e00\u4e9b\u5171\u540c\u7684\u7279\u70b9\uff0c\u516c\u53f8\u5e94\u8be5\u5b66\u4f1a\u8ba4\u8bc6\u5230\u8fd9\u4e00\u70b9\u3002\u9996\u5148\uff0c\u4ed6\u4eec\u4e0d\u592a\u53ef\u80fd\u662f\u4e3b\u5bfc\u4f1a\u8bae\u3001\u80fd\u591f\u8f7b\u677e\u8ba8\u8bba\u5546\u4e1a\u6218\u7565\u7684\u201c\u534e\u800c\u4e0d\u5b9e\u201d\u7684\u4eba\u3002\u76f8\u53cd\uff0c\u771f\u6b63\u7684\u521b\u65b0\u8005\u662f\u90a3\u4e9b\u811a\u8e0f\u5b9e\u5730\u3001\u6709\u7eaa\u5f8b\u3001\u6709\u5185\u5728\u52a8\u529b\u548c\u4f18\u79c0\u7684\u5408\u4f5c\u8005\u3002\u800c\u4e14\u4ed6\u4eec\u51e0\u4e4e\u90fd\u662f\u6df1\u5165\u4e86\u89e3\u5176\u9886\u57df\u7684\u4e3b\u9898\u4e13\u5bb6\u3002\n\u8fd9\u4e9b\u90fd\u662f\u4f60\u5e94\u8be5\u8ba4\u53ef\u3001\u5956\u52b1\u7684\u4eba\uff0c\u6700\u91cd\u8981\u7684\u662f\uff0c\u7ed9\u4e88\u4ed6\u4eec\u521b\u65b0\u7684\u81ea\u7531\u3002\u8fd9\u4e9b\u4eba\u5982\u679c\u5f97\u4e0d\u5230\u652f\u6301\uff0c\u5c31\u6709\u4fe1\u5fc3\u548c\u80fd\u529b\u79bb\u5f00\u81ea\u5df1\u7684\u516c\u53f8\uff0c\u8ffd\u6c42\u81ea\u5df1\u7684\u60f3\u6cd5\u3002\n\u5728\u8bb8\u591a\u516c\u53f8\u91cc\uff0c\u4f1f\u5927\u7684\u60f3\u6cd5\u6c38\u8fdc\u4e0d\u4f1a\u51fa\u73b0\u3002\u516c\u53f8\u56e0\u62d2\u7edd\u597d\u4e3b\u610f\u800c\u81ed\u540d\u662d\u8457\uff0c\u56e0\u4e3a\u8bf4\u201c\u4e0d\u201d\u603b\u662f\u66f4\u5b89\u5168\u3002\u7ecf\u7406\u4eec\u4ece\u6765\u4e0d\u4f1a\u56e0\u4e3a\u8bf4\u201c\u4e0d\u201d\u800c\u60f9\u4e0a\u9ebb\u70e6\u3002\u53ea\u6709\u5f53\u4f60\u5bf9\u9519\u8bef\u7684\u4e8b\u60c5\u8bf4\u201c\u662f\u201d\u65f6\uff0c\u4f60\u624d\u5f00\u59cb\u62db\u81f4\u6279\u8bc4\u3002\u56e0\u6b64\uff0c\u4f01\u4e1a\u5f62\u6210\u4e86\u538c\u6076\u98ce\u9669\u7684\u6587\u5316\u3002\n\u5728\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u5185\u90e8\u521b\u65b0\u8005\u80fd\u591f\u7a81\u7834\u516c\u53f8\u969c\u788d\u5e76\u53d6\u5f97\u6210\u529f\u3002\u96c0\u5de2\u5458\u5de5\u57c3\u91cc\u514b\u00b7\u6cd5\u5f17\u5c14(Eric Favre)\u7684\u521b\u610fNespresso\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002\u6cd5\u5f17\u5c14\u60f3\u628aNespresso\u5f00\u53d1\u6210\u4e00\u79cd\u4ea7\u54c1\uff0c\u4f46\u4ed6\u7684\u8001\u677f\u4eec\u62c5\u5fc3\u8fd9\u4f1a\u635f\u5bb3\u96c0\u5de2\u7684\u9500\u552e\u3002\n\u591a\u5e74\u6765\uff0c\u6cd5\u5f17\u5c14\u4e00\u76f4\u79d8\u5bc6\u5730\u81f4\u529b\u4e8e\u5236\u9020Nespresso\u5496\u5561\u673a\u3002\u6700\u7ec8\uff0c\u4ed6\u8bf4\u670d\u516c\u53f8\u8ba9\u4ed6\u5728\u6d88\u8d39\u8005\u4e2d\u8bd5\u7528\u3002\u4eba\u4eec\u559c\u6b22\u5b83\u3002\u4eca\u5929\uff0cNespresso\u5df2\u7ecf\u6210\u4e3a\u81ea\u6ee4\u7eb8\u5668\u4ee5\u6765\u5bb6\u5ead\u5496\u5561\u6d88\u8d39\u4e2d\u6700\u91cd\u5927\u7684\u521b\u65b0\u3002\nNespresso\u662f\u4e00\u4e2a\u575a\u6301\u4e0d\u61c8\u7684\u5458\u5de5\u514b\u670d\u5531\u53cd\u8c03\u7684\u4eba\uff0c\u5728\u4ed6\u4eec\u76f8\u4fe1\u7684\u9879\u76ee\u4e0a\u8f9b\u52e4\u5de5\u4f5c\u7684\u4f8b\u5b50\uff0c\u6700\u7ec8\u521b\u9020\u4e86\u7a81\u7834\u6027\u7684\u521b\u65b0\u3002\u4f46\u8fd9\u4e0d\u662f\u5e38\u6001\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u65b0\u60f3\u6cd5\u4f1a\u88ab\u7ecf\u7406\u4eec\u5426\u51b3\uff0c\u4fc3\u4f7f\u5185\u90e8\u521b\u65b0\u8005\u91c7\u7eb3\u4ed6\u4eec\u7684\u60f3\u6cd5\uff0c\u521b\u529e\u81ea\u5df1\u7684\u516c\u53f8\u3002\u5982\u679c\u6cd5\u5f17\u5c14\u7684\u60f3\u6cd5\u662f\u4f5c\u4e3a\u4e00\u5bb6\u521d\u521b\u516c\u53f8\u5f00\u53d1\u51fa\u6765\u7684\uff0c\u90a3\u4e48\u4ed6\u7684\u60f3\u6cd5\u53ef\u80fd\u4e5f\u4f1a\u540c\u6837\u6210\u529f\u3002\n\u53ea\u6709\u5f53\u516c\u53f8\u5b66\u4f1a\u521b\u9020\u4e00\u79cd\u5bf9\u66f4\u591a\u4e8b\u60c5\u8bf4\u597d\uff0c\u5e76\u4e3a\u5185\u90e8\u521b\u65b0\u8005\u63d0\u4f9b\u66f4\u591a\u652f\u6301\u7684\u6587\u5316\u65f6\uff0c\u521b\u65b0\u7387\u624d\u4f1a\u63d0\u9ad8\u3002\u5426\u5219\uff0c\u4f60\u6700\u597d\u7684\u4ef7\u503c\u521b\u9020\u8005-\u8fde\u540c\u4ed6\u4eec\u7684\u60f3\u6cd5-\u5c06\u4f1a\u79bb\u5f00\uff0c\u56e0\u4e3a\u597d\u7684\u60f3\u6cd5\u548c\u521b\u4e1a\u4eba\u624d\u5e76\u4e0d\u7f3a\u4e4f\u8d44\u91d1\u548c\u652f\u6301\u3002\n\u5f53\u4f60\u5728\u4e00\u5bb6\u516c\u53f8\u505a\u4e86\u4e00\u4e9b\u4ee4\u4eba\u60ca\u53f9\u7684\u4e8b\u60c5\uff0c\u5e76\u5e26\u6765\u4e86\u6570\u4ebf\u7f8e\u5143\u7684\u65b0\u4ef7\u503c\u65f6\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u4e5f\u8bb8\u4f60\u5728\u5185\u90e8\u5f00\u53d1\u4e86\u50cfZoom\u6216Nespresso\u8fd9\u6837\u7684\u4e1c\u897f\u3002\u5f53\u7136\uff0c\u4f60\u4f1a\u5f97\u5230\u8ba4\u53ef\uff0c\u53ef\u80fd\u4f1a\u5347\u804c\u6216\u83b7\u5f97\u9ad8\u989d\u5956\u91d1\uff0c\u6216\u8005\u6700\u7ec8\u4f1a\u664b\u5347\u4e3a\u526f\u603b\u88c1\u6216\u9ad8\u7ea7\u526f\u603b\u88c1\u3002\n\u5728\u4e00\u5bb6\u521d\u521b\u516c\u53f8\u521b\u902010\u4ebf\u7f8e\u5143\u7684\u589e\u91cf\u4ef7\u503c\uff0c\u4e3a\u521b\u4e1a\u80cc\u540e\u7684\u521b\u4e1a\u8005\u5e26\u6765\u4e86\u6570\u4e0d\u6e05\u7684\u8d22\u5bcc\u3002\u5728\u4e00\u5bb6\u5927\u516c\u53f8\u5185\u521b\u902010\u4ebf\u7f8e\u5143\u7684\u589e\u91cf\u4ef7\u503c\u53ef\u80fd\u4f1a\u5f97\u5230\u8ba4\u53ef\uff0c\u4f46\u56de\u62a5\u8fdc\u4e0d\u53ca\u521d\u521b\u516c\u53f8\u3002\n\u8fd9\u4e24\u79cd\u8bbe\u7f6e\u6709\u8bb8\u591a\u4e0d\u540c\u4e4b\u5904\u548c\u98ce\u9669\u72b6\u51b5\uff0c\u4f46\u5982\u679c\u516c\u53f8\u4e0d\u60f3\u5931\u53bb\u4ed6\u4eec\u6700\u5927\u7684\u4ef7\u503c\u521b\u9020\u8005\uff0c\u90a3\u4e48\u5956\u52b1\u5236\u5ea6\u9700\u8981\u91cd\u65b0\u8c03\u6574\uff0c\u4ee5\u4fbf\u5185\u90e8\u521b\u65b0\u8005\u5728\u4ed6\u4eec\u5e2e\u52a9\u521b\u9020\u7684\u597d\u5904\u4e2d\u5206\u4eab\u66f4\u591a\u3002\u5982\u679c\u6709\u4eba\u521b\u9020\u4e8610\u4ebf\u7f8e\u5143\u7684\u589e\u91cf\u4ef7\u503c\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u4ed8\u7ed9\u4ed6\u4eec2500\u4e07\u7f8e\u5143(\u6216\u4e0e\u521b\u9020\u7684\u4ef7\u503c\u6210\u6b63\u6bd4\u7684\u4efb\u4f55\u6570\u5b57)\u3002\u8fd9\u662f\u4e00\u4e2a\u7ec4\u7ec7\u7684\u8463\u4e8b\u4f1a\u548c\u9886\u5bfc\u5c42\u5fc5\u987b\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u5982\u679c\u771f\u7684\u5e0c\u671b\u521b\u9020\u65b0\u4e00\u4ee3\u4ef7\u503c\u7684\u8bdd\u3002\n\u76f8\u53cd\uff0c\u5728\u8bb8\u591a\u516c\u53f8\u4e2d\uff0c\u5956\u52b1\u4e0e\u804c\u80fd\u6210\u529f(\u4efb\u52a1\u7684\u6210\u529f\u5b8c\u6210)\u8054\u7cfb\u5728\u4e00\u8d77\uff0c\u800c\u4e0d\u662f\u4e0e\u8ba1\u5212\u7684\u6574\u4f53\u6210\u529f\u8054\u7cfb\u5728\u4e00\u8d77\u3002\u56e0\u6b64\uff0c\u4e00\u5bb6\u516c\u53f8\u53ef\u80fd\u6700\u7ec8\u63a8\u51fa\u4e86\u4e00\u6b3e\u6ca1\u6709\u4eba\u8d2d\u4e70\u7684\u65b0\u4ea7\u54c1\uff0c\u4f46\u5982\u679c\u6309\u65f6\u5e76\u5728\u9884\u7b97\u5185\u5b8c\u6210\uff0c\u56e2\u961f\u5c31\u4f1a\u56e0\u4e3a\u505a\u4e86\u4ed6\u4eec\u7684\u5de5\u4f5c\u800c\u5f97\u5230\u5956\u52b1\u3002\u8fd9\u4e9b\u5956\u52b1\u663e\u7136\u662f\u5f92\u52b3\u7684\u3002\n\u9664\u975e\u62a5\u916c\u4e0e\u4ea7\u51fa\u6210\u5408\u7406\u6bd4\u4f8b\uff0c\u5426\u5219\u6700\u4f18\u79c0\u7684\u521b\u65b0\u8005\u5c06\u79bb\u5f00\uff0c\u5c1d\u8bd5\u5efa\u7acb\u81ea\u5df1\u7684\u521d\u521b\u516c\u53f8\u3002\n\u5982\u679c\u4f01\u4e1a\u73af\u5883\u6216\u751f\u6001\u7cfb\u7edf\u6bd4\u521d\u521b\u516c\u53f8\u63d0\u4f9b\u4e86\u66f4\u597d\u7684\u521b\u65b0\u6210\u529f\u673a\u4f1a\uff0c\u5982\u679c\u5458\u5de5\u5728\u521b\u9020\u65b0\u4ef7\u503c\u7684\u597d\u5904\u4e0a\u6709\u4e86\u660e\u786e\u7684\u8ba4\u8bc6\uff0c\u90a3\u4e48\u5185\u90e8\u521b\u65b0\u8005\u5c31\u6ca1\u6709\u90a3\u4e48\u591a\u7406\u7531\u79bb\u5f00\u5de5\u4f5c\u53bb\u521b\u5efa\u81ea\u5df1\u7684\u516c\u53f8\u3002\n\u5f53\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u65f6\uff0c\u516c\u53f8\u4e0d\u4f1a\u5931\u53bb\u4ed6\u4eec\u6700\u5927\u7684\u589e\u957f\u5f15\u64ce\uff0c\u77e5\u9053\u5982\u4f55\u521b\u65b0\u7684\u4eba\u624d\u3002\n\u5728LinkedIn\u4e0a\u5173\u6ce8\u6211\u3002\u6211\u53ef\u4ee5\u5728\u6211\u7684\u4e2a\u4eba\u7f51\u7ad9\u4e0a\u67e5\u770b\uff0c\u6216\u8005\u5728\u8fd9\u91cc\u67e5\u770b\u6211\u7684\u4e00\u4e9b\u5176\u4ed6\u5de5\u4f5c\u3002", "note_en": "Corporations fail to innovate because they lose their most innovative talent. Internal innovators, the people most likely to create new value, find themselves leaving the company they work for to start their own ventures, often creating vast amounts of customer and shareholder value. This value could have been retained by the original corporation if it knew how to recognize this talent and was able to create an environment where that talent could thrive.\n  Eric Yuan, the founder of Zoom, maker of the popular video conferencing software, worked at WebEx (a division of Cisco) as head of engineering. However, he believed both that Cisco\u2019s videoconferencing product was not particularly good and that someone with a better, cloud-based product would come around to beat them. Even though he had a coveted and lucrative job as a senior tech exec, he was embarrassed by the fact that his customers were not happy. He tried to convince his management that they needed to build a better offering but his bosses did not agree. Finally, he left to build the new product himself. As we now know, Zoom became immensely popular and successful; the company is now valued at almost $25 billion.\n  This value could have been retained by Cisco had it provided an environment where Yuan would stay. Instead, Cisco committed one of the most common errors in corporate innovation. It failed to recognize an internal innovator and ignored signs that its own flagship product, despite its high market share, was vulnerable.\n     Cisco is not alone. Large companies routinely miss out on building new value because their internal innovators, lacking an environment where they can thrive, leave and become entrepreneurs. According to the  Kauffman Foundation, over 75% of successful entrepreneurs, across a cross-section of industries, worked at larger companies before starting their own.\n  This leads to an almost comical cycle. Large corporations are unable to hold on to their best innovators, who go out to start successful ventures. Many of these same large companies, in an effort to learn how to innovate, start sending teams to places like Silicon Valley to study how startups do it, not realizing that the entrepreneurs they are visiting cut their teeth at companies very much like their own.\n    This whole cycle can be avoided if corporations understand why internal innovators leave and develop measures to retain them.\n      Internal innovators have some characteristics in common that companies should learn to recognize. First, they are not likely to be \u201cflashy\u201d people who dominate meetings and are able to discuss business strategy with ease. Instead, the true innovators are the ones who are grounded, disciplined, intrinsically motivated and good collaborators. And they are almost always subject matter experts who deeply understand their domain.\n  These are the people you should be recognizing, rewarding and most importantly, giving them the freedom to innovate. And these are the people who, if not supported, have the confidence and the ability to leave and start their own companies to pursue their ideas.\n    Within many corporations great ideas never see the light of day. Companies are notorious for rejecting good ideas because it is always safer to say no. Managers never get in trouble for saying \u201cno.\u201d It\u2019s only when you say \u201cyes\u201d to the wrong things that you begin to invite criticism. As a result, corporations develop risk-averse cultures.\n  In rare instances internal innovators are able to break through corporate barriers and succeed. One example is Nespresso, the brainchild of Nestl\u00e9 employee Eric Favre. Favre wanted to develop Nespresso as a product, but his bosses feared it would hurt Nescafe sales.\n  For years Favre secretly kept working on building the Nespresso machine. Eventually he persuaded the company to let him try it with consumers. People loved it. Today Nespresso has become the most significant innovation in home coffee consumption since the paper filter.\n  Nespresso is an example of a persistent employee overcoming naysayers and toiling away on a project they believe in, eventually creating a groundbreaking innovation. But this is not the norm. In most cases new ideas get quashed by managers, prompting internal innovators to take their ideas and start their own companies. Favre\u2019s idea might have been just as successful if it was developed as a startup.\n  Rates of innovation will only increase when corporations learn to create a culture of saying yes to more things and providing more support to internal innovators. Otherwise your best value creators - along with their ideas - will walk away because there is no shortage of funding and support for good ideas and entrepreneurial talent.\n    What happens when you do something spectacular at a corporation that results in hundreds of millions of dollars in new value? Maybe you develop something like Zoom or Nespresso internally. Sure, you will be recognized, maybe get a promotion or a big bonus, or finally get promoted to a vice president or an SVP.\n    Creating a billion dollars of incremental value at a startup yields untold riches for the entrepreneurs behind the venture. Creating a billion dollars of incremental value within a large corporation may be recognized, but the rewards are nowhere near the same level as a startup.\n  The two settings have many differences and risk profiles, but if corporations don\u2019t want to lose their greatest value creators, the rewards system needs to be realigned so that internal innovators share far more in the upside they helped create. If someone drives a billion dollars of incremental value then why not pay them $25 million (or any number proportional to the value created). This is an issue the board and leadership of an organization must tackle if there is a genuine desire to create a new generation of value.\n  Instead in many companies, rewards are tied to functional success (the successful achievement of tasks,) rather than to the overall success of an initiative. So, a company may end up launching a new product that no one buys, but if it is done on time and under budget, the team is rewarded for doing their job. These rewards are clearly for naught.\n  Unless rewards are reasonably proportional to output, the best innovators will leave and try their hand at building their own startup.\n    If a corporate environment, or  biome, offers a better chance of innovation success than a startup, and if there is clarity for employees in the upside of new value creation, then internal innovators will have less reason to leave their jobs and create their own companies.\n  And when that happens, corporations will not lose their biggest engines of growth, the talented people who know how to innovate.\n Follow me on\u00a0 LinkedIn.\u00a0 Check out\u00a0my\u00a0 website\u00a0or\u00a0some of my other work\u00a0 here.", "posttime": "2020-07-19 10:27:46", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "lose", "title": "\u4e3a\u4ec0\u4e48\u516c\u53f8\u5931\u53bb\u4e86\u6700\u597d\u7684\u521b\u65b0\u8005(2019\u5e74)", "title_en": "Why companies lose their best innovators (2019)", "transed": 1, "url": "https://www.forbes.com/sites/kmehta/2019/07/11/why-companies-lose-their-best-innovators/#72eade2032e1", "via": "", "real_tags": ["lose"]}, {"category": "", "categoryclass": "", "imagename": "fba1512e2431f8be0db90dd0fa8e645e.png", "infoid": 1012816, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9a6c\u8fbe\u9690\u85cf\u5728\u4eba\u4eec\u7684\u89c6\u7ebf\u4e2d\uff0c\u662f\u4eba\u7c7b\u6587\u660e\u4e0d\u53ef\u6216\u7f3a\u7684\u4e00\u90e8\u5206\u3002\u5728\u4f60\u7684\u7b14\u8bb0\u672c\u7535\u8111\u3001\u4f60\u7684\u8f66\u3001\u4f60\u7684\u623f\u5b50\u3001\u4f60\u7684\u5b66\u6821\u548c\u4f60\u7684\u624b\u8868\u91cc\u90fd\u53ef\u4ee5\u627e\u5230\u6c7d\u8f66\u3002\u6ca1\u6709\u9a6c\u8fbe\uff0c\u4f60\u5fc3\u7231\u7684\u4ea7\u54c1\u5c31\u65e0\u6cd5\u5236\u9020\u3002\u6839\u636e\u7f8e\u56fd\u80fd\u6e90\u90e8\u7684\u6570\u636e\uff0c\u5de5\u4e1a\u7535\u673a\u7684\u4f7f\u7528\u5360\u5168\u56fd\u6240\u6709\u7528\u7535\u91cf\u768425%\u3002\n\u7c7b\u4f3c\u4e8e\u9a6c\u8fbe\uff0c\u58f0\u97f3\u65e0\u5904\u4e0d\u5728\uff0c\u7c7b\u4f3c\u4e8e\u9a6c\u8fbe\uff0c\u6709\u4e9b\u58f0\u97f3\u662f\u542c\u4e0d\u5230\u7684\u3002\u6709\u4e86\u4f20\u611f\u5668\uff0c\u53ef\u4ee5\u5206\u6790\u58f0\u97f3\u6765\u68c0\u6d4b\u6545\u969c\uff0c\u4ece\u800c\u5728\u5b83\u4eec\u6210\u4e3a\u5927\u95ee\u9898\u4e4b\u524d\u9632\u6b62\u91cd\u5927\u6545\u969c\u3002\n\u4f20\u7edf\u7684\u9884\u6d4b\u6027\u7ef4\u62a4\u65b9\u6cd5\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\uff1a1)\u5728\u673a\u5668\u5f00\u59cb\u6545\u969c\u4e4b\u524d\uff0c\u4f7f\u7528\u4f20\u7edf\u7684\u786c\u4ef6\u5de5\u5177(\u5982\u8d85\u58f0\u6ce2\u9ea6\u514b\u98ce)\u8bc6\u522b\u5f02\u5e38\u58f0\u97f3\u30022)\u4f7f\u7528\u7ea2\u5916\u6444\u50cf\u673a\u68c0\u6d4b\u653e\u7535\u6216\u6cc4\u6f0f\u68c0\u6d4b3)\u4f7f\u7528\u80fd\u591f\u8bc6\u522b\u538b\u529b\u3001\u6e29\u5ea6\u6216\u632f\u52a8\u53d8\u5316\u7684\u4f20\u611f\u5668\u3002\u4eba\u5de5\u667a\u80fd(AI)\u7684\u6700\u65b0\u8fdb\u5c55\u6539\u53d8\u4e86\u9884\u6d4b\u6027\u7ef4\u62a4\u7684\u4f18\u5316\u65b9\u5f0f\u3002\n\u5728\u8fd9\u7bc7\u535a\u5ba2\u4e2d\uff0c\u6211\u4eec\u5c06\u8bbe\u8ba1\u4e00\u79cd\u6df1\u5ea6\u5b66\u4e60\u7ed3\u6784\uff0c\u5982\u5377\u79ef\u9012\u5f52\u795e\u7ecf\u7f51\u7edc(CRNN)\u6765\u5904\u7406\u9ad8\u9891\u6570\u636e\uff0c\u8fd9\u4e9b\u6570\u636e\u5c06\u4ece\u9891\u8c31\u56fe\u4e2d\u8fdb\u884c\u5904\u7406\u3002CRNN\u6a21\u578b\u540c\u65f6\u4ece\u6211\u4eec\u6570\u636e\u7684\u7a7a\u95f4\u7ed3\u6784\u548c\u9012\u5f52\u7ed3\u6784\u4e2d\u5b66\u4e60\u3002\n\u6709\u4e86\u6210\u5343\u4e0a\u4e07\u7684\u9ad8\u9891\u58f0\u97f3\u7247\u6bb5\uff0c\u673a\u5668\u5b66\u4e60\u53ef\u4ee5\u7528\u6765\u9884\u6d4b\u9a6c\u8fbe\u4f55\u65f6\u4f1a\u53d1\u751f\u6545\u969c\u3002\u7136\u540e\u5c06\u7ed3\u5408\u4fe1\u53f7\u5904\u7406\u6280\u672f\u521b\u5efaCRNN\u6a21\u578b\uff0c\u4ee5\u4f7f\u6211\u4eec\u80fd\u591f\u4ece\u9ad8\u9891\u6570\u636e\u4e2d\u63d0\u53d6\u4ef7\u503c\u3002\u6211\u4eec\u9996\u5148\u4f7f\u7528\u4f20\u611f\u5668\u6536\u96c6\u6570\u636e\uff0c\u5e76\u5c06\u58f0\u97f3\u5206\u4e3a\u56db\u7c7b\uff1a\u6700\u4f73\u538b\u529b\u3001\u8f7b\u5fae\u964d\u4f4e\u7684\u538b\u529b\u3001\u4e25\u91cd\u964d\u4f4e\u7684\u538b\u529b\u3001\u63a5\u8fd1\u5b8c\u5168\u5931\u6548)\u3002\n\u6211\u4eec\u901a\u8fc7\u5c06\u539f\u59cb\u6570\u636e\u5206\u5272\u6210\u56fa\u5b9a\u4e14\u76f8\u7b49\u7684\u6807\u8bb0\u5e8f\u5217\u6765\u5904\u7406\u539f\u59cb\u6570\u636e\u3002\u6211\u4eec\u91c7\u7528\u8c31\u56fe\u5bf9\u8fd9\u4e9b\u4fe1\u53f7\u7247\u6bb5\u8fdb\u884c\u9884\u5904\u7406\uff0c\u5e76\u5c06\u8fd9\u4e9b\u7247\u6bb5\u9001\u5165CRNN\u6a21\u578b\u3002\u9891\u8c31\u56fe\u662f\u4fe1\u53f7\u7684\u65f6\u9891\u56fe\u50cf\u3002\u5b83\u4eec\u57fa\u672c\u4e0a\u662f\u4fe1\u53f7\u7684\u9891\u7387\u5f3a\u5ea6\u968f\u65f6\u95f4\u63a8\u79fb\u7684\u66f2\u7ebf\u56fe\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u6b63\u5728\u6784\u5efa\u4e00\u4e2a\u4eba\u5de5\u667a\u80fd\u652f\u6301\u7684\u65f6\u95f4\u5e8f\u5217\u6a21\u578b\uff0c\u5b83\u53ef\u4ee5\u6620\u5c04\u9ad8\u9891\u57df\u4e2d\u7684\u6570\u636e\u884c\u4e3a\u3002\u4e3a\u4e86\u6807\u51c6\u5316\u6211\u4eec\u7684\u5e8f\u5217\uff0c\u6211\u4eec\u9700\u8981\u964d\u4f4e\u5e8f\u5217\u7684\u5927\u5c0f\uff1b\u4e00\u4e2a\u7b80\u5355\u7684\u533a\u5206\uff0c\u52a0\u4e0a\u4e00\u4e2a\u9002\u5f53\u7684\u7247\u6bb5\u6765\u9650\u5236\u6781\u7aef\u7684\u53d8\u5316\u3002\n\u4ee5\u4e0b\u662f\u75316\u4e2a\u4e0d\u540c\u538b\u529b\u4fe1\u53f7\u7ec4\u6210\u7684\u539f\u59cb\u5e8f\u5217\u548c\u6807\u51c6\u5316\u5e8f\u5217\u7684\u793a\u4f8b\u56fe\uff1a\n\u4e3a\u4e86\u5728Python\u4e2d\u8ba1\u7b97\u8c31\u56fe\uff0c\u6211\u4eec\u4f7f\u7528\u540d\u4e3aLibrosa\u7684\u5e93\u3002\u5bf9\u6211\u4eec\u53ef\u4ee5\u5904\u7406\u7684\u6bcf\u4e2a\u538b\u529b\u5e8f\u5217\u8fdb\u884c\u8f6c\u6362\uff0c\u56e0\u6b64\u6211\u4eec\u4ee5\u6bcf\u4e2a\u6837\u672c\u76846\u4e2a\u9891\u8c31\u56fe\u5e8f\u5217\u7ed3\u675f\uff0c\u800c\u4e0d\u662f\u539f\u59cb\u4fe1\u53f7\u5e8f\u5217\u3002\nCNN(\u5377\u79ef\u795e\u7ecf\u7f51\u7edc)\u548cRNN(\u9012\u5f52\u795e\u7ecf\u7f51\u7edc)\u53ef\u4ee5\u4e00\u8d77\u4f7f\u7528\uff0c\u5e76\u4e14\u5b83\u4eec\u4e0d\u662f\u4e92\u65a5\u7684\uff0c\u56e0\u4e3a\u4e24\u8005\u90fd\u53ef\u4ee5\u5bf9\u56fe\u50cf\u548c\u6587\u672c\u8f93\u5165\u8fdb\u884c\u5206\u7c7b\uff0c\u4ece\u800c\u521b\u9020\u4e86\u7ec4\u5408\u4e24\u79cd\u7f51\u7edc\u7c7b\u578b\u4ee5\u63d0\u9ad8\u6548\u7387\u7684\u673a\u4f1a\u3002\u5f53CNN\u4e0d\u80fd\u5904\u7406\u5177\u6709\u9644\u52a0\u65f6\u95f4\u7279\u5f81\u7684\u89c6\u89c9\u590d\u6742\u6027\u65f6\uff0cRNN\u4f1a\u4ecb\u5165\u5e76\u89e3\u51b3\u5904\u7406\u95ee\u9898\u3002\nCNN\u548cRNN\u7684\u7ec4\u5408\u6709\u65f6\u88ab\u79f0\u4e3aCRNN\u3002\u8f93\u5165\u9996\u5148\u7531CNN\u5c42\u5904\u7406\uff0c\u7136\u540e\u5176\u8f93\u51fa\u88ab\u9988\u9001\u5230RNN\u5c42\u3002\u5149\u5b66\u5b57\u7b26\u8bc6\u522b\u548c/\u6216\u97f3\u9891\u5206\u7c7b\u901a\u5e38\u4f7f\u7528\u8fd9\u79cd\u7c7b\u578b\u7684\u6df7\u5408\u6a21\u578b\u3002\n\u5728\u672c\u7ec3\u4e60\u4e2d\uff0c\u6211\u4eec\u5411CRNN\u63d0\u4f9b\u5148\u524d\u751f\u6210\u7684\u5149\u8c31\u56fe\uff0c\u4ee5\u68c0\u6d4b\u7535\u673a\u7684\u5de5\u4f5c\u72b6\u6001\u3002\u9a6c\u8fbe\u7684\u6bcf\u4e00\u6b21\u89c2\u6d4b\u73b0\u5728\u90fd\u7531\u5806\u53e0\u7684\u5149\u8c31\u56fe\u7ec4\u6210(\u603b\u51716\u4e2a\uff0c\u6bcf\u4e2a\u538b\u529b\u4fe1\u53f7\u4e00\u4e2a)\u3002\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u811a\u672c\u5982KERAS\u4e2d\u6240\u793a\uff1a\nDef get_model(Data)\uff1ainp=input(Shape=(data.Shape[1]\uff0cdata.Shape[2]\uff0cdata.Shape[3]))x=Conv2D(\u8fc7\u6ee4\u5668=64\uff0c\u5185\u6838\u5927\u5c0f=(2\uff0c2)\uff0c\u586b\u5145=&#39\uff1b\u76f8\u540c&#39\uff1b)(INP)x=BatchNormalization(\u8f74=1)(X)x=Activation(&#39\uff1bREU&#39\uff1b)(X)x=MaxPooling2D(pool_size=(2\uff0c1))(X)x=Dropout(0.2)(X)x=\u7f6e\u6362((2\uff0c3\uff0c1))(X)x=\u91cd\u5851((data.Shape[2]\uff0c-1))(X)x=\u53cc\u5411(GRU(64\uff0c\u6fc0\u6d3b=&#39\uff1bREU&#39\uff1bREU&#39\uff1bReturn_Sequence=False))(X)x=\u5bc6\u96c6(32\uff0c\u6fc0\u6d3b=&#39\u3002)(X)x=Dropout(0.2)(X)Out=Dense(y_Train.Shape[1]\uff0cActivate=&#39\uff1bSoftmax&39\uff1b)(X)MODEL=MODEL(INPUTS=INP\uff0cOUTPUTS=OUT)model.compile(loss=&#39\uff1bcategorical_crossentropy&#39\uff1b\uff0c\u4f18\u5316\u5668=&#39\uff1bADAM&39\uff1b\uff0c\u6307\u6807=[&#39\uff1b\u7cbe\u5ea6&39\uff1b])\u8fd4\u56de\u6a21\u578b\u3002\n\u5728\u7b2c\u4e00\u9636\u6bb5\uff0c\u7f51\u7edc\u4ece\u8c31\u56fe\u4e2d\u63d0\u53d6\u5377\u79ef\u7279\u5f81\uff0c\u5373\u7ed3\u6784\u3001\u9891\u7387x\u65f6\u95f4x n\u7279\u5f81\u3002\u8981\u904d\u5386\u9012\u5f52\u90e8\u5206\uff0c\u6211\u4eec\u9700\u8981\u4ee5xn_Feature\uff1aTime\u683c\u5f0f\u91cd\u5851\u6570\u636e\u3002\u65b0\u7684n\u7279\u5f81\u662f\u5bf9\u5377\u79efn\u7279\u5f81\u548c\u9891\u7387\u8fdb\u884c\u5949\u627f\u8fd0\u7b97\u7684\u7ed3\u679c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u6a21\u578b\u8fbe\u5230\u4e8686%\u5de6\u53f3\u7684\u51c6\u786e\u7387\u3002\n\u5728\u8fd9\u7bc7\u535a\u5ba2\u4e2d\uff0c\u6211\u4eec\u4e86\u89e3\u4e86\u9884\u6d4b\u6027\u7ef4\u62a4\u7684\u4f20\u7edf\u65b9\u6cd5\uff0c\u5e76\u7565\u5fae\u89e6\u53ca\u4e86\u8fd9\u4e00\u9886\u57df\u7684AI\u5e94\u7528\u3002\u968f\u7740\u4eba\u5de5\u667a\u80fd\u7684\u8fdb\u6b65\uff0c\u672a\u6765\u5bf9\u786c\u4ef6\u4f20\u611f\u5668\u7684\u4f9d\u8d56\u5c06\u4f1a\u51cf\u5c11\u3002", "note_en": "Hidden in plain sight, motors are integral part of human civilization. Motors can be found in your laptop, your car, your house, your school, and your watch. Without motors, your beloved products cannot be made. According to the U.S. Department of Energy, industrial motor use accounts for  25 percent of all electricity usage nationwide.\n Similar to motors, sound is everywhere and similar to motors, some sounds cannot be heard. With sensors, sounds can be analyzed to detect failures, thus preventing major breakdown before they become a major issue.\n Traditional methods of predictive maintenance are categorized into three sections: 1) Recognizing abnormal sounds using conventional hardware tools like a ultrasonic microphone before machines start to fail. 2) Detection of discharge or leakage detection using infrared cameras 3) Using sensors that can recognize pressure, temperature or vibration changes. Recent advances in Artificial Intelligence (AI) has changed the landscape in how predictive maintenance would be optimized.\n In this blog, we will design a deep learning architecture such as Convolution Recurrent Neural Network (CRNN) to deal with high frequency data, which would be processed from Spectrograms. A CRNN model learns from both the spatial and recurrent structure of our data simultaneously.\n  With thousands and thousands of high-frequency sound clips, machine learning can be used to predict when a motor would breakdown. A CRNN model will then be created in conjunction with signal process techniques to enable us extract value from high frequency data. We first collect data by using sensors and we would classify sounds into four classes: optimal pressure, slightly reduced pressure, severely reduced pressure, close to total failure).\n  We deal with raw data by splitting the raw data into fixed and equal labeled sequences. We adopt Spectrograms to preprocess these signal pieces and feed these pieces into the CRNN model. Spectrograms are time-frequency portraits of signals. They are basically a plot of the frequency intensity of the signal as time progresses. In other words, we are building an AI empowered time-series model that can map the data behaviors in a high-frequency domain. In order to standardize our sequence, we need to reduce the magnitude of our series; a simple differentiation, plus a proper clip to limit extreme variations.\n Below is a sample graph of a raw and a standardized sequence composed of 6 different pressure signals:\n  To compute spectrogram in Python, we use the library called Librosa. A transformation is operated for every pressure series at our disposal, so we ended with a sequence of 6 spectrograms for every sample instead of a sequence of raw signals.\n  CNN (Convolutional Neural Network) and RNN (Recurrent Neural Network) can both be used together and they are not mutually exclusive, as both can perform classification of image and text inputs, creating an opportunity to combine two network types for increased effectiveness. Where CNN cannot process visually complex with added temporal characteristics, RNN would come in and resolve processing issues.\n   The combination of CNN and RNN are sometimes called CRNN. Inputs are first processed by CNN layers whose outputs are then fed to RNN layers. Optical Character Recognition and/or audio classification often use this type of hybrid model.\n In this exercise, we feed CRNN with spectrograms we had previously generated to detect the working status of a motor. Each observation of the motor is now composed of stacked spectrograms (6 in total, one for each pressure signal). The script to do this is shown in Keras:\n def get_model(data):    inp = Input(shape=(data.shape[1], data.shape[2], data.shape[3]))    x = Conv2D(filters=64, kernel_size=(2, 2), padding=&#39;same&#39;)(inp)  x = BatchNormalization(axis=1)(x)  x = Activation(&#39;relu&#39;)(x)  x = MaxPooling2D(pool_size=(2, 1))(x)  x = Dropout(0.2)(x)    x = Permute((2, 3, 1))(x)  x = Reshape((data.shape[2], -1))(x) x = Bidirectional(GRU(64, activation=&#39;relu&#39;,   return_sequences=False))(x)  x = Dense(32, activation=&#39;relu&#39;)(x)  x = Dropout(0.2)(x)  out = Dense(y_train.shape[1], activation=&#39;softmax&#39;)(x)    model = Model(inputs=inp, outputs=out)  model.compile(loss=&#39;categorical_crossentropy&#39;,   optimizer=&#39;adam&#39;, metrics=[&#39;accuracy&#39;])    return model\n At the first stage, the network extracts convolution features from the spectrogram plots, which is the structure,  frequency x time x n_features. To pass through the recurrent part, we need to reshape our data in the format  x n_features:  time. The new  n_features is the result of the flattering operation compute on the convolutional  n_features and frequency. Consequently, our model achieved around 86% in accuracy.\n   In this blog, we learned about traditional methods of predictive maintenance and slightly touched on the AI applications of this field. As AI advances, the reliance on hardware sensors will be less in the future.", "posttime": "2020-07-19 10:27:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bfb\u7269,predictive,\u5e8f\u5217", "title": "\u5165\u95e8\u8bfb\u7269\uff1a\u4f7f\u7528\u58f0\u97f3\u8fdb\u884c\u9884\u6d4b\u6027\u7ef4\u62a4", "title_en": "A Primer: Predictive Maintenance Using Sound", "transed": 1, "url": "https://medium.com/@wilsonckao/a-primer-predictive-maintenance-using-sound-afe2e169cc40", "via": "", "real_tags": ["\u8bfb\u7269", "\u5e8f\u5217"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1012815, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u6211\u4e4b\u524d\u7684\u4e00\u7bc7\u5173\u4e8e\u4ea4\u53c9\u71b5\u3001KL\u53d1\u6563\u548c\u6700\u5927\u4f3c\u7136\u4f30\u8ba1\u7684\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u6211\u5df2\u7ecf\u5c55\u793a\u4e86\u8fd9\u4e09\u4ef6\u4e8b\u5728\u4f18\u5316\u4e2d\u7684\u201c\u7b49\u4ef7\u6027\u201d\u3002\u4ea4\u53c9\u71b5\u635f\u5931\u5728\u5927\u591a\u6570\u6700\u5148\u8fdb\u7684\u673a\u5668\u5b66\u4e60\u5206\u7c7b\u6a21\u578b\u4e2d\u5f97\u5230\u4e86\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u4f18\u5316\u5b83\u7b49\u4ef7\u4e8e\u6700\u5927\u4f3c\u7136\u4f30\u8ba1\u3002\u7136\u800c\uff0c\u53ef\u80fd\u8fd8\u6709\u5176\u4ed6\u635f\u5931\u7528\u4e8e\u5206\u7c7b\u95ee\u9898\u3002\n\u5728\u8fd9\u7bc7\u535a\u5ba2\u4e2d\uff0c\u6211\u60f3\u8ba8\u8bba\u7528\u4e8eLogistic\u56de\u5f52\u7684\u65e5\u5fd7\u635f\u5931\u3001\u7528\u4e8e\u591a\u7c7b\u5206\u7c7b\u7684\u4ea4\u53c9\u71b5\u635f\u5931\u4ee5\u53ca\u7528\u4e8e\u591a\u7c7b\u5206\u7c7b\u7684\u65e5\u5fd7\u635f\u5931\u603b\u548c\u3002\n\u8fd9\u7bc7\u535a\u6587\u7684\u524d\u63d0\u6761\u4ef6\u5df2\u7ecf\u5728\u6211\u7684\u5176\u4ed6\u535a\u6587\u4e2d\u8fdb\u884c\u4e86\u6df1\u5165\u7684\u8ba8\u8bba\u3002\u4e3a\u4e86\u5b8c\u6574\u8d77\u89c1\uff0c\u6211\u5728\u8fd9\u91cc\u590d\u5236\u4e86\u4e00\u4efd\u3002\n\u8981\u68c0\u67e5\u83b1\u5e03\u5c3c\u8328\u79ef\u5206\u89c4\u5219\u7684\u5feb\u901f\u8bc1\u660e\uff0c\u8bf7\u67e5\u770b\u6211\u7684\u4e00\u7bc7\u5173\u4e8e\u6b64\u7684\u535a\u5ba2\u6587\u7ae0\u3002\n\u6839\u636e\u83b1\u5e03\u5c3c\u8328\u79ef\u5206\u89c4\u5219\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5c06\u5bfc\u6570\u7684\u4f4d\u7f6e\u79fb\u5230\u671f\u671b\u503c\u4e4b\u5185\u6216\u671f\u671b\u503c\u4e4b\u5916\u3002\u4f8b\u5982,\u3002\n\u5982\u679c$\\mathbb{E}_{(x\uff0cy)\\sim P(x\uff0cy)}\\BIG[\\mathscr{L}_{\\theta}(x\uff0cy)\\BIG]$\u662f\u635f\u5931\u51fd\u6570\uff0c\u5219\u8981\u8ba1\u7b97\u6574\u4e2a\u635f\u5931\u76f8\u5bf9\u4e8e\u53c2\u6570$\\theta$\u7684\u5bfc\u6570\uff0c\u76f8\u5f53\u4e8e\u8ba1\u7b97\u6bcf\u4e2a\u6570\u636e\u70b9$\\mathscr{L}_{\\theta}(x\uff0cy)$\u76f8\u5bf9\u4e8e\u3002Y)\\sim P(x\uff0cy)}\\BIG[\\frac{\\Partial}{\\Partial\\theta}\\mathscr{L}_{\\theta}(x\uff0cy)\\BIG]$\u3002\u5047\u8bbe\u6240\u6709\u6570\u636e$(x\uff0cy)$\u90fd\u662f\u5747\u5300\u5206\u5e03\u7684\uff0c\u5219\u53ea\u9700\u8ba1\u7b97\u6bcf\u4e2a\u6570\u636e\u70b9$\\mathscr{L}_{\\theta}(x\uff0cy)$\u76f8\u5bf9\u4e8e\u53c2\u6570$\\theta$\u8d21\u732e\u7684\u635f\u5931\u7684\u5bfc\u6570\uff0c\u7136\u540e\u53d6\u5176\u5e73\u5747\u503c\u3002\u8fd9\u4e5f\u662f\u73b0\u4ee3\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6(\u5982TensorFlow\u548cPyTorch)\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002\n\u539f\u6728\u635f\u5931\u7528\u4e8eLogistic\u56de\u5f52\u5df2\u6709\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u4e86\u3002\u7ed9\u5b9a$(x\uff0cy)$\uff0c\u5176\u4e2d$x$\u662f\u8f93\u5165\uff0c$y$\u662f$x$\u7684\u6807\u7b7e\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u5f00\u53d1\u4e00\u4e2a\u6a21\u578b$f_{\\theta}$\uff0c\u5176\u4e2d$\\theta$\u662f\u6a21\u578b\u53c2\u6570\u3002\u4f7f\u5f97$\\tilde{y}=f_{\\theta}(X)$\u5c3d\u53ef\u80fd\u63a5\u8fd1$y$\u3002\u5bf9\u4e8eLogistic\u56de\u5f52\uff0c\u901a\u5e38\u4e3a$y=0$\u6216$1$\u3002$y=1$\u8868\u793a$x$\u5c5e\u4e8e\u67d0\u4e2a\u7c7b\uff0c\u800c$y=0$\u8868\u793a$x$\u4e0d\u5c5e\u4e8e\u67d0\u4e2a\u7c7b\u3002\n\u901a\u5e38\uff0cLogistic\u56de\u5f52\u5c06\u8ba1\u7b97\u8f93\u5165$x$\u7684logit$z$\uff0c\u5176\u4e2d$z=g{\\theta}(X)$\uff0c\u7136\u540e\u8ba1\u7b97$z$\u7684Sigmoid\u6fc0\u6d3b\uff0c\u4ee5\u5f97\u5230$y$\uff0c$\\tilde{y}$\u7684\u4f30\u8ba1\u503c\uff0c\u8303\u56f4\u4e3a$(0\uff0c1)$\u3002\u5177\u4f53\u5730\u8bf4\uff0c\n\u7528\u4e8e\u62df\u5408\u7684\u635f\u5931\u51fd\u6570\u79f0\u4e3a\u5bf9\u6570\u635f\u5931\uff0c\u7a0d\u540e\u6211\u4eec\u4f1a\u770b\u5230\uff0c\u5b83\u5b9e\u9645\u4e0a\u662f\u4e8c\u5143\u4ea4\u53c9\u71b5\u635f\u5931\u3002\n\u6211\u4eec\u8fdb\u4e00\u6b65\u8ba1\u7b97\u8be5\u5bf9\u6570\u635f\u5931\u76f8\u5bf9\u4e8elogit$z$\u7684\u5bfc\u6570\u3002\n\u89e3\u91ca\u5f88\u7b80\u5355\u3002\u5982\u679c$\\tilde{y}&gt\uff1by$\uff0c$\\frac{\\Partial}{\\Partial z}\\mathscr{L}_{\\theta}(x\uff0cy)&gt\uff1b0$\uff0c\u5219\u68af\u5ea6\u4e0b\u964d\u8981\u4f7f$z$\u53d8\u5c0f\u3002\u4e00\u65e6$z$\u53d8\u5c0f\uff0c$\\tilde{y}$\u5c31\u4f1a\u53d8\u5c0f\uff0c\u4e0e$y$\u7684\u504f\u5dee\u4e5f\u4f1a\u53d8\u5c0f\u3002\u540c\u6837\uff0c\u5982\u679c$\\tilde{y}&lt\uff1by$\uff0c$\\frac{\\Partial}{\\Partial z}\\mathscr{L}_{\\theta}(x\uff0cy)&lt\uff1b0$\uff0c\u5219\u68af\u5ea6\u4e0b\u964d\u8981\u4f7f$z$\u66f4\u5927\u3002\u4e00\u65e6$z$\u53d8\u5927\uff0c$\\tilde{y}$\u5c06\u53d8\u5927\uff0c\u4e0e$y$\u7684\u504f\u5dee\u5c06\u53d8\u5c0f\u3002\n\u8981\u66f4\u65b0\u6a21\u578b\u53c2\u6570$\\theta$\uff0c\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u5173\u4e8e$\\theta$\u7684\u5bfc\u6570\u3002\n\u4ea4\u53c9\u71b5\u635f\u5931\u5df2\u88ab\u5e7f\u6cdb\u7528\u4e8e\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u5206\u7c7b\u95ee\u9898\u3002\u7ed9\u5b9a$(x\uff0c\\mathbf{y})$\uff0c\u5176\u4e2d$x$\u662f\u8f93\u5165\uff0c$\\mathbf{y}$\u662f$x$\u7684\u6807\u7b7e\u3002\u5982\u679c$\\mathbf{y}$\u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a$n$\u7684\u5355\u70ed\u70b9\u5411\u91cf\uff0c\u5e76\u4e14$\\mathbf{y}_i=1$\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u5f00\u53d1\u4e00\u4e2a\u6a21\u578b$f_{\\theta}$\uff0c\u5176\u4e2d$\\theta$\u662f\u6a21\u578b\u53c2\u6570\uff0c\u4f7f\u5f97$\\tilde{\\mathbf{y}}_i=f_{\\theta}(X)$\u5c3d\u53ef\u80fd\u63a5\u8fd1$\\mathbf{y}_i$\u3002\u8bf7\u6ce8\u610f\uff0c\u4f7f\u7528\u4ea4\u53c9\u71b5\u635f\u5931\u80cc\u540e\u7684\u52a8\u673a\u662f\u6700\u5927\u4f3c\u7136\u4f30\u8ba1\uff0c\u8fd9\u53ef\u80fd\u770b\u4e0d\u51fa\u6765\u3002\u4f46\u6211\u5728\u4e0a\u4e00\u7bc7\u535a\u5ba2\u4e2d\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u4e86\u3002\n\u901a\u5e38\uff0c\u591a\u7c7b\u5206\u7c7b\u5c06\u8ba1\u7b97\u8f93\u5165$x$\u7684logits$\\mathbf{z}$\uff0c\u5176\u4e2d$\\mathbf{z}=g_{\\theta}(X)$\uff0c\u7136\u540e\u8ba1\u7b97$\\mathbf{z}$\u7684Softmax\u6fc0\u6d3b\uff0c\u4ee5\u83b7\u5f97$\\mathbf{y}$\uff0c$\\tilde{\\mathbf{y}}$\uff0c\u5176\u4e2d$\\sum_{i=1}^{n}\\tilde{\u30021]$\u8868\u793a[1\uff0cn]$\u4e2d\u7684$i\\\u3002\u5177\u4f53\u5730\u8bf4\uff0c\n\u6211\u4eec\u8fdb\u4e00\u6b65\u8ba1\u7b97\u4ea4\u53c9\u71b5\u635f\u5931\u5173\u4e8elogits$\\mathbf{z}$\u7684\u5bfc\u6570\u3002\n\u89e3\u91ca\u4e5f\u5f88\u7b80\u5355\u3002\u5982\u679c$\\tilde{\\mathbf{y}}_k&gt\uff1b\\mathbf{y}_k$\uff0c$\\frac{\\part}{\\part\\mathbf{z}_k}\\mathscr{L}_{\\theta}(x\uff0c\\mathbf{y})&gt\uff1b0$\uff0c\u5219\u68af\u5ea6\u4e0b\u964d\u4f1a\u4f7f$\\mathbf{z}_k$\u53d8\u5c0f\u3002\u4e00\u65e6$\\mathbf{z}_k$\u53d8\u5c0f\uff0c$\\tilde{\\mathbf{y}}_k$\u5c06\u53d8\u5c0f\uff0c\u5176\u4e0e$\\mathbf{y}_k$\u7684\u504f\u5dee\u4e5f\u5c06\u53d8\u5c0f\u3002\u540c\u6837\uff0c\u5982\u679c$\\tilde{\\mathbf{y}}_k&lt\uff1b\\mathbf{y}_k$\uff0c$\\frac{\\part}{\\part\\mathbf{z}_k}\\mathscr{L}_{\\theta}(x\uff0c\\mathbf{y})&lt\uff1b0$\uff0c\u5219\u68af\u5ea6\u4e0b\u964d\u8981\u4f7f$\\mathbf{z}_k$\u66f4\u5927\u3002\u4e00\u65e6$\\mathbf{z}_k$\u53d8\u5927\uff0c$\\tilde{\\mathbf{y}}_k$\u5c06\u53d8\u5927\uff0c\u5176\u4e0e$\\mathbf{y}_k$\u7684\u504f\u5dee\u5c06\u53d8\u5c0f\u3002\n\u8981\u66f4\u65b0\u6a21\u578b\u53c2\u6570$\\theta$\uff0c\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u5173\u4e8e$\\theta$\u7684\u5bfc\u6570\u3002\n\u5982\u679c\u6211\u4eec\u6709$n=2$\u7684\u4ea4\u53c9\u71b5\u635f\u5931\uff0c\u5e76\u5c06\u5176\u4e0e\u539f\u6728\u635f\u5931\u8fdb\u884c\u6bd4\u8f83\uff0c\u6211\u4eec\u4f1a\u7acb\u5373\u770b\u5230\uff0c\u539f\u6728\u635f\u5931\u7684\u5f62\u5f0f\u4e0e\u4e8c\u5143\u4ea4\u53c9\u71b5\u635f\u5931\u5b8c\u5168\u76f8\u540c\uff0cLogistic\u56de\u5f52\u7684\u539f\u6728\u635f\u5931\u662f\u591a\u7c7b\u522b\u5206\u7c7b\u7684\u4ea4\u53c9\u71b5\u635f\u5931\u7684\u7279\u4f8b\uff0c\u5176\u4e2d$n=2$\uff0c\u8d1f\u7c7b\u522b($y=0$)\u7684logit$z$\u662f\u56fa\u5b9a\u503c$0$\u3002\n\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u6709\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5206\u7c7b\u95ee\u9898\uff0c\u5047\u8bbe\u5b66\u4e60\u7387\u548c\u5176\u4ed6\u8d85\u53c2\u6570\u76f8\u540c\uff0c\u4f7f\u7528Logistic\u56de\u5f52\u7684\u5bf9\u6570\u635f\u5931\u548c\u7528\u4e8e\u4e8c\u8fdb\u5236\u5206\u7c7b\u7684\u4ea4\u53c9\u71b5\u635f\u5931\u5bf9\u5176\u5efa\u6a21\u6709\u4ec0\u4e48\u4e0d\u540c\uff1f\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u4e24\u4e2a\u6a21\u578b\u5173\u4e8e\u6b63logit$z$\u7684\u68af\u5ea6\u603b\u662f\u76f8\u540c\u7684\u3002\u4f46\u662f\uff0c\u5728\u66f4\u65b0\u6a21\u578b\u53c2\u6570$\\theta$\u65f6\uff0c\u4e24\u4e2a\u6a21\u578b\u7684\u68af\u5ea6\u4f1a\u4e0d\u540c\uff0c\u56e0\u4e3a\u4e00\u4e2a\u6a21\u578b\u53ea\u6709\u4e00\u4e2alogit\uff0c\u800c\u53e6\u4e00\u4e2a\u6a21\u578b\u6709\u4e24\u4e2alogit\u3002\u56e0\u6b64\uff0c\u867d\u7136\u8fd9\u4e24\u4e2a\u6a21\u578b\u662f\u76f8\u4f3c\u7684\uff0c\u4f46\u8bf4\u8fd9\u4e24\u4e2a\u6a21\u578b\u5b8c\u5168\u76f8\u540c\u662f\u4e0d\u6b63\u786e\u7684\u3002\n\u4eba\u4eec\u53ef\u80fd\u4f1a\u95ee\uff0c\u5bf9\u4e8e\u4e8c\u8fdb\u5236\u5206\u7c7b\u95ee\u9898\uff0c\u54ea\u79cd\u6a21\u578b\u66f4\u597d\u3002\u5f88\u96be\u8bf4\u3002\u4f46\u53ef\u4ee5\u80af\u5b9a\u7684\u662f\uff0c\u4e8c\u5143\u4ea4\u53c9\u71b5\u6a21\u578b\u76f8\u5bf9\u5bb9\u6613\u8fc7\u5ea6\u62df\u5408\u3002\u539f\u56e0\u5982\u4e0b\uff1a\n\u4e8c\u5143\u4ea4\u53c9\u71b5\u6a21\u578b\u8bd5\u56fe\u540c\u65f6\u8c03\u6574\u6b63\u8d1f\u5bf9\u6570\uff0c\u800cLogistic\u56de\u5f52\u6a21\u578b\u53ea\u8c03\u6574\u4e00\u4e2a\u5bf9\u6570\uff0c\u800c\u53e6\u4e00\u4e2a\u9690\u85cf\u7684\u5bf9\u6570\u603b\u662f$0\uff0c\u5bfc\u81f4\u4e8c\u5143\u4ea4\u53c9\u71b5\u6a21\u578b\u4e2d\u4e24\u4e2a\u5bf9\u6570\u4e4b\u95f4\u7684\u5dee\u8fdc\u5927\u4e8eLogistic\u56de\u5f52\u6a21\u578b\u4e2d\u7684\u4e24\u4e2a\u5bf9\u6570\u4e4b\u95f4\u7684\u5dee\u503c\u3002\n\u4e3a\u4e86\u9632\u6b62\u8fc7\u5ea6\u62df\u5408\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6807\u7b7e\u5e73\u6ed1\u6765\u8fdb\u884c\u4ea4\u53c9\u71b5\u635f\u5931\u3002\u6211\u4ee5\u524d\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u4e86\uff0c\u6211\u4e0d\u6253\u7b97\u5728\u8fd9\u91cc\u8be6\u8ff0\u4e86\u3002\n\u867d\u7136\u8fd9\u79cd\u60c5\u51b5\u53ef\u80fd\u5f88\u5c11\u89c1\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u5c06\u591a\u7c7b\u5206\u7c7b\u95ee\u9898\u89c6\u4e3a\u591a\u4e2a\u4e00\u5bf9\u4e00\u5206\u7c7b\uff0c\u6bcf\u4e2a\u5206\u7c7b\u90fd\u662fLogistic\u56de\u5f52\u3002\u7ed9\u5b9a$(x\uff0c\\mathbf{y})$\uff0c\u5176\u4e2d$x$\u662f\u8f93\u5165\uff0c$\\mathbf{y}$\u662f$x$\u7684\u6807\u7b7e\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u5f00\u53d1\u4e00\u4e2a\u6a21\u578b$f_{\\theta}$\uff0c\u5176\u4e2d$\\theta$\u662f\u6a21\u578b\u53c2\u6570\uff0c\u4f7f\u5f97$\\tilde{\\mathbf{y}}_j=f_{\\theta}(X)$\u5bf9\u4e8e[1\uff0cn]$\u4e2d\u7684\u6240\u6709$j\\\u90fd\u5c3d\u53ef\u80fd\u63a5\u8fd1$\\mathbf{y}_j$\u3002\u6ce8\u610f\uff0c\u8fd9\u4e0d\u540c\u4e8e\u591a\u7c7b\u5206\u7c7b\u7684\u4ea4\u53c9\u71b5\u635f\u5931\u3002\n\u901a\u5e38\uff0c\u591a\u7c7b\u5206\u7c7b\u5c06\u8ba1\u7b97\u8f93\u5165$x$\u7684logits$\\mathbf{z}$\uff0c\u5176\u4e2d$\\mathbf{z}=g_{\\theta}(X)$\uff0c\u7136\u540e\u8ba1\u7b97$\\mathbf{z}$\u7684\u6bcf\u4e2alogit\u7684Sigmoid\u6fc0\u6d3b\uff0c\u4ee5\u83b7\u5f97$\\mathbf{y}$\uff0c$\\tilde{\\mathbf{y}}$\u7684\u4f30\u8ba1\u503c\u3002\u5176\u4e2d\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c$\\sum_{i=1}^{n}\\tilde{\\mathbf{y}}_i$\u548c$\\sum_{i=1}^{n}\\mathbf{y}_i$\u4e0d\u5fc5\u7b49\u4e8e1\uff0c\u5e76\u4e14$\\tilde{\\mathbf{y}}_i\\in[0\uff0c1]$for$i\\in[1\uff0cn]$\u3002\u5177\u4f53\u5730\u8bf4\uff0c\n\u7528\u4e8e\u62df\u5408\u7684\u635f\u5931\u51fd\u6570\u79f0\u4e3a\u539f\u6728\u635f\u5931\u4e4b\u548c\u3002\u6bcf\u4e00\u7c7b\u7684\u5206\u7c7b\u53ef\u4ee5\u770b\u4f5c\u662f\u76f8\u4e92\u6392\u65a5\u7684\u3002TensorFlow\u4e3a\u8fd9\u79cd\u635f\u5931\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b9e\u73b0\uff0c\u4ed6\u4eec\u4e5f\u5c06\u5176\u79f0\u4e3atf.nn.sigmoid_Cross_\u71b5_with_logits\u3002\n\u6211\u4eec\u8fdb\u4e00\u6b65\u8ba1\u7b97\u8fd9\u4e2a\u5bf9\u6570\u635f\u5931\u548c\u5173\u4e8elogits$\\mathbf{z}$\u7684\u5bfc\u6570\u3002\u7531\u4e8e\u5b83\u51e0\u4e4e\u4e0e\u5bf9\u6570\u635f\u5931\u5173\u4e8elogits$z$\u7684\u5bfc\u6570\u5b8c\u5168\u76f8\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u8df3\u8fc7\u4e86\u4e00\u4e9b\u7ec6\u8282\u3002\n\u5bf9\u4e8e\u591a\u7c7b\u5206\u7c7b\uff0c\u5176\u89e3\u91ca\u4e0e\u4ea4\u53c9\u71b5\u635f\u5931\u76f8\u540c\u3002\u5982\u679c$\\tilde{\\mathbf{y}}_k&gt\uff1b\\mathbf{y}_k$\uff0c$\\frac{\\part}{\\part\\mathbf{z}_k}\\mathscr{L}_{\\theta}(x\uff0c\\mathbf{y})&gt\uff1b0$\uff0c\u5219\u68af\u5ea6\u4e0b\u964d\u4f1a\u4f7f$\\mathbf{z}_k$\u53d8\u5c0f\u3002\u4e00\u65e6$\\mathbf{z}_k$\u53d8\u5c0f\uff0c$\\tilde{\\mathbf{y}}_k$\u5c06\u53d8\u5c0f\uff0c\u5176\u4e0e$\\mathbf{y}_k$\u7684\u504f\u5dee\u4e5f\u5c06\u53d8\u5c0f\u3002\u540c\u6837\uff0c\u5982\u679c$\\tilde{\\mathbf{y}}_k&lt\uff1b\\mathbf{y}_k$\uff0c$\\frac{\\part}{\\part\\mathbf{z}_k}\\mathscr{L}_{\\theta}(x\uff0c\\mathbf{y})&lt\uff1b0$\uff0c\u5219\u68af\u5ea6\u4e0b\u964d\u8981\u4f7f$\\mathbf{z}_k$\u66f4\u5927\u3002\u4e00\u65e6$\\mathbf{z}_k$\u53d8\u5927\uff0c$\\tilde{\\mathbf{y}}_k$\u5c06\u53d8\u5927\uff0c\u5176\u4e0e$\\mathbf{y}_k$\u7684\u504f\u5dee\u5c06\u53d8\u5c0f\u3002\n\u8981\u66f4\u65b0\u6a21\u578b\u53c2\u6570$\\theta$\uff0c\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u5173\u4e8e$\\theta$\u7684\u5bfc\u6570\u3002\n\u8be5\u516c\u5f0f\u4e0e\u7528\u4e8e\u591a\u7c7b\u5206\u7c7b\u4ea4\u53c9\u71b5\u635f\u5931\u7684\u516c\u5f0f\u5b8c\u5168\u76f8\u540c\u3002\n\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4ea4\u53c9\u71b5\u635f\u5931\u7684\u68af\u5ea6\u516c\u5f0f\u548c\u5bf9\u6570\u635f\u5931\u603b\u548c\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u60f3\u77e5\u9053\u4e24\u8005\u4e4b\u95f4\u662f\u5426\u6709\u4ec0\u4e48\u4e0d\u540c\u3002\n\u7b54\u6848\u662f\uff0c\u8fd9\u4e24\u4e2a\u6a21\u578b\u4e4b\u95f4\u5b58\u5728\u5dee\u5f02\uff0c\u5373\u4f7f\u4e24\u4e2a\u6a21\u578b\u90fd\u5728\u8fdb\u884c\u591a\u7c7b\u5206\u7c7b\uff0c\u5373\u4e00\u4e2a\u8f93\u5165\u53ea\u6709\u4e00\u4e2a\u6807\u7b7e\u3002\u7ebf\u7d22\u5728\u4e8e$\\tilde{\\mathbf{y}}$\u7684\u503c\u3002\n\u5047\u8bbe$\\mathbf{y}$\u662f\u4e00\u4e2a\u5355\u70ed\u70b9\u7f16\u7801\u5411\u91cf\uff0c\u5219$\\sum_{i=1}^{n}\\mathbf{y}_i=1$\u3002\u5728\u4ea4\u53c9\u71b5\u635f\u5931\u4e2d\uff0c$\\sum_{i=1}^{n}\\tilde{\\mathbf{y}}_i=1$\uff0c\u800c\u5728\u539f\u6728\u635f\u5931\u603b\u548c\u4e2d\uff0c$\\sum_{i=1}^{n}\\tilde{\\mathbf{y}}_i\\neq1$\u3002\n\u6211\u4eec\u8fdb\u4e00\u6b65\u5047\u8bbe$\\mathbf{z}$\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u6a21\u578b\u662f\u76f8\u540c\u7684\u3002\u5f53[1\uff0cn]$\u4e2d$i\u7684$\\mathbf{z}_i&gt\uff1b\\log{\\frac{1}{n-1}}$\u65f6\uff0c\u5f88\u5bb9\u6613\u770b\u51fa\uff0c\u5bf9\u4e8e[1\uff0cn]$\u4e2d\u7684$i\\\uff0c\u4ea4\u53c9\u71b5\u635f\u5931\u6a21\u578b\u4e2d\u7684$tide{\\mathbf{y}}_i$\u5c0f\u4e8e\u539f\u6728\u635f\u5931\u6a21\u578b\u4e2d\u7684$tilde{\\mathbf{y}}_i$\u3002\n\u8fd9\u610f\u5473\u7740\u68af\u5ea6\u66f4\u65b0\u6bd4\u4ea4\u53c9\u71b5\u635f\u5931\u6a21\u578b\u4ece\u539f\u6728\u635f\u5931\u603b\u548c\u6a21\u578b\u4e2d\u83b7\u5f97\u4e86\u66f4\u591a\u7684\u6fc0\u52b1\u3002\u8fd9\u8fdb\u4e00\u6b65\u610f\u5473\u7740\u4ec0\u4e48\u5462\uff1f\u5f53\u8f93\u5165\u53ea\u6709\u4e00\u4e2a\u6807\u53f7\u65f6\uff0c\u5047\u8bbe$\\mathbf{y}$\u662f\u4e00\u4e2a\u5355\u70ed\u70b9\u7f16\u7801\u5411\u91cf\uff0c\u5047\u8bbe$n$\u8f83\u5927\uff0c\u539f\u6728\u635f\u5931\u4e4b\u548c\u6a21\u578b\u6bd4\u4ea4\u53c9\u71b5\u635f\u5931\u6a21\u578b\u4ece\u8d1f\u7c7b\u5f97\u5230\u66f4\u591a\u7684\u6fc0\u52b1\uff0c\u8fd9\u5c06\u524a\u5f31\u6b63\u7c7b\u7684\u5b66\u4e60\u3002\n\u56e0\u6b64\uff0c\u5982\u679c\u4e0a\u8ff0\u6240\u6709\u5047\u8bbe\u90fd\u6210\u7acb\uff0c\u5b66\u4e60\u5355\u6807\u7b7e\u591a\u7c7b\u5206\u7c7b\u65f6\u5e94\u8be5\u4f7f\u7528\u4ea4\u53c9\u71b5\u635f\u5931\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u65e5\u5fd7\u635f\u5931\u603b\u548c\u3002\n\u5982\u679c\u591a\u7c7b\u5206\u7c7b\u6709\u591a\u4e2a\u6807\u7b7e\u600e\u4e48\u529e\uff1f\u5728\u539f\u6728\u635f\u5931\u548c\u6a21\u578b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u51c6\u5907\u6807\u7b7e$\\mathbf{y}_i=1$\uff0c\u5176\u4e2d$i$\u5c5e\u4e8e\u6807\u7b7e\u7c7b\u522b\u3002\u5728\u4ea4\u53c9\u71b5\u635f\u5931\u6a21\u578b\u4e2d\uff0c\u7531\u4e8e\u4ea4\u53c9\u71b5\u6a21\u578b\u7684\u5c40\u9650\u6027\uff0c\u4e00\u79cd\u76f4\u89c2\u7684\u65b9\u6cd5\u662f\u5047\u8bbe\u4e00\u4e2a\u8f93\u5165\u6709$k$\u6807\u7b7e\uff0c\u8bbe\u6807\u7b7e$\\mathbf{y}_i=\\frac{1}{k}$\uff0c\u5176\u4e2d$i$\u5c5e\u4e8e\u6807\u7b7e\u7c7b\u522b\uff0c\u4e14$\\sum_{i=1}^{n}\\mathbf{y}_i=1$\u4e0d\u53d8\u3002\n\u8fd9\u4e00\u6b21\uff0c\u4e0e\u5bf9\u6570\u635f\u5931\u4e4b\u548c\u6a21\u578b\u76f8\u6bd4\uff0c\u4ea4\u53c9\u71b5\u635f\u5931\u8981\u5dee\u4e00\u4e9b\uff0c\u56e0\u4e3a\u8be5\u6a21\u578b\u4e0d\u80fd\u5f88\u597d\u5730\u5b66\u4e60\u9884\u6d4b\uff0c\u7279\u522b\u662f\u5f53\u6807\u7b7e\u6570$k$\u8f83\u5927\u65f6\u3002\u8fd9\u4e3b\u8981\u53d7Softmax\u6fc0\u6d3b\u529f\u80fd\u7684\u9650\u5236\u3002\u5728\u539f\u6728\u635f\u5931\u603b\u548c\u6a21\u578b\u4e2d\uff0c\u5b66\u4e60\u6b63\u7c7b\u7684\u52a8\u673a\u4e0d\u53d8\uff0c\u5c31\u597d\u50cf\u5b83\u4ecd\u7136\u662f\u5b66\u4e60\u5355\u6807\u7b7e\u5206\u7c7b\u95ee\u9898\u4e00\u6837\u3002\n\u597d\u7684\uff0c\u8fd9\u4e2a\u600e\u4e48\u6837\u3002\u7ed9\u5b9a\u5177\u6709$k$\u6807\u7b7e\u7684\u8f93\u5165\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u4e00\u4e2a\u6570\u636e\u70b9\uff0c\u6211\u4eec\u51c6\u5907$k$\u4e2a\u6570\u636e\u70b9\uff0c\u8fd9\u4e9b\u6570\u636e\u70b9\u7684\u8f93\u5165\u5b8c\u5168\u76f8\u540c\uff0c\u5e76\u4e14\u6807\u7b7e\u662f\u4ee3\u8868\u6bcf\u4e2a$k$\u6807\u7b7e\u7684\u5355\u70ed\u70b9\u6807\u7b7e\u3002\u5b83\u5b9e\u9645\u4e0a\u7b49\u4ef7\u4e8e\u6709\u4e00\u4e2a\u6570\u636e\u70b9\uff0c\u5176\u6807\u7b7e$\\mathbf{y}_i=\\frac{1}{k}$\uff0c\u5176\u4e2d$i$\u5c5e\u4e8e\u6807\u7b7e\u5206\u7c7b\u3002\u6211\u4f1a\u8ba9\u7528\u6237\u81ea\u5df1\u53bb\u627e\u51fa\u4e3a\u4ec0\u4e48\u4f1a\u662f\u8fd9\u6837\u3002\u63d0\u793a\u662f\u4f7f\u7528\u884d\u751f\u54c1\u7684\u671f\u671b\u503c\u3002\n\u56e0\u6b64\uff0c\u5728\u5b66\u4e60\u591a\u6807\u7b7e\u591a\u7c7b\u5206\u7c7b\u65f6\uff0c\u4e0d\u80fd\u4f7f\u7528\u4ea4\u53c9\u71b5\u635f\u5931\uff0c\u800c\u5e94\u8be5\u4f7f\u7528\u539f\u6728\u635f\u5931\u603b\u548c\u3002", "note_en": "In one of my previous blog posts on  cross entropy, KL divergence, and maximum likelihood estimation, I have shown the \u201cequivalence\u201d of these three things in optimization. Cross entropy loss has been widely used in most of the state-of-the-art machine learning classification models, mainly because optimizing it is equivalent to maximum likelihood estimation. However, there could be other losses used for classification problems.\n  In this blog post, I would like to discussed the log loss used for logistic regression, the cross entropy loss used for multi-class classification, and the sum of log loss used for multi-class classification.\n  The prerequisites of this blog post have been discussed heavily in my other blog posts. For completeness, I made a copy of them here.\n   To check the quick proof of Leibniz integral rule, please check one my blog posts on  this.\n  Based on Leibniz integral rule, we could also move the positions of derivatives inside the expected value or outside the expected value. For instance,\n If $\\mathbb{E}_{(x,y) \\sim P(x,y)}\\big[ \\mathscr{L}_{\\theta}(x,y) \\big]$ is the loss function, to compute the derivative of the entire loss with respect to the parameter $\\theta$, it is equivalent to computing the derivatives of the losses contributed by each data point $\\mathscr{L}_{\\theta}(x, y)$ with respect to the parameter $\\theta$ and followed by computing its expected value, $\\mathbb{E}_{(x,y) \\sim P(x, y)}\\big[ \\frac{\\partial}{\\partial \\theta} \\mathscr{L}_{\\theta}(x, y) \\big]$. Assuming all the data $(x, y)$ are uniformly distributed, it is simply just computing the derivative of the losses contributed by each data point $\\mathscr{L}_{\\theta}(x, y)$ with respect to the parameter $\\theta$ and followed by taking their average. This is also how modern deep learning framework, such as TensorFlow and PyTorch, works.\n  Log loss has been used for logistic regression for a long time. Given $(x, y)$, where $x$ is the input, $y$ is the label for $x$, our goal is to develop a model $f_{\\theta}$, where $\\theta$ are the model parameters. such that $\\tilde{y} = f_{\\theta}(x)$ is as close to $y$ as possible. For logistic regression, usually $y = 0$ or $1$. $y = 1$ means $x$ belongs to certain class, whereas $y = 0$ means $x$ does not belong to certain class.\n  Usually, logistic regression will compute the logit $z$ for the input $x$, where $z = g_{\\theta}(x)$ followed by computing the sigmoid activation for $z$ to get the estimate of $y$, $\\tilde{y}$, in the range of $(0,1)$. Concretely,\n The loss function used for fitting is called log loss, which we would see later that it is actually binary cross entropy loss.\n We further compute the derivative of this log loss with respect to the logit $z$.\n  The interpretation is very simple. If $\\tilde{y} &gt; y$, $\\frac{\\partial}{\\partial z} \\mathscr{L}_{\\theta}(x,y) &gt; 0$, the gradient descent wants to make $z$ smaller. Once $z$ is smaller, $\\tilde{y}$ will be smaller and its deviation from $y$ will become smaller. Similarly, If $\\tilde{y} &lt; y$, $\\frac{\\partial}{\\partial z} \\mathscr{L}_{\\theta}(x,y) &lt; 0$, the gradient descent wants to make $z$ larger. Once $z$ is larger, $\\tilde{y}$ will be larger and its deviation from $y$ will become smaller.\n  To update the model parameters $\\theta$, we would need to compute the derivatives with respect to $\\theta$.\n  Cross entropy loss has been widely used for classification problems in deep learning. Given $(x, \\mathbf{y})$, where $x$ is the input, $\\mathbf{y}$ is the label for $x$. If $\\mathbf{y}$ is an one-hot vector of size $n$, and $\\mathbf{y}_i = 1$, our goal is to develop a model $f_{\\theta}$, where $\\theta$ are the model parameters, such that $\\tilde{\\mathbf{y}}_i = f_{\\theta}(x)$ is as close to $\\mathbf{y}_i$ as possible. Note that the motivation of using cross entropy loss behind is maximum likelihood estimation which might not be obvious to see. But I have discussed in my previous blog  post.\n  Usually, multi-class classification will compute the logits $\\mathbf{z}$ for the input $x$, where $\\mathbf{z} = g_{\\theta}(x)$ followed by computing the softmax activation for $\\mathbf{z}$ to get the estimate of $\\mathbf{y}$, $\\tilde{\\mathbf{y}}$, where $\\sum_{i=1}^{n} \\tilde{\\mathbf{y}}_i = 1$ and $\\tilde{\\mathbf{y}}_i \\in [0, 1]$ for $i \\in [1, n]$. Concretely,\n  We further compute the derivative of this cross entropy loss with respect to the logits $\\mathbf{z}$.\n  The interpretation is also very simple. If $\\tilde{\\mathbf{y}}_k &gt; \\mathbf{y}_k$, $\\frac{\\partial}{\\partial \\mathbf{z}_k} \\mathscr{L}_{\\theta}(x,\\mathbf{y}) &gt; 0$, the gradient descent wants to make $\\mathbf{z}_k$ smaller. Once $\\mathbf{z}_k$ is smaller, $\\tilde{\\mathbf{y}}_k$ will be smaller and its deviation from $\\mathbf{y}_k$ will become smaller. Similarly, If $\\tilde{\\mathbf{y}}_k &lt; \\mathbf{y}_k$, $\\frac{\\partial}{\\partial \\mathbf{z}_k} \\mathscr{L}_{\\theta}(x,\\mathbf{y}) &lt; 0$, the gradient descent wants to make $\\mathbf{z}_k$ larger. Once $\\mathbf{z}_k$ is larger, $\\tilde{\\mathbf{y}}_k$ will be larger and its deviation from $\\mathbf{y}_k$ will become smaller.\n  To update the model parameters $\\theta$, we would need to compute the derivatives with respect to $\\theta$.\n  If we have $n = 2$ for cross entropy loss and compare it with log loss, we would immediately see that the form of log loss is exactly the same to binary cross entropy loss, and log loss for logistic regression is a special case for cross entropy loss for multi-class classification where $n = 2$ and the logit $z$ for the negative class ($y = 0$) is a fixed value $0$.\n  So if we have a binary classification problem, what is the difference between modeling it using log loss for logistic regression and cross entropy loss for binary classification, assuming the learning rate and other hyperparameters are the same? We could see that the gradients with respect to the positive logit $z$ for both models are always the same. However, when it comes to updating the model parameters $\\theta$, the gradients for the two models would be different, because one model has only one logit whereas the other model has two logits. Therefore, although the two models are analogous, it is incorrect to say these two models are exactly the same.\n  One may ask which model is better for a binary classification problem. It is hard to say. But one thing that is for sure is that the binary cross entropy model is relatively easy to overfit. The reasons are the followings:\n The binary cross entropy model would try to adjust the positive and negative logits simultaneously whereas the logistic regression would only adjust one logit and the other hidden logit is always $0$, resulting the difference between two logits larger in the binary cross entropy model much larger than that in the logistic regression model.\n To prevent overfitting, we could use  label smoothing for cross entropy loss. I have discussed it previously and I am not going to elaborate it here.\n  While it might be rare, we could treat a multi-class classification problem as multiple one-vs-all classifications, each of which is a logistic regression. Given $(x, \\mathbf{y})$, where $x$ is the input, $\\mathbf{y}$ is the label for $x$. Our goal is to develop a model $f_{\\theta}$, where $\\theta$ are the model parameters, such that $\\tilde{\\mathbf{y}}_j = f_{\\theta}(x)$ is as close to $\\mathbf{y}_j$ as possible, for all $j \\in [1, n]$. Note that this is different from cross entropy loss for multi-class classification.\n  Usually, multi-class classification will compute the logits $\\mathbf{z}$ for the input $x$, where $\\mathbf{z} = g_{\\theta}(x)$ followed by computing the sigmoid activation for each logit of $\\mathbf{z}$ to get the estimate of $\\mathbf{y}$, $\\tilde{\\mathbf{y}}$, where notably $\\sum_{i=1}^{n} \\tilde{\\mathbf{y}}_i$ and $\\sum_{i=1}^{n} \\mathbf{y}_i$ do not have to equal to 1, and $\\tilde{\\mathbf{y}}_i \\in [0, 1]$ for $i \\in [1, n]$. Concretely,\n The loss function used for fitting is called the sum of log loss. The classification of each class could be seen as mutually exclusive. TensorFlow has an implementation for this loss, which they call it  tf.nn.sigmoid_cross_entropy_with_logits, as well.\n We further compute the derivative of this sum of log loss with respect to the logits $\\mathbf{z}$. Because it is almost exactly the same to the derivative of log loss with respect to the logits $z$, we skipped some details.\n  The interpretation is the same as cross entropy loss for multi-class classification. If $\\tilde{\\mathbf{y}}_k &gt; \\mathbf{y}_k$, $\\frac{\\partial}{\\partial \\mathbf{z}_k} \\mathscr{L}_{\\theta}(x,\\mathbf{y}) &gt; 0$, the gradient descent wants to make $\\mathbf{z}_k$ smaller. Once $\\mathbf{z}_k$ is smaller, $\\tilde{\\mathbf{y}}_k$ will be smaller and its deviation from $\\mathbf{y}_k$ will become smaller. Similarly, If $\\tilde{\\mathbf{y}}_k &lt; \\mathbf{y}_k$, $\\frac{\\partial}{\\partial \\mathbf{z}_k} \\mathscr{L}_{\\theta}(x,\\mathbf{y}) &lt; 0$, the gradient descent wants to make $\\mathbf{z}_k$ larger. Once $\\mathbf{z}_k$ is larger, $\\tilde{\\mathbf{y}}_k$ will be larger and its deviation from $\\mathbf{y}_k$ will become smaller.\n  To update the model parameters $\\theta$, we would need to compute the derivatives with respect to $\\theta$.\n The formula is exactly the same as the one used for cross entropy loss for multi-class classification.\n  Because we have seen that the gradient formula of cross entropy loss and sum of log loss are exactly the same, we wonder if there is any difference between the two.\n  The answer is there is difference between the two, even if both models are doing multi-class classifications that there is only one label for one input. The clues lie in the values of $\\tilde{\\mathbf{y}}$.\n  Assuming $\\mathbf{y}$ is an one-hot encoded vector, so $\\sum_{i=1}^{n} \\mathbf{y}_i = 1$. In cross entropy loss, $\\sum_{i=1}^{n} \\tilde{\\mathbf{y}}_i = 1$, whereas in sum of log loss, $\\sum_{i=1}^{n} \\tilde{\\mathbf{y}}_i \\neq 1$.\n  We further assume $\\mathbf{z}$ is the same for both models. When $\\mathbf{z}_i &gt; \\log{\\frac{1}{n-1}}$ for $i \\in [1, n]$, it is easy to see that the $\\tilde{\\mathbf{y}}_i$ in the cross entropy loss model is smaller than the $\\tilde{\\mathbf{y}}_i$ in the sum of log loss model, for $i \\in [1, n]$.\n  This means the gradient update gets more incentives from the sum of log loss model than the cross entropy loss model. What does it further mean? When the input has only one label as we already assumed that $\\mathbf{y}$ is an one-hot encoded vector, assuming $n$ is large, the sum of log loss model got more incentives from the negative classes than the cross entropy loss model, which will weaken the learning of positive class.\n  Therefore, if all the assumptions above are true, we should use cross entropy loss for learning a single-label multi-class classification, instead of using sum of log loss.\n  What if there are multiple labels for the multi-class classification. In the sum of log loss model, we could prepare labels $\\mathbf{y}_i = 1$, where $i$ belongs to the label classes. In the cross entropy loss model, due to the limitation of cross entropy model, an intuitive approach is to, assuming there are $k$ labels for one input, make the labels $\\mathbf{y}_i = \\frac{1}{k}$, where $i$ belongs to the label classes, and $\\sum_{i=1}^{n}\\mathbf{y}_i = 1$ is not changed.\n  This time, the cross entropy loss is inferior compared to the sum of log loss model, because the model will not learn predicting confidently, especially when the number of labels $k$ is large. This is mainly restricted by the softmax activation function. In the sum of log loss model, the incentives of learn a positive class does not change as if it is still learning a single-label classification problem.\n  OK, how about this. Given an input that has $k$ labels, instead of using one data point, we prepare $k$ data points whose inputs are exactly the same and the labels are one-hot labels representing each of the $k$ labels. It is actually equivalent to have one data point whose labels $\\mathbf{y}_i = \\frac{1}{k}$, where $i$ belongs to the label classes. I would leave it the user to find it out why this is the case. The hint is to use the expected value of the derivatives.\n  Therefore, we should use sum of log loss for learning a multi-label multi-class classification, instead of using cross entropy loss.", "posttime": "2020-07-19 10:26:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u635f\u5931,loss,mathbf", "title": "\u4ea4\u53c9\u71b5\u635f\u5931VS\u539f\u6728\u635f\u5931VS\u539f\u6728\u635f\u5931\u603b\u548c", "title_en": "Cross Entropy Loss vs Log Loss vs Sum of Log Loss", "transed": 1, "url": "https://leimao.github.io/blog/Conventional-Classification-Loss-Functions/", "via": "", "real_tags": ["\u635f\u5931", "loss", "mathbf"]}, {"category": "", "categoryclass": "", "imagename": "f26326c01bdd6e84d42ce1c5220bad84.jpeg", "infoid": 1012814, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2014\u5e74\u521d\uff0c\u901a\u7528\u7535\u6c14(General Electric Co.)\u5eb7\u6d85\u72c4\u683c\u5dde\u603b\u90e8\u7684\u9ad8\u5f71\u54cd\u529b\u521b\u65b0\u56e2\u961f(High-Impact Innovation Team)\u63a5\u5230\u4e00\u4e2a\u7d27\u6025\u7535\u8bdd\uff1a\u662f\u65f6\u5019\u5411\u6770\u592b\u00b7\u4f0a\u6885\u5c14\u7279\u5c55\u793a\u4ed6\u4eec\u7684\u4e00\u6b3e\u5e94\u7528\u4e86\u3002\u8fd9\u4f4d\u9996\u5e2d\u6267\u884c\u5b98\u5bf9\u79d1\u6280\u7684\u5174\u8da3\u4e0e\u65e5\u4ff1\u589e\uff0c\u4ed6\u627f\u8bfa\u901a\u7528\u7535\u6c14\u5c06\u5e2e\u52a9\u5168\u7403\u5efa\u8bbe\u4e00\u4e2a\u201c\u5de5\u4e1a\u4e92\u8054\u7f51\u201d\u3002\nHIIT\u56e2\u961f\u7684\u5de5\u4f5c\u662f\u5f00\u53d1\u516c\u53f8\u5185\u90e8\u4f7f\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f8b\u5982\u8fde\u63a5\u7167\u660e\u5de5\u7a0b\u5e08\u548c\u7167\u660e\u9500\u552e\u961f\u4f0d\u7684iPad\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ee5\u53ca\u7528\u4e8e\u5458\u5de5\u7ee9\u6548\u8bc4\u4f30\u7684\u57fa\u4e8eWeb\u7684\u5e94\u7528\u7a0b\u5e8f\u2026\u2026", "note_en": "In early 2014, the High-Impact Innovation Team in General Electric Co.\u2019s Connecticut headquarters received an urgent call: It was time to present one of their apps to Jeff Immelt. The chief executive had an expanding interest in tech, having promised an \u201cindustrial internet\u201d that GE would help build for the world.\n  It was the job of the HIIT team to develop apps for use within the company\u2014such as an iPad app to connect lighting engineers with the lighting sales force, and a web-based application for employee performance reviews....", "posttime": "2020-07-19 10:26:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5927\u80c6,ge,\u5e94\u7528\u7a0b\u5e8f", "title": "\u901a\u7528\u7535\u6c14\u5927\u80c6\u7684\u6570\u5b57\u68a6\u60f3\u7834\u706d", "title_en": "The Dimming of GE\u2019s Bold Digital Dreams", "transed": 1, "url": "https://www.wsj.com/articles/the-dimming-of-ges-bold-digital-dreams-11595044802", "via": "", "real_tags": ["\u5927\u80c6", "ge", "\u5e94\u7528\u7a0b\u5e8f"]}, {"category": "", "categoryclass": "", "imagename": "ec4bd4ab7a1b6037e0ac3d952d1fc989.jpg", "infoid": 1012809, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u6761\u4eba\u547d\u503c\u591a\u5c11\u94b1\uff1f\u8054\u90a6\u673a\u6784\u5fc5\u987b\u4e00\u76f4\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898--\u662f\u51b3\u5b9a\u5728\u5371\u9669\u6750\u6599\u4e0a\u8d34\u4e0a\u5b89\u5168\u6807\u7b7e\uff0c\u8fd8\u662f\u5728\u5927\u6d41\u884c\u540e\u91cd\u65b0\u5f00\u653e\u7ecf\u6d4e\u53d8\u5f97\u503c\u5f97\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u96be\u56de\u7b54\u7684\u95ee\u9898\uff0c\u4f46\u4ed6\u4eec\u786e\u5b9e\u6709\u81ea\u5df1\u4f7f\u7528\u7684\u53f7\u7801\u3002\u4ed6\u4eec\u8bf4\uff0c\u4e00\u6761\u4eba\u547d\u4ef7\u503c\u7ea61000\u4e07\u7f8e\u5143\u3002\u8fd9\u5c31\u662f\u4ed6\u4eec\u662f\u5982\u4f55\u5f97\u5230\u8fd9\u4e2a\u6570\u5b57\u7684\u6545\u4e8b\u3002\n\u7531\u4e8e\u8fd9\u4e2a\u6545\u4e8b\u53d1\u751f\u572820\u4e16\u7eaa80\u5e74\u4ee3\uff0c\u6211\u4eec\u4ee580\u5e74\u4ee3\u7535\u5f71\u7684\u98ce\u683c\u62cd\u6444\u4e86\u5b83\uff01\n\u70b9\u51fb\u8fd9\u91cc\u6536\u542c\u539f\u7248\u201c\u91d1\u94b1\u661f\u7403\u201d\u64ad\u5ba2\uff01\u70b9\u51fb\u8fd9\u91cc\u8ba2\u9605\u6211\u4eec\u7684\u7cfb\u5217\u89c6\u9891--\u5f53\u4f60\u8fd8\u5728\u770b\u7684\u65f6\u5019\uff0c\u8ba2\u9605\u6211\u4eec\u7684\u64ad\u5ba2\u5427\u3002", "note_en": "How much is a human life worth? Federal agencies have to answer this question all the time \u2014 whether it&#39;s to decide on adding safety labels to hazardous materials or when it becomes worth it to reopen the economy after a pandemic. It&#39;s a tough question to answer, but they do have a number they use. They say a human life is worth about $10 million. This is the story of how they got that number.\n  And since this story took place in the 1980s, we filmed it in the style of an &#39;80s movie!\n  Listen to the original Planet Money  podcast episode  here!  Subscribe to our video series  here  \u2014 and while you&#39;re at it,  subscribe to our podcast.", "posttime": "2020-07-19 09:20:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6570\u636e,life,\u4eba\u547d", "title": "\u6839\u636e\u653f\u5e9c\u7684\u6570\u636e\uff0c\u4f60\u7684\u4eba\u5bff\u4ef7\u503c1000\u4e07\u7f8e\u5143", "title_en": "Your Life Is Worth $10M, According to the Government", "transed": 1, "url": "https://www.npr.org/sections/money/2020/07/17/870483369/your-life-is-worth-10-million-according-to-the-government", "via": "", "real_tags": ["\u6570\u636e", "life", "\u4eba\u547d"]}]