[{"category": "", "categoryclass": "", "imagename": "9d7716668bc038c049819680bc3dabbd.jpg", "infoid": 1031885, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6839\u636e\u6700\u8fd1\u516c\u5e03\u7684\u8d77\u8bc9\u4e66\uff0c\u4e00\u540d\u5229\u7279\u5c14\u987f\u5973\u5b50\u6d89\u5acc\u5192\u5145\u5e0c\u5c14\u65af\u4f2f\u52d2\u53bf\u68c0\u5bdf\u5b98\uff0c\u5411\u6cd5\u9662\u5b98\u5458\u63d0\u4ea4\u4f2a\u9020\u6587\u4ef6\uff0c\u5ba3\u5e03\u9488\u5bf9\u5979\u7684\u6301\u6709\u6bd2\u54c1\u548c\u8ddf\u8e2a\u6848\u4ef6\u5df2\u88ab\u64a4\u9500\u3002\n\u6839\u636e\u672c\u6708\u65e9\u4e9b\u65f6\u5019\u63d0\u4ea4\u7684\u5e0c\u5c14\u65af\u4f2f\u52d2\u53bf\u5927\u966a\u5ba1\u56e2\u8d77\u8bc9\u4e66\uff0c\u6765\u81ea\u5229\u7279\u5c14\u987f\u94c1\u8def\u8857\u768433\u5c81\u7684\u4e3d\u838e\u00b7\u5170\u767b(Lisa Landon)\u9762\u4e34\u4e00\u9879\u4f2a\u88c5\u6307\u63a7\u548c\u516d\u9879\u4f2a\u9020\u7269\u8bc1\u7684\u6307\u63a7\u3002\n\u8d77\u8bc9\u4e66\u79f0\uff0c\u5170\u767b\u5728\u53bb\u5e7411\u6708\u548c12\u6708\u7684\u4e09\u4e2a\u4e0d\u540c\u7684\u6cd5\u5ead\u6848\u4ef6\u4e2d\u63d0\u4ea4\u4e86\u5047\u6587\u4ef6\u3002\u5728\u51e0\u4e2a\u6848\u4f8b\u4e2d\uff0c\u5979\u4f7f\u7528\u65b0\u6c49\u666e\u90e1\u6cd5\u9662\u7cfb\u7edf\u7684\u7535\u5b50\u7cfb\u7edf\u6765\u5f52\u6863\u6587\u4ef6\u3002\n\u53bb\u5e7411\u6708\uff0c\u5e0c\u5c14\u65af\u4f2f\u52d2\u53bf\u68c0\u5bdf\u5b98\u542c\u5230\u4e00\u540d\u5dde\u6cd5\u533b\u7684\u6d88\u606f\u540e\u4ea7\u751f\u4e86\u6000\u7591\uff0c\u8fd9\u540d\u6cd5\u533b\u539f\u8ba1\u5212\u5bf9\u5170\u767b\u8fdb\u884c\u80fd\u529b\u8bc4\u4f30\u3002\n\u5ba1\u67e5\u5458\u5728\u5170\u767b\u7684\u6cd5\u5ead\u6863\u6848\u4e2d\u770b\u5230\u4e86\u68c0\u5bdf\u5b98\u64a4\u9500\u6307\u63a7\u7684\u901a\u77e5\uff1b\u5ba1\u67e5\u5458\u60f3\u77e5\u9053\u5ba1\u67e5\u662f\u5426\u5e94\u8be5\u7ee7\u7eed\u8fdb\u884c\u3002\n\u9ad8\u7b49\u6cd5\u9662\u6cd5\u5b98\u5927\u536b\u00b7\u5b89\u5fb7\u68ee(David Anderson)\u5728\u4e00\u4efd\u5173\u4e8e\u6b64\u6848\u7684\u88c1\u51b3\u4e2d\u5199\u9053\uff1a\u201c\u8fd9\u4efd\u6587\u4ef6\u58f0\u79f0\u5305\u542b\u7531\u53bf\u52a9\u7406\u68c0\u5bdf\u5b98\u5e15\u7279\u91cc\u65af\u00b7\u5361\u897f\u5b89(Patrice Casian)\u63d0\u4ea4\u7684\u65e0\u6548\u8d77\u8bc9\u4e66(\u64a4\u9500\u6307\u63a7)\uff0c\u4f46\u5dde\u653f\u5e9c\u5f88\u5feb\u5c31\u53d1\u73b0\uff0c\u8fd9\u4efd\u6587\u4ef6\u4ee5\u53ca\u6587\u4ef6\u4e2d\u7684\u5176\u4ed6\u6587\u4ef6\u90fd\u662f\u6b3a\u8bc8\u6027\u63d0\u4ea4\u7684\uff0c\u201d\u9ad8\u7b49\u6cd5\u9662\u6cd5\u5b98\u5927\u536b\u00b7\u5b89\u5fb7\u68ee(David Anderson)\u5728\u4e00\u4efd\u5173\u4e8e\u6b64\u6848\u7684\u88c1\u51b3\u4e2d\u5199\u9053\u3002\n\u8d77\u8bc9\u4e66\u79f0\uff0c\u5170\u767b\u8fd8\u63d0\u4ea4\u4e86\u4e00\u9879\u547d\u4ee4\uff0c\u4f2a\u9020\u4e86\u9000\u4f11\u9ad8\u7b49\u6cd5\u9662\u6cd5\u5b98\u5409\u8389\u5b89\u00b7\u963f\u5e03\u62c9\u59c6\u68ee(Gillian Abramson)\u5728\u5979\u5bf9\u5e0c\u5c14\u65af\u4f2f\u52d2\u53bf\u63d0\u8d77\u7684\u8bc9\u8bbc\u4e2d\u653e\u5f03\u8bc9\u8bbc\u8d39\u7528\u7684\u51b3\u5b9a\u3002\u636e\u79f0\uff0c\u5979\u4ee3\u8868\u4e00\u540d\u4eb2\u5c5e\u63d0\u4ea4\u4e86\u4e00\u9879\u547d\u4ee4\uff0c\u8981\u6c42\u505c\u6b62\u6d89\u53ca\u5170\u767b\u5b69\u5b50\u7684\u76d1\u62a4\u7a0b\u5e8f\u3002\n\u5170\u767b\u7684\u5386\u53f2\u5305\u62ec\u5728\u66fc\u5f7b\u65af\u7279\u53d7\u5230\u4e0e\u8ddf\u8e2a\u548c\u6301\u6709\u51b0\u6bd2\u6709\u5173\u7684\u5211\u4e8b\u6307\u63a7\u3002\n\u519c\u5316\u5de8\u5934\u5b5f\u5c71\u90fd(Monsanto)\u7684\u6bcd\u516c\u53f8\u8868\u793a\uff0c\u672c\u5468\u5dde\u653f\u5e9c\u5c31\u6709\u6bd2\u5de5\u4e1a\u5316\u5b66\u54c1\u5e7f\u6cdb\u6c61\u67d3\u63d0\u8d77\u7684\u8bc9\u8bbc\u662f\u6ca1\u6709\u6839\u636e\u7684\u3002\n\u7ecf\u8fc7\u7f8e\u56fd\u52b3\u5de5\u90e8\u7684\u8c03\u67e5\uff0c\u66fc\u5f7b\u65af\u7279\u4e00\u5bb6\u5730\u677f\u516c\u53f8\u53ca\u5176\u6240\u6709\u8005\u88ab\u7f8e\u56fd\u5730\u533a\u6cd5\u9662\u52d2\u4ee4\u652f\u4ed8\u8d85\u8fc725\u4e07\u7f8e\u5143\u7684\u6b20\u85aa\u548c\u635f\u5bb3\u8d54\u507f\u91d1\u3002\n\u7ebd\u7ea6-\u5468\u4e8c\uff0c\u4e00\u540d\u8054\u90a6\u6cd5\u5b98\u9a73\u56de\u4e86\u7f8e\u56fd\u653f\u5e9c\u63d0\u51fa\u7684\u64a4\u9500\u5510\u7eb3\u5fb7\u00b7\u7279\u6717\u666e(Donald Trump)\u8bfd\u8c24\u8bc9\u8bbc\u88ab\u544a\u7684\u8bf7\u6c42\u3002\u8fd9\u540d\u4f5c\u5bb6\u79f0\uff0c\u603b\u7edf\u9519\u8bef\u5730\u5426\u8ba425\u5e74\u524d\u5728\u66fc\u54c8\u987f\u7684\u4e00\u5bb6\u767e\u8d27\u5546\u5e97\u5f3a\u5978\u4e86\u5979\u3002\n\u5eb7\u79d1\u5fb7-\u673a\u52a8\u8f66\u8f86\u603b\u76d1\u4f0a\u4e3d\u838e\u767d\u00b7A\u00b7\u6bd4\u83b1\u57fa\u516c\u5e03\u4e86\u4ee5\u4e0b\u9152\u540e\u9a7e\u8f66\u5b9a\u7f6a\u540d\u5355\u3002", "note_en": "A Littleton woman allegedly impersonated a Hillsborough County prosecutor when she filed bogus documents with court officials declaring that the drug possession and stalking case against her had been dropped, according to recently released indictments.\n Lisa Landon, 33, of Railroad Street, Littleton, faces one charge of false personation and six charges of falsifying physical evidence, according to Hillsborough County grand jury indictments handed up earlier this month.\n The indictments allege that Landon submitted the fake documents in three different court cases last November and December. In several instances, she used the New Hampshire court system\u2019s electronic system to file documents.\n  In November, Hillsborough County prosecutors became suspicious when they heard from a state forensic examiner, who had been scheduled to perform a competency evaluation on Landon.\n The examiner saw a notice in Landon\u2019s court file that prosecutors had dropped charges; the examiner wanted to know if the examination should go forward.\n  \u201cThe file purported to contain a nolle prosequi (drop the charges) filed by Assistant County Attorney Patrice Casian, but it quickly became evident to the State that the document, as well as other documents in the file, had been filed fraudulently,\u201d wrote Superior Court Judge David Anderson in a ruling regarding the case.\n Indictments allege Landon also filed an order falsifying a decision of retired Superior Court Judge Gillian Abramson to waive filing fees in a lawsuit she brought against Hillsborough County. And she allegedly filed an order on behalf of a relative to halt guardianship proceedings involving Landon\u2019s child.\n Landon\u2019s history includes criminal charges in Manchester related to stalking and possession of methamphetamine.\n  The parent company of agrochemical giant Monsanto says a lawsuit filed by the state this week over widespread contamination of toxic industrial chemicals is without merit.\n  A Manchester flooring company and its owner have been ordered to pay more than $250,000 in back wages and damages by the U.S. District Court after a U.S. Department of Labor investigation.\n    NEW YORK - A federal judge on Tuesday rejected a U.S. government request to drop Donald Trump as a defendant in a defamation lawsuit by a writer who said the president falsely denied raping her in a Manhattan department store a quarter century ago.\n    CONCORD \u2014 Director of Motor Vehicles Elizabeth A. Bielecki has released the following list of driving while intoxicated convictions.", "posttime": "2020-10-29 10:32:40", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6d89\u5acc,allegedly,\u63d0\u4ea4", "title": "\u4e00\u540d\u5973\u5b50\u6d89\u5acc\u5192\u5145\u68c0\u5bdf\u5b98\uff0c\u64a4\u9500\u4e86\u5bf9\u81ea\u5df1\u7684\u6307\u63a7", "title_en": "Woman allegedly impersonated prosecutor, dropped charges against herself", "transed": 1, "url": "https://www.unionleader.com/news/courts/woman-accused-of-impersonating-prosecutor-dropping-criminal-charges-against-herself/article_1fdb1551-147d-53dd-ad45-6680bfc556fa.html?block_id=897573", "via": "", "real_tags": ["\u6d89\u5acc", "allegedly", "\u63d0\u4ea4"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1031884, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "10\u670826\u65e5\uff0c\u5468\u4e00\uff0cKrebsOnSecurity\u5f00\u59cb\u8ddf\u8fdb\u6765\u81ea\u53ef\u9760\u6d88\u606f\u6765\u6e90\u7684\u7ebf\u62a5\uff0c\u8be5\u7ebf\u62a5\u79f0\uff0c\u4e00\u4e2a\u4ee5\u90e8\u7f72\u52d2\u7d22\u8f6f\u4ef6\u800c\u95fb\u540d\u7684\u5484\u5484\u903c\u4eba\u7684\u4fc4\u7f57\u65af\u7f51\u7edc\u72af\u7f6a\u56e2\u4f19\u6b63\u51c6\u5907\u6270\u4e71\u5168\u7f8e\u6570\u767e\u5bb6\u533b\u9662\u3001\u8bca\u6240\u548c\u533b\u7597\u8bbe\u65bd\u7684\u4fe1\u606f\u6280\u672f\u7cfb\u7edf\u3002\u4eca\u5929\uff0c\u7f8e\u56fd\u8054\u90a6\u8c03\u67e5\u5c40(FBI)\u548c\u7f8e\u56fd\u56fd\u571f\u5b89\u5168\u90e8(U.S.Department of Homeland Security)\u7684\u5b98\u5458\u5306\u5fd9\u53ec\u96c6\u533b\u7597\u884c\u4e1a\u9ad8\u7ba1\u53ec\u5f00\u7535\u8bdd\u4f1a\u8bae\uff0c\u8b66\u544a\u201c\u7f8e\u56fd\u533b\u9662\u548c\u533b\u7597\u670d\u52a1\u63d0\u4f9b\u8005\u9762\u4e34\u8feb\u5728\u7709\u776b\u7684\u7f51\u7edc\u72af\u7f6a\u5a01\u80c1\u201d\u3002\n\u5305\u62ec\u7f8e\u56fd\u536b\u751f\u4e0e\u516c\u4f17\u670d\u52a1\u90e8(HHS)\u5728\u5185\u7684\u7535\u8bdd\u4f1a\u8bae\u4e0a\u7684\u673a\u6784\u8b66\u544a\u4e0e\u4f1a\u8005\u8981\u6ce8\u610f\u201c\u53ef\u4fe1\u7684\u4fe1\u606f\uff0c\u5373\u7f51\u7edc\u72af\u7f6a\u5bf9\u7f8e\u56fd\u533b\u9662\u548c\u533b\u7597\u4fdd\u5065\u63d0\u4f9b\u8005\u7684\u5a01\u80c1\u65e5\u76ca\u589e\u52a0\u548c\u8feb\u5728\u7709\u776b\u3002\u201d\n\u8fd9\u4e9b\u673a\u6784\u8868\u793a\uff0c\u4ed6\u4eec\u5171\u4eab\u8fd9\u4e9b\u4fe1\u606f\u201c\u662f\u4e3a\u4e86\u5411\u533b\u7597\u4fdd\u5065\u63d0\u4f9b\u8005\u63d0\u4f9b\u8b66\u544a\uff0c\u4ee5\u786e\u4fdd\u4ed6\u4eec\u91c7\u53d6\u53ca\u65f6\u548c\u5408\u7406\u7684\u9884\u9632\u63aa\u65bd\uff0c\u4fdd\u62a4\u81ea\u5df1\u7684\u7f51\u7edc\u514d\u53d7\u8fd9\u4e9b\u5a01\u80c1\u3002\u201d\n\u8fd9\u4e00\u8b66\u544a\u662f\u5728\u4f5c\u8005\u6536\u5230\u5bc6\u5c14\u6c83\u57fa\u7f51\u7edc\u60c5\u62a5\u516c\u53f8Hold Security\u521b\u59cb\u4eba\u4e9a\u5386\u514b\u65af\u00b7\u970d\u5c14\u767b(Alex Holden)\u7684\u63d0\u793a\u540e\u4e0d\u523024\u5c0f\u65f6\u53d1\u51fa\u7684\u3002\u970d\u5c14\u767b\u8bf4\uff0c\u4ed6\u672c\u5468\u770b\u5230\u4e86\u96b6\u5c5e\u4e8e\u4e00\u4e2a\u540d\u4e3aRyuk\u7684\u4fc4\u8bed\u52d2\u7d22\u8f6f\u4ef6\u7ec4\u7ec7\u7684\u7f51\u7edc\u7f6a\u72af\u4e4b\u95f4\u7684\u5728\u7ebf\u901a\u4fe1\uff0c\u8be5\u7ec4\u7ec7\u6210\u5458\u8ba8\u8bba\u4e86\u5728\u7f8e\u56fd400\u591a\u5bb6\u533b\u7597\u673a\u6784\u90e8\u7f72\u52d2\u7d22\u8f6f\u4ef6\u7684\u8ba1\u5212\u3002\n\u4eca\u5929\u653f\u5e9c\u7535\u8bdd\u4f1a\u8bae\u7684\u4e00\u4f4d\u4e0e\u4f1a\u8005\u8868\u793a\uff0c\u8fd9\u4e9b\u673a\u6784\u51e0\u4e4e\u6ca1\u6709\u63d0\u4f9b\u533b\u7597\u673a\u6784\u5982\u4f55\u66f4\u597d\u5730\u4fdd\u62a4\u81ea\u5df1\u514d\u53d7\u8fd9\u79cd\u5a01\u80c1\u53c2\u4e0e\u8005\u6216\u6240\u8c13\u7684\u6076\u610f\u8f6f\u4ef6\u6d3b\u52a8\u7684\u5177\u4f53\u7ec6\u8282\u3002\n\u4e00\u4f4d\u53c2\u52a0\u8ba8\u8bba\u7684\u533b\u7597\u884c\u4e1a\u8d44\u6df1\u4eba\u58eb\u8868\u793a\uff1a\u201c\u4ed6\u4eec\u6ca1\u6709\u5206\u4eab\u4efb\u4f55IOC[\u59a5\u534f\u6307\u6807]\uff0c\u6240\u4ee5\u53ea\u662f\u2018\u7ed9\u4f60\u7684\u7cfb\u7edf\u6253\u8865\u4e01\uff0c\u62a5\u544a\u4efb\u4f55\u53ef\u7591\u7684\u4e1c\u897f\u2019\u3002\u201d\n\u7136\u800c\uff0c\u7535\u8bdd\u4f1a\u8bae\u4e0a\u7684\u5176\u4ed6\u4eba\u8868\u793a\uff0cIOC\u53ef\u80fd\u5bf9\u5df2\u7ecf\u88abRyuk\u6e17\u900f\u7684\u533b\u9662\u5e2e\u52a9\u4e0d\u5927\u3002\u8fd9\u662f\u56e0\u4e3aRyuk\u56e2\u4f19\u4f7f\u7528\u7684\u6076\u610f\u8f6f\u4ef6\u57fa\u7840\u8bbe\u65bd\u901a\u5e38\u5bf9\u6bcf\u4e2a\u53d7\u5bb3\u8005\u90fd\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\uff0c\u5305\u62ec\u4ece\u88ab\u611f\u67d3\u4e3b\u673a\u4e0a\u4e22\u5f03\u7684Microsoft Windows\u53ef\u6267\u884c\u6587\u4ef6\u5230\u7528\u4e8e\u5728\u53d7\u635f\u7cfb\u7edf\u4e4b\u95f4\u4f20\u8f93\u6570\u636e\u7684\u6240\u8c13\u201c\u547d\u4ee4\u548c\u63a7\u5236\u201d\u670d\u52a1\u5668\u7684\u6240\u6709\u5185\u5bb9\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u7f51\u7edc\u5b89\u5168\u4e8b\u4ef6\u54cd\u5e94\u516c\u53f8Mandiant\u4eca\u5929\u516c\u5e03\u4e86Ryuk\u57282020\u5e74\u81f3\u4eca\u7684\u5386\u6b21\u653b\u51fb\u4e2d\u4f7f\u7528\u7684\u57df\u540d\u548c\u4e92\u8054\u7f51\u5730\u5740\u5217\u8868\u3002Mandiant\u6307\u7684\u662f\u8be5\u7ec4\u7ec7\u7684\u5a01\u80c1\u884c\u4e3a\u4eba\u5206\u7c7b\u201cUNC1878\u201d\uff0c\u5e76\u4e8e\u4eca\u5929\u64ad\u51fa\u4e86\u4e00\u4e2a\u7f51\u7edc\u5e7f\u64ad\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u4e86Ryuk\u7684\u4e00\u4e9b\u6700\u65b0\u5265\u524a\u7b56\u7565\u3002\n\u66fc\u8fea\u6602\u7279\u9ad8\u7ea7\u526f\u603b\u88c1\u67e5\u5c14\u65af\u00b7\u5361\u9a6c\u5361\u5c14(Charles Carmakal)\u544a\u8bc9\u8def\u900f\u793e\uff0cU.1878\u662f\u4ed6\u5728\u804c\u4e1a\u751f\u6daf\u4e2d\u89c2\u5bdf\u5230\u7684\u6700\u539a\u989c\u65e0\u803b\u3001\u6700\u65e0\u60c5\u548c\u6700\u5177\u7834\u574f\u6027\u7684\u5a01\u80c1\u53c2\u4e0e\u8005\u4e4b\u4e00\u3002\nCarmakal\u8bf4\uff1a\u201c\u591a\u5bb6\u533b\u9662\u5df2\u7ecf\u53d7\u5230Ryuk\u52d2\u7d22\u8f6f\u4ef6\u7684\u4e25\u91cd\u5f71\u54cd\uff0c\u4ed6\u4eec\u7684\u7f51\u7edc\u5df2\u7ecf\u79bb\u7ebf\u3002\u201d\n\u4e00\u540d\u53c2\u52a0\u4e86\u4eca\u5929\u7535\u8bdd\u4f1a\u8bae\u7684\u533b\u7597\u884c\u4e1a\u8d44\u6df1\u4eba\u58eb\u8868\u793a\uff0c\u5982\u679c\u8fd9\u91cc\u771f\u7684\u6709\u6570\u767e\u5bb6\u533b\u7597\u8bbe\u65bd\u9762\u4e34\u8feb\u5728\u7709\u776b\u7684\u98ce\u9669\uff0c\u8fd9\u4f3c\u4e4e\u8d85\u51fa\u4e86\u4efb\u4f55\u4e00\u5bb6\u533b\u9662\u96c6\u56e2\u7684\u8303\u56f4\uff0c\u53ef\u80fd\u4f1a\u7275\u6d89\u5230\u67d0\u79cd\u6574\u5408\u4e86\u8bb8\u591a\u533b\u7597\u8bbe\u65bd\u7684\u7535\u5b50\u5065\u5eb7\u8bb0\u5f55\u63d0\u4f9b\u5546\u3002\u8fd9\u540d\u8d44\u6df1\u4eba\u58eb\u63a5\u53d7\u4e86KrebsOnSecurity\u7684\u91c7\u8bbf\uff0c\u8981\u6c42\u533f\u540d\u3002\n\u7136\u800c\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd8\u6ca1\u6709\u50cf\u6570\u767e\u5bb6\u8bbe\u65bd\u90a3\u6837\u516c\u5f00\u62a5\u544a\u52d2\u7d22\u8f6f\u4ef6\u4e8b\u4ef6\u3002\u4f46\u5728\u8fc7\u53bb\u7684\u51e0\u5929\u91cc\uff0c\u5df2\u7ecf\u6709\u51e0\u5bb6\u533b\u9662\u5904\u7406\u4e86\u52d2\u7d22\u8f6f\u4ef6\u653b\u51fb\u3002\n-Becker\u2018s Hospital Review\u4eca\u5929\u62a5\u9053\uff0c\u4fc4\u52d2\u5188\u5dde\u514b\u62c9\u9a6c\u65af\u7011\u5e03(Klamath Falls)\u7684\u5929\u7a7a\u6e56\u533b\u7597\u4e2d\u5fc3(Sky Lake Medical Center)\u7684\u8ba1\u7b97\u673a\u7cfb\u7edf\u906d\u5230\u52d2\u7d22\u8f6f\u4ef6\u653b\u51fb\u3002\n-WWNY\u5728\u7ebd\u7ea6\u7684\u7b2c\u4e03\u9891\u9053\u65b0\u95fb\u6628\u5929\u62a5\u9053\uff0c\u5bf9\u5723\u52b3\u4f26\u65af\u533b\u7597\u7cfb\u7edf\u7684Ryuk\u52d2\u7d22\u8f6f\u4ef6\u653b\u51fb\u5bfc\u81f4\u5361\u987f-\u6ce2\u8328\u5766\u3001\u6885\u585e\u7eb3\u548c\u53e4\u5f17\u5185\u5c14\u533b\u9662\u7684\u8ba1\u7b97\u673a\u611f\u67d3\u3002\n-SWNewsMedia.com\u5468\u4e00\u62a5\u9053\u4e86\u201c\u4e0d\u660e\u7f51\u7edc\u6d3b\u52a8\u201d\uff0c\u8fd9\u4e9b\u6d3b\u52a8\u5bfc\u81f4\u660e\u5c3c\u82cf\u8fbe\u5dde\u74e6\u79d1\u5c3c\u4e9aRidgeview\u533b\u7597\u4e2d\u5fc3\u7684\u67d0\u4e9b\u4e1a\u52a1\u4e2d\u65ad\u3002SWNews\u8bf4\uff0cRidgeview\u7684\u7cfb\u7edf\u5305\u62ec\u67e5\u65af\u5361\u7684\u4e24\u4e2a\u5341\u4e8c\u533b\u7597\u4e2d\u5fc3\u3001\u4e09\u5bb6\u533b\u9662\u3001\u8bca\u6240\u548c\u5927\u90fd\u5e02\u533a\u5468\u56f4\u7684\u5176\u4ed6\u7d27\u6025\u548c\u957f\u671f\u62a4\u7406\u5730\u70b9\u3002\n\u66f4\u65b0\u65f6\u95f4\uff1a\u665a\u4e0a10\uff1a11\u3002\u7f8e\u56fd\u4e1c\u90e8\u65f6\u95f4\uff1a\u8054\u90a6\u8c03\u67e5\u5c40\u3001\u56fd\u571f\u5b89\u5168\u90e8\u548c\u536b\u751f\u548c\u516c\u4f17\u670d\u52a1\u90e8\u521a\u521a\u8054\u5408\u53d1\u5e03\u4e86\u5173\u4e8e\u8fd9\u4e00\u95ee\u9898\u7684\u8b66\u62a5\uff0c\u53ef\u4ee5\u5728\u8fd9\u91cc\u83b7\u5f97\u3002", "note_en": "On Monday, Oct. 26, KrebsOnSecurity began following up on a tip from a reliable source that an aggressive Russian cybercriminal gang known for deploying ransomware was preparing to disrupt information technology systems at hundreds of hospitals, clinics and medical care facilities across the United States. Today, officials from the  FBI and the  U.S. Department of Homeland Security hastily assembled a conference call with healthcare industry executives warning about an \u201cimminent cybercrime threat to U.S. hospitals and healthcare providers.\u201d\n  The agencies on the conference call, which included the  U.S. Department of Health and Human Services (HHS), warned participants about \u201ccredible information of an increased and imminent cybercrime threat to US hospitals and healthcare providers.\u201d\n The agencies said they were sharing the information \u201cto provide warning to healthcare providers to ensure that they take timely and reasonable precautions to protect their networks from these threats.\u201d\n The warning came less than 24 hours after this author received a tip from  Alex Holden, founder of Milwaukee-based cyber intelligence firm  Hold Security. Holden said he saw online communications this week between cybercriminals affiliated with a Russian-speaking ransomware group known as  Ryuk in which group members discussed plans to deploy ransomware at more than 400 healthcare facilities in the U.S.\n One participant on the government conference call today said the agencies offered few concrete details of how healthcare organizations might better protect themselves against this threat actor or purported malware campaign.\n \u201cThey didn\u2019t share any IoCs [ indicators of compromise], so it\u2019s just been \u2018patch your systems and report anything suspicious\u2019,\u201d said a healthcare industry veteran who sat in on the discussion.\n However, others on the call said IoCs may be of little help for hospitals that have already been infiltrated by Ryuk. That\u2019s because the malware infrastructure used by the Ryuk gang is often unique to each victim, including everything from the Microsoft Windows executable files that get dropped on the infected hosts to the so-called \u201ccommand and control\u201d servers used to transmit data between and among compromised systems.\n Nevertheless, cybersecurity incident response firm  Mandiant today  released a list of domains and Internet addresses used by Ryuk in previous attacks throughout 2020 and up to the present day. Mandiant refers to the group by the threat actor classification \u201cUNC1878,\u201d and  aired a webcast today detailing some of Ryuk\u2019s latest exploitation tactics.\n Charles Carmakal, senior vice president for Mandiant,  told Reuters that UNC1878 is one of most brazen, heartless, and disruptive threat actors he\u2019s observed over the course of his career.\n \u201cMultiple hospitals have already been significantly impacted by Ryuk ransomware and their networks have been taken offline,\u201d Carmakal said.\n One health industry veteran who participated in the call today and who spoke with KrebsOnSecurity on condition of anonymity said if there truly are hundreds of medical facilities at imminent risk here, that would seem to go beyond the scope of any one hospital group and may implicate some kind of electronic health record provider that integrates with many care facilities.\n So far, however, nothing like hundreds of facilities have publicly reported ransomware incidents. But there have been a handful of hospitals dealing with ransomware attacks in the past few days.\n \u2013 Becker\u2019s Hospital Review  reported today that a ransomware attack hit Klamath Falls, Ore.-based Sky Lakes Medical Center\u2019s computer systems.\n \u2013 WWNY\u2019s Channel 7 News in New York  reported yesterday that a Ryuk ransomware attack on St. Lawrence Health System led to computer infections at Caton-Potsdam, Messena and Gouverneur hospitals.\n \u2013 SWNewsMedia.com  on Monday reported on \u201cunidentified network activity\u201d that caused disruption to certain operations at Ridgeview Medical Center in Waconia, Minn. SWNews says Ridgeview\u2019s system includes Chaska\u2019s Two Twelve Medical Center, three hospitals, clinics and other emergency and long-term care sites around the metro area.\n  Update, 10:11 p.m. ET: The FBI, DHS and HHS just jointly issued an alert about this, available  here.", "posttime": "2020-10-29 10:32:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6f\u4ef6,\u7f8e\u56fd,\u8feb\u5728\u7709\u776b,dhs,\u7f51\u7edc", "title": "FBI\uff0cDHS\uff0cHHS\u8b66\u544a\u7f8e\u56fd\u533b\u9662\u9762\u4e34\u8feb\u5728\u7709\u776b\u7684\u53ef\u4fe1\u52d2\u7d22\u8f6f\u4ef6\u5a01\u80c1", "title_en": "FBI, DHS, HHS Warn of Imminent,Credible Ransomware Threat Against U.S. Hospitals", "transed": 1, "url": "https://krebsonsecurity.com/2020/10/fbi-dhs-hhs-warn-of-imminent-credible-ransomware-threat-against-u-s-hospitals/", "via": "", "real_tags": ["\u8f6f\u4ef6", "\u7f8e\u56fd", "\u8feb\u5728\u7709\u776b", "dhs", "\u7f51\u7edc"]}, {"category": "", "categoryclass": "", "imagename": "93563e69beb570d71dea5dcd536f8ff0.png", "infoid": 1031883, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Youtube-dl\u662fyoutube-dl\u7684\u4e00\u4e2a\u5206\u652f\uff0c\u76ee\u7684\u662f\u8ba9\u793e\u533a\u6d4b\u8bd5\u7684\u529f\u80fd\u66f4\u5feb\u5730\u5408\u5e76\u5230\u5de5\u5177\u4e2d\uff0c\u56e0\u4e3ayoutube-dl\u7684\u5f00\u53d1\u4f3c\u4e4e\u6b63\u5728\u653e\u6162\u811a\u6b65\u3002(https://web.archive.org/web/20201014194602/https://github.com/ytdl-org/youtube-dl/issues/26462))\u3002\n\u6216\u8005\uff0c\u5982\u679c\u5b89\u88c5\u4e86pyinstaller\uff0c\u5219\u53ea\u9700\u6267\u884cmake_win.bat\u3002/dist\u4e2d\u5c06\u6709\u4e00\u4e2ayoutube-dlc.exe\u3002\n\u6784\u5efaWindows\u7684\u65b0\u65b9\u6cd5\u662f\u4f7f\u7528python pyinst.py(\u8bf7\u4f7f\u7528python3 64\u4f4d)\u4f5c\u4e3a32\u4f4d\u7248\u672c\uff0c\u4f7f\u752832\u4f4d\u7248\u672c\u7684python(\u6b64\u5904\u4e5f\u4f7f\u75283\u4f4d)\uff0c\u7136\u540e\u8fd0\u884cpython pyinst32.py\u3002\n\u5bf9\u4e8eUnix\uff1a\u60a8\u5c06\u9700\u8981\u6240\u9700\u7684\u6784\u5efa\u5de5\u5177python\u3001make(GNU)\u3001pandoc\u3001zip\u3001nosetests\uff0c\u7136\u540e\u53ea\u9700\u952e\u5165\u4ee5\u4e0b\u5185\u5bb9\u3002\n\u4e0d\u8981\u4f7f\u7528-U\u66f4\u65b0\uff01\u76f8\u53cd\uff0c\u91cd\u65b0\u4e0b\u8f7d\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u6216\u8005\u5f53\u4f7f\u7528pip\u5b89\u88c5\u65f6\uff0c\u5728\u5b89\u88c5\u65f6\u4f7f\u7528\u4e0a\u9762\u63cf\u8ff0\u7684\u3002\u6211\u5c06\u4e3a\u4e8c\u8fdb\u5236\u6587\u4ef6\u6dfb\u52a0\u4e00\u4e9b\u4ee4\u4eba\u96be\u5fd8\u7684\u77ed\u94fe\u63a5\uff0c\u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u66f4\u5bb9\u6613\u5730\u4e0b\u8f7d\u5b83\u4eec\u3002\nYouTube-DLC\u662f\u4e00\u4e2a\u547d\u4ee4\u884c\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u4eceYouTube.com\u548c\u5176\u4ed6\u51e0\u4e2a\u7f51\u7ad9\u4e0b\u8f7d\u89c6\u9891\u3002\u5b83\u9700\u8981\u7248\u672c2.6\u30012.7\u62163.2+\u7684Python\u89e3\u91ca\u5668\uff0c\u5e76\u4e14\u5b83\u4e0d\u7279\u5b9a\u4e8e\u5e73\u53f0\u3002\u5b83\u5e94\u8be5\u53ef\u4ee5\u5728\u60a8\u7684Unix\u7cfb\u7edf\u3001Windows\u6216MacOS\u4e0a\u8fd0\u884c\u3002\u5b83\u88ab\u53d1\u5e03\u5230\u516c\u5171\u9886\u57df\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u4fee\u6539\u3001\u91cd\u65b0\u5206\u53d1\u6216\u968f\u5fc3\u6240\u6b32\u5730\u4f7f\u7528\u5b83\u3002\n-h\uff0c--help\u6253\u5370\u6b64\u5e2e\u52a9\u6587\u672c\u5e76\u9000\u51fa--version\u6253\u5370\u7a0b\u5e8f\u7248\u672c\u5e76\u9000\u51fa-U\uff0c--update\u5c06\u6b64\u7a0b\u5e8f\u66f4\u65b0\u4e3a\u6700\u65b0\u7248\u672c\u3002\u786e\u4fdd\u60a8\u6709\u8db3\u591f\u7684\u6743\u9650(\u5982\u679c\u9700\u8981\uff0c\u4f7f\u7528sudo\u8fd0\u884c)-i\uff0c--Ignore-\u4e0b\u8f7d\u9519\u8bef\u65f6\u7ee7\u7eed\u51fa\u73b0\u9519\u8bef\uff0c\u4f8b\u5982\u8df3\u8fc7\u64ad\u653e\u5217\u8868\u4e2d\u4e0d\u53ef\u7528\u7684\u89c6\u9891--\u51fa\u73b0\u9519\u8bef\u65f6\u4e2d\u6b62\u4e0b\u8f7d\u66f4\u591a\u89c6\u9891(\u5728\u64ad\u653e\u5217\u8868\u6216\u547d\u4ee4\u884c\u4e2d)--dump-user-agent\u663e\u793a\u5f53\u524d\u6d4f\u89c8\u5668\u6807\u8bc6--list-\u63d0\u53d6\u5668\u5217\u51fa\u6240\u6709\u652f\u6301\u7684\u63d0\u53d6\u5668--\u63d0\u53d6\u5668\u63cf\u8ff0\u6240\u6709\u652f\u6301\u7684\u63d0\u53d6\u5668\u7684\u8f93\u51fa\u63cf\u8ff0--force-Generic-\u63d0\u53d6\u5668\u5f3a\u5236\u63d0\u53d6\u8981\u4f7f\u7528\u901a\u7528\u63d0\u53d6\u5668--default-search\u524d\u7f00\u4f7f\u7528\u6b64\u524d\u7f00\u4f5c\u4e3a\u4e0d\u5408\u683cURL\u7684\u524d\u7f00\u3002\u4f8b\u5982\uff0c\u4ece\u8c37\u6b4c\u89c6\u9891\u4e3aYouTube-DLC&34\uff1b\u5927\u82f9\u679c\u4e0b\u8f7d\u4e86\u4e24\u4e2a\u89c6\u9891\u3002\u4f7f\u7528\u503c&#34\uff1bAUTO&#34\uff1b\u8ba9YouTube-DLC\u731c\u6d4b(&#34\uff1bAUTO_WARNING&#34\uff1b\u5728\u731c\u6d4b\u65f6\u53d1\u51fa\u8b66\u544a)\u3002&#34\uff1b\u9519\u8bef&#34\uff1b\u53ea\u662f\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\u3002\u9ed8\u8ba4\u503c&#34\uff1bFIXUP_ERROR&#34\uff1b\u4fee\u590d\u635f\u574f\u7684URL\uff0c\u4f46\u5982\u679c\u65e0\u6cd5\u4fee\u590d\uff0c\u5219\u4f1a\u53d1\u51fa\u9519\u8bef\uff0c\u800c\u4e0d\u662f\u641c\u7d22\u3002--Ignore-config\u4e0d\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u3002\u5728\u5168\u5c40\u914d\u7f6e\u6587\u4ef6/etc/youtube-dlc.conf\u4e2d\u7ed9\u5b9a\u65f6\uff1a\u4e0d\u8bfb\u53d6~/.config/youtube-dlc/config(Windows\u4e0a\u4e3a%appdata%/youtube-dlc/config.txt)\u4e2d\u7684\u7528\u6237\u914d\u7f6e--config-\u4f4d\u7f6e\u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u4f4d\u7f6e\uff1bconfig\u7684\u8def\u5f84\u6216\u5176\u5305\u542b\u76ee\u5f55\u7684\u8def\u5f84\u3002--Flat-\u64ad\u653e\u5217\u8868\u4e0d\u63d0\u53d6\u64ad\u653e\u5217\u8868\u7684\u89c6\u9891\uff0c\u4ec5\u5217\u51fa\u5b83\u4eec\u3002--mark-\u5df2\u89c2\u770b\u6807\u8bb0\u5df2\u89c2\u770b\u7684\u89c6\u9891(\u4ec5\u9650YouTube)--no-mark-\u5df2\u89c2\u770b\u4e0d\u6807\u8bb0\u5df2\u89c2\u770b\u7684\u89c6\u9891(\u4ec5\u9650YouTube)-no-color\u4e0d\u5728\u8f93\u51fa\u4e2d\u53d1\u51fa\u8272\u7801\u3002--Flat-\u64ad\u653e\u5217\u8868\u4e0d\u63d0\u53d6\u64ad\u653e\u5217\u8868\u7684\u89c6\u9891\uff0c\u4ec5\u5217\u51fa\u5b83\u4eec\u3002--mark-\u5df2\u89c2\u770b\u7684\u6807\u8bb0\u89c6\u9891(\u4ec5\u9650YouTube)--\u65e0\u6807\u8bb0-\u5df2\u89c2\u770b\u7684\u4e0d\u6807\u8bb0\u5df2\u89c2\u770b\u7684\u89c6\u9891(\u4ec5\u9650YouTube)-\u65e0\u989c\u8272\u4e0d\u5728\u8f93\u51fa\u4e2d\u53d1\u51fa\u989c\u8272\u4ee3\u7801\u3002\n--\u4ee3\u7406URL\u4f7f\u7528\u6307\u5b9a\u7684HTTP/HTTPS/SOCKS\u4ee3\u7406\u3002\u8981\u542f\u7528SOCKS\u4ee3\u7406\uff0c\u8bf7\u6307\u5b9a\u6b63\u786e\u7684\u65b9\u6848\u3002\u4f8b\u5982socks5\uff1a//127.0.0.1\uff1a1080/\u3002\u4e3a\u76f4\u63a5\u8fde\u63a5\u4f20\u5165\u7a7a\u5b57\u7b26\u4e32(--proxy&34\uff1b&#34\uff1b)--socket-timeout\u79d2\u653e\u5f03\u524d\u7b49\u5f85\u7684\u65f6\u95f4\uff0c\u4ee5\u79d2\u4e3a\u5355\u4f4d--\u6e90\u5730\u5740IP\u5ba2\u6237\u7aefIP\u5730\u5740\u8981\u7ed1\u5b9a\u5230-4\uff0c--force-ipv4\u901a\u8fc7IPv4-6\u5efa\u7acb\u6240\u6709\u8fde\u63a5\uff0c--force-ipv6\u901a\u8fc7IPv6\u5efa\u7acb\u6240\u6709\u8fde\u63a5\n--Geo-Verify-Proxy URL\u4f7f\u7528\u6b64\u4ee3\u7406\u6765\u9a8c\u8bc1\u67d0\u4e9b\u53d7\u5730\u7406\u9650\u5236\u7684\u7ad9\u70b9\u7684IP\u5730\u5740\u3002\u7531--proxy(\u5982\u679c\u9009\u9879\u4e0d\u5b58\u5728\uff0c\u5219\u4e3aNone)\u6307\u5b9a\u7684\u9ed8\u8ba4\u4ee3\u7406\u7528\u4e8e\u5b9e\u9645\u4e0b\u8f7d\u3002--\u901a\u8fc7\u4f2a\u9020X-Forwarded-for HTTP\u6807\u5934\u7ed5\u8fc7\u5730\u7406\u7ed5\u8fc7\u5730\u7406\u9650\u5236--no-geo-\u7ed5\u8fc7\u4e0d\u901a\u8fc7\u4f2a\u9020X-Forwarded-For HTTP\u6807\u5934\u7ed5\u8fc7\u5730\u7406\u9650\u5236--Geo-BYPASS-\u56fd\u5bb6\u4ee3\u7801\u4f7f\u7528\u663e\u5f0f\u63d0\u4f9b\u7684\u53cc\u5b57\u6bcdISO 3166-2\u56fd\u5bb6/\u5730\u533a\u4ee3\u7801\u5f3a\u5236\u7ed5\u8fc7\u5730\u7406\u9650\u5236--Geo-BYPASS-IP-BLOCK IP_BLOCK\u4ee5CIDR\u8868\u793a\u6cd5\u660e\u786e\u63d0\u4f9bIP\u5757\u7684\u7ed5\u8fc7\u5730\u7406\u9650\u5236\u3002\n--PLAYLIST-\u5f00\u59cb\u7f16\u53f7\u64ad\u653e\u5217\u8868\u89c6\u9891(\u9ed8\u8ba4\u503c\u4e3a1)--PLAYLIST-\u7ed3\u675f\u7f16\u53f7\u64ad\u653e\u5217\u8868\u89c6\u9891(\u9ed8\u8ba4\u503c\u4e3aLAST)--PLAYLIST-Items Item_spec Playlist\u8981\u4e0b\u8f7d\u7684\u89c6\u9891\u9879\u76ee\u3002\u5982\u679c\u8981\u4e0b\u8f7d\u64ad\u653e\u5217\u8868\u4e2d\u7d22\u5f15\u4e3a1\u30012\u30015\u30018\u7684\u89c6\u9891\uff0c\u8bf7\u6307\u5b9a\u64ad\u653e\u5217\u8868\u4e2d\u4ee5\u9017\u53f7\u5206\u9694\u7684\u89c6\u9891\u7d22\u5f15\uff0c\u5982\uff1a&#34\uff1b--PlayList-Items 1\uff0c2\uff0c5\uff0c8&#34\uff1b\u3002\u60a8\u53ef\u4ee5\u6307\u5b9a\u8303\u56f4\uff1a&#34\uff1b--PlayList-Items 1-3\uff0c7\uff0c10-13&#34\uff1b\uff0c\u5b83\u5c06\u4e0b\u8f7d\u7d22\u5f15\u4e3a1\u30012\u30013\u30017\u300110\u300111\u7684\u89c6\u9891\uff0c12\u548c13.--Match-Title REGEX\u4ec5\u4e0b\u8f7d\u5339\u914d\u7684\u6807\u9898(\u6b63\u5219\u8868\u8fbe\u5f0f\u6216\u65e0\u5927\u5c0f\u5199\u7684\u5b50\u5b57\u7b26\u4e32)--Reject-Title REGEX\u8df3\u8fc7\u5339\u914d\u6807\u9898\u7684\u4e0b\u8f7d(regex\u6216\u65e0\u5927\u5c0f\u5199\u7684\u5b50\u4e32)--max-\u4e0b\u8f7d\u6570\u91cf\u5728\u4e0b\u8f7d\u6570\u91cf\u6587\u4ef6\u540e\u4e2d\u6b62--min-\u6587\u4ef6\u5927\u5c0f\u4e0d\u4e0b\u8f7d\u4efb\u4f55\u5c0f\u4e8e\u5927\u5c0f\u7684\u89c6\u9891(\u4f8b\u598250k\u621644.6m)--max-\u6587\u4ef6\u5927\u5c0f\u4e0d\u4e0b\u8f7d\u4efb\u4f55\u5927\u4e8e\u5927\u5c0f\u7684\u89c6\u9891(\u4f8b\u598250k\u621644.6m)--date\u4ec5\u4e0b\u8f7d\u5728\u6b64\u65e5\u671f\u4e0a\u8f7d\u7684\u89c6\u9891--date\u4e4b\u524d\u7684\u65e5\u671f\u4ec5\u4e0b\u8f7d\u89c6\u9891\u3002\u5728\u6b64\u65e5\u671f\u6216\u4e4b\u524d\u4e0a\u4f20(\u5305\u62ec\u5728\u5185)--\u65e5\u671f\u4e4b\u540e\u4ec5\u4e0b\u8f7d\u5728\u6b64\u65e5\u671f\u6216\u4e4b\u540e\u4e0a\u4f20\u7684\u89c6\u9891(\u5373\uff0c\u5305\u62ec\u5728\u5185)--min-\u70b9\u51fb\u91cf\u8ba1\u6570\u4e0d\u4e0b\u8f7d\u4efb\u4f55\u89c2\u770b\u6b21\u6570\u5c11\u4e8e\u8ba1\u6570\u7684\u89c6\u9891--max-\u70b9\u51fb\u91cf\u8ba1\u6570\u4e0d\u4e0b\u8f7d\u4efb\u4f55\u70b9\u51fb\u91cf\u8d85\u8fc7\u8ba1\u6570\u7684\u89c6\u9891--Match-Filter\u901a\u7528\u89c6\u9891\u8fc7\u6ee4\u5668\u3002\u6307\u5b9a\u8981\u5339\u914d\u7684\u4efb\u4f55\u5bc6\u94a5(\u6709\u5173\u53ef\u7528\u5bc6\u94a5\u7684\u5217\u8868\uff0c\u8bf7\u53c2\u9605&#34\uff1b\u8f93\u51fa\u6a21\u677f)\u3002\uff01key\u8981\u68c0\u67e5\u5bc6\u94a5\u662f\u5426\u4e0d\u5b58\u5728\uff0ckey&&gt;number(\u5982&#34\uff1bCOMMENT_COUNT&gt\uff1b12&#34\uff1b\uff0c\u4e5f\u9002\u7528\u4e8e&gt\uff1b=\uff0c&lt\uff1b=\uff0c\uff01=\uff0c=)\u4ee5\u4e0e\u6570\u5b57\u8fdb\u884c\u6bd4\u8f83\uff0ckey=&#39\uff1b\u6587\u5b57&#39\uff1b(\u5982&#34\uff1bUploader=&#39\uff1bMike Smith&#39\uff1b&#34\uff1b\uff0c\u8fd8\u4e0e\uff01=)\u914d\u5408\u4f7f\u7528\u4ee5\u5339\u914d\u5b57\u7b26\u4e32\u6587\u5b57\uff0c\u5e76\u4e0e&amp\uff1b\u914d\u5408\u4f7f\u7528\u4ee5\u8981\u6c42\u591a\u4e2a\u5339\u914d\u3002\u9664\u975e\u60a8\u6253\u4e0a\u95ee\u53f7(\uff1f)\uff0c\u5426\u5219\u5c06\u6392\u9664\u672a\u77e5\u7684\u503c\u3002\u5728\u63a5\u7ebf\u5458\u4e4b\u540e\u3002\u4f8b\u5982\uff0c\u8981\u4ec5\u5339\u914d\u88ab\u559c\u6b22\u8d85\u8fc7100\u6b21\u800c\u4e0d\u559c\u6b22\u5c11\u4e8e50\u6b21\u7684\u89c6\u9891(\u6216\u8005\u4e0d\u559c\u6b22\u529f\u80fd\u5728\u7ed9\u5b9a\u670d\u52a1\u4e2d\u4e0d\u53ef\u7528)\uff0c\u4f46\u4e5f\u6709\u63cf\u8ff0\u7684\u4eba\uff0c\u8bf7\u4f7f\u7528--Match-filter&#34\uff1blike_count&gt\uff1b100&amp\uff1bdislike_count&lt\uff1b\uff1f50&amp\uff1bdescription&#34\uff1b.--\u5426-\u5982\u679cURL\u5f15\u7528\u89c6\u9891\u548c\u64ad\u653e\u5217\u8868\uff0c\u5219\u64ad\u653e\u5217\u8868\u4ec5\u4e0b\u8f7d\u89c6\u9891\u3002--\u662f-\u64ad\u653e\u5217\u8868\uff0c\u5982\u679cURL\u5f15\u7528\u89c6\u9891\u548c\u64ad\u653e\u5217\u8868\uff0c\u5219\u4e0b\u8f7d\u64ad\u653e\u5217\u8868\u3002--\u5e74\u9f84-\u9650\u5236\u5e74\u9650\u4ec5\u4e0b\u8f7d\u9002\u5408\u7ed9\u5b9a\u5e74\u9f84\u7684\u89c6\u9891--\u4e0b\u8f7d-\u5b58\u6863\u6587\u4ef6\u4ec5\u4e0b\u8f7d\u5b58\u6863\u6587\u4ef6\u4e2d\u672a\u5217\u51fa\u7684\u89c6\u9891\u3002\u8bb0\u5f55\u6240\u6709\u4e0b\u8f7d\u89c6\u9891\u7684ID\u3002--include-adds\u4e0b\u8f7d\u5e7f\u544a(\u8bd5\u9a8c\u6027)\u3002\n-r\uff0c--\u9650\u5236\u901f\u7387\u4ee5\u5b57\u8282/\u79d2\u4e3a\u5355\u4f4d\u7684\u6700\u5927\u4e0b\u8f7d\u901f\u7387(\u4f8b\u598250K\u62164.2M)-R\uff0c--\u91cd\u8bd5\u6b21\u6570\u91cd\u8bd5\u6b21\u6570(\u9ed8\u8ba4\u503c\u4e3a10)\uff0c\u6216&#34\uff1b\u65e0\u9650&#34\uff1b\u3002--\u7247\u6bb5-\u91cd\u8bd5\u6b21\u6570\u7247\u6bb5\u91cd\u8bd5\u6b21\u6570(\u9ed8\u8ba4\u503c\u4e3a10)\uff0c\u6216&#34\uff1b\u65e0\u9650&#34\uff1b(DASH\u3001hlsnative\u548cISM)--SKIP-UNAVAILABLE-\u7247\u6bb5\u8df3\u8fc7\u4e0d\u53ef\u7528\u7247\u6bb5(DASH\u3001hlsnative\u548cISM)--ABORT-ON-UNAvailable-\u7247\u6bb5\u5728\u67d0\u4e9b\u7247\u6bb5\u4e0d\u53ef\u7528\u65f6\u4e2d\u6b62\u4e0b\u8f7d--KEEP-\u7247\u6bb5\u5728\u4e0b\u8f7d\u5b8c\u6210\u540e\u5c06\u4e0b\u8f7d\u7684\u7247\u6bb5\u4fdd\u7559\u5728\u78c1\u76d8\u4e0a\uff1b\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7247\u6bb5\u88ab\u64e6\u9664--\u4e0b\u8f7d\u7f13\u51b2\u533a\u7684\u7f13\u51b2\u533a\u5927\u5c0f\u5927\u5c0f(\u4f8b\u5982\uff0c1024\u621616K)(\u9ed8\u8ba4\u503c\u4e3a1024)--no-resize-buffer\u4e0d\u4f1a\u81ea\u52a8\u8c03\u6574\u7f13\u51b2\u533a\u5927\u5c0f\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7f13\u51b2\u533a\u5927\u5c0f\u4ece\u521d\u59cb\u503cSIZE\u81ea\u52a8\u8c03\u6574\u3002--HTTP-CHUNK-SIZE\u5757\u5927\u5c0f\u7528\u4e8e\u57fa\u4e8e\u5757\u7684HTTP\u4e0b\u8f7d\u7684\u5757\u7684\u5927\u5c0f(\u4f8b\u5982\uff0c10485760\u621610M)(\u9ed8\u8ba4\u4e3a\u7981\u7528)\u3002\u5bf9\u4e8e\u7ed5\u8fc7\u7f51\u7edc\u670d\u52a1\u5668\u65bd\u52a0\u7684\u5e26\u5bbd\u9650\u5236\u53ef\u80fd\u5f88\u6709\u7528(\u5b9e\u9a8c\u6027)--playlist-\u53cd\u5411\u4e0b\u8f7d\u64ad\u653e\u5217\u8868\u89c6\u9891--playlist-\u4ee5\u968f\u673a\u987a\u5e8f\u968f\u673a\u4e0b\u8f7d\u64ad\u653e\u5217\u8868\u89c6\u9891--xattr-set-filesize\u8bbe\u7f6e\u6587\u4ef6xattribute ytdl.filesize\uff0c\u5177\u6709\u9884\u671f\u7684\u6587\u4ef6\u5927\u5c0f--HLS-PREFER-NATIVE\u4f7f\u7528\u672c\u5730HLS\u4e0b\u8f7d\u5668\u800c\u4e0d\u662fffmpeg-HLS-PREFER-ffmpeg\u4f7f\u7528ffmpeg\u800c\u4e0d\u662f\u672c\u5730HLS\u4e0b\u8f7d\u5668--HLS-USE-mpegts\u4f7f\u7528\u7528\u4e8eHLS\u89c6\u9891\u7684mpegts\u5bb9\u5668\uff0c\u5141\u8bb8\u5728\u4e0b\u8f7d\u89c6\u9891\u65f6\u64ad\u653e\u89c6\u9891(\u67d0\u4e9b\u64ad\u653e\u5668\u53ef\u80fd\u65e0\u6cd5\u64ad\u653e\u5b83)-EXTERNAL-Downloader\u547d\u4ee4\u4f7f\u7528\u6307\u5b9a\u7684\u5916\u90e8\u4e0b\u8f7d\u5668\u4ee3\u66ffFMPPEG-HLS-USE-mpegts\u4f7f\u7528mpegts\u5bb9\u5668\u4e0b\u8f7dHLS\u89c6\u9891(\u67d0\u4e9b\u64ad\u653e\u5668\u53ef\u80fd\u65e0\u6cd5\u64ad\u653e)-\u5916\u90e8-Downloader\u547d\u4ee4\u4f7f\u7528\u6307\u5b9a\u7684\u5916\u90e8\u4e0b\u8f7d\u5668\u3002\u5f53\u524d\u652f\u6301aria2c\u3001avconv\u3001axel\u3001curl\u3001ffmpeg\u3001httpy\u3001wget--ternal-downloader-args\u53c2\u6570\u5c06\u8fd9\u4e9b\u53c2\u6570\u63d0\u4f9b\u7ed9\u5916\u90e8\u4e0b\u8f7d\u7a0b\u5e8f\u3002\n-a\uff0c--\u6279\u5904\u7406\u6587\u4ef6\u5305\u542b\u8981\u4e0b\u8f7d\u7684URL\u7684\u6587\u4ef6(&#39\uff1b-&#39\uff1b\u5bf9\u4e8e\u6807\u51c6\u8f93\u5165)\uff0c\u6bcf\u884c\u4e00\u4e2aURL\u3002\u4ee5&#39\uff1b#&#39\uff1b\u5f00\u5934\u7684\u884c\n--WRITE-SUB WRITE\u5b57\u5e55\u6587\u4ef6--WRITE-AUTO-SUB WRITE\u81ea\u52a8\u751f\u6210\u7684\u5b57\u5e55\u6587\u4ef6(\u4ec5\u9650YouTube)--ALL-SUBS\u4e0b\u8f7d\u89c6\u9891\u7684\u6240\u6709\u53ef\u7528\u5b57\u5e55--LIST-SUBS\u5217\u51fa\u89c6\u9891\u7684\u6240\u6709\u53ef\u7528\u5b57\u5e55\u683c\u5f0f\uff0c\u63a5\u53d7\u683c\u5f0f\u9996\u9009\u9879\uff0c\u4f8b\u5982\uff1a&#34\uff1bSRT&#34\uff1b\u6216&#34\uff1bASS/SRT/BEST&#34\uff1b--SUB-LANG\u8981\u4e0b\u8f7d\u7684\u5b57\u5e55\u7684\u8bed\u8a00(\u53ef\u9009)\uff0c\u7528\u9017\u53f7\u5206\u9694\uff0c\u53ef\u7528\u8bed\u8a00\u6807\u7b7e\u4f7f\u7528-LIST-SUBS\u3002\n-u\uff0c--\u7528\u6237\u540d\u7528\u6237\u540d\u4f7f\u7528\u6b64\u5e10\u6237ID\u767b\u5f55-p\uff0c--\u5bc6\u7801\u5bc6\u7801\u5e10\u6237\u5bc6\u7801\u3002\u5982\u679c\u7701\u7565\u6b64\u9009\u9879\uff0cYouTube-DLC\u5c06\u4ea4\u4e92\u8be2\u95ee\u3002-2\uff0c--\u53cc\u56e0\u7d20\u53cc\u56e0\u7d20\u9a8c\u8bc1\u7801-n\uff0c--netrc\u4f7f\u7528.netrc\u9a8c\u8bc1\u6570\u636e--\u89c6\u9891\u5bc6\u7801(Vimeo\uff0cSmotri\uff0cYouku)\u3002\n--ap-mso MSO Adobe Pass\u591a\u7cfb\u7edf\u8fd0\u8425\u5546(TV\u63d0\u4f9b\u5546)\u6807\u8bc6\u7b26\uff0c\u4f7f\u7528--ap-list-mso\u67e5\u770b\u53ef\u7528MSO\u5217\u8868--ap-username\u7528\u6237\u540d\u591a\u7cfb\u7edf\u8fd0\u8425\u5546\u5e10\u6237\u767b\u5f55--ap-password\u5bc6\u7801\u591a\u7cfb\u7edf\u8fd0\u8425\u5546\u5e10\u6237\u5bc6\u7801\u3002\u5982\u679c\u7701\u7565\u6b64\u9009\u9879\uff0cYouTube-DLC\u5c06\u4ea4\u4e92\u8be2\u95ee\u3002--ap-list-mso\u5217\u51fa\u6240\u6709\u652f\u6301\u7684\u591a\u7cfb\u7edf\u64cd\u4f5c\u7b26\u3002\n-x\uff0c--Extract-dio\u5c06\u89c6\u9891\u6587\u4ef6\u8f6c\u6362\u4e3a\u7eaf\u97f3\u9891\u6587\u4ef6(\u9700\u8981ffmpeg\u6216avconv\u548cffbe\u6216avbe)--\u97f3\u9891\u683c\u5f0f\u6307\u5b9a\u97f3\u9891\u683c\u5f0f\uff1a&#34\uff1bBEST&#34\uff1b\uff0c&#34\uff1bAAC&#34\uff1b\uff0c&#34\uff1bmp3&#34\uff1b\uff0c&#34\uff1bm4a&#34\uff1b\uff0c&#34\uff1bopus&#34\uff1b\uff0c&#34\uff1bVorbis&#34\uff1b\u6216&#34\uff1bwav&#34\uff1b\uff1b&#34\uff1b\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cBest&#34\uff1b\uff1b\u65e0-x\u6548\u679c--\u97f3\u8d28\u6307\u5b9affmpeg/avconv\u97f3\u8d28\uff0cVBR\u6216\u7279\u5b9a\u7801\u7387\u5982128K(\u9ed8\u8ba4\u4e3a5)\u63d2\u51650-9(\u8f83\u597d)\u52309(\u8f83\u5dee)\u4e4b\u95f4\u7684\u503c--remux-video\u683c\u5f0f\u5fc5\u8981\u65f6\u5c06\u89c6\u9891\u91cd\u65b0\u590d\u7528\u4e3a\u53e6\u4e00\u79cd\u5bb9\u5668\u683c\u5f0f(\u76ee\u524d\u652f\u6301\uff1amp4|mkv\uff0c\u76ee\u6807\u5bb9\u5668\u683c\u5f0f\u5fc5\u987b\u652f\u6301\u89c6\u97f3\u9891\u7f16\u7801\uff0c\u91cd\u590d\u7528\u53ef\u80fd\u5931\u8d25)--recde-\u89c6\u9891\u683c\u5f0f\uff0c\u5fc5\u8981\u65f6\u5c06\u89c6\u9891\u7f16\u7801\u4e3a\u53e6\u4e00\u79cd\u683c\u5f0f(\u76ee\u524d\u652f\u6301\uff1amp4|flv|ogg|webm|mkv|avi)--\u540e\u5904\u7406\u5668-args\u5c06\u8fd9\u4e9b\u53c2\u6570\u4ea4\u7ed9\u540e\u5904\u7406\u5668-k\uff0c--Keep--\u89c6\u9891\u540e\u5904\u7406\u540e\u5c06\u89c6\u9891\u6587\u4ef6\u4fdd\u7559\u5728\u78c1\u76d8\u4e0a\uff1b\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u89c6\u9891\u88ab\u64e6\u9664--\u65e0\u540e\u671f\u8986\u76d6\u4e0d\u4f1a\u8986\u76d6\u540e\u671f\u5904\u7406\u6587\u4ef6\uff1b\u540e\u671f\u5904\u7406\u6587\u4ef6\u9ed8\u8ba4\u88ab\u8986\u76d6--Embed-Subs\u5728\u89c6\u9891\u4e2d\u5d4c\u5165\u5b57\u5e55(\u4ec5\u9002\u7528\u4e8eMP4\u3001WebM\u548cMKV\u89c6\u9891)--Embed-\u7f29\u7565\u56fe\u5728\u97f3\u9891\u4e2d\u5d4c\u5165\u7f29\u7565\u56fe\u4f5c\u4e3a\u5c01\u9762\u827a\u672f--add-metadata\u5c06\u5143\u6570\u636e\u5199\u5165\u89c6\u9891\u6587\u4ef6--\u6807\u9898\u5143\u6570\u636e\u683c\u5f0f\u4ece\u89c6\u9891\u6807\u9898\u89e3\u6790\u5176\u4ed6\u5143\u6570\u636e\uff0c\u5982\u6b4c\u66f2\u6807\u9898/\u827a\u672f\u5bb6\u3002\u683c\u5f0f\u8bed\u6cd5\u4e0e--output\u76f8\u540c\u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5177\u6709\u547d\u540d\u6355\u83b7\u7ec4\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u89e3\u6790\u7684\u53c2\u6570\u5c06\u66ff\u6362\u73b0\u6709\u503c\u3002\u793a\u4f8b\uff1a--METADATA-FROM-TITLE&#34\uff1b%(\u827a\u672f\u5bb6)s-%(TITLE)s&#34\uff1b\u4e0e\u9177\u73a9\u4e50\u56ed&#34\uff1b\u8fd9\u6837\u7684\u6807\u9898\u5339\u914d\u3002\u793a\u4f8b(Regex)\uff1a--\u6807\u9898\u4e2d\u7684\u5143\u6570\u636e&#34\uff1b(\uff1fp&lt\uff1b\u827a\u672f\u5bb6&&gt;\uff1b.+\uff1f)-(\uff1fp&lt\uff1b\u6807\u9898&&gt;\uff1b.+)&#34\uff1b--xattrs\u5c06\u5143\u6570\u636e\u5199\u5165\u89c6\u9891\u6587\u4ef6\u7684xattrs(\u4f7f\u7528\u90fd\u67cf\u6797\u6838\u5fc3\u548cxdg\u6807\u51c6)--\u4fee\u6b63\u7b56\u7565\u81ea\u52a8\u66f4\u6b63\u6587\u4ef6\u7684\u5df2\u77e5\u9519\u8bef\u3002Never(\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c)\u3001WARN(\u4ec5\u53d1\u51fa\u8b66\u544a)\u3001DETECT_OR_WARN(\u9ed8\u8ba4\u8bbe\u7f6e\uff1b\u5982\u679c\u53ef\u4ee5\u4fee\u590d\u6587\u4ef6\uff0c\u5219\u6267\u884cWARN)--PERFER-avconv\u9996\u9009avconv\u800c\u4e0d\u662fffmpeg\u8fd0\u884c\u540e\u5904\u7406\u5668--PERFER-ffmpeg\u9996\u9009ffmpeg\u800c\u4e0d\u662favconv\u8fd0\u884c\u540e\u5904\u7406\u5668(\u9ed8\u8ba4)--ffmpeg-ffmpeg/avconv\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u4f4d\u7f6e\u8def\u5f84\u4f4d\u7f6e\uff1b\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u8def\u5f84\u6216\u5176\u5305\u542b\u76ee\u5f55\u7684\u8def\u5f84\u3002--exec cmd\u5728\u4e0b\u8f7d\u548c\u540e\u5904\u7406\u4e4b\u540e\u5bf9\u6587\u4ef6\u6267\u884c\u547d\u4ee4\uff0c\u7c7b\u4f3c\u4e8efind&#39\uff1bs-exec\u8bed\u6cd5\u3002\u793a\u4f8b\uff1a--exec&#39\uff1badb Push{}/sdcard/Music/&amp\uff1b&amp\uff1brm{}&39\uff1b--Convert-subs\u683c\u5f0f\u5c06\u5b57\u5e55\u8f6c\u6362\u4e3a\u5176\u4ed6\u683c\u5f0f(\u76ee\u524d\u652f\u6301\uff1aSRT|ASS|VTT|LRC)\u3002\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u5c06\u4efb\u4f55\u53d7\u652f\u6301\u7684\u547d\u4ee4\u884c\u9009\u9879\u653e\u5165\u914d\u7f6e\u6587\u4ef6\u6765\u914d\u7f6eYouTube-DLC\u3002\u5728Linux\u548cMacOS\u4e0a\uff0c\u7cfb\u7edf\u8303\u56f4\u7684\u914d\u7f6e\u6587\u4ef6\u4f4d\u4e8e/etc/youtube-dlc.conf\uff0c\u7528\u6237\u8303\u56f4\u7684\u914d\u7f6e\u6587\u4ef6\u4f4d\u4e8e~/.config/youtube-dlc/config\u3002\u5728Windows\u4e0a\uff0c\u7528\u6237\u8303\u56f4\u7684\u914d\u7f6e\u6587\u4ef6\u4f4d\u7f6e\u4e3a%appdata%\\youtube-dlc\\config.txt\u6216C\uff1a\\Users\\&lt\uff1b\u7528\u6237\u540d&gt\uff1b\\youtube-dlc.conf\u3002\u8bf7\u6ce8\u610f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u914d\u7f6e\u6587\u4ef6\u53ef\u80fd\u4e0d\u5b58\u5728\uff0c\u56e0\u6b64\u60a8\u53ef\u80fd\u9700\u8981\u81ea\u5df1\u521b\u5efa\u5b83\u3002\n\u4f8b\u5982\uff0c\u4f7f\u7528\u4ee5\u4e0b\u914d\u7f6e\u6587\u4ef6YouTube-DLC\u5c06\u59cb\u7ec8\u63d0\u53d6\u97f3\u9891\uff0c\u800c\u4e0d\u662f\u590d\u5236mtime\uff0c\u4f7f\u7528\u4ee3\u7406\u5e76\u5c06\u6240\u6709\u89c6\u9891\u4fdd\u5b58\u5728\u60a8\u7684home\u76ee\u5f55\u4e0b\u7684Movies\u76ee\u5f55\u4e0b\uff1a\n#\u4ee5#\u5f00\u5934\u7684\u884c\u662f\u6ce8\u91ca#Always Extract Audio-x#\u8bf7\u52ff\u590d\u5236mtime--no-mtime#\u4f7f\u7528\u6b64\u4ee3\u7406--proxy 127.0.0.1\uff1a3128#\u4fdd\u5b58\u4e3b\u76ee\u5f55\u4e2dMovies\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u89c6\u9891-o~/Movies/%(Title)s.%(Ext)s\u3002\n\u8bf7\u6ce8\u610f\uff0c\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u9009\u9879\u6b63\u597d\u4e0e\u5e38\u89c4\u547d\u4ee4\u884c\u8c03\u7528\u4e2d\u4f7f\u7528\u7684\u9009\u9879aka\u5f00\u5173\u76f8\u540c\uff0c\u56e0\u6b64\u5728-\u6216--\u4e4b\u540e\u4e0d\u80fd\u6709\u7a7a\u683c\uff0c\u4f8b\u5982-o\u6216--proxy\uff0c\u800c\u4e0d\u80fd\u6709-o\u6216--proxy\u3002\n\u5982\u679c\u60a8\u60f3\u8981\u7981\u7528\u7279\u5b9aYouTube-DLC\u8fd0\u884c\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528--Ignore-config\u3002\n\u5982\u679c\u60a8\u60f3\u8981\u4e3a\u7279\u5b9a\u7684YouTube-DLC\u8fd0\u884c\u4f7f\u7528\u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528--config-location\u3002\n\u60a8\u53ef\u80fd\u8fd8\u5e0c\u671b\u4e3a\u652f\u6301\u8eab\u4efd\u9a8c\u8bc1\u7684\u63d0\u53d6\u5668\u914d\u7f6e\u81ea\u52a8\u51ed\u636e\u5b58\u50a8(\u901a\u8fc7\u63d0\u4f9b\u5e26\u6709--username\u548c--password\u7684\u767b\u5f55\u548c\u5bc6\u7801)\uff0c\u4ee5\u4fbf\u4e0d\u5728\u6bcf\u6b21\u6267\u884cYouTube-DLC\u65f6\u5c06\u51ed\u636e\u4f5c\u4e3a\u547d\u4ee4\u884c\u53c2\u6570\u4f20\u9012\uff0c\u5e76\u9632\u6b62\u5728shell\u547d\u4ee4\u5386\u53f2\u8bb0\u5f55\u4e2d\u8ddf\u8e2a\u7eaf\u6587\u672c\u5bc6\u7801\u3002\u60a8\u53ef\u4ee5\u5728\u6bcf\u4e2a\u89e3\u538b\u7a0b\u5e8f\u7684\u57fa\u7840\u4e0a\u4f7f\u7528.netrc\u6587\u4ef6\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\u4e3a\u6b64\uff0c\u60a8\u9700\u8981\u5728$HOME\u4e2d\u521b\u5efa\u4e00\u4e2a.netrc\u6587\u4ef6\uff0c\u5e76\u5c06\u8bfb/\u5199\u6743\u9650\u9650\u5236\u4e3a\u4ec5\u9650\u60a8\uff1a\n\u4e4b\u540e\uff0c\u60a8\u53ef\u4ee5\u6309\u4ee5\u4e0b\u683c\u5f0f\u6dfb\u52a0\u89e3\u538b\u7a0b\u5e8f\u7684\u51ed\u636e\uff0c\u5176\u4e2d\uff0cExtractor\u662f\u5c0f\u5199\u7684\u89e3\u538b\u7a0b\u5e8f\u540d\u79f0\uff1a\n\u8981\u4f7f\u7528.netrc\u6587\u4ef6\u6fc0\u6d3b\u8eab\u4efd\u9a8c\u8bc1\uff0c\u60a8\u5e94\u8be5\u5c06--netrc\u4f20\u9012\u7ed9YouTube-DLC\u6216\u5c06\u5176\u653e\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u3002\n\u5728Windows\u4e0a\uff0c\u60a8\u53ef\u80fd\u8fd8\u9700\u8981\u624b\u52a8\u8bbe\u7f6e%HOME%\u73af\u5883\u53d8\u91cf\u3002\u4f8b\u5982\uff1a\n\u57fa\u672c\u7528\u6cd5\u662f\u5728\u4e0b\u8f7d\u5355\u4e2a\u6587\u4ef6\u65f6\u4e0d\u8bbe\u7f6e\u4efb\u4f55\u6a21\u677f\u53c2\u6570\uff0c\u5982youtube-dlc-o comy_Video.flv&#34\uff1bhttps://some/video&#34\uff1b.\u3002\u4f46\u662f\uff0c\u5b83\u53ef\u80fd\u5305\u542b\u4e0b\u8f7d\u6bcf\u4e2a\u89c6\u9891\u65f6\u5c06\u66ff\u6362\u7684\u7279\u6b8a\u5e8f\u5217\u3002\u53ef\u4ee5\u6839\u636ePython\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u64cd\u4f5c\u6765\u683c\u5f0f\u5316\u7279\u6b8a\u5e8f\u5217\u3002\u4f8b\u5982\uff0c%(\u540d\u79f0)s\u6216%(\u540d\u79f0)05d\u3002\u4e3a\u4e86\u6e05\u695a\u8d77\u89c1\uff0c\u8fd9\u662f\u4e00\u4e2a\u767e\u5206\u53f7\uff0c\u540e\u8ddf\u62ec\u53f7\u4e2d\u7684\u540d\u79f0\uff0c\u7136\u540e\u662f\u683c\u5f0f\u5316\u64cd\u4f5c\u3002\u5141\u8bb8\u7684\u540d\u79f0\u968f\u9644\u3002\n.", "note_en": "youtube-dlc is a fork of youtube-dl with the intention of getting features tested by the community merged in the tool faster, since youtube-dl&#39;s development seems to be slowing down. ( https://web.archive.org/web/20201014194602/https://github.com/ytdl-org/youtube-dl/issues/26462)\n             Or simply execute the  make_win.bat if pyinstaller is installed.There will be a  youtube-dlc.exe in  /dist\n New way to build Windows is to use  python pyinst.py (please use python3 64Bit) For 32Bit Version use a 32Bit Version of python (3 preferred here as well) and run  python pyinst32.py\n For Unix:You will need the required build tools python, make (GNU), pandoc, zip, nosetests Then simply type this\n   DO NOT UPDATE using  -U ! instead download binaries again or when installed with pip use a described above when installing. I will add some memorable short links to the binaries so you can download them easier.\n  youtube-dlc is a command-line program to download videos from YouTube.com and a few more sites. It requires the Python interpreter, version 2.6, 2.7, or 3.2+, and it is not platform specific. It should work on your Unix box, on Windows or on macOS. It is released to the public domain, which means you can modify it, redistribute it or use it however you like.\n   -h, --help Print this help text and exit--version Print program version and exit-U, --update Update this program to latest version. Make sure that you have sufficient permissions (run with sudo if needed)-i, --ignore-errors Continue on download errors, for example to skip unavailable videos in a playlist--abort-on-error Abort downloading of further videos (in the playlist or the command line) if an error occurs--dump-user-agent Display the current browser identification--list-extractors List all supported extractors--extractor-descriptions Output descriptions of all supported extractors--force-generic-extractor Force extraction to use the generic extractor--default-search PREFIX Use this prefix for unqualified URLs. For example &#34;gvsearch2:&#34; downloads two videos from google videos for youtube-dlc &#34;large apple&#34;. Use the value &#34;auto&#34; to let youtube-dlc guess (&#34;auto_warning&#34; to emit a warning when guessing). &#34;error&#34; just throws an error. The default value &#34;fixup_error&#34; repairs broken URLs, but emits an error if this is not possible instead of searching.--ignore-config Do not read configuration files. When given in the global configuration file /etc/youtube-dlc.conf: Do not read the user configuration in ~/.config/youtube- dlc/config (%APPDATA%/youtube- dlc/config.txt on Windows)--config-location PATH Location of the configuration file; either the path to the config or its containing directory.--flat-playlist Do not extract the videos of a playlist, only list them.--mark-watched Mark videos watched (YouTube only)--no-mark-watched Do not mark videos watched (YouTube only)--no-color Do not emit color codes in output\n  --proxy URL Use the specified HTTP/HTTPS/SOCKS proxy. To enable SOCKS proxy, specify a proper scheme. For example socks5://127.0.0.1:1080/. Pass in an empty string (--proxy &#34;&#34;) for direct connection--socket-timeout SECONDS Time to wait before giving up, in seconds--source-address IP Client-side IP address to bind to-4, --force-ipv4 Make all connections via IPv4-6, --force-ipv6 Make all connections via IPv6\n  --geo-verification-proxy URL Use this proxy to verify the IP address for some geo-restricted sites. The default proxy specified by --proxy (or none, if the option is not present) is used for the actual downloading.--geo-bypass Bypass geographic restriction via faking X-Forwarded-For HTTP header--no-geo-bypass Do not bypass geographic restriction via faking X-Forwarded-For HTTP header--geo-bypass-country CODE Force bypass geographic restriction with explicitly provided two-letter ISO 3166-2 country code--geo-bypass-ip-block IP_BLOCK Force bypass geographic restriction with explicitly provided IP block in CIDR notation\n  --playlist-start NUMBER Playlist video to start at (default is 1)--playlist-end NUMBER Playlist video to end at (default is last)--playlist-items ITEM_SPEC Playlist video items to download. Specify indices of the videos in the playlist separated by commas like: &#34;--playlist-items 1,2,5,8&#34; if you want to download videos indexed 1, 2, 5, 8 in the playlist. You can specify range: &#34;--playlist-items 1-3,7,10-13&#34;, it will download the videos at index 1, 2, 3, 7, 10, 11, 12 and 13.--match-title REGEX Download only matching titles (regex or caseless sub-string)--reject-title REGEX Skip download for matching titles (regex or caseless sub-string)--max-downloads NUMBER Abort after downloading NUMBER files--min-filesize SIZE Do not download any videos smaller than SIZE (e.g. 50k or 44.6m)--max-filesize SIZE Do not download any videos larger than SIZE (e.g. 50k or 44.6m)--date DATE Download only videos uploaded in this date--datebefore DATE Download only videos uploaded on or before this date (i.e. inclusive)--dateafter DATE Download only videos uploaded on or after this date (i.e. inclusive)--min-views COUNT Do not download any videos with less than COUNT views--max-views COUNT Do not download any videos with more than COUNT views--match-filter FILTER Generic video filter. Specify any key (see the &#34;OUTPUT TEMPLATE&#34; for a list of available keys) to match if the key is present, !key to check if the key is not present, key &gt; NUMBER (like &#34;comment_count &gt; 12&#34;, also works with &gt;=, &lt;, &lt;=, !=, =) to compare against a number, key = &#39;LITERAL&#39; (like &#34;uploader = &#39;Mike Smith&#39;&#34;, also works with !=) to match against a string literal and &amp; to require multiple matches. Values which are not known are excluded unless you put a question mark (?) after the operator. For example, to only match videos that have been liked more than 100 times and disliked less than 50 times (or the dislike functionality is not available at the given service), but who also have a description, use --match-filter &#34;like_count &gt; 100 &amp; dislike_count &lt;? 50 &amp; description&#34; .--no-playlist Download only the video, if the URL refers to a video and a playlist.--yes-playlist Download the playlist, if the URL refers to a video and a playlist.--age-limit YEARS Download only videos suitable for the given age--download-archive FILE Download only videos not listed in the archive file. Record the IDs of all downloaded videos in it.--include-ads Download advertisements as well (experimental)\n  -r, --limit-rate RATE Maximum download rate in bytes per second (e.g. 50K or 4.2M)-R, --retries RETRIES Number of retries (default is 10), or &#34;infinite&#34;.--fragment-retries RETRIES Number of retries for a fragment (default is 10), or &#34;infinite&#34; (DASH, hlsnative and ISM)--skip-unavailable-fragments Skip unavailable fragments (DASH, hlsnative and ISM)--abort-on-unavailable-fragment Abort downloading when some fragment is not available--keep-fragments Keep downloaded fragments on disk after downloading is finished; fragments are erased by default--buffer-size SIZE Size of download buffer (e.g. 1024 or 16K) (default is 1024)--no-resize-buffer Do not automatically adjust the buffer size. By default, the buffer size is automatically resized from an initial value of SIZE.--http-chunk-size SIZE Size of a chunk for chunk-based HTTP downloading (e.g. 10485760 or 10M) (default is disabled). May be useful for bypassing bandwidth throttling imposed by a webserver (experimental)--playlist-reverse Download playlist videos in reverse order--playlist-random Download playlist videos in random order--xattr-set-filesize Set file xattribute ytdl.filesize with expected file size--hls-prefer-native Use the native HLS downloader instead of ffmpeg--hls-prefer-ffmpeg Use ffmpeg instead of the native HLS downloader--hls-use-mpegts Use the mpegts container for HLS videos, allowing to play the video while downloading (some players may not be able to play it)--external-downloader COMMAND Use the specified external downloader. Currently supports aria2c,avconv,axel,curl,ffmpeg,httpie,wget--external-downloader-args ARGS Give these arguments to the external downloader\n  -a, --batch-file FILE File containing URLs to download (&#39;-&#39; for stdin), one URL per line. Lines starting with &#39;#&#39;, &#39;;&#39; or &#39;]&#39; are considered as comments and ignored.--id Use only video ID in file name-o, --output TEMPLATE Output filename template, see the &#34;OUTPUT TEMPLATE&#34; for all the info--autonumber-start NUMBER Specify the start value for %(autonumber)s (default is 1)--restrict-filenames Restrict filenames to only ASCII characters, and avoid &#34;&amp;&#34; and spaces in filenames-w, --no-overwrites Do not overwrite files-c, --continue Force resume of partially downloaded files. By default, youtube-dlc will resume downloads if possible.--no-continue Do not resume partially downloaded files (restart from beginning)--no-part Do not use .part files - write directly into output file--no-mtime Do not use the Last-modified header to set the file modification time--write-description Write video description to a .description file--write-info-json Write video metadata to a .info.json file--write-annotations Write video annotations to a .annotations.xml file--load-info-json FILE JSON file containing the video information (created with the &#34;--write-info-json&#34; option)--cookies FILE File to read cookies from and dump cookie jar in--cache-dir DIR Location in the filesystem where youtube- dlc can store some downloaded information permanently. By default $XDG_CACHE_HOME/youtube-dlc or ~/.cache/youtube-dlc . At the moment, only YouTube player files (for videos with obfuscated signatures) are cached, but that may change.--no-cache-dir Disable filesystem caching--rm-cache-dir Delete all filesystem cache files--trim-file-name Limit the filename length (extension excluded)\n  --write-thumbnail Write thumbnail image to disk--write-all-thumbnails Write all thumbnail image formats to disk--list-thumbnails Simulate and list all available thumbnail formats\n  -q, --quiet Activate quiet mode--no-warnings Ignore warnings-s, --simulate Do not download the video and do not write anything to disk--skip-download Do not download the video-g, --get-url Simulate, quiet but print URL-e, --get-title Simulate, quiet but print title--get-id Simulate, quiet but print id--get-thumbnail Simulate, quiet but print thumbnail URL--get-description Simulate, quiet but print video description--get-duration Simulate, quiet but print video length--get-filename Simulate, quiet but print output filename--get-format Simulate, quiet but print output format-j, --dump-json Simulate, quiet but print JSON information. See the &#34;OUTPUT TEMPLATE&#34; for a description of available keys.-J, --dump-single-json Simulate, quiet but print JSON information for each command-line argument. If the URL refers to a playlist, dump the whole playlist information in a single line.--print-json Be quiet and print the video information as JSON (video is still being downloaded).--newline Output progress bar as new lines--no-progress Do not print progress bar--console-title Display progress in console titlebar-v, --verbose Print various debugging information--dump-pages Print downloaded pages encoded using base64 to debug problems (very verbose)--write-pages Write downloaded intermediary pages to files in the current directory to debug problems--print-traffic Display sent and read HTTP traffic-C, --call-home Contact the youtube-dlc server for debugging--no-call-home Do NOT contact the youtube-dlc server for debugging\n  --encoding ENCODING Force the specified encoding (experimental)--no-check-certificate Suppress HTTPS certificate validation--prefer-insecure Use an unencrypted connection to retrieve information about the video. (Currently supported only for YouTube)--user-agent UA Specify a custom user agent--referer URL Specify a custom referer, use if the video access is restricted to one domain--add-header FIELD:VALUE Specify a custom HTTP header and its value, separated by a colon &#39;:&#39;. You can use this option multiple times--bidi-workaround Work around terminals that lack bidirectional text support. Requires bidiv or fribidi executable in PATH--sleep-interval SECONDS Number of seconds to sleep before each download when used alone or a lower bound of a range for randomized sleep before each download (minimum possible number of seconds to sleep) when used along with --max-sleep-interval.--max-sleep-interval SECONDS Upper bound of a range for randomized sleep before each download (maximum possible number of seconds to sleep). Must only be used along with --min-sleep-interval.--sleep-subtitles Enforce sleep interval on subtitles as well.\n  -f, --format FORMAT Video format code, see the &#34;FORMAT SELECTION&#34; for all the info--all-formats Download all available video formats--prefer-free-formats Prefer free video formats unless a specific one is requested-F, --list-formats List all available formats of requested videos--youtube-skip-dash-manifest Do not download the DASH manifests and related data on YouTube videos--youtube-skip-hls-manifest Do not download the HLS manifests and related data on YouTube videos--merge-output-format FORMAT If a merge is required (e.g. bestvideo+bestaudio), output to given container format. One of mkv, mp4, ogg, webm, flv. Ignored if no merge is required\n  --write-sub Write subtitle file--write-auto-sub Write automatically generated subtitle file (YouTube only)--all-subs Download all the available subtitles of the video--list-subs List all available subtitles for the video--sub-format FORMAT Subtitle format, accepts formats preference, for example: &#34;srt&#34; or &#34;ass/srt/best&#34;--sub-lang LANGS Languages of the subtitles to download (optional) separated by commas, use --list- subs for available language tags\n  -u, --username USERNAME Login with this account ID-p, --password PASSWORD Account password. If this option is left out, youtube-dlc will ask interactively.-2, --twofactor TWOFACTOR Two-factor authentication code-n, --netrc Use .netrc authentication data--video-password PASSWORD Video password (vimeo, smotri, youku)\n  --ap-mso MSO Adobe Pass multiple-system operator (TV provider) identifier, use --ap-list-mso for a list of available MSOs--ap-username USERNAME Multiple-system operator account login--ap-password PASSWORD Multiple-system operator account password. If this option is left out, youtube-dlc will ask interactively.--ap-list-mso List all supported multiple-system operators\n  -x, --extract-audio Convert video files to audio-only files (requires ffmpeg or avconv and ffprobe or avprobe)--audio-format FORMAT Specify audio format: &#34;best&#34;, &#34;aac&#34;, &#34;flac&#34;, &#34;mp3&#34;, &#34;m4a&#34;, &#34;opus&#34;, &#34;vorbis&#34;, or &#34;wav&#34;; &#34;best&#34; by default; No effect without -x--audio-quality QUALITY Specify ffmpeg/avconv audio quality, insert a value between 0 (better) and 9 (worse) for VBR or a specific bitrate like 128K (default 5)--remux-video FORMAT Remux the video to another container format if necessary (currently supported: mp4|mkv, target container format must support video / audio encoding, remuxing may fail)--recode-video FORMAT Encode the video to another format if necessary (currently supported: mp4|flv|ogg|webm|mkv|avi)--postprocessor-args ARGS Give these arguments to the postprocessor-k, --keep-video Keep the video file on disk after the post- processing; the video is erased by default--no-post-overwrites Do not overwrite post-processed files; the post-processed files are overwritten by default--embed-subs Embed subtitles in the video (only for mp4, webm and mkv videos)--embed-thumbnail Embed thumbnail in the audio as cover art--add-metadata Write metadata to the video file--metadata-from-title FORMAT Parse additional metadata like song title / artist from the video title. The format syntax is the same as --output. Regular expression with named capture groups may also be used. The parsed parameters replace existing values. Example: --metadata-from- title &#34;%(artist)s - %(title)s&#34; matches a title like &#34;Coldplay - Paradise&#34;. Example (regex): --metadata-from-title &#34;(?P&lt;artist&gt;.+?) - (?P&lt;title&gt;.+)&#34;--xattrs Write metadata to the video file&#39;s xattrs (using dublin core and xdg standards)--fixup POLICY Automatically correct known faults of the file. One of never (do nothing), warn (only emit a warning), detect_or_warn (the default; fix file if we can, warn otherwise)--prefer-avconv Prefer avconv over ffmpeg for running the postprocessors--prefer-ffmpeg Prefer ffmpeg over avconv for running the postprocessors (default)--ffmpeg-location PATH Location of the ffmpeg/avconv binary; either the path to the binary or its containing directory.--exec CMD Execute a command on the file after downloading and post-processing, similar to find&#39;s -exec syntax. Example: --exec &#39;adb push {} /sdcard/Music/ &amp;&amp; rm {}&#39;--convert-subs FORMAT Convert the subtitles to other format (currently supported: srt|ass|vtt|lrc)\n    You can configure youtube-dlc by placing any supported command line option to a configuration file. On Linux and macOS, the system wide configuration file is located at  /etc/youtube-dlc.conf and the user wide configuration file at  ~/.config/youtube-dlc/config. On Windows, the user wide configuration file locations are  %APPDATA%\\youtube-dlc\\config.txt or  C:\\Users\\&lt;user name&gt;\\youtube-dlc.conf. Note that by default configuration file may not exist so you may need to create it yourself.\n For example, with the following configuration file youtube-dlc will always extract the audio, not copy the mtime, use a proxy and save all videos under  Movies directory in your home directory:\n # Lines starting with # are comments# Always extract audio-x# Do not copy the mtime--no-mtime# Use this proxy--proxy 127.0.0.1:3128# Save all videos under Movies directory in your home directory-o ~/Movies/%(title)s.%(ext)s\n Note that options in configuration file are just the same options aka switches used in regular command line calls thus there  must be no whitespace after  - or  --, e.g.  -o or  --proxy but not  - o or  -- proxy.\n You can use  --ignore-config if you want to disable the configuration file for a particular youtube-dlc run.\n You can also use  --config-location if you want to use custom configuration file for a particular youtube-dlc run.\n  You may also want to configure automatic credentials storage for extractors that support authentication (by providing login and password with  --username and  --password) in order not to pass credentials as command line arguments on every youtube-dlc execution and prevent tracking plain text passwords in the shell command history. You can achieve this using a   .netrc file on a per extractor basis. For that you will need to create a  .netrc file in your  $HOME and restrict permissions to read/write by only you:\n  After that you can add credentials for an extractor in the following format, where  extractor is the name of the extractor in lowercase:\n    To activate authentication with the  .netrc file you should pass  --netrc to youtube-dlc or place it in the  configuration file.\n On Windows you may also need to setup the  %HOME% environment variable manually. For example:\n     The basic usage is not to set any template arguments when downloading a single file, like in  youtube-dlc -o funny_video.flv &#34;https://some/video&#34;. However, it may contain special sequences that will be replaced when downloading each video. The special sequences may be formatted according to  python string formatting operations. For example,  %(NAME)s or  %(NAME)05d. To clarify, that is a percent symbol followed by a name in parentheses, followed by formatting operations. Allowed names along \n......", "posttime": "2020-10-29 10:31:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "youtube,github,maintained,\u89c6\u9891", "title": "\u79ef\u6781\u7ef4\u62a4YouTube-DL GitHub\u56de\u8d2d", "title_en": "Actively maintained YouTube-DL GitHub repo", "transed": 1, "url": "https://github.com/blackjack4494/yt-dlc", "via": "", "real_tags": ["youtube", "github", "\u89c6\u9891"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1031882, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u7684\u5de5\u4f5c\u5e26\u7ed9\u6211\u5f88\u591a\u8f6f\u4ef6\u6b63\u786e\u6027\u6280\u672f\uff0c\u6bd4\u5982\u7c7b\u578b\u7406\u8bba\u3001\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1(TDD)\u548c\u5f62\u5f0f\u5316\u65b9\u6cd5\u3002\u5468\u56f4\u7684\u793e\u533a\u90fd\u6709\u540c\u6837\u7684\u95ee\u9898\uff1a\u4ed6\u4eec\u65e0\u6cd5\u8ba9\u4eba\u4eec\u4f7f\u7528\u8fd9\u4e9b\u6280\u672f\u3002\u4ed6\u4eec\u90fd\u4f1a\u95ee\u201c\u96be\u9053\u4eba\u4eec\u4e0d\u5173\u5fc3\u6b63\u786e\u7684\u8f6f\u4ef6\u5417\uff1f\u201d\u5bf9\u4e8e\u8fd9\u4e00\u70b9\uff0c\u4e1a\u5185\u4eba\u58eb\u901a\u5e38\u4f1a\u56de\u7b54\u201c\u7a0b\u5e8f\u5458\u4e0d\u5728\u4e4e\u6b63\u786e\u6027\uff0c\u4ed6\u4eec\u53ea\u5173\u5fc3\u628a\u5783\u573e\u94f2\u51fa\u6765\u8d5a\u94b1\uff01\u201d\n\u6211\u4ece\u6211\u8003\u5bdf\u8fc7\u7684\u6bcf\u4e2a\u793e\u533a\u90fd\u542c\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u5176\u4e2d\u8bb8\u591a\u793e\u533a\u5f7c\u6b64\u4e4b\u95f4\u5b58\u5728\u76f4\u63a5\u51b2\u7a81\u3002\u5951\u7ea6\u5f0f\u8bbe\u8ba1(Design By Contract)\u7684\u4e3b\u8981\u63a8\u5e7f\u8005\u4f2f\u7279\u5170\u00b7\u8fc8\u8036(Bertrand Meyer)1\u5199\u4e86\u4e00\u7bc7\u6587\u7ae0\u62a8\u51fb\u51fd\u6570\u5f0f\u7f16\u7a0b\uff0c\u800c\u8bb8\u591aTDD\u5021\u5bfc\u8005\u5219\u5b8c\u5168\u53cd\u5bf9\u5f62\u5f0f\u5316\u65b9\u6cd5\u3002\u8fd9\u4e9b\u793e\u533a\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u53ef\u4ee5\u6307\u7740\u5176\u4ed6\u793e\u533a\u8bf4\u201c\u4ed6\u4eec\u4e0d\u5728\u4e4e\u6b63\u786e\u6027\uff0c\u4ed6\u4eec\u53ea\u60f3\u628a\u5783\u573e\u94f2\u51fa\u53bb\u201d\uff0c\u800c\u90a3\u4e9b\u793e\u533a\u4e5f\u53ef\u4ee5\u5bf9\u4ed6\u4eec\u8bf4\u540c\u6837\u7684\u8bdd\u3002\u5bf9\u79f0\u6027\u5f88\u597d\uff0c\u4e0d\u662f\u5417\uff1f\n\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u6ca1\u6709\u770b\u5230\u66f4\u5927\u7684\u56fe\u666f\u3002\u5bf9\u4e3a\u4ec0\u4e48\u7a0b\u5e8f\u5458\u201c\u4e0d\u5728\u4e4e\u6b63\u786e\u6027\u201d\u7684\u89e3\u91ca\u4e0d\u5e94\u8be5\u4ec5\u4ec5\u662f\u4e8b\u540e\u7684\u5408\u7406\u5316\u3002\u5bf9\u4e8e\u4e3a\u4ec0\u4e48\u5927\u591a\u6570\u7a0b\u5e8f\u5458\u4f3c\u4e4e\u4e0d\u5173\u5fc3\u8f6f\u4ef6\u6b63\u786e\u6027\uff0c\u6211\u7684\u4e3b\u8981\u8bba\u70b9\u662f\uff1a\n\u6bcf\u5f53\u6211\u5728\u8ba8\u8bba\u4e2d\u63d0\u51fa\u8fd9\u4e2a\u95ee\u9898\u65f6\uff0c\u6211\u5f97\u5230\u7684\u7b54\u6848\u90fd\u662f\u4e00\u6837\u7684\uff1a\u6bcf\u4e2a\u4eba\u90fd\u8ba4\u4e3a\u6839\u7ba1\u66f4\u7cdf\u7cd5\uff0c\u6bcf\u5929\u6700\u591a\u6709\u4e00\u534a\u7684\u4eba\u4f7f\u7528\u7259\u7ebf\u3002\u90a3\u592a\u8352\u8c2c\u4e86!\u3002\u7528\u7259\u7ebf\u6e05\u6d01\u7259\u9f7f\u4e00\u5929\u5927\u6982\u9700\u8981\u4e09\u5206\u949f\u3002\u4f46\u4eba\u4eec\u4e0d\u8fd9\u4e48\u505a\u662f\u56e0\u4e3a\u5b83\u592a\u9ebb\u70e6\u3001\u592a\u70e6\u4eba\u3001\u592a\u4e0d\u65b9\u4fbf\u3002\u5982\u679c\u4eba\u4eec\u4e0d\u613f\u610f\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u4e8b\u60c5\u6765\u9632\u6b62\u4ed6\u4eec\u7684\u7259\u9f7f\u8150\u70c2\uff0c\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u6307\u671b\u4eba\u4eec\u4f7f\u7528\u607c\u4eba\u7684\u4e0d\u65b9\u4fbf\u7684\u5de5\u5177\u6765\u6539\u8fdb\u8f6f\u4ef6\u5462\uff1f\n\u6211\u6709\u4e00\u4e9b\u7eaf\u7cb9\u7684\u8f76\u4e8b\u8bc1\u636e\u652f\u6301\u8fd9\u4e00\u70b9\uff0c\u90a3\u5c31\u662f\u4e0e\u5176\u4ed6\u8bed\u8a00\u76f8\u6bd4\uff0c\u6211\u66f4\u559c\u6b22\u5728Ruby\u4e2d\u4f7f\u7528TDD\uff0c\u8fd9\u5b8c\u5168\u662f\u56e0\u4e3aRSpec\u3002RSpec\u662f\u6211\u4f7f\u7528\u8fc7\u7684\u6700\u4ee4\u4eba\u6109\u5feb\u7684\u5355\u5143\u6d4b\u8bd5\u5e93\u3002\u5b83\u5f88\u5bb9\u6613\u8bbe\u7f6e\uff0c\u5f88\u5bb9\u6613\u8c03\u6574\uff0c\u4e5f\u5f88\u5bb9\u6613\u8bfb\u5199\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u5927\u91cf\u7684Ruby\u5e93\uff0c\u5982factorybot\u548ccapybara\uff0c\u6765\u5904\u7406TDD\u5e26\u6765\u7684\u4e0d\u4fbf\u3002\u6211\u6ca1\u6709\u786e\u5207\u7684\u6570\u5b57\uff0c\u4f46\u6211\u63a8\u6d4b\u4f7f\u7528TDD\u7684Rails\u9879\u76ee\u6bd4\u4f7f\u7528\u5176\u4ed6Web\u6846\u67b6\u7684\u9879\u76ee\u6bd4\u4f8b\u8981\u9ad8\u5f97\u591a\u3002\u5f53\u7136\uff0c\u90e8\u5206\u539f\u56e0\u662f\u6587\u5316\uff0c\u4f46RSpec\u7684\u8d1f\u62c5\u80fd\u529b\u80af\u5b9a\u4f1a\u6709\u6240\u5e2e\u52a9\u3002\n\u6211\u4e5f\u770b\u5230\u6211\u7684\u5f88\u591a\u670b\u53cb\u5bf9\u6253\u5b57\u7cfb\u7edf\u66f4\u611f\u5174\u8da3\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5f00\u59cb\u4f7f\u7528Elm\u6216TypeScript\u3002\u5982\u679c\u4f60\u592a\u5728\u7ebf\u4e86\uff0c\u4f60\u53ef\u80fd\u770b\u8fc7\u62a8\u51fb\u8fd9\u4e24\u4e2a\u4eba\u7684\u6587\u7ae0\uff0c\u8981\u4e48\u662f\u4e0d\u5065\u5168\u7684(\u5728\u6253\u5b57\u7a3f\u7684\u60c5\u51b5\u4e0b)\uff0c\u8981\u4e48\u662f\u56e0\u4e3a\u7f3a\u5c11\u7c7b\u578b\u7c7b(\u5728Elm\u7684\u60c5\u51b5\u4e0b)\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u8fd9\u4e9b\u8bed\u8a00\u66f4\u591a\u5730\u9762\u5411UI/UX\uff0c\u5e76\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u5de5\u5177\u3002ELM\u4ee5\u5176\u7f16\u8bd1\u5668\u9519\u8bef\u6d88\u606f\u800c\u95fb\u540d\uff0c\u5e76\u4e14TypeScript\u5177\u6709\u5f88\u597d\u7684IDE\u96c6\u6210\u3002\u8fd9\u4e24\u4e2a\u56e0\u7d20\u5728\u7528\u6237\u91c7\u7528\u65b9\u9762\u90fd\u8d77\u7740\u91cd\u8981\u4f5c\u7528\u3002\u7136\u540e\uff0c\u8bb8\u591a\u4eba\u4ece\u8fd9\u4e24\u79cd\u8bed\u8a00\u8fc1\u79fb\u5230\u66f4\u201c\u6838\u5fc3\u201d\u7684\u7cfb\u7edf\uff0c\u5982PureScript\u6216Haskell\u3002\u6709\u7ecf\u9a8c\u7684\u4eba\u613f\u610f\u5fcd\u53d7\u66f4\u591a\u7684\u4e0d\u4fbf\uff0c\u4ee5\u6362\u53d6\u66f4\u591a\u7684\u6743\u529b\u3002\n\u8fd9\u79cd\u5bbd\u5bb9\u53ef\u80fd\u5c31\u662f\u4e3a\u4ec0\u4e48\u5185\u90e8\u4eba\u58eb\u4e0d\u8ba4\u4e3a\u4e0d\u4fbf\u662f\u4e00\u4e2a\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u800c\u66f4\u559c\u6b22\u201c\u66f4\u5bb9\u6613\u201d\u7684\u89e3\u91ca\uff0c\u6bd4\u5982\u5f00\u53d1\u4eba\u5458\u7684\u61d2\u60f0\u3002\u4f46\u5bf9\u4e8e\u521d\u5b66\u8005\u548c\u611f\u5174\u8da3\u7684\u5916\u6765\u8005\u6765\u8bf4\uff0c\u4e0d\u4fbf\u662f\u4e00\u4e2a\u4e25\u91cd\u7684\u969c\u788d\u3002\u5f53\u793e\u533a\u4e2d\u7684\u4e0d\u4fbf\u95ee\u9898\u6ca1\u6709\u5f97\u5230\u89e3\u51b3\uff0c\u751a\u81f3\u6ca1\u6709\u5f97\u5230\u627f\u8ba4\u65f6\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u4fe1\u53f7\uff0c\u8868\u660e\u793e\u533a\u5e76\u4e0d\u5173\u5fc3\u589e\u957f\u3002\u56e0\u6b64\uff0c\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u56e0\u4e3a\u7528\u6237\u53cb\u597d\u6027\u4f7f\u4eba\u4eec\u66f4\u5bb9\u6613\u4f7f\u7528\u8fd9\u4e9b\u6280\u672f\uff0c\u4e5f\u4f7f\u4ed6\u4eec\u66f4\u5bb9\u6613\u63d0\u4ea4\u3002\u4ed6\u4eec\u66f4\u6709\u53ef\u80fd\u76f8\u4fe1\u793e\u533a\u628a\u7528\u6237\u7684\u6700\u5927\u5229\u76ca\u653e\u5728\u5fc3\u4e0a\u3002\n\u6211\u4e0d\u559c\u6b22\u201c\u5f00\u53d1\u4eba\u5458\u4e0d\u5173\u5fc3\u201d\u8fd9\u4e2a\u501f\u53e3\u7684\u4e00\u4e2a\u539f\u56e0\u662f\u5b83\u592a\u865a\u65e0\u4e3b\u4e49\u4e86\u3002\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u65e0\u6cd5\u9f13\u52b1\u4eba\u4eec\u4f7f\u7528\u66f4\u597d\u7684\u6b63\u786e\u6027\u6280\u672f\u3002\u6539\u53d8\u201c\u5f00\u53d1\u5546\u4e0d\u5728\u4e4e\u201d\u5c06\u610f\u5473\u7740\u6539\u53d8\u6211\u4eec\u793e\u4f1a\u7684\u57fa\u672c\u6587\u5316\uff0c\u8fd9\u8fdc\u8fdc\u8d85\u51fa\u4e86\u6211\u4eec\u7684\u5de5\u8d44\u7b49\u7ea7\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u9886\u517b\u662f\u4e00\u4e2a\u201c\u7528\u7259\u7ebf\u6e05\u6d01\u7684\u95ee\u9898\u201d\uff0c\u90a3\u4e48\u8fd9\u662f\u6211\u4eec\u6709\u80fd\u529b\u6539\u53d8\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u6539\u8fdb\u6211\u4eec\u7684UI/UX\uff0c\u6211\u4eec\u53ef\u4ee5\u6539\u8fdb\u6211\u4eec\u7684\u6559\u5b66\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u6539\u8fdb\u6211\u4eec\u7684\u8f85\u52a9\u5de5\u5177\u3002\u6211\u5728\u81ea\u5df1\u7684\u751f\u6d3b\u4e2d\u89c1\u8fc7\u8fd9\u6837\u7684\u4f5c\u54c1\u3002\u6211\u5df2\u7ecf\u505a\u4e86\u5f88\u591a\u6b63\u89c4\u65b9\u6cd5\u7684\u6559\u80b2\u63a8\u5e7f\uff0c\u5e76\u770b\u5230\u4e86\u4ee4\u4eba\u60ca\u53f9\u7684\u7ed3\u679c\u3002\u5f88\u591a\u201c\u4e0d\u611f\u5174\u8da3\u201d\u7684\u5f00\u53d1\u4eba\u5458\u5728\u5b66\u4e60\u6b63\u5f0f\u65b9\u6cd5\u53d8\u5f97\u66f4\u5bb9\u6613\u4e4b\u540e\u5c31\u5f00\u59cb\u4f7f\u7528\u6b63\u5f0f\u65b9\u6cd5\u3002\n\u6211\u6000\u7591\u4eba\u4eec\u907f\u514d\u5bf9\u5de5\u5177\u91c7\u7528\u8fdb\u884c\u201c\u65b9\u4fbf\u201d\u89e3\u91ca\u6709\u4e09\u4e2a\u4e3b\u8981\u539f\u56e0\uff1a2\u3002\n\u4e00\u65e6\u4f60\u6210\u4e3a\u67d0\u65b9\u9762\u7684\u4e13\u5bb6\uff0c\u5c31\u5f88\u5bb9\u6613\u7ed5\u8fc7\u8fd9\u4e9b\u4e0d\u4fbf\u4e4b\u5904\uff0c\u6240\u4ee5\u4eba\u4eec\u751a\u81f3\u53ef\u80fd\u6ca1\u6709\u610f\u8bc6\u5230\u4e8b\u60c5\u662f\u4e0d\u65b9\u4fbf\u7684\u30023\u8fd9\u6709\u65f6\u88ab\u79f0\u4e3a\u4e13\u5bb6\u6027\u5931\u660e\u3002\n\u4fbf\u5229\u542c\u8d77\u6765\u50cf\u662f\u201c\u6ce2\u5170\u8bed\u201d\uff0c\u5f53\u9884\u7b97\u6709\u9650\u65f6\uff0c\u5b83\u4f1a\u88ab\u63a8\u5230\u4e00\u8fb9\u3002\u5728\u65f6\u95f4\u7d27\u8feb\u7684\u60c5\u51b5\u4e0b\uff0c\u6027\u80fd\u548c\u5b89\u5168\u6027\u90fd\u88ab\u629b\u5f03\u4e86\uff0c\u90a3\u4e48\u53ef\u7528\u6027\u53c8\u6709\u4ec0\u4e48\u4e0d\u540c\u5462\uff1f\n\u540c\u6837\uff0c\u5728\u5b66\u672f\u754c\uff0cUI/UX\u4e5f\u662f\u4f4e\u58f0\u671b\u7684\u4f5c\u54c1\u3002\u5b66\u8005\u4eec\u4e0d\u80fd\u53d1\u8868\u5173\u4e8e\u4ed6\u4eec\u5982\u4f55\u4f7f\u5de5\u5177\u66f4\u6613\u4e8e\u4f7f\u7528\u7684\u8bba\u6587\uff0c\u5373\u4f7f\u63d0\u9ad8\u53ef\u7528\u6027\u4f1a\u6781\u5927\u5730\u63d0\u9ad8\u884c\u4e1a\u91c7\u7528\u7387\u3002\u6fc0\u52b1\u7ed3\u6784\u90fd\u662f\u4e71\u4e03\u516b\u7cdf\u7684\u3002\nUI/UX\u771f\u7684\u5f88\u96be\uff0c\u9700\u8981\u4e0e\u4ece\u6280\u672f\u4e0a\u89e3\u51b3\u8f6f\u4ef6\u6b63\u786e\u6027\u6240\u9700\u7684\u6280\u80fd\u5b8c\u5168\u4e0d\u540c\u7684\u6280\u80fd\u96c6\u3002\u8fd9\u610f\u5473\u7740\u5de5\u5177\u7684\u8bb8\u591a\u6838\u5fc3\u8d21\u732e\u8005\u548c\u65e9\u671f\u91c7\u7528\u8005\u5e76\u6ca1\u6709\u51c6\u5907\u597d\u8ba9\u5b83\u66f4\u65b9\u4fbf\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u793e\u533a\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e9b\u5bb9\u6613\u6458\u5230\u7684\u679c\u5b9e\uff0c\u800c\u4e0d\u9700\u8981\u5bf9\u5de5\u5177\u8fdb\u884c\u6839\u672c\u6027\u7684\u66f4\u6539\u3002\u6211\u901a\u8fc7\u64b0\u5199\u6587\u6863\u8fdb\u884c\u8d21\u732e\u3002\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5c0f\u5403\u548c\u98df\u8c31\u3002\u66f4\u9ad8\u7ea7\u522b\u7684UI\u62bd\u8c61\u4e5f\u6709\u5e2e\u52a9\uff1a\u6211\u4eec\u53ef\u80fd\u4f1a\u901a\u8fc7\u63d0\u4f9b\u6bd4\u6838\u5fc3\u539f\u8bed\u66f4\u590d\u6742\u7684\u8f93\u5165\u751f\u6210\u5668\uff0c\u6216\u8005\u901a\u8fc7\u5f00\u53d1ghostWriter\u548cQuickSpec\u7b49\u6d4b\u8bd5\u751f\u6210\u5668\u6765\u589e\u52a0\u57fa\u4e8e\u5c5e\u6027\u7684\u6d4b\u8bd5\u91c7\u7528\u7387\u3002\u8fd9\u4e9b\u4e0d\u4f1a\u8ba9\u5de5\u5177\u53d8\u5f97\u7b80\u5355\uff0c\u4f46\u4f1a\u8ba9\u5b83\u4eec\u53d8\u5f97\u66f4\u5bb9\u6613\u3002\u4e00\u4e9b\u201c\u52c9\u5f3a\u201d\u88ab\u63a8\u8fdf\u7684\u4eba\u5c06\u4f1a\u5192\u9669\u4e00\u8bd5\uff0c\u6269\u5927\u793e\u533a\uff0c\u5e76\u5f15\u5165\u4e00\u4e9b\u80fd\u591f\u5728\u672a\u6765\u66f4\u591a\u5730\u5e2e\u52a9\u6539\u53d8\u53ef\u7528\u6027\u7a97\u53e3\u7684\u4eba\u3002\n\u5f52\u6839\u7ed3\u5e95\uff0c\u91c7\u7528\u662f\u4e00\u4e2a\u4f18\u5316\u95ee\u9898\uff1a\u4e3a\u4e86\u793e\u533a\u7684\u5229\u76ca\uff0c\u60a8\u6700\u597d\u5c06\u8d44\u6e90\u6295\u5165\u5230\u54ea\u91cc\uff1f\u6709\u4e9b\u793e\u533a\u5bf9\u589e\u957f\u4e00\u70b9\u4e5f\u4e0d\u611f\u5174\u8da3\uff0c\u8fd9\u6ca1\u4ec0\u4e48\u3002\u6709\u4e9b\u4eba\u53ef\u80fd\u4f1a\u8ba4\u4e3a\uff0c\u4e3a\u73b0\u6709\u7528\u6237\u6539\u8fdb\u4e1c\u897f\u6bd4\u5bfb\u627e\u65b0\u7528\u6237\u66f4\u91cd\u8981\uff0c\u8fd9\u4e5f\u6ca1\u95ee\u9898\u3002\u4f46\u5bf9\u4e8e\u60f3\u8981\u6210\u4e3a\u4e3b\u6d41\u7684\u793e\u533a\u6765\u8bf4\uff0c\u6307\u8d23\u5916\u6765\u8005\u6ca1\u6709\u770b\u5230\u5149\u660e\u662f\u9519\u8bef\u7684\u3002\u4e5f\u8bb8\u4f60\u53ea\u662f\u6709\u4e00\u6247\u80ae\u810f\u7684\u7a97\u6237\u3002\n\u6211\u5728\u6211\u7684\u65f6\u4e8b\u901a\u8baf\u4e0a\u5206\u4eab\u4e86\u8fd9\u7bc7\u6587\u7ae0\u7684\u521d\u7a3f\u3002\u5982\u679c\u4f60\u559c\u6b22\u6211\u7684\u4f5c\u54c1\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u8ba2\u9605\u5462\uff1f\n\u8fd9\u4e9b\u4e0d\u592a\u9002\u7528\u4e8e\u5b9e\u8df5\u7684\u91c7\u7528\uff0c\u5982TDD\u6216\u4ee3\u7801\u5ba1\u67e5\uff0c\u4f46\u7528\u4e8e\u6267\u884c\u5b83\u4eec\u7684\u5de5\u5177\u9047\u5230\u4e86\u7c7b\u4f3c\u7684\u95ee\u9898\u3002\r[\u8fd4\u56de]\u3002\n\u8fd9\u4e0d\u540c\u4e8e\u524d\u9762\u63d0\u5230\u7684\u201c\u4e13\u5bb6\u627f\u8ba4\u5b58\u5728\u4e0d\u4fbf\uff0c\u4f46\u8ba4\u4e3a\u6536\u517b\u65e0\u5173\u7d27\u8981\u201d\u3002\r[\u8fd4\u56de]", "note_en": "My work brings me though a lot of software correctness techniques, things like type theory, test-driven development (TDD), and formal methods. The surrounding communities all have the same problem: they can\u2019t get people using these techniques. They all ask \u201cDon\u2019t people care about correct software?\u201d To which the insiders usually answer \u201cprogrammers don\u2019t care about correctness, they just care about shoveling out garbage to make money!\u201d\n I\u2019ve heard this from every single community I\u2019ve explored, many of which are in direct conflict with each other. Bertrand Meyer, the main popularizer of Design by Contract,  1 wrote an essay  attacking functional programming, while many TDD advocates reject formal methods entirely. Every single one of these communities can point at the other ones and say \u201cthey don\u2019t care about correctness, they just want to shovel crap out\u201d, and those communities can say the same things right back at them. A very nice symmetry, isn\u2019t it?\n Which means that they\u2019re not seeing the bigger picture. An explanation of why programmers \u201cdon\u2019t care about correctness\u201d shouldn\u2019t just be post-hoc rationalizations. Here\u2019s my main argument for why most programmers don\u2019t  seem to care about software correctness:\n  Whenever I pose this in a discussion, I get the same answer: everyone thinks root canals are worse, and at most half of the group flosses daily. That\u2019s ridiculous! Flossing takes like three minutes a day. But people don\u2019t do it because it\u2019s fiddly, annoying, and inconvenient. If people are unwilling to do something simple to keep their teeth from rotting, why should we expect people to use annoying inconvenient tools to improve software?\n Some purely anecdotal evidence I have in favor of this is that I vastly prefer to use TDD with Ruby than with other languages, entirely because of  rspec. Rspec is the most pleasant unit testing library I\u2019ve ever used. It was easy to set up, easy to tweak, and easy to read and write. To add to this, there\u2019s a huge array of Ruby libraries, like  factorybot and  capybara, to handle the inconveniences of TDD. I don\u2019t have hard numbers, but I\u2019d  speculate that a far greater percentage of Rails projects use TDD vs projects in other web frameworks. Part of this is culture, sure, but the affordances in rspec certainly help.\n I\u2019ve also seen a lot of my friends get more excited about type systems because they started using Elm or Typescript. If you are Too Online you\u2019ve probably seen essays attacking these two for either being unsound (in the case of Typescript) or for  lacking typeclasses (in the case of Elm). On the other hand, these languages are much more UI/UX oriented and provide significant tooling affordances. Elm is famous for its  compiler error messages and Typescript has great IDE integration. Both of these play a significant role in user adoption. Many people then migrate from these two languages to more \u201chardcore\u201d type systems, like PureScript or Haskell. Experienced people are willing to tolerate more inconvenience for more power.\n That tolerance might be why insiders don\u2019t see inconvenience as a serious issue and prefer \u201ceasier\u201d explanations, like developer laziness. But inconvenience is a serious barrier to beginners and interested outsiders. And when inconvenience isn\u2019t addressed- or even acknowledged- in the community then it\u2019s a signal that the community doesn\u2019t care about growth. So it\u2019s not just that user-friendliness makes it easier for people to use these techniques, it also makes it easier for them to commit. They are more likely to believe that the community has the user\u2019s best interests in mind.\n One reason I don\u2019t like the \u201cdevelopers don\u2019t care\u201d excuse is that it\u2019s too nihilistic. If that\u2019s the case, there is nothing that we can do to encourage people to use better correctness techniques. Changing \u201cdevelopers don\u2019t care\u201d would mean changing the fundamental culture of our society, which is way above our pay grades. On the other hand, if adoption is a \u201cflossing problem\u201d, then it\u2019s within our power to change. We can improve our UI/UX, we can improve our teaching methods, and we can improve our auxiliary tooling. I\u2019ve seen this work in my own life. I\u2019ve done a lot of educational outreach for formal methods and have seen spectacular results. A lot of those \u201capathetic\u201d developers started using formal methods once learning it was easier.\n  I suspect there are three major reasons why people avoid \u201cconvenience\u201d explanations for tool adoption:  2\n Once you\u2019re an expert in something, it\u2019s really easy to work around the inconveniences, so people may not even realize that things  are inconvenient.  3 This is sometimes called  expert blindness.\n Convenience sounds like \u201cpolish\u201d, a nice-to-have that gets pushed to the wayside when budgets are limited. Performance and security are thrown out under time crunch, so why should usability be any different?\n Similarly, in academia, UI/UX is low prestige work. Academics can\u2019t publish papers about how they made a tool easier to use, even if improving usability would dramatically improve industry adoption. The incentive structures are all messed up.\n UI/UX is  really hard and requires a skill set completely distinct from the skills required to technically address software correctness. This means a lot of the core contributors and early adopters of a tool aren\u2019t equipped to make it more convenient.\n Fortunately, there are low hanging fruit that can be provided by the communities without needing fundamental changes to tools. I contribute through writing documentation. There\u2019s also providing snippets and cookbooks. Higher level UI abstractions help, too: we could probably increase  property-based testing adoption by providing input generators more sophisticated than the core primitives, or by developing test generators like  ghostwriter and  QuickSpec. These don\u2019t make the tools easy, but it makes them  easier. Some people who were \u201cjust barely\u201d put off will take the plunge, growing the community and bringing in people who can help shift the usability window more in the future.\n Ultimately adoption is a optimization problem: where do you best invest resources for the good of the community? Some communities aren\u2019t interested in growth at all and that\u2019s fine. Some may decide that improving things for existing users is more important than finding new ones, and that\u2019s also fine. But for communities who want to go mainstream, it\u2019s a mistake to blame outsiders for not seeing the light. Maybe you just have a grimy window.\n I shared the first draft of this essay on my  newsletter. If you like my writing, why not subscribe?\n These don\u2019t apply as much for the adoption of practices, like TDD or code review, but the tools used to do them suffer from similar issues.\r   [return]\n This is different from the aforementioned \u201cexperts acknowledge there\u2019s inconvenience but don\u2019t think it matters to adoption\u201d.\r   [return]", "posttime": "2020-10-29 10:31:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6f\u4ef6,correctness", "title": "\u8f6f\u4ef6\u6b63\u786e\u6027\u5f88\u50cf\u7528\u7259\u7ebf\u6e05\u6d01", "title_en": "Software correctness is a lot like flossing", "transed": 1, "url": "https://www.hillelwayne.com/post/flossing/", "via": "", "real_tags": ["\u8f6f\u4ef6"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1031881, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f7f\u7528Fastai-v3\u3001pytorch\u548cGradient\u8fdb\u884c\u57f9\u8bad\u3002\u4f7f\u7528resnet50\uff0c\u5728NVIDIA Quadro P5000\u4e0a\u8fdb\u884c\u57f9\u8bad\u3002\u6784\u5efa\u5728\u575e\u7ad9\u4e0a\uff0c\u5e76\u6258\u7ba1\u5728Microsoft Azure Web\u670d\u52a1\u4e0a\u3002\u5728\u5305\u542b30000\u6b3e\u4e0d\u540c\u8d28\u91cf\u7684\u4fdd\u65f6\u6377\u8f66\u578b\u7684\u516c\u5f00\u6765\u6e90\u56fe\u50cf\u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u57f9\u8bad\u3002\u4fdd\u65f6\u6377\u6c7d\u8f66\uff0c\u7279\u522b\u662f\u6700\u65b0\u4e00\u4ee3\u7684Panamera/Taycan\uff0cMacan/Cayenne&Amp911/718\u5bf9\u4e8e\u4e00\u4e2a\u4e0d\u592a\u5173\u6ce8\u7684\u5916\u884c\u6765\u8bf4\u53ef\u80fd\u5f88\u96be\u533a\u5206\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u60f3\u6d4b\u8bd5\u8fd9\u79cd\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u4f1a\u83b7\u5f97\u4ec0\u4e48\u6837\u7684\u529f\u80fd\u3002\n\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u4e86\u89e3\u5982\u4f55\u901a\u8fc7Google Images\u8f7b\u677e\u521b\u5efa\u56fe\u50cf\u6570\u636e\u96c6\u3002\u6ce8\u610f\uff1a\u5bf9\u4e8e\u4efb\u4f55\u4f60\u60f3\u7528\u8c37\u6b4c\u641c\u7d22\u7684\u65b0\u7c7b\u522b\uff0c\u4f60\u90fd\u5fc5\u987b\u91cd\u590d\u8fd9\u4e9b\u6b65\u9aa4(\u4f8b\u5982\uff0c\u4e00\u6b21\u9488\u5bf9\u72d7\uff0c\u4e00\u6b21\u9488\u5bf9\u732b)\u3002\n\u8f6c\u5230\u8c37\u6b4c\u56fe\u7247\uff0c\u641c\u7d22\u4f60\u611f\u5174\u8da3\u7684\u56fe\u7247\u3002\u4f60\u5728\u8c37\u6b4c\u641c\u7d22\u4e2d\u8d8a\u5177\u4f53\uff0c\u641c\u7d22\u7ed3\u679c\u5c31\u8d8a\u597d\uff0c\u4f60\u9700\u8981\u505a\u7684\u624b\u52a8\u4fee\u526a\u5c31\u8d8a\u5c11\u3002\n\u5411\u4e0b\u6eda\u52a8\uff0c\u76f4\u5230\u60a8\u770b\u5230\u8981\u4e0b\u8f7d\u7684\u6240\u6709\u56fe\u50cf\uff0c\u6216\u8005\u76f4\u5230\u60a8\u770b\u5230\u4e00\u4e2a\u6309\u94ae\uff0c\u4e0a\u9762\u5199\u7740\u201c\u663e\u793a\u66f4\u591a\u7ed3\u679c\u201d\u3002\u60a8\u6eda\u52a8\u8fc7\u7684\u6240\u6709\u56fe\u50cf\u73b0\u5728\u90fd\u53ef\u4ee5\u4e0b\u8f7d\u3002\u8981\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u5355\u51fb\u8be5\u6309\u94ae\uff0c\u7136\u540e\u7ee7\u7eed\u6eda\u52a8\u3002Google Images\u6700\u591a\u663e\u793a700\u5f20\u56fe\u7247\u3002\n\u5c06\u60a8\u60f3\u8981\u6392\u9664\u7684\u5185\u5bb9\u653e\u5165\u641c\u7d22\u67e5\u8be2\u4e2d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u6b63\u5728\u641c\u7d22\u6b27\u4e9a\u72fc\u201ccanis lupus lupus\u201d\uff0c\u90a3\u4e48\u6392\u9664\u5176\u4ed6\u53d8\u4f53\u53ef\u80fd\u662f\u4e2a\u597d\u4e3b\u610f\uff1a\n\u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5355\u51fb\u5de5\u5177\u5e76\u4ece\u7c7b\u578b\u4e0b\u62c9\u5217\u8868\u4e2d\u9009\u62e9\u7167\u7247\uff0c\u5c06\u7ed3\u679c\u9650\u5236\u4e3a\u4ec5\u663e\u793a\u7167\u7247\u3002\n\u73b0\u5728\uff0c\u60a8\u5fc5\u987b\u5728\u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\u4e00\u4e9bJavascript\u4ee3\u7801\uff0c\u8be5\u4ee3\u7801\u5c06\u4e3a\u60a8\u7684\u6570\u636e\u96c6\u4fdd\u5b58\u60a8\u60f3\u8981\u7684\u6240\u6709\u56fe\u50cf\u7684URL\u3002\n\u5728Google Chrome\u4e2d\uff0c\u5728Windows/Linux\u4e0a\u6309CtrlShiftj\uff0c\u5728MacOS\u4e0a\u6309CmdOptj\uff0c\u4f1a\u51fa\u73b0\u4e00\u4e2a\u540d\u4e3ajavascript\u201c\u63a7\u5236\u53f0\u201d\u7684\u5c0f\u7a97\u53e3\u3002\u5728Firefox\u4e2d\uff0c\u6309CtrlShiftk(Windows/Linux)\u6216CmdOptk(MacOS)\u3002\u8fd9\u5c31\u662f\u60a8\u5c06\u7c98\u8d34JavaScript\u547d\u4ee4\u7684\u4f4d\u7f6e\u3002\n\u60a8\u9700\u8981\u83b7\u53d6\u6bcf\u4e2a\u56fe\u50cf\u7684URL\u3002\u5728\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e4b\u524d\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u7981\u7528\u5e7f\u544a\u62e6\u622a\u6269\u5c55(uBlock\u3001AdBlockPlus\u7b49)\u3002\u5728Chrome\u4e2d\u3002\u5426\u5219\uff0cwindow.open()\u547d\u4ee4\u4e0d\u8d77\u4f5c\u7528\u3002\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\u4e3a\u5e26\u6807\u7b7e\u7684\u56fe\u50cf\u9009\u62e9\u9002\u5f53\u7684\u540d\u79f0\u3002\u60a8\u53ef\u4ee5\u591a\u6b21\u8fd0\u884c\u8fd9\u4e9b\u6b65\u9aa4\u6765\u521b\u5efa\u4e0d\u540c\u7684\u6807\u7b7e\u3002\nIn[0]\uff1aFolder=&#39\uff1b718&#39\uff1bfile=&#39\uff1b718.csv&#39\uff1bin[0]\uff1aFolder=&#39\uff1b911&#39\uff1bfile=&#39\uff1b911.csv&#39\uff1bin[0]\uff1aFolder=&#39\uff1bcayenne&#39\uff1bfile=&#39\uff1bcayenne.csv&#39\uff1bFolder=&#39\uff1bMacan&#39\uff1bfile=&#39\uff1bmacan.csv&#39\uff1bIn[0]\uff1aFolder=&#39\uff1btaycan&#39\uff1bfile=&#39\uff1btaycan.csv&#39\uff1bin[0]\uff1aFolder=&#39\uff1bPanamera&#39\uff1bfile=&#39\uff1bpanamera.csv&#39\uff1b\nIn[0]\uff1apath=path(&#39\uff1bdata/Porsche&#39\uff1b)DEST=path/Folder dest.mkdir(Parents=True\uff0cExist_ok=True)in[0]\uff1apath.ls()out[0]\uff1a[PosiPath(&#39\uff1bdata/Porsche/Cayenne&#39\uff1b)\uff0cPosiPath(&#39\uff1bdata/Porsche/panamera.csv&#39\uff1b)\uff0cPosiPath(&#39\uff1bdata/Porsche/cayenne.csv&#39\uff1b)\uff0cPosixPath(&#39\uff1bdata/Porsche/Panamera.csv&#39\uff1b)\uff0cPosixPath(&#39\uff1bdata/Porsche/Panamenne.csv&#39\uff1b)\uff0cPosiPath(&#39\uff1bdata/Porsche/Panamerne.csv&#39\uff1b)\u3002)\u3001PosiPath(&#39\uff1bdata/Porsche/taycan&#39\uff1b)\u3001PosiPath(&#39\uff1bdata/Porsche/911.csv&#39\uff1b)\u3001PosiPath(&#39\uff1bdata/Porsche/taycan.csv&#39\uff1b)\u3001PosiPath(&#39\uff1bdata/Porsche/911&#39\uff1b)\u3001PosiPath(&#39\uff1bdata/Porsche/macan.csv&#39\uff1b)\u3001PoSixPath(&#39\uff1bdata/Porsche/718&#39\uff1b)\u3001PoSixPath(&#39\uff1bdata/Porsche/718&#39\uff1b)\u3001PoSixPath(&#39\uff1bdata/Porsche/718&#39\uff1b)\u3001PoSixPath(&#39\uff1bdata/Porsche/718&#39\uff1b)\u3001PoSixPath(&#39\uff1bdata/Porsche/718&#39\uff1b)\u3002Data/Porsche/718.csv&#39\uff1b)\uff0cPosiPath(&#39\uff1bData/Porsche/Macan&#39\uff1b)]\u3002\n\u6700\u540e\uff0c\u4e0a\u4f20\u60a8\u7684URL\u6587\u4ef6\u3002\u60a8\u53ea\u9700\u5728\u5de5\u4f5c\u76ee\u5f55\u4e2d\u6309\u201c\u4e0a\u8f7d\u201d\u5e76\u9009\u62e9\u60a8\u7684\u6587\u4ef6\uff0c\u7136\u540e\u4e3a\u6bcf\u4e2a\u663e\u793a\u7684\u6587\u4ef6\u5355\u51fb\u201c\u4e0a\u8f7d\u201d\u5373\u53ef\u3002\nAst.ai\u6709\u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u8ba9\u60a8\u8fd9\u6837\u505a\u3002\u60a8\u53ea\u9700\u6307\u5b9aURL\u6587\u4ef6\u540d\u548c\u76ee\u6807\u6587\u4ef6\u5939\uff0c\u6b64\u529f\u80fd\u5c06\u4e0b\u8f7d\u5e76\u4fdd\u5b58\u6240\u6709\u53ef\u4ee5\u6253\u5f00\u7684\u56fe\u50cf\u3002\u5982\u679c\u5728\u6253\u5f00\u5b83\u4eec\u65f6\u51fa\u73b0\u95ee\u9898\uff0c\u5c06\u4e0d\u4f1a\u4fdd\u5b58\u5b83\u4eec\u3002\n\u8ba9\u6211\u4eec\u4e0b\u8f7d\u6211\u4eec\u7684\u56fe\u7247\u5427\uff01\u8bf7\u6ce8\u610f\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9\u8981\u4e0b\u8f7d\u7684\u6700\u5927\u56fe\u50cf\u6570\u91cf\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4e0d\u4f1a\u4e0b\u8f7d\u6240\u6709URL\u3002\n\u5728[0]\uff1aCLASS=[&#39\uff1btaycan&#39\uff1b\uff0c&#39\uff1bPanamera&#39\uff1b\uff0c&#39\uff1bMacan&39\uff1b\uff0c&#39\uff1bCayenne&39\uff1b\uff0c&#39\uff1b718&#39\uff1b\uff0c&#39\uff1b911&#39\uff1b]in[0]\uff1adownload_images(path/file\uff0cest\uff0cmax_picts=500)in[0]\uff1a#\u5982\u679c\u4e0b\u8f7d\u6709\u95ee\u9898\uff0c\u8bf7\u5c1d\u8bd5\u4f7f\u7528`max_worker=0`\u67e5\u770b\u5f02\u5e38\uff1adownload_images(path/file\uff0cest\uff0cmax_picks=20\uff0cmax_worker=0)``\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u79fb\u9664\u6240\u6709\u53ef\u4ee5&#39\u7684\u955c\u50cf\uff1bT\u88ab\u6253\u5f00\uff1a`python in[0]\uff1a\u5bf9\u4e8e\u7c7b\u4e2d\u7684c\uff1aprint(C)VERIFY_IMAGES(path/c\uff0cdelete=True\uff0cmax_size=500)taycan Panamera Macan cayenne 718 911`#\u67e5\u770b\u6570\u636e``python in[0]\uff1anp\u968f\u673a.Seed(42)data=ImageDataBunch.from_Folder(path\uff0ctrain=&#34\uff1b.&#34\uff1b\uff1b\uff0cvalid_pct=0.2\uff0cds_tfms=get_transforms()\uff0csize=224\uff0cnum_worker=4).Normalize(ImageNet_Stats)in[0]\uff1a#\u5982\u679c\u60a8\u5df2\u7ecf\u6e05\u7406\u4e86\u6570\u636e\uff0c\u8bf7\u8fd0\u884c\u6b64\u5355\u5143\u683c\uff0c\u800c\u4e0d\u662fnp.\u968f\u673a.Seed(42)data=ImageDataBunch.from_csv(path\uff0cFolder=&#34\uff1b.&#34\uff1b\uff0cValid_pct=0.2\uff0cCSV_Labels=&#39\uff1bCleaned.csv&#39\uff1b\uff0cDS_tfms=get_transforms()\uff0csize=224\uff0cnum_worker=4).ize(ImageNet_Stats)``\u597d\uff01\u90a3\u4e48\u8ba9\u6211\u4eec\u770b\u770b\u6211\u4eec\u7684\u4e00\u4e9b\u7167\u7247\u5427\u3002``pythonIn[0]\uff1adata.classesOut[0]\uff1a[&#39\uff1b718&#39\uff1b\uff0c&#39\uff1b911&#39\uff1b\uff0c&#39\uff1bcayenne&39\uff1b\uff0c&#39\uff1bMacan&#39\uff1b\uff0c&#39\uff1bPanamera&#39\uff1b\uff0c&#39\uff1btaycan&#39\uff1b]in[0]\uff1adata.show_Batch(row=6\uff0cfigsize=(7\uff0c8))in[0]\uff1adata.class\uff0cdata.c\uff0clen(data.ran_ds)\uff0clen(data.valid_ds)out[0]\uff1a([&#39\uff1b718&#39\uff1b\uff0c&#39\uff1b911&#39\uff1b\uff0c&#39\uff1bcayenne&#39\uff1b\uff0c&#39\uff1bMacan&#39\uff1b\uff0c&#39\uff1bPanamera&#39\uff1b\uff0c&#39\uff1btaycan&#39\uff1b]\uff0c6,1920,480)\n\u5728[0]\u4e2d\uff1a\u5728[0]\u4e2d\u5b66\u4e60.save(&#39\uff1bStage-1&39\uff1b)\u5728[0]\u4e2d\uff1a\u5728[0]\uff1a\u5b66\u4e60.lr_find()25.00%[1/4 00\uff1a12&lt\uff1b00\uff1a37]```pech|TRAIN_LOSS|VALID_LOSS|ERROR_RATE|TIME-|-0|0.196860|#na#|00\uff1a1283.33%[25/30 00\uff1a10&lt\uff1b00\uff1a02 0.6416]LR\u67e5\u627e\u5668\u5b8c\u6210\u540e\uff0c\u952e\u5165{LELENER_NAME}.recorder.lot()\u67e5\u770b\u56fe\u5f62\u3002`in[0]\uff1a#\u5982\u679c\u7ed8\u56fe\u6ca1\u6709\u663e\u793a\uff0c\u8bf7\u5c1d\u8bd5\u7ed9\u51fa\u5f00\u59cb\u548c\u7ed3\u675f\u5b66\u4e60\u901f\u7387#learn.lr_find(start_LR=1e-5\uff0cend_lr=1e-1)Learning.recorder.lot()in[0]\uff1aLearning.fit_one_Cycle(2\uff0cmax_LR=Slice(3e-5\uff0c3e-4))EPOCH TRAIN_LOSS VALID_LOSS ERROR_RATE TIME 0 0.280386 1.524914 0.372917 00\uff1a13 1 0.276844 1.312542 0.345833 00\uff1a13IN[0]\uff1aLearning.save(&#39\uff1bStage-2&#39\uff1b)`#\u89e3\u91ca\u5728[0]\u4e2d\uff1aLearning.load(&#39\uff1bStage-2&#39\uff1b)\uff1b\u5728[0]\u4e2d\uff1ainterp=ClassficationInterpretation.From_learner(LEARN)in[0]\uff1ainterp.lot_conflomy_Matrix()#\u6e05\u7406\u5347\u7ea7\u7531\u4e8e\u6211\u4eec\u7684\u6a21\u578b\u8868\u73b0\u4e0d\u4f73\uff0c\u6211\u4eec\u7684\u4e00\u4e9b\u6700\u5927\u635f\u5931\u4e0d\u5728\u6b64\u5217\u3002\u6211\u4eec\u7684\u6570\u636e\u96c6\u4e2d\u6709\u4e00\u4e9b\u4e0d\u5e94\u8be5\u51fa\u73b0\u7684\u56fe\u50cf\u3002\u4f7f\u7528\u6765\u81eafast ai.widgets\u7684ImageCleaner\u5c0f\u90e8\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u526a\u6389\u6700\u5927\u7684\u635f\u5931\uff0c\u5220\u9664\u4e0d\u5c5e\u4e8e\u6211\u4eec\u7684\u7167\u7247\u3002[0]\u4e2d\u7684``\uff1a\u4ecefast ai.widgets import\\*`\u9996\u5148\u9700\u8981\u4ecetop_loses\u83b7\u53d6\u6587\u4ef6\u8def\u5f84\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528.from_toplosses\u6267\u884c\u6b64\u64cd\u4f5c\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06\u9876\u7ea7\u635f\u5931\u6307\u6570\u548c\u76f8\u5e94\u7684\u6570\u636e\u96c6\u63d0\u4f9b\u7ed9ImageCleaner\u3002\u8bf7\u6ce8\u610f\uff0c\u8be5\u5c0f\u90e8\u4ef6\u4e0d\u4f1a\u76f4\u63a5\u4ece\u78c1\u76d8\u5220\u9664\u56fe\u50cf\uff0c\u4f46\u5b83\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684CSV\u6587\u4ef6Cleaned.csv\uff0c\u60a8\u53ef\u4ee5\u4ece\u8be5\u6587\u4ef6\u4e2d\u521b\u5efa\u5177\u6709\u66f4\u6b63\u6807\u7b7e\u7684\u65b0ImageDataBunch\uff0c\u4ee5\u7ee7\u7eed\u8bad\u7ec3\u60a8\u7684\u6a21\u578b\u3002[0]\u4e2d\u7684``\uff1adb=(ImageList.from_older(Path).plit_one().label_from_older().Transform(get_transforms()\uff0csize=224).database unch())in[0]\uff1a#\u5982\u679c\u60a8\u5df2\u7ecf\u4f7f\u7528`From_toplosses`\u4e2d\u7684\u7d22\u5f15\u6e05\u7406\u4e86\u6570\u636e\uff0c#\u8bf7\u8fd0\u884c\u6b64\u5355\u5143\u683c\u800c\u4e0d\u662f\u524d\u9762\u7684\u5355\u5143\u683c\u4ee5\u7ee7\u7eed\u5220\u9664\u91cd\u590d\u9879\u3002#\u5426\u5219\uff0c\u4e0a\u4e00\u6b65\u7684\u6240\u6709\u7ed3\u679c\u5c06\u88ab#\u65b0\u8fd0\u884c\u7684`ImageCleaner`\u8986\u76d6\u3002DB=(ImageList.from_csv(\u8def\u5f84\uff0c\u5df2\u6e05\u7406.csv\uff1b\uff0c\u6587\u4ef6\u5939=\u3002&#39\uff1b).Split_None().label_from_df().transform(get_transforms()\uff0csize=224).databunch())``\u7136\u540e\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b66\u4e60\u8005\uff0c\u4ee5\u4fbf\u5bf9\u6240\u6709\u56fe\u50cf\u4f7f\u7528\u65b0\u7684\u6570\u636e\u5e93\u3002[0]\u4e2d\u7684``\uff1aLearning_cln=cnn_learner(db\uff0cmodel s.resnet50\uff0cmetrics=error_rate)Learning_cln.load(&#39\uff1bStage-2&39\uff1b)\uff1bin[0]\uff1ads\uff0cidxs=DatasetForMatter().From_toplosses(Learning_Cln)in[0]\uff1a#Don&#39\uff1b\u4e0d\u8981\u5728Google CoLab\u6216\u4efb\u4f55\u5176\u4ed6\u8fd0\u884cjupyter\u5b9e\u9a8c\u5ba4\u7684\u5b9e\u4f8b\u4e2d\u8fd0\u884c\u6b64\u547d\u4ee4\u3002#\u5982\u679c\u60a8\u786e\u5b9e\u5728Jupyter Lab\u4e0a\u8fd0\u884c\u6b64\u7a0b\u5e8f\uff0c\u5219\u9700\u8981\u91cd\u65b0\u542f\u52a8\u8fd0\u884c\u65f6\uff0c\u5e76\u4e14\u5305\u62ec\u6240\u6709\u672c\u5730\u53d8\u91cf\u7684#\u8fd0\u884c\u65f6\u72b6\u6001\u5c06\u4f1a\u4e22\u5931\u3002ImageCleaner(ds\uff0cidxs\uff0cpath)`Hbox(Child=(Vbox(Child=(Image(Value=b&#39\uff1b\\xff\\xd8\\xff\\xe0\\x00\\x10JFIF\\x00\\x01\\x00 d\\x00d\\x00\\x00\\xff\u2026\u3002BUTTON(BUTTON_STYLE=&#39\uff1bPRIMARY&#39\uff1b\uff0cDescription=&#39\uff1bNext Batch&#39\uff1b\uff0cLayout=Layout(width=&#39\uff1bauto&#39\uff1b)\uff0cStyle=ButtonStyle())\u901a\u8fc7\u5355\u51fb&#39\uff1b\u5220\u9664&#39\uff1b\u6807\u8bb0\u8981\u5220\u9664\u7684\u7167\u7247\u3002\u7136\u540e\u5355\u51fb\u4e0b\u4e00\u6279\u4ee5\u5220\u9664\u5df2\u6807\u8bb0\u7684\u7167\u7247\uff0c\u5e76\u5c06\u5176\u4f59\u7167\u7247\u4fdd\u7559\u5728\u8be5\u884c\u4e2d\u3002ImageCleaner\u5c06\u5411\u60a8\u663e\u793a\u65b0\u7684\u4e00\u884c\u56fe\u50cf\uff0c\u76f4\u5230\u6ca1\u6709\u66f4\u591a\u56fe\u50cf\u53ef\u663e\u793a\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c0f\u90e8\u4ef6\u5c06\u663e\u793a\u56fe\u50cf\uff0c\u76f4\u5230top_losses.ImageCleaner(ds\uff0cidxs)\u4e2d\u6ca1\u6709\u56fe\u50cf\u4e3a\u6b62\u3002\u60a8\u8fd8\u53ef\u4ee5\u5728\u6570\u636e\u96c6\u4e2d\u627e\u5230\u91cd\u590d\u9879\u5e76\u5c06\u5176\u5220\u9664\uff01\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u60a8\u9700\u8981\u8fd0\u884c.From_Similars\u6765\u83b7\u53d6\u6f5c\u5728\u7684\u91cd\u590dID\uff0c\u7136\u540e\u5728Duplicate=True\u7684\u60c5\u51b5\u4e0b\u8fd0\u884cImageCleaner\u3002API\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0e\u9519\u8bef\u5206\u7c7b\u7684\u6620\u50cf\u7c7b\u4f3c\uff1a\u53ea\u9700\u9009\u62e9\u8981\u5220\u9664\u7684\u6620\u50cf\uff0c\u7136\u540e\u5355\u51fb\u4e0b\u4e00\u6279\uff0c\u76f4\u5230\u6ca1\u6709\u5176\u4ed6\u6620\u50cf\u3002\u8bf7\u786e\u4fdd\u91cd\u65b0\u521b\u5efa\u6570\u636e\u5e93\u5e76\u4eceCleaned.csv\u6587\u4ef6\u5b66\u4e60_CLN\u3002\u5426\u5219\uff0c\u8be5\u6587\u4ef6\u5c06\u88ab\u4ece\u5934\u5f00\u59cb\u8986\u76d6\uff0c\u4ece\u800c\u4e22\u5931\u4ecetoploses\u4e2d\u6e05\u9664\u6570\u636e\u7684\u6240\u6709\u7ed3\u679c\u3002`\u5728[100.00]\u4e2d\uff1ads\uff0cidxs=DatasetForMatter().From_Similars(LEARN_CLN)\u6b63\u5728\u83b7\u53d6\u6fc0\u6d3b...100.00%[36/36 00\uff1a05&lt\uff1b00\uff1a00]\u8ba1\u7b97\u76f8\u4f3c\u6027...\u5728[0]\u4e2d\uff1a\u56fe\u50cf\u6e05\u6d17\u5668(DS\uff0cIDX\uff0cPATH\uff0cDUPLICATES=TRUE)Hbox(\u5b50\u9879=(\u5b50\u9879=(\u6620\u50cf(\u503c=b&#39\uff1b\\xff\\xd8\\xff\\xe0\\x00\\x10JFIF\\x00\\x01\\x00 d\\x00 d\\x00\\x00\\xff\u2026\u3002BUTTON(BUTTON_STYLE=&#39\uff1bPRIMARY&#39\uff1b\uff0cdescription=&#39\uff1bNext Batch&#39\uff1b\uff0cLayout=Layout(width=&#39\uff1bauto&#39\uff1b)\uff0cstyle=ButtonStyle())`\u8bb0\u4f4f\u4ece\u6e05\u7406\u7684.csv\u91cd\u65b0\u521b\u5efaImageDataBunch\uff0c\u4ee5\u5305\u62ec\u60a8\u5728\u6570\u636e\u4e2d\u6240\u505a\u7684\u66f4\u6539\uff01#\u9996\u5148\u8981\u5c06\u6a21\u578b\u6295\u5165\u751f\u4ea7\uff0c\u8ba9&#39\uff1b\u7684\u5bfc\u51faLearner\u5bf9\u8c61\u7684\u5185\u5bb9\u7528\u4e8e\u751f\u4ea7\uff1a``In[0]\uff1aLear.export()`\u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a&#39\uff1bexport.pkl&#39\uff1b\u7684\u6587\u4ef6\u3002\u5728\u6211\u4eec\u5de5\u4f5c\u7684\u76ee\u5f55\u4e2d\uff0c\u5305\u542b\u90e8\u7f72\u6a21\u578b\u6240\u9700\u7684\u6240\u6709\u5185\u5bb9(\u6a21\u578b\u3001\u6743\u91cd\uff0c\u4f46\u4e5f\u5305\u542b\u4e00\u4e9b\u5143\u6570\u636e\uff0c\u5982\u4f7f\u7528\u7684\u7c7b\u6216\u8f6c\u6362/\u89c4\u8303\u5316)\u3002\u60a8\u53ef\u80fd\u5e0c\u671b\u4f7f\u7528CPU\u8fdb\u884c\u63a8\u7406\uff0c\u9664\u975e\u662f\u5927\u89c4\u6a21\u7684(\u800c\u4e14\u60a8\u51e0\u4e4e\u80af\u5b9a\u4e0d\u9700\u8981&#", "note_en": "Trained using  fastai-v3,  pytorch and  Gradient.Uses  resnet50 and trained on a  Nvidia Quadro P5000.Built on  docker and is hosted on  Microsoft Azure Web Services.Trained on a dataset of publicly sourced images containing 30000 Porsche car models of varying degree of quality.Porsche cars, specially the latest generations of the Panamera/Taycan, Macan/Cayenne &amp; 911 / 718 can be pretty tricky to tell apart for a layman who isn\u2019t paying very close attention, which is why I wanted to test out what kind of features this deep learning model would pick up.\n  In this tutorial we will see how to easily create an image dataset through Google Images. Note: You will have to repeat these steps for any new category you want to Google (e.g once for dogs and once for cats).\n    Go to Google Images and search for the images you are interested in. The more specific you are in your Google Search, the better the results and the less manual pruning you will have to do.\n Scroll down until you\u2019ve seen all the images you want to download, or until you see a button that says \u2018Show more results\u2019. All the images you scrolled past are now available to download. To get more, click on the button, and continue scrolling. The maximum number of images Google Images shows is 700.\n It is a good idea to put things you want to exclude into the search query, for instance if you are searching for the Eurasian wolf, \u201ccanis lupus lupus\u201d, it might be a good idea to exclude other variants:\n  You can also limit your results to show only photos by clicking on Tools and selecting Photos from the Type dropdown.\n  Now you must run some Javascript code in your browser which will save the URLs of all the images you want for you dataset.\n In Google Chrome press CtrlShiftj on Windows/Linux and CmdOptj on macOS, and a small window the javascript \u2018Console\u2019 will appear. In Firefox press CtrlShiftk on Windows/Linux or CmdOptk on macOS. That is where you will paste the JavaScript commands.\n You will need to get the urls of each of the images. Before running the following commands, you may want to disable ad blocking extensions (uBlock, AdBlockPlus etc.) in Chrome. Otherwise the window.open() command doesn\u2019t work. Then you can run the following commands:\n   Choose an appropriate name for your labeled images. You can run these steps multiple times to create different labels.\n In [ 0]: folder  =  &#39;718&#39;  file  =  &#39;718.csv&#39; In [ 0]: folder  =  &#39;911&#39;  file  =  &#39;911.csv&#39; In [ 0]: folder  =  &#39;cayenne&#39;  file  =  &#39;cayenne.csv&#39; In [ 0]: folder  =  &#39;macan&#39;  file  =  &#39;macan.csv&#39; In [ 0]: folder  =  &#39;taycan&#39;  file  =  &#39;taycan.csv&#39; In [ 0]: folder  =  &#39;panamera&#39;  file  =  &#39;panamera.csv&#39;\n  In [ 0]: path  = Path( &#39;data/porsche&#39;) dest  = path /folder dest .mkdir(parents = True, exist_ok = True) In [ 0]: path .ls() Out[ 0]: [PosixPath( &#39;data/porsche/cayenne&#39;), PosixPath( &#39;data/porsche/panamera.csv&#39;), PosixPath( &#39;data/porsche/cayenne.csv&#39;), PosixPath( &#39;data/porsche/panamera&#39;), PosixPath( &#39;data/porsche/taycan&#39;), PosixPath( &#39;data/porsche/911.csv&#39;), PosixPath( &#39;data/porsche/taycan.csv&#39;), PosixPath( &#39;data/porsche/911&#39;), PosixPath( &#39;data/porsche/macan.csv&#39;), PosixPath( &#39;data/porsche/718&#39;), PosixPath( &#39;data/porsche/718.csv&#39;), PosixPath( &#39;data/porsche/macan&#39;)]\n Finally, upload your urls file. You just need to press \u2018Upload\u2019 in your working directory and select your file, then click \u2018Upload\u2019 for each of the displayed files.\n    fast.ai has a function that allows you to do just that. You just have to specify the urls filename as well as the destination folder and this function will download and save all images that can be opened. If they have some problem in being opened, they will not be saved.\n Let\u2019s download our images! Notice you can choose a maximum number of images to be downloaded. In this case we will not download all the urls.\n  In [ 0]:classes  = [ &#39;taycan&#39;, &#39;panamera&#39;, &#39;macan&#39;, &#39;cayenne&#39;, &#39;718&#39;, &#39;911&#39;]In [ 0]:download_images(path / file, dest, max_pics = 500) In [ 0]:  # If you have problems download, try with `max_workers=0` to see exceptions: download_images(path / file, dest, max_pics = 20, max_workers = 0)  ```Then we can remove  any images that can &#39;t be opened: `python In [0]: for c in classes: print(c) verify_images(path/c, delete=True, max_size=500) taycan panamera macan cayenne 718 911` ### View data  ```python  In [0]:  np.random.seed(42)  data = ImageDataBunch.from_folder(path, train=&#34;.&#34;, valid_pct=0.2,  ds_tfms=get_transforms(), size=224, num_workers=4).normalize(imagenet_stats)  In [0]:  #If you already cleaned your data, run this cell instead of the one before  np.random.seed(42)  data = ImageDataBunch.from_csv(path, folder=&#34;.&#34;, valid_pct=0.2, csv_labels=&#39;cleaned .csv &#39;,  ds_tfms=get_transforms(), size=224, num_workers=4).normalize(imagenet_stats)  ``` Good! Let&#39;s take a look at some of our pictures then . ```pythonIn [ 0]:data .classesOut[ 0]:[ &#39;718&#39;,  &#39;911&#39;,  &#39;cayenne&#39;,  &#39;macan&#39;,  &#39;panamera&#39;,  &#39;taycan&#39;]In [ 0]:data .show_batch(rows = 6, figsize =( 7, 8))In [ 0]:data .classes, data .c,  len(data .train_ds),  len(data .valid_ds)Out[ 0]:([ &#39;718&#39;,  &#39;911&#39;,  &#39;cayenne&#39;,  &#39;macan&#39;,  &#39;panamera&#39;,  &#39;taycan&#39;],  6,  1920,  480)\n    In [ 0]: learn .save( &#39;stage-1&#39;) In [ 0]: learn .unfreeze() In [ 0]: learn .lr_find()  25.00 % [ 1 / 4  00: 12 &lt; 00: 37] ```epoch  | train_loss  | valid_loss  | error_rate  | time -----  |  ----------  |  ----------  |  ----------  |  ---- 0  |  0.196860  |  #na# | 00:12 83.33 % [ 25 / 30  00: 10 &lt; 00: 02  0.6416]LR Finder  is complete,  type {learner_name} .recorder .plot() to see the graph . ```In [ 0]: # If the plot is not showing try to give a start and end learning rate # learn.lr_find(start_lr=1e-5, end_lr=1e-1)learn .recorder .plot()In [ 0]:learn .fit_one_cycle( 2, max_lr = slice( 3e-5, 3e-4))epoch train_loss valid_loss error_rate time 0  0.280386  1.524914  0.372917  00: 13 1  0.276844  1.312542  0.345833  00: 13In [ 0]:learn .save( &#39;stage-2&#39;) ``` ### InterpretationIn [ 0]:learn .load( &#39;stage-2&#39;);In [ 0]:interp  = ClassificationInterpretation .from_learner(learn)In [ 0]:interp .plot_confusion_matrix() ### Cleaning UpSome of our top losses aren &#39;t due to bad performance by our model. There are images in our data set that shouldn&#39;t be .Using the ImageCleaner widget  from fastai.widgets we can prune our top losses, removing photos that don &#39;t belong. ``` In [0]: from fastai.widgets import \\* ``` First we need to get the file paths from our top_losses. We can do this with .from_toplosses. We then feed the top losses indexes and corresponding dataset to ImageCleaner. Notice that the widget will not delete images directly from disk but it will create a new csv file cleaned.csv from where you can create a new ImageDataBunch with the corrected labels to continue training your model. ``` In [0]: db = (ImageList.from_folder(path) .split_none() .label_from_folder() .transform(get_transforms(), size=224) .databunch() ) In [0]: # If you already cleaned your data using indexes from `from_toplosses`, # run this cell instead of the one before to proceed with removing duplicates. # Otherwise all the results of the previous step would be overwritten by # the new run of `ImageCleaner`. db = (ImageList.from_csv(path, &#39;cleaned .csv &#39;, folder=&#39; . &#39;) .split_none() .label_from_df() .transform(get_transforms(), size=224) .databunch() ) ``` Then we create a new learner to use our new databunch with all the images. ``` In [0]: learn_cln = cnn_learner(db, models.resnet50, metrics=error_rate) learn_cln.load(&#39;stage - 2 &#39;); In [0]: ds, idxs = DatasetFormatter().from_toplosses(learn_cln) In [0]: # Don&#39;t run this  in google colab  or  any other instances running jupyter lab . # If you do run this on Jupyter Lab, you need to restart your runtime and # runtime state including all local variables will be lost.ImageCleaner(ds, idxs, path) ```HBox(children =(VBox(children =(Image(value = b &#39; \\xff\\xd8\\xff\\xe0\\x00\\x10 JFIF \\x00\\x01\\x01\\x01\\x00 d \\x00 d \\x00\\x00\\xff \u2026 Button(button_style=&#39;primary &#39;, description=&#39;Next Batch &#39;, layout=Layout(width=&#39;auto &#39;), style=ButtonStyle()) Flag photos for deletion by clicking &#39;Delete &#39;. Then click &#39;Next Batch &#39; to delete flagged photos and keep the rest in that row. ImageCleaner will show you a new row of images until there are no more to show. In this case, the widget will show you images until there are none left from top_losses.ImageCleaner(ds, idxs) You can also find duplicates in your dataset and delete them! To do this, you need to run .from_similars to get the potential duplicates&#39; ids  and then run ImageCleaner  with duplicates = True . The API works  in a similar way  as  with misclassified images: just choose the ones you want to delete  and click  &#39;Next Batch&#39; until there are no more images left .Make sure to recreate the databunch  and learn_cln  from the cleaned.csv file. Otherwise the file would be overwritten from scratch, losing  all the results  from cleaning the data from toplosses. ```In [ 0]:ds, idxs  = DatasetFormatter() .from_similars(learn_cln)Getting activations ... 100.00 % [ 36 / 36  00: 05 &lt; 00: 00]Computing similarities ...In [ 0]:ImageCleaner(ds, idxs, path, duplicates = True)HBox(children =(VBox(children =(Image(value = b &#39; \\xff\\xd8\\xff\\xe0\\x00\\x10 JFIF \\x00\\x01\\x01\\x01\\x00 d \\x00 d \\x00\\x00\\xff \u2026 Button(button_style=&#39;primary &#39;, description=&#39;Next Batch &#39;, layout=Layout(width=&#39;auto &#39;), style=ButtonStyle()) ``` Remember to recreate your ImageDataBunch from your cleaned.csv to include the changes you made in your data! ### Putting your model in production First thing first, let&#39;s export the content of our Learner  object  for production: ```In [ 0]:learn .export() ```This will create a  file named  &#39;export.pkl&#39;  in the directory where we were working that contains everything we need to deploy our model (the model, the weights but also some metadata like the classes  or the transforms /normalization used) .You probably want to use CPU  for inference,  except at massive scale ( and you almost certainly don &#39;t need to train in real-time). If you don&#39;t have a GPU that happens automatically . You can test your model on CPU like so: ```In [ 0]:defaults .device  = torch .device( &#39;cpu&#39;)In [ 0]:img  = open_image(path / &#39;download.jpg&#39;)imgOut[ 0]: ```We create our Learner  in production enviromnent like this, just make sure that path contains the  file  &#39;export.pkl&#39;  from before. ```In [ 0]:In [ 0]:learn  = load_learner(path)In [ 0]:pred_class,pred_idx,outputs  = learn .predict(img)pred_classOut[ 0]:Category panamera ```So you might create a route something like this (thanks to Simon Willison  for the structure of this code): ``` @app.route( &#34;/classify-url&#34;, methods =[ &#34;GET&#34;])async  def  classify *url(request): bytes  = await get_bytes(request .query_params[ &#34;url&#34;])img  = open_image(BytesIO( bytes)) *,\\_,losses  = learner .predict(img) return JSONResponse({ &#34;predictions&#34;:  sorted( zip(cat_learner .data .classes,  map( float, losses)),key = lambda p: p[ 1],reverse = True)})(This example  is  for the Starlette web app toolkit .) ``` ### Things that can go wrongMost of the time things will train fine  with the defaultsThere &#39;s not much you really need to tune (despite what you&#39;ve heard!)Most likely areLearning rateNumber of epochs ### Learning rate (LR) too high ```In [ 0]:learn  = cnn_learner(data, models .resnet34, metrics =error_rate)In [ 0]:learn .fit_one_cycle( 1, max_lr = 0.5) ```Total time:  00: 13epoch train_loss valid_loss error_rate 1  12.220007  1144188288.000000  0.765957 ( 00: 13) ### Learning rate (LR) too low ```In [ 0]:learn  = cnn_learner(data, models .resnet34, metrics =error_rate) ```Previously we had this result:Total time:  00: 57epoch  | train_loss  | valid_loss  | error_rate -----  |  ----------  |  ----------  |  ---------- 1  |  1.030236  |  0.179226  |  0.028369  | ( 00: 14) 2  |  0.561508  |  0.055464  |  0.014184  | ( 00: 13) 3  |  0.396103  |  0.053801  |  0.014184  | ( 00: 13) 4  |  0.316883  |  0.050197  |  0.021277  | ( 00: 15) ```In [ 0]:learn .fit_one_cycle( 5, max_lr = 1e-5) ```Total time:  01: 07epoch  | train_loss  | valid_loss  | error_rate -----  |  ----------  |  -----------  |  ----------- 1  |  1.349151  |  1.062807  |  0.609929  | ( 00: 13) 2  |  1.373262  |  1.045115  |  0.546099  | ( 00: 13) 3  |  1.346169  |  1.006288  |  0.468085  | ( 00: 13) 4  |  1.334486  |  0.978713  |  0.453901  | ( 00: 13) 5  |  1.320978  |  0.978108  |  0.446809  | ( 00: 13) ```In [ 0]:learn .recorder .plot_losses() ```As well  as taking a really  long time, it &#39;s getting too many looks at each image, so may overfit. ### Too few epochs ``` In [0]: learn = cnn_learner(data, models.resnet34, metrics=error_rate, pretrained=False) In [0]: learn.fit_one_cycle(1) ``` Total time: 00:14 epoch train_loss valid_loss error_rate 1 0.602823 0.119616 0.049645 (00:14) ### Too many epochs ``` In [0]: np.random.seed(42) data = ImageDataBunch.from_folder(path, train=&#34;.&#34;, valid_pct=0.9, bs=32, ds_tfms=get_transforms(do_flip=False, max_rotate=0, max_zoom=1, max_lighting=0, max_warp=0 ),size=224, num_workers=4).normalize(imagenet_stats) In [0]: learn = cnn_learner(data, models.resnet50, metrics=error_rate, ps=0, wd=0) learn.unfreeze() In [0]: learn.fit_one_cycle(40, slice(1e-6,1e-4)) Total time: 06:39 ``` epoch | train_loss | valid_loss | error_rate ----- | ---------- | ---------- | ---------- 1 | 1.513021 | 1.041628 | 0.507326 | (00:13) 2 | 1.290093 | 0.994758 | 0.443223 | (00:09) 3 | 1.185764 | 0.936145 | 0.410256 | (00:09) 4 | 1.117229 | 0.838402 | 0.322344 | (00:09) 5 | 1.022635 | 0.734872 | 0.252747 | (00:09) 6 | 0.951374 | 0.627288 | 0.192308 | (00:10) 7 | 0.916111 | 0.558621 | 0.184982 | (00:09) 8 | 0.839068 | 0.503755 | 0.177656 | (00:09) 9 | 0.749610 | 0.433475 | 0.144689 | (00:09) 10 | 0.678583 | 0.367560 | 0.124542 | (00:09) 11 | 0.615280 | 0.327029 | 0.100733 | (00:10) 12 | 0.558776 | 0.298989 | 0.095238 | (00:09) 13 | 0.518109 | 0.266998 | 0.084249 | (00:09) 14 | 0.476290 | 0.257858 | 0.084249 | (00:09) 15 | 0.436865 | 0.227299 | 0.067766 | (00:09) 16 | 0.457189 | 0.236593 | 0.078755 | (00:10) 17 | 0.420905 | 0.240185 | 0.080586 | (00:10) 18 | 0.395686 | 0.255465 | 0.082418 | (00:09) 19 | 0.373232 | 0.263469 | 0.080586 | (00:09) 20 | 0.348988 | 0.258300 | 0.080586 | (00:10) 21 | 0.324616 | 0.261346 | 0.080586 | (00:09) 22 | 0.311310 | 0.236431 | 0.071429 | (00:09) 23 | 0.328342 | 0.245841 | 0.069597 | (00:10) 24 | 0.306411 | 0.235111 | 0.064103 | (00:10) 25 | 0.289134 | 0.227465 | 0.069597 | (00:09) 26 | 0.284814 | 0.226022 | 0.064103 | (00:09) 27 | 0.268398 | 0.222791 | 0.067766 | (00:09) 28 | 0.255431 | 0.227751 | 0.073260 | (00:10) 29 | 0.240742 | 0.235949 | 0.071429 | (00:09) 30 | 0.227140 | 0.225221 | 0.075092 | (00:09) 31 | 0.213877 | 0.214789 | 0.069597 | (00:09) 32 | 0.201631 | 0.209382 | 0.062271 | (00:10) 33 | 0.189988 | 0.210684 | 0.065934 | (00:09) 34 | 0.181293 | 0.214666 | 0.073260 | (00:09) 35 | 0.184095 | 0.222575 | 0.073260 | (00:09) 36 | 0.194615 | 0.229198 | 0.076923 | (00:10) 37 | 0.186165 | 0.218206 | 0.075092 | (00:09) 38 | 0.176623 | 0.207198 | 0.062271 | (00:10) 39 | 0.166854 | 0.207256 | 0.065934 | (00:10) 40 | 0.162692 | 0.206044 | 0.062271 | (00:09) ```", "posttime": "2020-10-29 10:30:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4fdd\u65f6\u6377,porsche,\u56fe\u50cf", "title": "\u4fdd\u65f6\u6377\u5206\u7c7b\u5668-\u4ee595%\u7684\u51c6\u786e\u7387\u8bc6\u522b\u4fdd\u65f6\u6377\u8f66\u578b", "title_en": "Porsche Classifier \u2013 Identify Porsche models with 95% accuracy", "transed": 1, "url": "https://www.rkpblog.tech/2020/04/porsche-classifier/", "via": "", "real_tags": ["\u4fdd\u65f6\u6377", "porsche", "\u56fe\u50cf"]}, {"category": "", "categoryclass": "", "imagename": "b590e4878451fa570faabb8296bf9b41.jpg", "infoid": 1031878, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f8e\u56fd\u56fd\u571f\u5b89\u5168\u90e8\u5ba3\u5e03\uff0c\u5c06\u53d6\u4ee3H-1B\u7b7e\u8bc1\u62bd\u7b7e\u5236\u5ea6\uff0c\u5373\u62e5\u6709\u5927\u5b66\u5b66\u4f4d\u7684\u5916\u56fd\u516c\u6c11\u7ade\u4e89\u6709\u9650\u7684\u540d\u989d\uff0c\u800c\u57fa\u4e8e\u5de5\u8d44\u7684\u9074\u9009\u8fc7\u7a0b\u5c06\u4f18\u5148\u8003\u8651\u66f4\u9ad8\u7684\u5de5\u8d44\u3002\u6839\u636e\u53f8\u6cd5\u90e8\u7684\u516c\u544a\uff0c\u201c\u57fa\u4e8e\u5de5\u8d44\u6c34\u5e73\u7684\u4f18\u5148\u987a\u5e8f\u548c\u9009\u62e9\u66f4\u597d\u5730\u5e73\u8861\u4e86\u8bf7\u613f\u4eba\u3001H-1B\u5de5\u4eba\u548c\u7f8e\u56fd\u5de5\u4eba\u7684\u5229\u76ca\u3002\u63d0\u8bae\u7684\u6539\u53d8..\u3002\u8fd9\u5c06\u4fdd\u6301\u5bf9H-1B\u4e0a\u9650\u9009\u62e9\u8fc7\u7a0b\u7684\u6709\u6548\u548c\u9ad8\u6548\u7684\u7ba1\u7406\uff0c\u540c\u65f6\u4f7f\u4e00\u4e9b\u6f5c\u5728\u7684\u8bf7\u613f\u4eba\u80fd\u591f\u901a\u8fc7\u540c\u610f\u5411H-1B\u53d7\u76ca\u4eba\u652f\u4ed8\u7b49\u4e8e\u6216\u8d85\u8fc7\u66f4\u9ad8\u7684\u73b0\u884c\u5de5\u8d44\u6c34\u5e73\u7684\u66f4\u9ad8\u5de5\u8d44\uff0c\u6f5c\u5728\u5730\u63d0\u9ad8\u4ed6\u4eec\u88ab\u9009\u4e2d\u7684\u673a\u4f1a\u3002\u201c\u3002\n\u6839\u636e\u53f8\u6cd5\u90e8\u7684\u8bf4\u6cd5\uff0c\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u4fee\u6539H-1B\u4e0a\u9650\u9009\u62e9\u7a0b\u5e8f\u5c06\u6fc0\u52b1\u96c7\u4e3b\u63d0\u4f9b\u66f4\u9ad8\u7684\u5de5\u8d44\u6216\u7533\u8bf7\u9700\u8981\u66f4\u9ad8\u6280\u80fd\u548c\u66f4\u9ad8\u6280\u80fd\u5de5\u4eba\u7684\u804c\u4f4d\uff0c\u800c\u4e0d\u662f\u5229\u7528\u8be5\u8ba1\u5212\u6765\u586b\u8865\u76f8\u5bf9\u8f83\u4f4e\u7684\u85aa\u916c\u7a7a\u7f3a\u3002\n\u201c\u6709\u4e86\u8fd9\u9879\u62df\u8bae\u7684\u89c4\u5b9a\uff0c\u7279\u6717\u666e\u653f\u5e9c\u5c06\u7ee7\u7eed\u5151\u73b0\u5176\u627f\u8bfa\uff0c\u5728\u52a0\u5f3a\u7ecf\u6d4e\u7684\u540c\u65f6\u4fdd\u62a4\u7f8e\u56fd\u5de5\u4eba\u3002H-1B\u9879\u76ee\u7ecf\u5e38\u88ab\u7f8e\u56fd\u96c7\u4e3b\u548c\u4ed6\u4eec\u7684\u7f8e\u56fd\u5ba2\u6237\u5229\u7528\u548c\u6ee5\u7528\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u96c7\u4f63\u5916\u56fd\u5de5\u4eba\u548c\u652f\u4ed8\u66f4\u4f4e\u7684\u5de5\u8d44\uff0c\u201c\u56fd\u571f\u5b89\u5168\u90e8\u4ee3\u7406\u526f\u90e8\u957f\u80af\u00b7\u5e93\u5947\u5185\u5229(Ken Cuccinelli)\u8bf4\u3002\u201d\u76ee\u524d\u4f7f\u7528\u968f\u673a\u9009\u62e9\u6765\u5206\u914dH-1B\u7b7e\u8bc1\u7684\u505a\u6cd5\uff0c\u4f7f\u4f01\u4e1a\u66f4\u96be\u8ba1\u5212\u62db\u8058\uff0c\u672a\u80fd\u5229\u7528H-1B\u9879\u76ee\u6765\u771f\u6b63\u7ade\u4e89\u4e16\u754c\u4e0a\u6700\u4f18\u79c0\u548c\u6700\u806a\u660e\u7684\u4eba\u624d\uff0c\u5e76\u901a\u8fc7\u4ee5\u727a\u7272\u7f8e\u56fd\u52b3\u52a8\u529b\u4e3a\u4ee3\u4ef7\u5f15\u5165\u76f8\u5bf9\u8f83\u4f4e\u5de5\u8d44\u7684\u5916\u56fd\u52b3\u52a8\u529b\u6765\u4f24\u5bb3\u7f8e\u56fd\u5de5\u4eba\u3002\u201c\u3002\n\u8fd9\u4e00\u52aa\u529b\u53ea\u4f1a\u5f71\u54cd\u672a\u6765\u5bfb\u6c42\u63d0\u4ea4H-1B\u4e0a\u9650\u4e3b\u9898\u8bf7\u613f\u4e66\u7684\u8bf7\u613f\u4eba\u63d0\u4ea4\u7684H-1B\u6ce8\u518c\u3002\u5b83\u5c06\u540c\u65f6\u9002\u7528\u4e8eH-1B\u5e38\u89c4\u4e0a\u9650\u548cH-1B\u9ad8\u7ea7\u5b66\u4f4d\u8c41\u514d\uff0c\u4f46\u4e0d\u4f1a\u6539\u53d8\u4e24\u8005\u4e4b\u95f4\u7684\u9009\u62e9\u987a\u5e8f\u3002\nH1B\u7b7e\u8bc1\u8ba1\u5212\u662f\u7f8e\u56fd\u4e0e\u5176\u4ed6\u56fd\u5bb6\u4e89\u593a\u5916\u56fd\u4e13\u4e1a\u5de5\u4eba\u586b\u8865\u52b3\u52a8\u529b\u7a7a\u7f3a\u7684\u4e3b\u8981\u65b9\u5f0f\u3002\u8be5\u8ba1\u5212\u6700\u8fd1\u56e0\u8868\u9762\u4e0a\u538b\u4f4e\u5bb6\u653f\u5de5\u4eba\u7684\u5de5\u8d44\u800c\u53d7\u5230\u62a8\u51fb\u3002\u7136\u800c\uff0c\u6839\u636e\u76ee\u524d\u7684\u8ba1\u5212\uff0c\u5bfb\u6c42\u96c7\u7528\u5916\u56fd\u5de5\u4eba\u7684\u7f8e\u56fd\u96c7\u4e3b\u5fc5\u987b\u5411\u7533\u8bf7\u4eba\u652f\u4ed8\u7531\u52b3\u5de5\u90e8\u901a\u8fc7\u5168\u56fd\u5e02\u573a\u5b9a\u671f\u5de5\u8d44\u8c03\u67e5\u786e\u5b9a\u548c\u516c\u5e03\u7684\u73b0\u884c\u5de5\u8d44\u7387\u3002\u8fd9\u4e00\u5236\u5ea6\u7684\u590d\u6742\u56e0\u7d20\u4e4b\u4e00\u662f\uff0c\u4efb\u4f55\u7279\u5b9a\u804c\u4f4d\u90fd\u53ef\u80fd\u9700\u8981\u5177\u6709\u4e0d\u540c\u7ecf\u9a8c\u7684\u4e2a\u4eba\uff0c\u56e0\u6b64\uff0c\u73b0\u884c\u7684\u5de5\u8d44\u7387\u53d6\u51b3\u4e8e\u96c7\u4e3b\u8981\u6c42\u7684\u8d44\u5386\u6c34\u5e73\u3002\u9ad8\u7ea7\u5de5\u4eba\u7684\u5de5\u8d44\u5c06\u8f83\u9ad8\uff0c\u800c\u521d\u7ea7\u5de5\u4eba\u7684\u5de5\u8d44\u5c06\u8f83\u4f4e\u3002\u8fd9\u66f4\u591a\u7684\u662f\u52b3\u5de5\u90e8\u786e\u5b9a\u73b0\u884c\u5de5\u8d44\u7684\u65b9\u5f0f\u7684\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u5916\u56fd\u5de5\u4eba\u6765\u7f8e\u56fd\u538b\u4f4e\u5bb6\u653f\u5de5\u4eba\u5de5\u8d44\u7684\u95ee\u9898\u3002\u8003\u8651\u4e2d\u7684\u63d0\u9ad8\u5de5\u8d44\u7387\u53ef\u80fd\u5bf9\u66f4\u591a\u9ad8\u6280\u80fd\u7684\u5916\u56fd\u5de5\u4eba\u6709\u5438\u5f15\u529b\uff0c\u4f46\u53ef\u80fd\u4e0d\u80fd\u89e3\u51b3\u586b\u8865\u52b3\u52a8\u529b\u4e2d\u6025\u9700\u7684\u804c\u4f4d\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u96c7\u4e3b\u53ef\u80fd\u8d1f\u62c5\u4e0d\u8d77\u8fd9\u6837\u7684\u5de5\u8d44\uff0c\u76f8\u53cd\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u4ee5\u8f83\u4f4e\u7684\u5de5\u8d44\u5728\u6d77\u5916\u7f51\u4e0a\u96c7\u7528\u8fd9\u4e9b\u5de5\u4eba\u3002\n\u4e00\u65e6\u62df\u8bae\u7684\u6cd5\u89c4\u53d1\u8868\u5728\u201c\u8054\u90a6\u767b\u8bb0\u518c\u201d(Federal Register)\u4e0a\uff0c\u5546\u52a1\u90e8\u5c06\u5f00\u542f\u516c\u4f17\u8bc4\u8bae\u671f\u3002\u611f\u5174\u8da3\u7684\u5404\u65b9\u5c06\u670930\u5929\u7684\u65f6\u95f4\u63d0\u4ea4\u4e0e\u62df\u8bae\u89c4\u5219\u6709\u5173\u7684\u8bc4\u8bba\uff0c60\u5929\u7684\u65f6\u95f4\u63d0\u4ea4\u4e0e\u62df\u8bae\u7684\u4fe1\u606f\u6536\u96c6\u6709\u5173\u7684\u8bc4\u8bba\u3002\n\u5728\u6211\u7684\u63a8\u7279\u6216LinkedIn\u4e0a\u5173\u6ce8\u6211\u3002\u6211\u53ef\u4ee5\u5728\u6211\u7684\u4e2a\u4eba\u7f51\u7ad9\u4e0a\u67e5\u770b\uff0c\u6216\u8005\u5728\u8fd9\u91cc\u67e5\u770b\u6211\u7684\u4e00\u4e9b\u5176\u4ed6\u5de5\u4f5c\u3002", "note_en": "The U.S. Department of Homeland Security has announced it will replace the H-1B visa lottery, in which\u00a0foreign citizens with college degrees compete for limited slots, with a wage-based selection process prioritizing higher salaries. According to the Department\u2019s announcement, \u201cPrioritization and selection based on wage levels better balances the interests of petitioners, H-1B workers, and U.S. workers. The changes proposed ... would maintain the effective and efficient administration of the H-1B cap selection process while providing some prospective petitioners the ability to potentially improve their chance of selection by agreeing to pay H-1B beneficiaries higher wages that equal or exceed higher prevailing wage levels.\u201d\n  According to the Department, modifying the H-1B cap selection process in this way will incentivize employers to offer higher wages or petition for positions requiring higher skills and higher-skilled workers instead of using the program to fill relatively lower-paid vacancies.\n       \u201cWith this proposed rule, the Trump administration is continuing to deliver on its promise to protect the American worker while strengthening the economy. The H-1B program is often exploited and abused by U.S. employers, and their U.S. clients, primarily seeking to hire foreign workers and pay lower wages,\u201d said Acting DHS Deputy Secretary Ken Cuccinelli.\u00a0\u201cThe current use of random selection to allocate H-1B visas makes it harder for businesses to plan their hiring, fails to leverage the H-1B program to truly compete for the world\u2019s best and brightest, and hurts American workers by bringing in relatively lower-paid foreign labor at the expense of the American workforce.\u201d\n  This effort would only affect H-1B registrations submitted by future petitioners seeking to file H-1B cap-subject petitions. It would be implemented for both the H-1B regular cap and the H-1B advanced degree exemption, but would not change the order of selection between the two.\n    The H1B visa program is the main way that America competes with other countries for specialty foreign workers who come to fill in vacancies in the work force. The program has recently been under attack for ostensibly undercutting the wages of domestic workers. Under the current program, however, the U.S. employer who seeks to engage a foreign worker is required to pay that applicant the prevailing wage rate as determined and published by the Department of Labor through regular salary surveys in the marketplace throughout the country. One of the complicating factors of this system is that any particular position may require individuals with varying experience and thus the prevailing wage rate depends on the level of seniority the employer requires. Senior workers will be paid higher wages while junior workers will be paid lower ones. This is more a problem of the way the prevailing wages are determined by the Department of Labor than it is about foreign workers coming to America to undercut domestic worker salaries. Raising the wage rates as contemplated may be attractive to more high skilled foreign workers, but may not solve the problem of filling much needed positions in the workforce since such wages may not be affordable to employers, who instead, may hire such workers online overseas at lower rates.\n  The Department will open a public comment period once the proposed regulation is published in the Federal Register. Interested parties will have 30 days to submit comments relevant to the proposed rule and 60 days to submit comments relevant to the proposed information collection.\n Follow me on\u00a0 Twitter\u00a0or\u00a0 LinkedIn.\u00a0 Check out\u00a0my\u00a0 website\u00a0or\u00a0some of my other work\u00a0 here.", "posttime": "2020-10-29 10:29:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b89\u5168\u90e8,homeland,\u5de5\u8d44", "title": "\u56fd\u571f\u5b89\u5168\u90e8\u5c06\u653e\u5f03H1B\u7b7e\u8bc1\u62bd\u7b7e\uff0c\u6539\u4e3a\u5de5\u8d44\u6392\u540d", "title_en": "Department of Homeland Security to Abandon H1B Visa Lottery for Salary Rankings", "transed": 1, "url": "https://www.forbes.com/sites/andyjsemotiuk/2020/10/28/department-of-homeland-security-to-abandon-h1b-visa-lottery-for-salary-rankings", "via": "", "real_tags": ["\u5b89\u5168\u90e8", "homeland", "\u5de5\u8d44"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1031877, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u6070\u597d\u7528\u6237\u6839\u672c\u4e0d\u9700\u8981\u56fd\u9645\u8c61\u68cb\u77e5\u8bc6\u5c31\u53ef\u4ee5\u4f7f\u7528\uff0c\u4ed6\u53ea\u9700\u5c06\u68cb\u5b50\u62d6\u5230\u68cb\u76d8\u4e0a\uff0c\u8bd5\u56fe\u590d\u5236\u56fe\u50cf\u4e2d\u6240\u793a\u7684\u4f4d\u7f6e\u3002\n\u5728\u8fd9\u91cc\uff0c\u7528\u6237\u88ab\u7ed9\u4e88\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4ee5\u53ca\u4ed6\u5fc5\u987b\u5728\u54ea\u91cc\u79fb\u52a8\u4e00\u5757\u4ee5\u5728\u677f\u4e0a\u521b\u5efa\u914d\u5408\u4f4d\u7f6e\u3002\u53ea\u6709\u68cb\u624b--\u4e5f\u8bb8\u8fd8\u6709\u7535\u8111\u5f15\u64ce\u3002\u54b3\u55fd..\uff01-\u4f1a\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u5728\u56fd\u9645\u8c61\u68cb\u7ad9\u70b9\u4e2d\u4f7f\u7528\u5b83\u6765\u786e\u5b9a\u7528\u6237\u662f\u771f\u6b63\u7684\u68cb\u624b\u8fd8\u662f\u7b80\u5355\u7684\u5783\u573e\u90ae\u4ef6\u53d1\u9001\u8005\u3002\n\u5982\u679c\u9700\u8981\uff0c\u53ef\u4ee5\u542f\u7528\u989c\u8272\u5bb9\u5dee\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u9a8c\u8bc1\u5c06\u662f\u989c\u8272\u4e0d\u53ef\u77e5\u7684\uff0c\u4f8b\u5982\uff0c\u767d\u4eba\u56fd\u738b\u5c06\u88ab\u89c6\u4e3a\u4e0e\u9ed1\u4eba\u56fd\u738b\u76f8\u7b49\u3002", "note_en": "In this mode which happens to be the one where the user needs no chess knowledge at all to use, he simply drags the pieces into the board trying to replicate the position shown in the image.\n   Here the user is given a position and where he has to move a piece to create a mating position on the board. Only chess players -and maybe computer engines. cough..!- will be able to solve this. It can be used for example in chess sites to determine if the user is really a chess player or a simple spammer.\n   If needed you can turn on color tolerance. In this case the validation will be color agnostic and for example the white king will be considered equal to the black king.", "posttime": "2020-10-29 10:29:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u56fd\u9645\u8c61\u68cb,chess,\u56fd\u738b", "title": "\u56fd\u9645\u8c61\u68cb\u9a8c\u8bc1\u7801", "title_en": "Chess Captcha", "transed": 1, "url": "https://elioair.github.io/chesscaptcha/", "via": "", "real_tags": ["\u56fd\u9645\u8c61\u68cb", "chess", "\u56fd\u738b"]}, {"category": "", "categoryclass": "", "imagename": "6b6739de6498c22a43a4a89275ba0e7b.png", "infoid": 1031876, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd0\u884cwgetchmod&amp\uff1b&amp\uff1bchmod+xinit.sh&amp\uff1b&amp\uff1b./https://raw.githubusercontent.com/unxed/dn2l/main/linux/init.sh\u83b7\u53d6\u6240\u6709\u9700\u8981\u7684\u6587\u4ef6\u5e76\u89e3\u538b\u7f29\u5b83\u4eec\u3002Dn2l\u5c06\u5728\u5b8c\u6210\u65f6\u81ea\u52a8\u8fd0\u884c\uff0c\u60a8\u53ea\u9700\u5173\u95ed\u5b83\u5373\u53ef\u3002\n\u8f6c\u5230\u9009\u9879-\u76ee\u5f55\uff0c\u5e76\u5c06{BASEDIR}\u66ff\u6362\u4e3a\u3002\u5728\u8f93\u51fa\u76ee\u5f55\u548cEXE\u8f93\u51fa\u76ee\u5f55\u4e2d\u3002\n\u6253\u5f00dn.pas\uff0c\u7f16\u8bd1-\u6784\u5efa(\u5b83\u751f\u6210.exe\uff0c\u4e0d\u8981\u60ca\u8bb6\uff0c\u5b83\u91cc\u9762\u6709Linux\u4e8c\u8fdb\u5236\u4ee3\u7801)\u3002\n\u6709\u4e9b\u5931\u8d25\u7684\u90e8\u5206\u6682\u65f6\u88ab\u6ce8\u91ca\u6389\u4e86\u3002\u5982\u679c\u9700\u8981\u4fee\u590d\u67d0\u4e9b\u7981\u7528\u7684\u4ee3\u7801\u8def\u5f84\uff0c\u60a8\u53ef\u4ee5\u6309\u5b57\u7b26\u4e32&#34\uff1b\u901a\u8fc7\u89e3\u5f00&#34\uff1b\u6765\u67e5\u627e\u8fd9\u4e9b\u7981\u7528\u7684\u4ee3\u7801\u8def\u5f84\u3002\n\u5982\u679c\u60a8\u8ba1\u5212\u5c1d\u8bd5\u4f7f\u7528\u514d\u8d39\u7684Pascal\u7f16\u8bd1\u5668\u6784\u5efadn2l\uff0c\u4e0d\u8981\u5fd8\u8bb0\u4f7f\u7528-sd\u5f00\u5173\uff0c\u5e76\u5c06{$asmMode intel}\u6307\u4ee4\u6dfb\u52a0\u5230\u6240\u6709\u5177\u6709\u6c47\u7f16\u4ee3\u7801\u7684\u6587\u4ef6\u4e2d\u3002\u6b64\u5916\uff0cFPC\u4e0d\u652f\u6301\u5355\u5143AFAIK\u7684\u4e3b\u4f53\u5728&#34\uff1b\u5b9e\u73b0&#34\uff1b\u90e8\u5206\u4e4b\u524d\u7684&#34\uff1b\u5185\u8054&#34\uff1b\u51fd\u6570\u3002\nDn2l\u5185\u90e8\u5c4f\u5e55\u5448\u73b0\u4ee3\u7801\u76ee\u524d\u4ec5\u652f\u6301\u6bcf\u4e2a\u5b57\u7b26\u4e00\u4e2a\u5b57\u8282\u7684\u5b57\u7b26\u96c6(\u76ee\u524d\u5b83\u662f\u786c\u7f16\u7801\u7684cp866\uff0c\u8bf7\u53c2\u9605vological slnx.patch)\u3002\u8981\u5207\u6362\u5230UTF-8\uff0c\u6211\u4eec\u53ef\u80fd\u5e94\u8be5\u4ece&#34\uff1bCHAR&#34\uff1b\u7684&#34\uff1b\u6570\u7ec4[0..3]\u79fb\u5230vological slnx.pas\u4e2d\u5b9a\u4e49\u7684TScrCell\u7ed3\u6784\u4e2d\uff0c\u66f4\u6539PScrBuffer/TScrBuffer(\u548c\u5176\u4ed6\u5c4f\u5e55\u7f13\u51b2\u533a\u6570\u7ec4\uff0c\u60a8\u4e5f\u53ef\u4ee5\u641c\u7d22&#34\uff1bTAWordArray(&#34\uff1b\u4ee5\u627e\u5230\u4e00\u4e9b)\u5b9a\u4e49\uff0c\u7136\u540e\u91cd\u5199\u6240\u6709\u4f7f\u7528\u6b64\u7c7b\u7f13\u51b2\u533a\u7684\u4ee3\u7801\uff0c\u5982\u5355\u8bcd\u6570\u7ec4\u3002\n\u4e0d\u8981\u5fd8\u8bb0views.vp\u548cdrivers.vp\u4e2d\u7684\u6c47\u7f16\u4ee3\u7801\uff0c\u56e0\u4e3a\u5b83\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5c4f\u5e55\u7f13\u51b2\u533a\u3002\u6211\u4eec\u53ef\u80fd\u5e94\u8be5\u8003\u8651\u7528Pascal\u91cd\u5199\u6240\u6709\u8fd9\u6837\u7684\u88c5\u914d\u90e8\u4ef6\uff0c\u56e0\u4e3a\u8fd9\u4e5f\u7b80\u5316\u4e86\u5411FPC\u7684\u79fb\u690d\u3002\u8ba9\u6211\u4eec\u4ee5\u8fd9\u4e00\u539f\u5219\u4e3a\u6307\u5bfc\uff0c\u9996\u5148\u6211\u4eec\u8981\u8ba9\u5b83\u5b8c\u5168\u8fd0\u8f6c\u8d77\u6765\uff0c\u7136\u540e\u6211\u4eec\u624d\u80fd\u4f7f\u5b83\u8fc5\u901f\u8fd0\u8f6c\u8d77\u6765\u3002\n\u907f\u514d\u5220\u9664\u5f53\u524d\u672a\u4f7f\u7528\u7684\u4ee3\u7801\u3002\u5982\u679cWin32/OS2/DPMI\u652f\u6301\u7684\u4ee3\u7801\u8def\u5f84\u963b\u6b62Linux\u7aef\u53e3\u5de5\u4f5c\uff0c\u5219\u5b83\u4eec\u53ef\u80fd\u4f1a\u88ab\u6ce8\u91ca\u6389\uff0c\u4f46\u5e94\u8be5\u4fdd\u7559\u5728\u4ee3\u7801\u5e93\u4e2d\uff0c\u4ee5\u4fbf\u6709\u4e00\u5929\u8ba9dn2l\u8de8\u5e73\u53f0\u3002\n\u8bb8\u53ef\u8bc1\uff1a\u4fee\u6539\u4e86BSD\uff0c\u4f46\u4f8b\u5916\u60c5\u51b5\u662f\u7981\u6b62\u5728\u5176\u4ed6\u8bb8\u53ef\u8bc1(\u5305\u62ec\u4f46\u4e0d\u9650\u4e8eGPL)\u4e0b\u91cd\u65b0\u6388\u6743\u3002\u6709\u5173\u5168\u6587\uff0c\u8bf7\u53c2\u89c1LICENSE.txt\u3002\n\u76ee\u524d\uff0cdn2l\u662f\u4f7f\u7528\u514d\u8d39\u8f6f\u4ef6Virtual Pascal\u7f16\u8bd1\u5668\u6784\u5efa\u7684\uff0c\u8fd9\u4e9b\u7f16\u8bd1\u5668\u662f\u4eceold-dos.ru\u83b7\u5f97\u7684(\u975e\u5e38\u611f\u8c22old-dos.ru\u56e2\u961f\uff01)\u3002\u5728\u8bb8\u53ef\u534f\u8bae\u5141\u8bb8\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u4ee5\u672a\u7ecf\u4fee\u6539\u7684\u539f\u59cb\u5f62\u5f0f\u4e0edn2l\u4e00\u8d77\u91cd\u65b0\u5206\u53d1\u3002\u6709\u5173\u865a\u62dfPASCAL\u5206\u53d1\u6761\u6b3e\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1VP_DIST/LICENCE.TXT\u3002\n\u53d6\u81eaDN\u5f00\u6e90\u9879\u76ee(dnosp.com)\u7684\u6e90\u4ee3\u7801\u7684\u539f\u59cb\u7248\u672c\u5305\u542b\u4e00\u4e9b\u6765\u81eaVirtual Pascal\u7684RTL\u5e93\u7684\u6587\u4ef6\u3002Dn2l\u7684\u4e3b\u8981\u5f00\u53d1\u8005\u662f\u7a0b\u5e8f\u5458\uff0c\u800c\u4e0d\u662f\u5f8b\u5e08\uff0c\u56e0\u6b64\u4e0d\u786e\u5b9a\u8fd9\u4e9b\u6587\u4ef6\u7684\u4fee\u6539\u7248\u672c\u662f\u5426\u53ef\u4ee5\u91cd\u65b0\u5206\u53d1(Virtual Pascal\u8bb8\u53ef\u534f\u8bae\u7981\u6b62\u5206\u53d1Virtual Pascal\u7684\u4fee\u6539\u7248\u672c\uff0c\u76ee\u524d\u8fd8\u4e0d\u6e05\u695a\u8fd9\u662f\u5426\u9002\u7528\u4e8e\u4ee5\u6e90\u4ee3\u7801\u5f62\u5f0f\u63d0\u4f9b\u7684RTL)\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u4e3a\u4e86\u907f\u514d\u53ef\u80fd\u7684\u6cd5\u5f8b\u95ee\u9898\uff0c\u6240\u6709\u8fd9\u6837\u7684\u6587\u4ef6\u90fd\u4ece\u6e90\u4ee3\u7801\u6811\u4e2d\u5220\u9664\u4e86\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u4f7f\u7528\u5bf9VPRTL\u7684\u539f\u59cb\u6e90\u8fdb\u884c\u4e86\u5fc5\u8981\u66f4\u6539\u7684\u8865\u4e01\uff0c\u56e0\u6b64\u6ca1\u6709\u4e0edn2l\u6346\u7ed1\u5728\u4e00\u8d77\u7684\u4fee\u6539\u8fc7\u7684VP\u90e8\u5206\uff0c\u6b63\u5982VP License\u6240\u8bf4\u7684\u90a3\u6837\u3002\u8fd9\u4e9b\u8865\u4e01\u662f\uff1a\nSysutils.patch\uff0c\u5e94\u7528\u4e8e\u6765\u81eaVP\u7684sysutils.pas\u5934\u6587\u4ef6\u3002\u6839\u636eFSF\u7684\u89c4\u5b9a\uff0c\u6807\u9898\u4e0d\u80fd\u53d7\u7248\u6743\u4fdd\u62a4\u3002\nVological slnx.patch\uff0c\u4eceVP RTL src\u5e94\u7528\u4e8evological slnx.pas\u3002\u53ea\u5305\u542b\u6700\u5c11\u7684\u9700\u8981\u5f15\u7528\u7684\u539f\u6587\uff0c\u6240\u4ee5\u7edd\u5bf9\u662f\u5408\u7406\u4f7f\u7528\u7684\u3002\nVological slow.patch\u3001vological sd32.patch\u3001vological sos2.patch-dn2l\u6839\u672c\u4e0d\u4f7f\u7528\uff0c\u4ec5\u51fa\u4e8e\u6559\u80b2\u548c\u5386\u53f2\u76ee\u7684\u63d0\u4f9b\uff0c\u4ec5\u5305\u542b\u6765\u81ea\u539f\u6587\u7684\u6700\u4f4e\u8981\u6c42\u7684\u5f15\u6587\uff0c\u56e0\u6b64\u4e5f\u5e94\u88ab\u89c6\u4e3a\u5408\u7406\u4f7f\u7528\u3002\nDN2\u7684\u4e3b\u8981\u5f00\u53d1\u4eba\u5458\u4e0d\u786e\u5b9aDN OSP\u56e2\u961f\u6240\u505a\u7684DN\u4ee3\u7801\u66f4\u6539\u7684\u786e\u5207\u8bb8\u53ef\u6761\u6b3e(\u5305\u62ec\u5217\u51fa\u7684\u8865\u4e01\u7a0b\u5e8f)\u3002\u5176\u4e2d\u4e00\u4e9b\u6587\u4ef6\u4e0d\u5c5e\u4e8eRitlabs\u53d1\u5e03\u7684\u539f\u59cbDN\u6e90\u4ee3\u7801\u6587\u4ef6\uff0c\u5176\u4e2d\u4e0d\u5305\u542b\u4efb\u4f55\u8bb8\u53ef\u4fe1\u606f\u3002\u4ed6\u5047\u8bbe\u8be5\u4ee3\u7801\u7684\u5206\u53d1\u6761\u6b3e\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u4e0e\u6574\u4e2a\u9879\u76ee\u7684\u5206\u53d1\u6761\u6b3e\u76f8\u540c\uff0c\u56e0\u4e3a\u8be5\u4ee3\u7801\u662f\u4e13\u95e8\u4e3a\u8be5\u9879\u76ee\u7f16\u5199\u7684\uff0c\u5e76\u4e14\u4e0e\u5b83\u4e00\u8d77\u5206\u53d1\u5728\u76f8\u540c\u7684\u5f52\u6863\u4e2d\u3002\nDn2l\u8fd8\u5305\u542b\u82f1\u8bed\u8d44\u6e90\u6587\u4ef6\u548c\u82f1\u8bed\u8d44\u6e90\u6587\u4ef6\u3002\u8fd9\u4e9b\u6587\u4ef6\u5e94\u4f7f\u7528rcp.pas\u4ece\u8d44\u6e90\u6587\u4ef6\u5939\u4e2d\u7684\u914d\u7f6e\u6587\u4ef6\u751f\u6210\uff0c\u4f46rcp.pas\u5f53\u524d\u5df2\u635f\u574f\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u7684\u8d44\u6e90\u6587\u4ef6\u53d6\u81eaDN\u4e8c\u8fdb\u5236\u5206\u53d1\u3002\u8fd9\u4e9b\u6587\u4ef6\u7684\u6e90\u811a\u672c\u5728\u4e0e\u6574\u4e2aDN\u76f8\u540c\u7684\u6761\u4ef6\u4e0b\u83b7\u5f97\u8bb8\u53ef\u3002\n\u539f\u6765\uff0c\u4e00\u4e9b\u6700\u521d\u7531Ritlabs\u53d1\u5e03\u5e76\u56e0\u6b64\u7531dn2l\u7ee7\u627f\u7684\u6e90\u4ee3\u7801\u6587\u4ef6\u57fa\u4e8eTurbo Vision for Turbo Pascal\u7684\u6e90\u4ee3\u7801\uff0cBorland\u4ece\u672a\u5728\u4efb\u4f55\u8bb8\u53ef\u8bb8\u53ef\u4e0b\u53d1\u5e03\u8fd9\u4e9b\u6e90\u4ee3\u7801\u3002\u53ea\u8981\u6211\u4eec\u6ca1\u6709\u7406\u7531\u6000\u7591Ritlabs\u7684\u8bda\u610f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5047\u8bbe\u4ed6\u4eec\u6709\u6743\u5728\u4ed6\u4eec\u7684\u5f00\u6e90\u4ea7\u54c1\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u4ee3\u7801\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u8ba4\u4e3a\u5728dn2l\u4e2d\u4f7f\u7528\u8be5\u4ee3\u7801\u662f\u5408\u7406\u4f7f\u7528\uff0c\u56e0\u4e3adn2l\u4e0d\u4f1a\u4ecedn2l\u4e2d\u83b7\u5229\uff0cdn2l\u4e0d\u4f1a\u5bf9Embarcadero Technologies\u7684\u4e1a\u52a1\u6784\u6210\u4efb\u4f55\u5a01\u80c1\uff0cdn2l\u4ec5\u4f7f\u7528\u6765\u81ea\u539f\u59cbTurbo Vision\u8d44\u6e90\u7684\u6700\u4f4e\u5fc5\u8981\u90e8\u4ef6\uff0c\u5e76\u4e14\u6574\u4e2adn2l\u9879\u76ee\u5177\u6709\u5386\u53f2\u548c\u6559\u80b2\u4ef7\u503c\u3002\u7136\u800c\uff0c\u6700\u597d\u53ea\u8003\u8651\u5728dn2l\u4e2d\u4f7f\u7528\u6b64\u4ee3\u7801\u4f5c\u4e3a\u4e34\u65f6\u89e3\u51b3\u65b9\u6848\uff1a\u6211\u4eec\u5e94\u8be5\u4eceFree Pascal\u9879\u76ee\u4e2d\u9010\u6b65\u7528Free Vision\u66ff\u6362\u8fd9\u4e9b\u4ee3\u7801\uff0c\u8fd9\u5e94\u8be5\u662f\u9996\u8981\u4efb\u52a1\uff0c\u56e0\u4e3a\u9700\u8981\u575a\u5b9e\u7684\u6cd5\u5f8b\u57fa\u7840\u6765\u786e\u4fdddn2l\u7684\u4efb\u4f55\u8fdb\u4e00\u6b65\u5f00\u53d1\u3002\u4e0b\u9762\u662f\u6b64\u7c7b\u6587\u4ef6\u7684\u5b8c\u6574\u5217\u8868\uff1aCollect t.pas\u3001Colorsel.pas\u3001decder.pas\u3001Dialogs.pas\u3001drivers2.pas\u3001drivers.pas\u3001histlist.pas\u3001memory y.pas\u3001menus.pas\u3001twhc.pas\u3001validate.pas\u548cviews.pas\u3002\n\u57fa\u4e8eRIT\u7814\u7a76\u5b9e\u9a8c\u5ba4\u7684Dos Navigator\uff0c\u975e\u5e38\u611f\u8c22\u60a8\u5f00\u653e\u4ee3\u7801\u3002\u8fd8\u8981\u611f\u8c22DN OSP\u56e2\u961f\u4f7f\u8001\u5f0fDOS\u6e90\u4ee3\u7801\u6210\u4e3a32\u4f4d\u548c\u591a\u5e73\u53f0\u53cb\u597d\u7684\u3002\u591a\u4e8f\u4e86\u6258\u7ba1Virtual Pascal\u53d1\u884c\u7248\u7684\u8001Dos.ru\u56e2\u961f--\u5982\u679c\u6ca1\u6709\u627e\u5230\u548c\u4e0b\u8f7dVP\u7684\u80fd\u529b\uff0cdn2l\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u8bde\u751f\u3002\u611f\u8c22VP\u5f00\u53d1\u4eba\u5458\u5c06\u4ed6\u4eec\u7684\u4ea7\u54c1\u4f5c\u4e3a\u514d\u8d39\u8f6f\u4ef6\u63d0\u4f9b-\u672a\u7ecf\u8bb8\u53ef\u4f7f\u7528\u4ed6\u4eec\u7684\u7f16\u8bd1\u5668\uff0cdn2l\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u6784\u5efa\u3002\u540c\u65f6\u4e5f\u611f\u8c22habr.com\u793e\u533a\u7684\u542f\u53d1\uff01", "note_en": "Run  wget https://raw.githubusercontent.com/unxed/dn2l/main/linux/init.sh &amp;&amp; chmod +x init.sh &amp;&amp; ./init.sh to get all needed files and unpack them. dn2l will be run automatically on finish, you should just close it.\n       Go to  Options- Directories and replace  {BASEDIR} with  . in  Output directory and  Exe output directory\n Open  dn.pas,  Compile- Build (it generates .exe, don&#39;t be surprised, it has linux binary code inside)\n    Some parts that are failing are commented out for now. You can search code by string &#34;by unxed&#34; to find out such disabled code paths if whishing to fix some of them.\n If you plan to try building dn2l with Free Pascal Compiler, don&#39;t forget to use -Sd switch and to add {$asmMode intel} directive to all files with assembly code. Also FPC does not supports &#34;inline&#34; functions having body before &#34;implementation&#34; part of a unit, AFAIK.\n dn2l internal screen rendering code currently supports only one-byte-per-character charsets (it is hardcoded cp866 for now, see vpsyslnx.patch). To switch to UTF-8 we possibly should move from &#34;Char&#34; to &#34;array[0..3] of Char&#34; in TScrCell structure defined in vpsyslnx.pas, change PScrBuffer/TScrBuffer (and other screen buffer arrays, you can search for &#34;TAWordArray(&#34; to find some) definitions also, and rewrite all code that works with such buffers as arrays of Words.\n Don&#39;t forget about assembly code inside views.vp and drivers.vp as it also works with screen buffers. We probably should consider rewriting all such assembly parts in Pascal as this also simplifies porting to FPC. Let&#39;s be guided by the principle &#34;first we will make it work at all, and only then we will make it work quickly&#34;.\n Avoid removing currently unused code. Code paths for Win32/OS2/DPMI support may be commented out if they prevent linux port from working, but should stay in code base for someone wanting to make dn2l cross platform someday.\n  License: modified BSD with an exception prohibiting re-licensing under another license, including, but not limited to, GPL. See LICENSE.txt for full text.\n Currently dn2l is built using freeware Virtual Pascal compiler obtained from old-dos.ru (big thanks, old-dos.ru team!). It is redistributed with dn2l in it&#39;s original unmodified form as permitted by license agreement. See vp_dist/LICENCE.TXT for more information on Virtual Pascal distribution terms.\n The original version of the source code taken from DN open source project (dnosp.com) contained some files from the RTL libraries of Virtual Pascal. The main developer of dn2l is a programmer, not a lawyer, and therefore not sure if modified versions of those files can be redistributed or not (the Virtual Pascal license agreement prohibits &#34;distribution of a modified version of Virtual Pascal&#34;, and it&#39;s unclear if this applies to RTLs supplied in source code form, or not). Anyway, to avoid possible legal problems, all such files were removed from the source code tree. Patches with the necessary changes over the original sources from VP RTL are used instead, so there are no modified VP parts bundled with dn2l, just as VP license says. Those patches are:\n sysutils.patch, applied upon sysutils.pas header file from VP. According to FSF, headers can not be copyrighted.\n vpsyslnx.patch, applied upon vpsyslnx.pas from VP RTL src. Contains only minimal required quotations from original, so definitly a fair use.\n vpsyslow.patch, vpsysd32.patch, vpsysos2.patch, vpsysw32.patch \u2014 not used by dn2l at all, provided for educational and historical purposes only, contain only minimal required quotations from originals, so should be considered a fair use also.\n The main developer of dn2 is not sure about exact licensing terms for the DN code changes that were made by the DN OSP team (including the listed patches). Some of them do not belong to the original DN source code files published by Ritlabs and do not contain any licensing information inside. He assumes the distribution terms for that code can be considered to be the same as for the entire project, since this code was written specifically for this project and was distributed in the same archive with it.\n dn2l also contains &#34;English.DLG&#34; and &#34;English.LNG &#34; resouce files. Those files should be generated using rcp.pas from config files in RESOURCE folder, but rcp.pas is currently broken, so ready to use resource files are taken from DN binary distribution. The source scripts for those files are licensed under the same conditions as entire DN.\n  It turned out that some of the source code files originally published by Ritlabs and therefore inherited by dn2l were based on the source code of Turbo Vision for Turbo Pascal, never published by Borland under any permissive license. As long as we have no reason to doubt the good faith of Ritlabs, we can assume that they had the right to use this code in their open source product. We also still can consider usage of that code in dn2l as fair use, since no profit is being made from dn2l, dn2l does not pose any threat to the business of Embarcadero Technologies, dn2l is using only the minimum necessary parts from original Turbo Vision sources, and the entire dn2l project has historical and educational value. Yet it&#39;s better to consider use of this code in dn2l only a temporary solution: we should gradually replace such code with Free Vision from the Free Pascal project, this should be a first priority task as solid legal base is required to secure any further development of dn2l. Here is a full list of such files: collect.pas, colorsel.pas, decoder.pas, dialogs.pas, drivers2.pas, drivers.pas, histlist.pas, memory.pas, menus.pas, tvhc.pas, validate.pas and views.pas.\n  Based on Dos Navigator by RIT Research Labs, with many thanks for opening the code. Also many thanks to DN OSP team for making old style DOS source code 32-bit and multi-platform friendly. Thanks to old-dos.ru team for hosting Virtual Pascal distribution \u2014 dn2l, perhaps, would never have been born without the ability to find and download VP. Thanks to VP developers for making their product available as freeware \u2014 without permission to use their compiler, dn2l might never have been built. And also thanks to habr.com community for inspiration!", "posttime": "2020-10-29 10:29:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "linux,\u5f00\u6e90,dos,dn2l", "title": "Dn2l-Dos Navigator\u5f00\u6e90\u9879\u76ee\u7684Linux\u79fb\u690d", "title_en": "dn2l \u2013 Linux Port of the Dos Navigator Open Source Project", "transed": 1, "url": "https://github.com/unxed/dn2l", "via": "", "real_tags": ["linux", "\u5f00\u6e90", "dos", "dn2l"]}, {"category": "", "categoryclass": "", "imagename": "3feb1195a0ec3ab6de5f5c0b52e340ca.png", "infoid": 1031875, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b22\u8fce\u6536\u770b\u201c\u4fe1\u53f7\u4e0e\u7ebf\u7d22\u201d\u680f\u76ee\uff0c\u6211\u4eec\u5c06\u6df1\u5165\u63a2\u8ba8\u7b80\u8857\u7684\u6bcf\u4e00\u5c42\u6280\u672f\u3002\u6211\u662f\u7f57\u6069\u00b7\u660e\u65af\u57fa\u3002\u597d\u7684\uff0c\u4eca\u5929\u6211\u5f88\u9ad8\u5174\u80fd\u5750\u4e0b\u6765\u548c\u591a\u7c73\u5c3c\u514b\u00b7\u6d1b\u5e03\u96f7\u79d1\u8c08\u8c08\u7535\u5b50\u90ae\u4ef6\u7684\u95ee\u9898\u3002\u7279\u522b\u5730\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u7531Dominick\u8bbe\u8ba1\u5e76\u9886\u5bfc\u5f00\u53d1\u7684\u4e00\u4e2a\u540d\u4e3aMailcore\u7684\u7cfb\u7edf\uff0c\u5b83\u662fJane Street\u81ea\u5df1\u5f00\u53d1\u7684\u90ae\u4ef6\u670d\u52a1\u5668\u3002\u6211\u8ba4\u4e3a\u8fd9\u672c\u8eab\u5c31\u5f88\u6709\u8da3\uff0c\u56e0\u4e3a\u7535\u5b50\u90ae\u4ef6\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u8bdd\u9898\u548c\u5b83\u80cc\u540e\u7684\u6574\u4e2a\u4f53\u7cfb\u7ed3\u6784\uff0c\u4f46\u6211\u8ba4\u4e3a\u5b83\u4e5f\u662f\u4e00\u4e2a\u955c\u5934\uff0c\u8ba9\u6211\u4eec\u4e86\u89e3\u4e00\u4e9b\u5173\u4e8e\u8f6f\u4ef6\u8bbe\u8ba1\u548c\u5982\u4f55\u7ba1\u7406\u57fa\u7840\u8bbe\u65bd\u7684\u6709\u8da3\u95ee\u9898\uff0c\u4e00\u4e9b\u5173\u4e8e\u4f60\u5982\u4f55\u9009\u62e9\u4f55\u65f6\u6784\u5efa\u81ea\u5df1\u7684\u4e1c\u897f\u548c\u4f55\u65f6\u4f7f\u7528\u6807\u51c6\u7684\u73b0\u6709\u5de5\u5177\u7684\u95ee\u9898\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5173\u4e8e\u7f16\u7a0b\u8bed\u8a00\u5982\u4f55\u5728\u7cfb\u7edf\u8bbe\u8ba1\u4e2d\u53d1\u6325\u4f5c\u7528\u7684\u6709\u8da3\u95ee\u9898\u3002\n\u563f\uff0cDLO\u3002\u90a3\u4e48\uff0c\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u4f60\u80fd\u544a\u8bc9\u6211\u4eec\u4e00\u4e9b\u5173\u4e8e\u7535\u5b50\u90ae\u4ef6\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u5417\uff1f\n\u597d\u7684\u3002\u55ef\u3002\u56e0\u6b64\uff0c\u7535\u5b50\u90ae\u4ef6\u662f\u57fa\u4e8e\u4e92\u8054\u7f51\u4e0a\u4e00\u79cd\u53e4\u8001\u800c\u53e4\u8001\u7684\u534f\u8bae\uff0c\u79f0\u4e3a\u7b80\u5355\u90ae\u4ef6\u4f20\u8f93\u534f\u8bae\uff0c\u5373smtp\u548csmtp\u2026\u3002\u4f60\u53ef\u4ee5\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u8ba4\u4e3a\u5b83\u626e\u6f14\u7740\u90ae\u653f\u670d\u52a1\u5728\u9012\u9001\u666e\u901a\u90ae\u4ef6\u65b9\u9762\u6240\u626e\u6f14\u7684\u89d2\u8272\u3002\u5b83\u662f\u4e00\u53f0\u60f3\u8981\u5c06\u6d88\u606f\u4f20\u9012\u5230\u67d0\u4e2a\u5730\u65b9\u7684\u670d\u52a1\u5668\u5c06\u8be5\u6d88\u606f\u4f20\u9012\u7ed9\u53e6\u4e00\u65b9\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u8be5\u53e6\u4e00\u65b9\u53ef\u4ee5\u5c06\u6d88\u606f\u5e26\u5230\u5176\u6700\u7ec8\u76ee\u7684\u5730\uff0c\u65e0\u8bba\u90a3\u662f\u6700\u7ec8\u76ee\u7684\u5730\u670d\u52a1\u5668\u672c\u8eab\u8fd8\u662f\u53ef\u4ee5\u5e2e\u52a9\u60a8\u66f4\u8fd1\u4e00\u70b9\u7684\u67d0\u4e2a\u4e2d\u4ecb\u3002\u6b63\u5982\u6211\u4eec\u4eca\u5929\u6240\u77e5\uff0c\u7535\u5b50\u90ae\u4ef6\u672c\u8eab\u662f\u5728\u4e92\u8054\u7f51\u7684\u65e9\u671f\u5b9e\u73b0\u7684\uff0c\u534f\u8bae\u672c\u8eab\u975e\u5e38\u7b80\u5355\u3002\u60a8\u57fa\u672c\u4e0a\u6709\u4e86\u6d88\u606f\u672c\u8eab\u7684\u5b9e\u9645\u6b63\u6587\uff0c\u5b83\u6709\u81ea\u5df1\u5355\u72ec\u7684\u683c\u5f0f\u548c\u89c4\u8303\uff0c\u7136\u540e\u60a8\u6709\u4e00\u7ec4\u6307\u4ee4\u6765\u8868\u793a\u8be5\u6d88\u606f\u7684\u76ee\u7684\u5730\u662f\u8c01\uff0c\u5b83\u6765\u81ea\u8c01\uff0c\u56e0\u6b64\u4e00\u53f0\u670d\u52a1\u5668\u8fde\u63a5\u5230\u53e6\u4e00\u53f0\u670d\u52a1\u5668\u3002\u4e0a\u9762\u5199\u7740\uff0c\u201c\u6211\u6709\u4e00\u6761\u4fe1\u606f\u3002\u5b83\u662f\u4ece\u67d0\u67d0\u4f20\u6765\u7684\uff0c\u800c\u4e14\u662f\u8981\u9001\u5230\u5176\u4ed6\u4eba\u624b\u4e2d\u7684\u3002\u8fd9\u662f\u6d88\u606f\u7684\u6b63\u6587\uff0c\u201c\u63a5\u6536\u670d\u52a1\u5668\u53ef\u4ee5\u968f\u5fc3\u6240\u6b32\u5730\u5904\u7406\u5b83\u3002\u5b83\u53ef\u4ee5\u8bf4\uff0c\u201c\u592a\u597d\u4e86\uff0c\u6211\u63a5\u53d7\u4e86\uff0c\u4ece\u73b0\u5728\u5f00\u59cb\u6211\u8981\u8d1f\u8d23\u8fd9\u4ef6\u4e8b\u3002\u201d\u5b83\u53ef\u4ee5\u8bf4\uff0c\u201c\u4e0d\uff0c\u6211\u5bf9\u90a3\u4e2a\u4eba\u4e00\u65e0\u6240\u77e5\u3002\u4f60\u5fc5\u987b\u627e\u5230\u5176\u4ed6\u4eba\u628a\u5b83\u9001\u5230\u201c\u6216\u8005\u56e0\u4e3a\u5176\u4ed6\u4efb\u4f55\u539f\u56e0\u62d2\u7edd\u5b83\uff0c\u6bd4\u5982\uff0c\u201d\u8fd9\u770b\u8d77\u6765\u50cf\u662f\u6709\u75c5\u6bd2\u7684\u201c\uff0c\u6216\u8005\u201d\u4f60\u4e0d\u5141\u8bb8\u8fde\u63a5\u5230\u6211\u201c\uff0c\u6216\u8005\u201d\u6211\u73b0\u5728\u4e0d\u80fd\u63a5\u6536\u90ae\u4ef6\u201c\uff0c\u201d\u6211\u73b0\u5728\u4e0d\u80fd\u63a5\u6536\u90ae\u4ef6\u201c\uff0c\u6216\u8005\u201d\u8fd9\u770b\u8d77\u6765\u50cf\u662f\u6709\u75c5\u6bd2\u7684\u201c\uff0c\u6216\u8005\u201d\u4f60\u4e0d\u5141\u8bb8\u8fde\u63a5\u5230\u6211\u8eab\u4e0a\u201c\uff0c\u6216\u8005\u201d\u6211\u73b0\u5728\u65e0\u6cd5\u63a5\u6536\u90ae\u4ef6\u3002\u201c\u3002\n\u7535\u5b50\u90ae\u4ef6\u4e00\u76f4\u7ed9\u6211\u7559\u4e0b\u6df1\u523b\u5370\u8c61\u7684\u4e00\u4ef6\u4e8b\u662f\uff0c\u5b83\u662f\u6765\u81ea\u65e9\u671f\u4e92\u8054\u7f51\u7684\u4e00\u79cd\u5947\u5999\u7684\u827a\u672f\u54c1\uff0c\u4e92\u8054\u7f51\u662f\u4e00\u4e2a\u771f\u6b63\u5f00\u653e\u7684\u793e\u4ea4\u7f51\u7edc\u3002\u4eba\u4eec\u8c08\u8bba\u7684\u4e8b\u60c5\u5f88\u591a\uff0c\u5bf9\u5427\uff1f\u6211\u4eec\u80fd\u4e0d\u80fd\u8ba9\u73b0\u6709\u7684\u793e\u4ea4\u7f51\u7edc\u53d8\u5f97\u66f4\u597d\u3001\u66f4\u5f00\u653e\uff0c\u6240\u6709\u8fd9\u4e9b\uff0c\u4ee5\u53ca\u7535\u5b50\u90ae\u4ef6\uff0c\u90fd\u662f\u4ece\u5b83\u6700\u521d\u7684\u8bbe\u8ba1\u5f00\u59cb\u7684\uff1b\u5b83\u7684\u5b8c\u6574\u5386\u53f2\u662f\u975e\u5e38\u5f00\u653e\u7684\uff0c\u6b63\u5982\u4f60\u6240\u6307\u51fa\u7684\uff0c\u6838\u5fc3\u534f\u8bae\u548c\u4f20\u8f93\u76f8\u5bf9\u7b80\u5355\uff0c\u5c3d\u7ba1RFC\u5b9e\u9645\u4e0a\u6709\u60ca\u4eba\u7684\u590d\u6742\u6027\u544a\u8bc9\u4f60\u5982\u4f55\u89e3\u6790\u4e00\u5c01\u7279\u5b9a\u7684\u7535\u5b50\u90ae\u4ef6\u3002\u6574\u4e2a\u7cfb\u7edf\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u6240\u6709\u6784\u5efa\u5b9e\u9645\u7ba1\u7406\u548c\u4f20\u8f93\u7535\u5b50\u90ae\u4ef6\u7684\u7cfb\u7edf\u7684\u4e0d\u540c\u53c2\u4e0e\u8005\uff0c\u4ee5\u53ca\u4ed6\u4eec\u5982\u4f55\u5904\u7406\u53d1\u751f\u7684\u5404\u79cd\u95ee\u9898\uff0c\u6bd4\u5982\u5783\u573e\u90ae\u4ef6\u548c\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u653b\u51fb\u7cfb\u7edf\u7684\u4eba\u7b49\u7b49\uff0c\u90fd\u6709\u5f88\u5927\u7684\u590d\u6742\u6027\u3002\u6240\u4ee5\u57fa\u7840\u662f\u76f8\u5bf9\u7b80\u5355\u7684\uff0c\u4f46\u662f\u7cfb\u7edf\u7684\u7d27\u6025\u590d\u6742\u6027\u5b9e\u9645\u4e0a\u662f\u76f8\u5f53\u9ad8\u7684\u3002\n\u4e0e\u65e7\u4e92\u8054\u7f51\u7684\u8bb8\u591a\u534f\u8bae\u4e00\u6837\uff0c\u5b83\u662f\u5728\u4e16\u754c\u6bd4\u4eca\u5929\u7b80\u5355\u5f97\u591a\u7684\u65f6\u4ee3\u8bbe\u8ba1\u7684\uff0c\u7279\u522b\u662f\u5728\u8fde\u63a5\u4e92\u8054\u7f51\u7684\u4e16\u754c\u3002\u4f60\u77e5\u9053\uff0c\u5f53\u65f6\u53ef\u80fd\u670950\u5bb6\u673a\u6784\u6709\u4e92\u8054\u7f51\u8fde\u63a5\u6216ARPANET\u8fde\u63a5\uff0c\u4f60\u771f\u7684\u4e0d\u5fc5\u62c5\u5fc3\u4f1a\u6709\u4eba\u53d1\u5783\u573e\u90ae\u4ef6\uff0c\u56e0\u4e3a\u51e0\u4e4e\u6ca1\u6709\u4eba\u77e5\u9053\u7535\u5b50\u90ae\u4ef6\u662f\u4ec0\u4e48\u3002\n\u5f53\u4f60\u5f00\u59cb\u5e76\u6784\u5efa\u4e00\u4e2a\u65b0\u7684\u4e1c\u897f\u65f6\uff0c\u4f60\u6784\u5efa\u7684\u4e1c\u897f\u7684\u65e9\u671f\u5c5e\u6027\u901a\u5e38\u975e\u5e38\u7c98\u6027\uff0c\u4ee5\u4e00\u79cd\u96be\u4ee5\u9884\u6d4b\u7684\u65b9\u5f0f\u771f\u6b63\u8d77\u5230\u91cd\u8981\u4f5c\u7528\u3002\u56e0\u6b64\uff0c\u5f00\u653e\u7684\u8fd9\u4e00\u65e9\u671f\u5c5e\u6027\u4e00\u76f4\u505c\u7559\u5728\u90a3\u91cc\u3002\u7535\u5b50\u90ae\u4ef6\u662f\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u53c2\u4e0e\u7684\u4e8b\u60c5\u3002\u7ec4\u7ec7\u53ef\u4ee5\u6784\u5efa\u81ea\u5df1\u7684\u57fa\u7840\u8bbe\u65bd\u6765\u8fde\u63a5\u5b83\uff0c\u5e76\u4e14\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u7cfb\u7edf\u7ecf\u5386\u7684\u6240\u6709\u76f8\u5f53\u5927\u7684\u53d8\u9769\uff0c\u8fd9\u79cd\u5f00\u653e\u6027\u4ecd\u7136\u662f\u4e00\u9879\u6838\u5fc3\u5c5e\u6027\u3002\u8fd9\u662f\u8bbe\u8ba1\u6765\u5efa\u9020\u65b0\u4e1c\u897f\u7684\u53ef\u6015\u4e4b\u5904\uff0c\u5f53\u4f60\u60f3\u8bbe\u8ba1\u65b0\u4e1c\u897f\u65f6\uff0c\u4f60\u5fc5\u987b\u505a\u51fa\u4e00\u7cfb\u5217\u9009\u62e9\uff0c\u663e\u7136\uff0c\u4f60\u4e0d\u5e94\u8be5\u592a\u62c5\u5fc3\u5b83\u4eec\uff0c\u56e0\u4e3a\u4f60\u5efa\u9020\u7684\u4e1c\u897f\u53ef\u80fd\u4f1a\u5931\u8d25\uff0c\u4e5f\u4e0d\u4f1a\u6210\u529f\uff0c\u5373\u4f7f\u5b83\u6210\u529f\u4e86\uff0c\u4f60\u4e5f\u4f1a\u5728\u4ee5\u540e\u4e86\u89e3\u5230\u66f4\u591a\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u4f60\u4e0d\u5e94\u8be5\u592a\u62c5\u5fc3\u65e9\u671f\u7684\u51b3\u5b9a\u3002\u4f46\u4e5f\u6709\u4e00\u4e9b\u65e9\u671f\u7684\u51b3\u5b9a\uff0c\u4f60\u4e0d\u77e5\u9053\u54ea\u4e9b\u4f1a\u88ab\u8bc1\u660e\u662f\u5f88\u96be\u6539\u53d8\u7684\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u4f60\u77e5\u9053\uff0c\u4eca\u5929\u7535\u5b50\u90ae\u4ef6\u9886\u57df\u7684\u4e3b\u8981\u53c2\u4e0e\u8005-\u663e\u7136\u662f\u8c37\u6b4c\u548cGmail-\u5728\u7535\u5b50\u90ae\u4ef6\u5e02\u573a\u4e2d\u5360\u636e\u4e86\u76f8\u5f53\u5927\u7684\u6bd4\u4f8b\n\u6240\u4ee5\u4f60\u53ef\u80fd\u4f1a\u8ba4\u4e3a\uff0c\u4e0e\u5176\u4ed6\u4efb\u4f55\u516c\u53f8\u76f8\u6bd4\uff0c\u7b80\u8857\u4f7f\u7528\u7535\u5b50\u90ae\u4ef6\u7684\u65b9\u5f0f\u771f\u7684\u6ca1\u6709\u592a\u591a\u7279\u522b\u4e4b\u5904\uff0c\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\uff0c\u8fd9\u662f\u771f\u7684\u3002\u6211\u60f3\u6211\u4eec\u6709\u4e00\u4e9b\u7279\u6b8a\u7684\u8981\u6c42\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u5728\u4e00\u4e2a\u53d7\u76d1\u7ba1\u7684\u884c\u4e1a\uff0c\u6240\u4ee5\u6211\u4eec\u6709\u4e00\u4e9b\u8981\u6c42\uff0c\u4e3a\u4e86\u5408\u89c4\u7684\u76ee\u7684\uff0c\u8bb0\u5f55\u7b80\u8857\u67d0\u4eba\u53d1\u9001\u6216\u63a5\u6536\u7684\u6bcf\u4e00\u6761\u6d88\u606f\u3002\u4f46\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u7684\u7535\u5b50\u90ae\u4ef6\u7cfb\u7edf\u770b\u8d77\u6765\u975e\u5e38\u7c7b\u4f3c\uff0c\u6216\u8005\u8bf4\u8fc7\u53bb\u770b\u8d77\u6765\u975e\u5e38\u7c7b\u4f3c\u4e8e\u4efb\u4f55\u7ec4\u7ec7\u4e2d\u7684\u7535\u5b50\u90ae\u4ef6\u7cfb\u7edf\uff0c\u7c97\u7565\u7684\u603b\u7ed3\u662f\uff0c\u6211\u4eec\u5728\u7f51\u7edc\u5916\u90e8\u6709\u4e00\u4e9b\u90ae\u4ef6\u7f51\u5173\uff0c\u7528\u4e8e\u63a5\u6536\u6765\u81ea\u5916\u90e8\u670d\u52a1\u5668\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u60a8\u77e5\u9053\uff0c\u6765\u81ea\u5916\u90e8\u5404\u65b9\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u7136\u540e\u6211\u4eec\u6709\u4e00\u4e9b\u90ae\u4ef6\u670d\u52a1\u5668\uff0c\u6216\u8005\u4e00\u7ec4\u670d\u52a1\u5668\uff0c\u5728\u6211\u4eec\u7684\u7f51\u7edc\u5185\u90e8\uff0c\u5904\u7406\u5173\u4e8e\u5982\u4f55\u5904\u7406\u8fd9\u4e9b\u6d88\u606f\u7684\u6240\u6709\u590d\u6742\u7684\u4e1a\u52a1\u903b\u8f91\u3002\u56e0\u6b64\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u662f\u9884\u671f\u7684\u6536\u4ef6\u4eba\uff0c\u53ea\u9700\u63a5\u6536\u90ae\u4ef6\u5e76\u5c06\u5176\u53d1\u9001\u5230\u7528\u6237\u7684\u90ae\u7bb1\u5373\u53ef\u3002\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u5b83\u5bf9\u5783\u573e\u90ae\u4ef6\u3001\u75c5\u6bd2\u548c\u5176\u4ed6\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u5728\u4f20\u9012\u90ae\u4ef6\u4e4b\u524d\u4ece\u90ae\u4ef6\u4e2d\u63d0\u53d6\u5185\u5bb9\u8fdb\u884c\u8fc7\u6ee4\uff0c\u5bf9\u90ae\u4ef6\u5217\u8868\u8fdb\u884c\u6269\u5c55\u3002\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u5411\u7b80\u8857\u7684\u67d0\u4e2a\u7fa4\u53d1\u7535\u5b50\u90ae\u4ef6\uff0c\u60a8\u5e0c\u671b\u80fd\u591f\u5c06\u7fa4\u540d\u6269\u5c55\u5230\u5b9e\u9645\u7684\u6536\u4ef6\u4eba\u90ae\u7bb1\u5217\u8868\uff0c\u4ee5\u786e\u4fdd\u8be5\u7535\u5b50\u90ae\u4ef6\u6700\u7ec8\u8fdb\u5165\u6536\u4ef6\u4eba\u7684\u6536\u4ef6\u7bb1\u3002\u7136\u540e\u662f\u786e\u4fdd\u6211\u4eec\u4f7f\u7528\u6240\u6709\u6b63\u786e\u7684\u5143\u6570\u636e\u8bb0\u5f55\u6240\u6709\u6b63\u786e\u7684\u6d88\u606f\u7684\u989d\u5916\u9075\u4ece\u6027\u542b\u4e49\u3002\u5728\u6211\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u8fd9\u91cc\u7684\u90ae\u4ef6\u57fa\u7840\u8bbe\u65bd\u90fd\u662f\u57fa\u4e8e\u5f00\u653e\u6e90\u7801\u7684\u90ae\u4ef6\u670d\u52a1\u5668\uff0c\u5b83\u6709\u81ea\u5df1\u7684\u914d\u7f6e\u8bed\u8a00\uff0c\u5728\u4e92\u8054\u7f51\u4e0a\u88ab\u5e7f\u6cdb\u4f7f\u7528\uff0c\u5728\u6700\u590d\u6742\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6709\u5927\u7ea6400\u6216500\u884c\u914d\u7f6e\uff0c\u6211\u60f3\uff0c\u8fd9\u4e2a\u7cfb\u7edf\u8981\u8ba9\u5b83\u505a\u6211\u4eec\u60f3\u8ba9\u5b83\u80fd\u591f\u505a\u7684\u6240\u6709\u8fd9\u4e9b\u4e0d\u540c\u7684\u4e8b\u60c5\u3002\n\u592a\u68d2\u4e86\u3002\u56e0\u6b64\uff0c\u5c31\u5982\u4f55\u6784\u5efa\u81ea\u5df1\u7684\u90ae\u4ef6\u7cfb\u7edf\u800c\u8a00\uff0c\u8fd9\u542c\u8d77\u6765\u662f\u4e00\u4e2a\u5408\u7406\u7684\u65b9\u6cd5\u3002\u6211\u4eec\u7528\u5b83\u9047\u5230\u4e86\u4ec0\u4e48\u95ee\u9898\uff1f\n\u662f\u7684\uff0c\u5f52\u6839\u7ed3\u5e95\uff0c\u8fd9\u91cc\u6700\u5927\u7684\u95ee\u9898\u662f\u914d\u7f6e\u8fd9\u4e2a\u7cfb\u7edf\u6765\u505a\u6211\u4eec\u9700\u8981\u5b83\u505a\u7684\u6240\u6709\u4e8b\u60c5\u6240\u9700\u7684\u590d\u6742\u6027\u3002\u6240\u4ee5\uff0c\u73b0\u5728\uff0c\u6211\u8bf4\u7684\u662f400\u6216500\u884c\u914d\u7f6e-\u8fd9\u542c\u8d77\u6765\u53ef\u80fd\u4e0d\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u6570\u5b57\uff0c\u4f46\u5f53\u5b83\u662f\u4e00\u79cd\u5b9a\u5236\u7684\u914d\u7f6e\u8bed\u8a00\u65f6\uff0c\u5b83\u4e0d\u540c\u4e8e\u4efb\u4f55\u5176\u4ed6\u7cfb\u7edf\u7684\u914d\u7f6e\uff0c\u4e5f\u4e0d\u50cf\u7b80\u8857\u7684\u5f00\u53d1\u4eba\u5458\u6216\u5de5\u7a0b\u5e08\u719f\u6089\u7684\u4efb\u4f55\u7f16\u7a0b\u8bed\u8a00\uff0c400\u6216500\u884c\u5916\u8bed\u7684\u590d\u6742\u6027\u76f8\u5f53\u5927\uff0c\u5904\u7406\u8d77\u6765\u53ef\u80fd\u6709\u70b9\u9ebb\u70e6\u3002\u7279\u522b\u662f\uff0c\u6211\u4eec\u6709\u4e00\u4e9b\u53ef\u6015\u7684\u9669\u4e9b\uff0c\u6211\u4eec\u610f\u8bc6\u5230\u6211\u4eec\u5728\u5f52\u6863\u4e00\u4e9b\u672c\u5e94\u5f52\u6863\u7684\u7535\u5b50\u90ae\u4ef6\u65b9\u9762\u505a\u4e86\u9519\u8bef\u7684\u4e8b\u60c5\uff0c\u5e78\u8fd0\u7684\u662f\uff0c\u5728\u6bcf\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u90fd\u6709\u4e00\u4e9b\u7f13\u89e3\u56e0\u7d20\uff0c\u6700\u7ec8\u4e0d\u4f1a\u662f\u4ec0\u4e48\u5927\u95ee\u9898\uff0c\u4f46\u8fd9\u79cd\u9669\u4e9b\u8ba9\u6211\u4eec\u6709\u70b9\u5bb3\u6015\uff0c\u56e0\u4e3a\u6211\u4eec\u67e5\u770b\u4e86\u914d\u7f6e\uff0c\u60f3\u8981\u4e86\u89e3\u6211\u4eec\u662f\u5982\u4f55\u8ba9\u81ea\u5df1\u9677\u5165\u8fd9\u79cd\u5883\u5730\u7684\uff0c\u8fd9\u6bd4\u6211\u4eec\u611f\u89c9\u5230\u7684\u66f4\u96be\u7406\u89e3\u54ea\u91cc\u51fa\u4e86\u95ee\u9898\uff0c\u4ee5\u53ca\u5982\u4f55\u4fee\u590d\u5b83\u3002\n\u4e5f\u8bb8\u8fd8\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u51fa\u4e8e\u5408\u89c4\u76ee\u7684\u8bb0\u5f55\u6240\u6709\u6d88\u606f\u7684\u95ee\u9898\u542c\u8d77\u6765\u53ef\u80fd\u5f88\u5bb9\u6613\uff0c\u4f46\u7b80\u8857\u662f\u4e00\u5bb6\u5728\u8bb8\u591a\u4e0d\u540c\u76d1\u7ba1\u5236\u5ea6\u4e0b\u8fd0\u8425\u7684\u516c\u53f8\uff0c\u5b9e\u9645\u4e0a\u5bf9\u5b83\u8fd0\u8425\u7684\u4e00\u4e9b\u4e0d\u540c\u7684\u5730\u65b9\u6709\u4e0d\u540c\u7684\u89c4\u5219\uff0c\u8fd9\u4e00\u4e8b\u5b9e\u8ba9\u95ee\u9898\u53d8\u5f97\u66f4\u52a0\u590d\u6742\u3002\u56e0\u6b64\uff0c\u5373\u4f7f\u662f\u90a3\u79cd\u770b\u4f3c\u7b80\u5355\u7684\u201c\u8ba9\u6211\u4eec\u628a\u4e00\u5207\u90fd\u5199\u4e0b\u6765\u201d\uff0c\u4e5f\u6bd4\u4e4d\u770b\u8d77\u6765\u8981\u590d\u6742\u5f97\u591a\u3002\n\u662f\u7684\uff0c\u662f\u7684\u3002\u6211\u4eec\u6709\u4e0d\u540c\u7684\u8981\u6c42\uff0c\u5173\u4e8e\u5fc5\u987b\u5199\u4e0b\u4ec0\u4e48\uff0c\u6211\u4eec\u9700\u8981\u5b58\u50a8\u4ec0\u4e48\u7c7b\u578b\u7684\u5143\u6570\u636e\uff0c\u989d\u5916\u7684\u526f\u672c\u9700\u8981\u5728\u4e16\u754c\u5404\u5730\u7684\u7269\u7406\u4f4d\u7f6e\u7b49\u7b49\uff0c\u5f53\u4f60\u8003\u8651\u5230\u4eba\u7684\u65b9\u9762\u65f6\uff0c\u8fd9\u542c\u8d77\u6765\u5f88\u5408\u7406\uff0c\u4f60\u77e5\u9053\uff0c\u5f53\u4f60\u601d\u8003\uff0c\u597d\u7684\uff0c\u662f\u7684\uff0c\u4f60\u9700\u8981\u4e00\u4e2a\u526f\u672c\u6765\u505a\u8fd9\u4e2a\u548c\u90a3\u4e2a\uff0c\u4f46\u662f\u5b9e\u9645\u6267\u884c\u89c4\u5219\u6700\u7ec8\u4f1a\u975e\u5e38\u590d\u6742\u3002\n\u6240\u4ee5\uff0c\u6fc0\u52b1\u4f60\u5c1d\u8bd5\u548c\u5c1d\u8bd5\u65b0\u4e8b\u7269\u7684\u5176\u4e2d\u4e00\u4ef6\u4e8b\u5c31\u662f\u8fd9\u79cd\u9669\u4e9b\u5931\u624b\u7684\u60c5\u51b5\uff0c\u4e8b\u60c5\u51e0\u4e4e\u8d70\u4e0a\u4e86\u53ef\u6015\u7684\u6b67\u9014\u3002\u4f60\u60f3\u5c1d\u8bd5\u4e0d\u540c\u7684\u4e1c\u897f\u8fd8\u6709\u5176\u4ed6\u539f\u56e0\u5417\uff1f\n\u6b63\u5982\u6211\u6240\u8bf4\u7684\uff0c\u5176\u4e2d\u4e00\u4e2a\u65b9\u9762\u5f53\u7136\u662f\u610f\u8bc6\u5230\u7cfb\u7edf\u7684\u590d\u6742\u6027\u5df2\u7ecf\u5230\u4e86\u6211\u4eec\u5b9e\u9645\u4e0a\u4e0d\u6562\u5bf9\u5176\u8fdb\u884c\u66f4\u6539\u7684\u5730\u6b65\u3002\u53e6\u4e00\u4e2a\u539f\u56e0\u662f\u5b83\u9700\u8981\u8fd9\u79cd\u4e13\u4e1a\u77e5\u8bc6\u3002\u6211\u4eec\u6709\u4e00\u4e2a\u56e2\u961f--\u5728\u5f53\u65f6\uff0c\u6211\u4eec\u6bd4\u73b0\u5728\u5c0f\u5f97\u591a--\u4f46\u4f60\u77e5\u9053\uff0c\u5373\u4f7f\u5728\u4eca\u5929\uff0c\u6211\u4eec\u7684\u56e2\u961f\u4e5f\u4e3b\u8981\u7531\u591a\u9762\u624b\u7ec4\u6210\uff0c\u4ed6\u4eec\u80fd\u591f\u89e3\u51b3\u8bb8\u591a\u4e0d\u540c\u7c7b\u578b\u7684\u95ee\u9898\uff0c\u5e76\u4e14\u5728\u67d0\u4e00\u6280\u672f\u9886\u57df\u62e5\u6709\u5e7f\u6cdb\u7684\u80cc\u666f\u3002\u4e86\u89e3\u7684\u914d\u7f6e\n\u6211\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u76f8\u5f53\u5e38\u89c1\u7684\u6a21\u5f0f\u7684\u793a\u4f8b\uff0c\u60a8\u53ef\u4ee5\u5728\u8bb8\u591a\u65e8\u5728\u9ad8\u5ea6\u7075\u6d3b\u548c\u53ef\u914d\u7f6e\u7684\u7cfb\u7edf\u4e2d\u770b\u5230\u8fd9\u79cd\u6a21\u5f0f\u3002\u5b83\u4eec\u4ece\u5904\u7406\u57fa\u672c\u529f\u80fd\u7684\u76f8\u5bf9\u7b80\u5355\u7684\u6838\u5fc3\u5f00\u59cb\uff0c\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u5f53\u5b83\u4eec\u8bd5\u56fe\u5411\u7cfb\u7edf\u6dfb\u52a0\u66f4\u591a\u529f\u80fd\u65f6\uff0c\u5b83\u4eec\u4f1a\u6dfb\u52a0\u8d8a\u6765\u8d8a\u591a\u7684\u65cb\u94ae\u53ef\u4f9b\u60a8\u8f6c\u52a8\uff0c\u5e76\u5728\u914d\u7f6e\u8bed\u8a00\u4e2d\u6dfb\u52a0\u8d8a\u6765\u8d8a\u591a\u7684\u914d\u7f6e\u53c2\u6570\u6216\u5143\u7d20\uff0c\u4ee5\u4fbf\u80fd\u591f\u8868\u8fbe\u60a8\u53ef\u80fd\u5e0c\u671b\u8868\u8fbe\u7684\u6240\u6709\u4e0d\u540c\u5185\u5bb9\u3002\u5728\u8fd9\u79cd\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u914d\u7f6e\u8bed\u8a00\u662f\u4e13\u95e8\u4e3a\u8be5\u7cfb\u7edf\u5f00\u53d1\u7684\u5b9a\u5236\u7684\u3001\u7279\u5b9a\u4e8e\u9886\u57df\u7684\u8bed\u8a00\u3002\u5728\u67d0\u4e9b\u5730\u65b9\uff0c\u5b83\u6709\u70b9\u50cf\u8001\u5f0f\u7684.INI\u683c\u5f0f\uff0c\u5b83\u6709\u4e00\u4e2a\u952e\uff0c\u7136\u540e\u662f\u4e00\u4e2a\u7b49\u53f7\uff0c\u7136\u540e\u662f\u4e00\u4e2a\u503c\u548c\u7528\u62ec\u53f7\u4e2d\u7684\u6807\u9898\u5206\u9694\u7684\u90e8\u5206\uff0c\u8bf8\u5982\u6b64\u7c7b\u7684\u4e1c\u897f\uff0c\u4f46\u662f\u5f53\u4f60\u4ed4\u7ec6\u770b\u7684\u65f6\u5019\uff0c\u4f60\u4f1a\u610f\u8bc6\u5230\u5b83\u4e0a\u9762\u6709\u6240\u6709\u8fd9\u4e9b\u989d\u5916\u7684\u529f\u80fd\u3002\u56e0\u6b64\uff0c\u5b83\u7279\u522b\u652f\u6301\u8fd9\u4e9b\u770b\u8d77\u6765\u6709\u70b9\u50cf\u51fd\u6570\u8c03\u7528\u7684\u9ad8\u7ea7\u5b8f\uff0c\u5728\u8fd9\u4e9b\u51fd\u6570\u8c03\u7528\u4e2d\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u53c2\u6570\u96c6\u8c03\u7528\u5b8f\uff0c\u7136\u540e\u5b83\u4f1a\u6269\u5c55\u5230\u5176\u4ed6\u4e1c\u897f\uff0c\u8fd9\u4e9b\u914d\u7f6e\u5143\u7d20\u6709\u4e0d\u540c\u7684\u6269\u5c55\u9636\u6bb5\uff0c\u5728\u8fd9\u4e9b\u9636\u6bb5\u4e2d\uff0c\u60a8\u53ef\u4ee5\u8fdb\u884c\u8fd9\u79cd\u5143\u7f16\u7a0b\uff0c\u6216\u8005\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b8f\u6765\u751f\u6210\u5b8f\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u5b8f\u6269\u5c55\u4e3a\u4e00\u4e9b\u7ed3\u679c\u503c\uff0c\u6700\u91cd\u8981\u7684\u662f\uff0c\u914d\u7f6e\u4e2d\u6240\u9700\u7684\u5b57\u6bb5\u96c6\u4ee5\u53ca\u8fd9\u4e9b\u5143\u7d20\u4e4b\u95f4\u7684\u4ea4\u4e92\u5e76\u4e0d\u662f\u975e\u5e38\u6e05\u695a\uff0c\u800c\u4e14\u4e5f\u4e0d\u662f\u975e\u5e38\u4e00\u81f4\u3002\u56e0\u6b64\uff0c\u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u6709\u4e00\u4e2a\u90e8\u5206\u5b9a\u4e49\u4e86\u8def\u7531\u6d88\u606f\u7684\u65b9\u5f0f\u3001\u51b3\u5b9a\u7279\u5b9a\u4f20\u5165\u6d88\u606f\u5e94\u8be5\u53d1\u9001\u5230\u4f55\u5904\u7684\u65b9\u5f0f\u3001\u662f\u5c06\u5176\u53d1\u9001\u5230\u90ae\u7bb1\u8fd8\u662f\u5c06\u5176\u4e2d\u7ee7\u5230\u67d0\u4e2a\u5176\u4ed6\u670d\u52a1\u5668\uff0c\u5e76\u4e14\u60a8\u53ef\u4ee5\u5b9a\u4e49\u591a\u4e2a\u8def\u7531\u5668\uff0c\u5e76\u4e14\u914d\u7f6e\u8bed\u8a00\u5e76\u6ca1\u6709\u660e\u786e\u8bf4\u660e\u4e3a\u7ed9\u5b9a\u6d88\u606f\u9009\u62e9\u54ea\u4e2a\u8def\u7531\u5668\u7684\u8bed\u4e49\u3002\u8fd8\u6709\u5f88\u591a\u5176\u4ed6\u7c7b\u4f3c\u7684\u4f8b\u5b50\uff0c\u5176\u4e2d\u6709\u4e00\u4e9b\u60a8\u5b9a\u4e49\u7684\u5143\u7d20\u96c6\uff0c\u7cfb\u7edf\u5982\u4f55\u9009\u62e9\u5728\u7ed9\u5b9a\u60c5\u51b5\u4e0b\u5e94\u7528\u8fd9\u4e9b\u5143\u7d20\u7684\u8bed\u4e49\uff0c\u4ece\u8868\u9762\u4e0a\u770b\uff0c\u4ece\u914d\u7f6e\u4e0a\u770b\u5e76\u4e0d\u662f\u660e\u786e\u548c\u6e05\u6670\u7684\u3002\u4f60\u53ea\u9700\u8981\u77e5\u9053\u3002\u60a8\u5fc5\u987b\u9605\u8bfb\u6587\u6863\uff0c\u4e86\u89e3\u8fd9\u4e9b\u4e1c\u897f\u662f\u5982\u4f55\u76f8\u4e92\u4f5c\u7528\u7684\u3002\n\u5bf9\uff0c\u9009\u62e9\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\u89e6\u53d1\u54ea\u4e9b\u7279\u5b9a\u89c4\u5219\u7684\u89c4\u5219\uff0c\u6211\u5047\u8bbe\u8fd9\u4e9b\u89c4\u5219\u672c\u8eab\u5e76\u4e0d\u7b80\u5355\uff1f\n\u5b83\u4eec\u5e76\u4e0d\u7b80\u5355\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6709\u5f88\u597d\u7684\u7406\u7531\u3002\u6211\u7684\u610f\u601d\u662f\uff0c\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u8fd9\u4e2a\u7cfb\u7edf\u975e\u5e38\u975e\u5e38\u7075\u6d3b\uff0c\u5b83\u53ef\u4ee5\u505a\u6211\u4eec\u5f53\u65f6\u60f3\u8981\u505a\u7684\u6240\u6709\u4e8b\u60c5\uff0c\u4f46\u6700\u7ec8\uff0c\u4f60\u9700\u8981\u626d\u66f2\u81ea\u5df1\u7684\u65b9\u5f0f\u6765\u7406\u89e3\u5b83\u5c06\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06\u8fd9\u4e9b\u4e0d\u540c\u7684\u90e8\u5206\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u8fd9\u9700\u8981\u5bf9\u7279\u5b9a\u7cfb\u7edf\u7684\u8bed\u4e49\u6709\u4e13\u5bb6\u7ea7\u7684\u77e5\u8bc6\u3002\n\u6240\u4ee5\u4f60\u6709\u4e00\u4e2a\u660e\u663e\u7684\u95ee\u9898\u6446\u5728\u4f60\u9762\u524d\u3002\u60a8\u51b3\u5b9a\u91c7\u7528\u4ec0\u4e48\u65b9\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1f\n\u6700\u7ec8\uff0c\u6211\u4eec\u51b3\u5b9a\u505a\u7684\u662f\u4e00\u4ef6\u8868\u9762\u4e0a\u542c\u8d77\u6765\u5f88\u75af\u72c2\u7684\u4e8b\u60c5\uff0c\u7f16\u5199\u6211\u4eec\u81ea\u5df1\u7684\u7535\u5b50\u90ae\u4ef6\u670d\u52a1\u5668\uff0c\u7279\u522b\u662f\uff0c\u6211\u4eec\u7528OCaml\u7f16\u5199\u4e86\u4e00\u4e2a\u65b0\u7684\u7535\u5b50\u90ae\u4ef6\u670d\u52a1\u5668\uff0c\u8fd9\u662f\u6211\u4eec\u5728\u7b80\u8857\u4f7f\u7528\u7684\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\uff0c\u5173\u952e\u7684-\u4e5f\u53ef\u80fd\u662f\u6700\u6709\u8da3\u7684\u90e8\u5206-\u662f\u7cfb\u7edf\u603b\u662f\u7528OCaml\u914d\u7f6e\u7684\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u9047\u5230\u7684\u771f\u6b63\u95ee\u9898\u662f\uff0c\u6211\u4eec\u5bf9\u6211\u4eec\u6b63\u5728\u4f7f\u7528\u7684\u65e7\u7cfb\u7edf\u7684\u6838\u5fc3\u529f\u80fd\u611f\u5230\u6ee1\u610f\uff0c\u4f46\u662f\u914d\u7f6e\u8bed\u8a00\u662f\u6211\u4eec\u611f\u89c9\u5230\u7684\u771f\u6b63\u9650\u5236\u6211\u4eec\u7684\u8bed\u8a00\u3002\u6211\u4eec\u4ece\u6839\u672c\u4e0a\u8ba4\u8bc6\u5230\uff0c\u6700\u7ec8\uff0c\u7535\u5b50\u90ae\u4ef6\u670d\u52a1\u5668\u7684\u89d2\u8272\uff0c\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e00\u79cd\u529f\u80fd\u3002\u60a8\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u5b9e\u73b0\u67d0\u79cd\u529f\u80fd\u7684\u9ed1\u76d2\uff0c\u8be5\u9ed1\u76d2\u63a5\u53d7\u4e00\u6761\u6d88\u606f\uff0c\u5e76\u8f93\u51fa\u4e00\u4e2a\u6216\u591a\u4e2a\u7ed3\u679c\u6d88\u606f\uff0c\u8be5\u9ed1\u76d2\u8d1f\u8d23\u505a\u51fa\u6709\u5173\u5982\u4f55\u8f6c\u6362\u8fd9\u4e9b\u6d88\u606f\u4ee5\u53ca\u5982\u4f55\u5c06\u8fd9\u4e9b\u6d88\u606f\u8def\u7531\u5230\u8fdb\u4e00\u6b65\u7684\u670d\u52a1\u5668\u6216\u6536\u4ef6\u7bb1\u7684\u6240\u6709\u51b3\u7b56\u3002\u6700\u7ec8\uff0c\u60a8\u53ef\u4ee5\u5c06\u6240\u6709\u5185\u5bb9\u5c01\u88c5\u5728\u4e00\u4e2a\u5927\u81f4\u7c7b\u4f3c\u7684\u51fd\u6570\u4e2d\u3002\u5c31\u50cf\u6211\u8bf4\u7684\uff0cOCaml\u662f\u4e00\u79cd\u51fd\u6570\u5f0f\u8bed\u8a00\uff0c\u6b63\u5982\u4f60\u77e5\u9053\u7684\uff0c\u5b83\u771f\u7684\u5f88\u9002\u5408\u7528\u8fd9\u79cd\u65b9\u5f0f\u7f16\u5199\u51fd\u6570\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u4eec\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5b9e\u73b0\u4e00\u4e9b\u6700\u7ec8\u9700\u8981\u4e00\u4e9b\u8f93\u5165\u548c\u4ea7\u751f\u4e00\u4e9b\u8f93\u51fa\u7684\u529f\u80fd\uff0c\u800c\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u526f\u4f5c\u7528\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u610f\u8bc6\u5230\u6211\u4eec\u9700\u8981\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5f00\u59cb\u4e86\u8fd9\u6761\u9053\u8def\u3002\n\u8bbe\u8ba1\u4e2d\u7684\u8fd9\u4e2a\u7b80\u5355\u7684\u652f\u70b9\uff0c\u8ba9\u60a8\u53ef\u4ee5\u7ed5\u8fc7\u8fd9\u79cd\u81ea\u5b9a\u4e49\u8bed\u8a00\u7684\u6240\u6709\u590d\u6742\u6027\uff0c\u60a8\u53ea\u9700\u5728OCaml\u7684\u4e2d\u95f4\u9009\u62e9\u4e00\u4e2a\u771f\u6b63\u7ecf\u8fc7\u6df1\u601d\u719f\u8651\u3001\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u62bd\u8c61(\u5373\u51fd\u6570)\uff0c\u7136\u540e\u4f7f\u7528\u60a8\u5728\u90a3\u91cc\u62e5\u6709\u7684\u7528\u4e8e\u8f6f\u4ef6\u7ec4\u5408\u7684\u666e\u901a\u5de5\u5177\u6765\u6784\u5efa\u60a8\u60f3\u8981\u7684\u62bd\u8c61\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8ba9\u60a8\u6446\u8131\u4e0d\u5f97\u4e0d\u8003\u8651\u51fa\u73b0\u5728\u6211\u4eec\u9762\u524d\u7684\u5947\u602a\u3001\u590d\u6742\u3001\u7279\u6b8a\u60c5\u51b5\u7684\u95ee\u9898\n\u4ee4\u4eba\u5c34\u5c2c\u7684\u662f\u3002\u6ca1\u9519\uff0c\u4f46\u53e6\u4e00\u79cd\u65b9\u6cd5\u53ef\u80fd\u88ab\u79f0\u4e3a\u914d\u7f6e\u751f\u6210\u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u597d\u7684\uff0c\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u6838\u5fc3\u914d\u7f6e\u8bed\u8a00\uff0c\u4e0a\u9762\u6709\u4e00\u5806\u590d\u6742\u7684\u4e1c\u897f\uff0c\u8fd9\u662f\u5173\u4e8e\u589e\u52a0\u8bed\u8a00\u7684\u901a\u7528\u6027\u3002\u8ba9\u6211\u4eec\u5fd8\u6389\u6240\u6709\u90a3\u4e9b\u53ef\u6015\u7684\u4e1c\u897f\uff0c\u7136\u540e\u7528\u53e6\u4e00\u79cd\u8bed\u8a00\u7f16\u5199\u4ee3\u7801\uff0c\u5728\u90a3\u91cc\u6211\u4eec\u6709\u66f4\u597d\u7684\u62bd\u8c61\u548c\u66f4\u597d\u7684\u5de5\u5177\uff0c\u8ba9\u5b83\u53ea\u7528\u8fd9\u79cd\u7b80\u5355\u7684\u6838\u5fc3\u6f14\u7b97\u6765\u751f\u6210\u4e1c\u897f\uff0c\u8fd9\u79cd\u7b80\u5355\u7684\u6838\u5fc3\u6f14\u7b97\u66b4\u9732\u5728\u5e95\u5c42\u7684\u914d\u7f6e\u751f\u6210\u8bed\u8a00\u4e2d\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u4e24\u5168\u5176\u7f8e\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u79cd\u6211\u4eec\u5f88\u597d\u7406\u89e3\u7684\u9ad8\u7ea7\u8bed\u8a00\u6765\u7f16\u5199\u6211\u4eec\u7684\u914d\u7f6e\uff0c\u8fd9\u4e0d\u662f\u4e00\u79cd\u7279\u6b8a\u7528\u9014\u7684\u6280\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7531\u5176\u4ed6\u4eba\u6784\u5efa\u548c\u7ef4\u62a4\u7684\u6838\u5fc3\u5f15\u64ce\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u91cd\u65b0\u5b9e\u73b0\u5b83\u3002\u90a3\u4e48\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u4e0d\u662f\u60a8\u4f7f\u7528Mailcore\u9009\u62e9\u7684\u8def\u5f84\u5462\uff1f\n\u6211\u8ba4\u4e3a\u6709\u4e09\u4e2a\u539f\u56e0\u3002\u6211\u8ba4\u4e3a\u6709\u4e24\u4e2a\u7406\u7531\u662f\u597d\u7684\uff0c\u4e00\u4e2a\u662f\u4e0d\u597d\u7684\u3002\u6211\u5c06\u4ece\u5145\u5206\u7684\u7406\u7531\u5f00\u59cb\u3002\u9996\u5148\uff0c\u5f53\u65f6\u6211\u4eec\u771f\u7684\u5bf9\u6211\u4eec\u4f7f\u7528\u7684\u7cfb\u7edf\u63d0\u4f9b\u7ed9\u6211\u4eec\u7684\u539f\u8bed\u4e0d\u6ee1\u610f\u3002\u6240\u4ee5\u914d\u7f6e\u8bed\u8a00\u662f\u590d\u6742\u7684\uff0c\u5373\u4f7f\u662f\u5728\u5b83\u6700\u7b80\u5355\u7684\u5f62\u5f0f\u4e0b\uff0c\u6211\u4eec\u4e5f\u6ca1\u6709\u4e00\u4e9b\u597d\u7684\u539f\u8bed\u53ef\u4ee5\u7528\u6765\u5de5\u4f5c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u751f\u6210\u8fd9\u4e9b\u539f\u8bed\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u8fd9\u4e9b\u539f\u8bed\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u5176\u4ed6\u7684\u4e00\u5207\u90fd\u5efa\u7acb\u5728\u5b83\u7684\u57fa\u7840\u4e0a\u3002\u6211\u4eec\u5fc5\u987b\u751f\u6210\u590d\u6742\u7684\u5b8f\u548c\u4e00\u4e9b\u6211\u5728\u524d\u9762\u8c08\u5230\u7684\u914d\u7f6e\u5143\u7d20\uff0c\u800c\u4e14\u6211\u4eec\u89c9\u5f97\u901a\u8fc7\u751f\u6210\u8fd9\u4e9b\u5143\u7d20\u800c\u4e0d\u662f\u624b\u52a8\u7f16\u5199\u5b83\u4eec\u5e76\u4e0d\u80fd\u8282\u7701\u592a\u591a\u65f6\u95f4\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u4e5f\u540c\u6837\u9700\u8981\u7406\u89e3\u5b83\u3002\u8fd9\u4e0d\u50cf\u6211\u4eec\u53ef\u4ee5\u5c06\u6211\u4eec\u7684\u7406\u89e3\u9650\u5236\u5728\u8bed\u8a00\u7684\u4e00\u4e2a\u5b50\u96c6\u4e0a\uff0c\u7136\u540e\u4f7f\u7528\u5b83\u6765\u5b9e\u73b0\u6211\u4eec\u9700\u8981\u7684\u6240\u6709\u4e1c\u897f\u3002\u8fd9\u662f\u7b2c\u4e00\u4e2a\u539f\u56e0\u3002\u7b2c\u4e8c\u4e2a\u539f\u56e0\u662f\u6211\u4eec\u786e\u5b9e\u60f3\u8981\u4e00\u4e9b\u8fd0\u884c\u65f6\u7684\u52a8\u6001\u6027\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u786e\u5b9e\u5e0c\u671b\u80fd\u591f\u6839\u636e\u73af\u5883\u4e2d\u7684\u5176\u4ed6\u4e1c\u897f\u3001\u4e16\u754c\u4e0a\u7684\u5176\u4ed6\u4e1c\u897f\u4ee5\u53ca\u6211\u4eec\u5fc5\u987b\u751f\u6210\u7684\u914d\u7f6e\u6765\u5b9e\u9645\u6539\u53d8\u884c\u4e3a\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4f1a\u56de\u5230\u5b8c\u5168\u76f8\u540c\u7684\u4f4d\u7f6e\u3002\n.", "note_en": "Welcome to Signals and Threads, in-depth conversations about every layer of the tech stack from Jane Street. I\u2019m Ron Minsky.    All right, so, it\u2019s my pleasure today to sit down and have a conversation with Dominick LoBraico about email. In particular, we\u2019re going to talk about a system that Dominick architected and led the development of called Mailcore, which is Jane Street\u2019s own homegrown mail server.    And I think this is interesting on its own because email is an interesting topic and the whole architecture behind it, but I think it\u2019s also a lens into some interesting questions about software design and how you manage infrastructure, some questions about how you make this choice of when you build your own thing and when you use standard, existing tools, and also some interesting questions about how programming language plays a role in systems design.\n      Hey, DLo. So, to get started, can you tell us a little bit about how email works?\n   Sure. Yeah. So email is based on an old and venerable protocol on the Internet called the Simple Mail Transfer Protocol, SMTP, and SMTP\u2026 you can kind of think of it as playing the role that the Postal Service plays in delivering regular mail. It is a way for one server that wants to deliver a message somewhere, to hand that message off to another party, who can get it to its final destination, whether that is the eventual destination server itself or some intermediary who can help you get a little bit closer.  Email itself came into fruition, as we know today, in the early days of the Internet, and the protocol itself is very simple. You basically have the actual body of the message itself, which has its own separate format and specification, and then you have a set of instructions for expressing who that message is destined for and who it\u2019s coming from, and so one server connects to another.  And it says, \u201cI\u2019ve got a message. It\u2019s coming from so and so, and it\u2019s meant to be delivered to some other person. Here\u2019s the body of the message,\u201d and the receiving server can do with that what it will. It can either say, \u201cGreat, I\u2019ll take that, and I\u2019ll be responsible for it from here on out.\u201d It can say, \u201cNo, I don\u2019t know anything about that person. You have to find somebody else to deliver that to\u201d or reject it for any number of other reasons, like, \u201cThis looks like it has a virus,\u201d or \u201cYou\u2019re not allowed to connect to me,\u201d or \u201cI\u2019m not available for receiving mail right now.\u201d\n   And one thing that always strikes me about email is it\u2019s this kind of wondrous artifact from the early Internet, which is a  truly open social network. There\u2019s lots of things that people talk about, right? Could we make existing social networks better and more open and all of that, and email, just  is from its initial design; and its complete history has been this very open thing, and as you point out, the core protocols and transports are relatively simple, although there is actually a surprising amount of complexity in the RFCs that tell you how to parse a particular email. The overall system is pretty simple, but there\u2019s a lot of complexity in all of the different players who build systems that actually manage and transfer email around and how they deal with the various problems that happen, like spam and people attacking systems via email and all of that. So the foundations are relatively simple, but the emergent complexity of the system is actually pretty high.\n   Like with many protocols of the old Internet, it was designed in a time where the world was much simpler than it is today, especially the Internet-connected world. You know, there were probably 50 institutions that had Internet connections or ARPANET connections at the time, and you didn\u2019t really have to worry that anybody was going to be spamming because barely anybody even know what email was in the first place.\n   When you start and build a new thing, the early properties of the thing that you build can often be really sticky and really matter in a way that\u2019s kind of hard to predict. So this one early property of being open has stayed there. Email is a thing that anyone can participate in. Organizations can build their own infrastructure to connect to it, and through all the rather large transformations that the email system has gone through, that openness remains as a core property.  This is the horrible thing about designing to build a new thing, when you want to design something new, you have to make a bunch of choices, and clearly, you shouldn\u2019t worry about them that much, because probably the thing you build is going to fail and isn\u2019t going to work out, and even if it does, you\u2019re going to learn more about the problem later, and so you shouldn\u2019t worry too much about the early decisions. But also, some of the early decisions, you don\u2019t know which ones are going to turn out to be very hard to change.\n         And in fact, you know, the big players in email today \u2013 obviously Google and Gmail, are a really large percentage of the email sending and receiving on the Internet \u2013 but they\u2019re still wrestling with some of those early decisions and some of that openness that are architected in, as they try to figure out how they can make email more secure and how they can protect their users and rein in some of the malicious actors on the Internet, and that\u2019s just a hard thing to do while trying to maintain the existing openness that email has; it cuts both ways I guess.\n         So the story here is about how you ended up building the system called Mailcore. What did email at Jane Street look like when you first ran into the problem?\n   So you might think that there\u2019s really not much special about the way Jane Street uses email compared to any other company, and largely, that\u2019s true. I think we have a few special requirements by dint of the fact that we are in a regulated industry, so we have some requirements around logging for compliance purposes every message that is sent or received by somebody at Jane Street.  But other than that, our email system looks pretty similar, or has looked, in the past, pretty similar, to the way an email system in any organization might look, and the rough summary is we have some mail gateways that sit on the outside of our network for receiving email from foreign servers, you know, from external parties, and then we have some mail server, or a set of servers, inside of our network that handle all of the complicated business logic around what to do with those messages.  So, in some cases, it\u2019s as simple as receive the message and deliver it into the mailbox of the user if we are the intended recipient. In other cases, it is apply filtering for things like spam and viruses and other things that we might want to extract from messages before we deliver them, do expansion for mailing lists. So if you send an email to some group at Jane Street, you want to be able to expand that group name to the actual list of recipient mailboxes to make sure that it actually ends up in the inboxes of the recipients who it\u2019s destined for. And then this extra compliance implication of making sure that we\u2019re logging all of the right messages with all of the right metadata.   And at the time that I started, the mail infrastructure here was all based on an open source mail server that has its own config language and is pretty widely used on the Internet at large, and we had about 400 or 500 lines of configuration in the most complex case, I think, for this system to get it to do all of these different things that we wanted it to be able to do.\n   Great. So that sounds like a reasonable approach in terms of how to build oneself a mail system. What problems did we run into with it?\n   Yeah, so the biggest problem here, at the end of the day, was the complexity required for configuring this system to do all of the things that we needed it to do. So, now, I said 400 or 500 lines of configuration \u2013 that probably doesn\u2019t sound like a huge number, but when it\u2019s in a kind of bespoke configuration language that\u2019s unlike the configuration of any other system and unlike any programming language that a developer or engineer at Jane Street would be familiar with, the complexity of 400 or 500 lines in a foreign language is pretty large and can be a little bit imposing to deal with.  In particular, we had some scary near-misses where we realized that we had done the wrong thing in terms of archiving some email for compliance purposes that we were supposed to archive, and luckily, in each of those cases, there were mitigating factors such that it didn\u2019t end up being a big deal, but that near-miss gave us a little bit of a scare because we went and looked at the configuration and wanted to understand how we had gotten ourselves into this position, and it was harder than it felt like it should be to understand what had gone wrong and how to fix it.\n   It\u2019s maybe also worth mentioning that the problem of logging all of your messages for compliance purposes may sound easy, but it\u2019s made more complicated by the fact that Jane Street is a company that operates in lots of different regulatory regimes and has actually different rules for some of the different places it operates. So even the sort of seemingly simple, \u201cLet\u2019s just write everything down\u201d is more complicated than it might appear at first.\n   That\u2019s right, yeah. We have different requirements in terms of what has to be written down and what kinds of metadata we need to store and where the extra copies need to be physically located around the world and things like that, which are reasonable sounding when you think about the human aspects of it, you know, when you reason about, okay, yeah, you need a copy for this and a copy for that, but actually implementing the rules in practice ends up being pretty complicated.\n   So, one of the things that motivated you to try and do something new was this kind of near-miss situation of things almost going horribly astray. Were there any other reasons that you wanted to try something different?\n   As I said, one aspect of it was certainly this realization that the complexity of the system had gotten to a point where we just actually were scared to make changes to it. Another came from the fact that it required this kind of specialized knowledge. We have a team \u2013 At the time, we were much smaller than we are now \u2013 but you know, even today, we have a team made up primarily of generalists, people who are able to work on a lot of different kinds of problems and have a kind of general background across an area of technology. Understanding the configuration for this particular open source mail server is not something that you just have as part of a general knowledge. It really required specialized understanding and background, more so than the general skills required to administer an email system or understand the concepts behind email. You really needed just to know the particular weird semantics and dark corners of this particular language, and the idea that we needed to sort of build a team or have a team to specifically understand and be comfortable working with this just didn\u2019t feel like a good use of our people resources. There are a lot of other problems that we need to be solving, and we\u2019d much rather be able to take as general an approach to them as we can.\n   Can you give me an example of the way in which the config language was hard to reason about?\n   I think this is an example of a pretty common pattern that you see in a lot of systems that are intended to be highly flexible and configurable. They start with a relatively simple core that handles the basic functionality, and over time, as they try to add more features to the system, they add more and more knobs that you can turn and more and more configuration parameters or elements in the configuration language to make it possible to express all of those different things you might want to be able to express.  And in this particular case, the configuration language is a bespoke, domain-specific language developed just for this system. It kind of resembles, in some places, the old-school  .INI format of having, like, a key and then an equal sign and then a value and sections separated with kind of headers in brackets and things like that, but then when you look a little bit closer, you realize it has all this extra power layered on top.  So, in particular, it has support for these kind of advanced macros that look a little bit like function calls where you can call a macro with some set of arguments and it expands to something else, and there are these different phases of expansion of these configuration elements where you can do this kind of meta-programming, or you can have macros that produce macros that then get expanded to some resulting values, and then, on top of that, the set of fields that are required in the configuration and the interaction between those things is not made very clear, and it\u2019s not really very consistent.  So, for example, you might have a section that defines the way that you can route a message, the way that you can decide where a particular incoming message should go, whether you\u2019re going to send it to a mailbox or relay it to some other server, and you can define multiple routers, and the semantics in terms of which router is going to get selected for a given message are not made explicit by the configuration language. And there are a bunch of other examples like this where there are some set of elements that you define, and the semantics for how the system chooses which of those to apply in a given case are not explicit and clear from the configuration superficially speaking. You just have to know. You have to go and read the documentation and understand how it is that these things interact with each other.\n   Right, and the rules for picking which particular rule fires in a particular case, I assume those rules are not simple themselves?\n   They\u2019re not simple, and in some cases, for good reason. I mean, the system, it\u2019s worth saying, is highly, highly flexible, and it is the case that it could do all of the things that we wanted it to do at the time, but, ultimately, the way in which you needed to contort yourself to understand how it was going to do that and how to fit those different pieces together required an expert-level knowledge of the semantics of the particular system.\n   So you had a clear problem in front of you. What approach did you decide to follow to address it?\n   Ultimately, what we decided to do was the ostensibly crazy-sounding thing of writing our own email server, and in particular, we wrote a new email server in OCaml, the functional programming language that we use here at Jane Street, and crucially \u2013 and maybe the most interesting part of this \u2013 is that the system was always configured in OCaml. The real problem that we had come to here was we were happy with the core functionality of the old system that we were using, but the configuration language was what we felt like was really limiting us.  And we came to this fundamental realization that, ultimately, the role of an email server, you can think of as a function. You can think of it as kind of a black box that implements a function, that takes a message, and outputs one or more resulting messages, and that black box is responsible for making all of the decisions about how to transform those messages and how to route those messages to further servers or to inboxes. And at the end of the day, you can kind of encapsulate everything in a function that looks roughly like that. And OCaml, like I said, is a functional language, as you know, and it really lends itself to writing functions in this way, composable units that you can stitch together to implement bits of functionality that ultimately takes some inputs and generates some outputs without any side effects, and that was what we realized we needed, and so we started down that path.\n   That simple pivot in the design, it lets you bypass all of this complexity of this custom language, and you just get to pick a really well-thought-through, well-engineered abstraction in the middle of OCaml, which is the function, and use the ordinary tools for software composition that you have there for building the abstraction that you want, and then just kind of gets you out this problem of having to think about a weird, complicated, special case that comes up for mail and for nothing else.\n   Exactly. We already had OCaml developers, and we already had a lot of people who understood the semantics of OCaml and the way in which the various language features might interact with each other. So we didn\u2019t now have to go out and find a bunch of people who understood this esoteric configuration language. We could just find people who knew OCaml.\n   So one thing that strikes me about this story is, in some sense, this story sounds very familiar, which is the thing that you\u2019re describing about this mail server configuration language actually sounds an enormous amount like the story around, say, build systems, Make. Make has a relatively simple core domain-specific language which, instead of talking about things you do with mail, it talks about rules for building things with dependencies and targets and all of that, and that language is, indeed, insufficient for doing big and complicated things. So people have built complicated macro systems. In fact, there\u2019s a macro system inside of Make so that you can write Make rules that generate Make rules that generate Make rules, and that\u2019s kind of horrible, and no one\u2019s super happy about that as a way of doing complex builds, but there\u2019s another way that people sometimes use of getting out of this problem, which is not always create their own build system, although plenty of people do that, including us.\n      Embarrassingly. That\u2019s right, but another approach is what you might call the config-gen approach, which is to say, okay, there\u2019s a simple core configuration language, and there\u2019s a bunch of complicated stuff on top, which is about increasing the generality of language. Let\u2019s forget all of that terrible stuff and then write code in another language where we have better abstractions and better tools and have it just generate things in this kind of simple core calculus that\u2019s exposed by the underlying config-gen language, and then we get the best of both worlds. We get to write our configurations in a nice high-level language that we understand well and isn\u2019t this special purpose skill, and we get to use the core engine that has been built and maintained by other people, and we don\u2019t have to re-implement it. So why wasn\u2019t that the path that you chose with Mailcore?\n   I think there are three reasons. I think two are good reasons, and one is a bad reason. I\u2019ll start with the good reasons.   The first is we really, at the time, were not happy with the primitives that the system that we were using provided to us. So the configuration language was complicated, even in its simplest form, and it\u2019s not like we had some nice primitives that we could work with where we just needed to generate those and we could do anything with those and everything else was built on top of it. We would\u2019ve had to generate complex macros and some of the config elements I was talking about before, and we didn\u2019t feel like we would be saving ourselves very much by generating those versus writing them by hand. In fact, we still would\u2019ve needed to understand it just as well. It\u2019s not like we could\u2019ve limited our understanding to a subset of the language and just implemented everything we needed using that. That was the first reason.   The second reason is that we did want to some runtime dynamism. We did want the ability, in some cases, to actually change behavior based on other things out in the environment, other things out in the world, and the configuration that we would\u2019ve had to generate to do that, we would\u2019ve been back in the exact same position that \n......", "posttime": "2020-10-29 10:28:32", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u529f\u80fd\u9f50\u5168,functional,\u914d\u7f6e", "title": "\u6784\u5efa\u529f\u80fd\u9f50\u5168\u7684\u7535\u5b50\u90ae\u4ef6\u670d\u52a1\u5668", "title_en": "Building a Functional Email Server", "transed": 1, "url": "https://signalsandthreads.com/building-a-functional-email-server/", "via": "", "real_tags": ["\u529f\u80fd\u9f50\u5168", "\u914d\u7f6e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1031874, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u7bc7\u6587\u7ae0\u662f\u5bf9\u8fd1\u671f\u589e\u5f3a\u73b0\u5b9e\u5b9e\u73b0\u3001\u96c6\u6210\u65b9\u5f0f\u4ee5\u53ca\u5f15\u5165\u65b0\u8ba4\u77e5\u5c42\u6b21\u7684\u4e00\u7cfb\u5217\u601d\u8003\u3002\u6211\u4eec\u5c06\u8ba8\u8bbaAR\u4f5c\u4e3a\u4e00\u79cd\u901a\u8fc7\u62d3\u5bbd\u4eba\u7c7b\u8ba4\u77e5\u548c\u611f\u5b98\u5de5\u5177\u7bb1\u6765\u5b9e\u73b0\u8de8\u8212\u66fc\u4e3b\u4e49\u7684\u65b9\u5f0f\u3002\u6211\u4eec\u76ee\u524d\u4e0d\u4f1a\u5173\u5fc3\u4ec0\u4e48\u662f\u6280\u672f\u4e0a\u53ef\u80fd\u7684\uff0c\u4ec0\u4e48\u662f\u4e0d\u53ef\u80fd\u7684\u3002\n\u4f60\u6709\u6ca1\u6709\u6563\u6b65\u8fc7\uff0c\u60f3\u8fc7\u6240\u6709\u5173\u4e8e\u52a8\u7269\u3001\u690d\u7269\u3001\u7269\u4f53\u751a\u81f3\u662f\u4eba\u7684\u53ef\u83b7\u53d6\u7684\u4fe1\u606f\uff1f\u4e92\u8054\u7f51\u4e0a\u6709\u591a\u5c11\u4fe1\u606f\uff1f\u4f60\u9047\u5230\u8fc7\u591a\u5c11\u5df2\u7ecf\u5fd8\u8bb0\u7684\u4e8b\u5b9e\uff1f\n\u53e4\u5e0c\u814a\u4eba\u79ef\u6781\u8bad\u7ec3\u548c\u4fdd\u6301\u4ed6\u4eec\u7684\u8bb0\u5fc6\u80fd\u529b\uff0c\u5728\u8fd9\u4e2a\u8fdb\u6b65\u7684\u9636\u6bb5\uff0c\u4eba\u7c7b\u7684\u8bb0\u5fc6\u5df2\u7ecf\u5728\u8f6c\u53d8-\u6216\u8005\u8bf4\u5df2\u7ecf\u4ece\u8bb0\u4f4f\u4e8b\u5b9e\u8f6c\u5411\u8bb0\u4f4f\u5982\u4f55\u4ee5\u53ca\u5728\u54ea\u91cc\u627e\u5230\u4e8b\u5b9e\u3002\u6211\u4eec\u5728\u6c38\u4e45\u8bb0\u5fc6\u4e2d\u4fdd\u5b58\u7684\u4fe1\u606f\u8d8a\u6765\u8d8a\u5c11\uff0c\u53cd\u8fc7\u6765\uff0c\u6211\u4eec\u4e5f\u5728\u5b66\u4e60\u5982\u4f55\u5728\u6e90\u6e90\u4e0d\u65ad\u7684\u4fe1\u606f\u548c\u9519\u8bef\u4fe1\u606f\u4e2d\u6d88\u8d39\u3001\u5904\u7406\u548c\u5bfb\u627e\u6709\u7528\u7684\u6570\u636e\u3002\n\u7cbe\u901a\u6280\u672f\u7684\u7528\u6237\u53ef\u4ee5\u8bbf\u95ee\u4ed6/\u5979\u53ef\u4ee5\u652f\u914d\u7684\u6d77\u91cf\u548c\u9891\u8c31\u6570\u636e\uff0c\u5c31\u5728\u53e3\u888b\u91cc\u3002\u5c31\u5728\u6211\u4eec\u8bf4\u8bdd\u7684\u65f6\u5019\uff0c\u4eba\u7c7b\u6301\u6709\u77e5\u8bc6\u7684\u65b9\u5f0f\u6b63\u5728\u6f14\u53d8\u3002\u89c1\u9b3c\uff0c\u5b83\u662f\u968f\u7740\u8bed\u97f3\u7684\u53d1\u660e\u800c\u5f00\u59cb\u8fdb\u5316\u7684\u3002\u4f46\u53e6\u4e00\u4e2a\u91cd\u5927\u53d8\u5316\u5373\u5c06\u53d1\u751f\u3002\u6211\u4eec\u7684\u624b\u673a\u754c\u9762\u5728\u63d0\u4f9b\u6211\u4eec\u9700\u8981\u7684\u6240\u6709\u4fe1\u606f\u7684\u540c\u65f6\uff0c\u4ecd\u7136\u4e0e\u6211\u4eec\u5206\u79bb\uff0c\u5f53\u6211\u4eec\u9700\u8981\u67e5\u627e\u3001\u663e\u793a\u6216\u8f93\u5165\u6570\u636e\u65f6\uff0c\u4f1a\u6709\u76f8\u5f53\u957f\u7684\u5ef6\u8fdf\u3002\u968f\u7740AR\u3001AI\u548c\u4eba\u673a\u754c\u9762\u7684\u5f15\u5165\uff0c\u4e00\u5207\u90fd\u5c06\u6539\u53d8\u3002\u4e00\u822c\u8bf4\u6765\uff0cAR\u6216\u4eba\u5de5\u589e\u5f3a\u5c06\u4f7f\u6570\u636e\u66f4\u5bb9\u6613\u8bbf\u95ee\uff0c\u5e76\u6781\u5927\u5730\u7f29\u77ed\u4ea4\u4e92\u6240\u9700\u7684\u5ef6\u8fdf\uff0c\u4f7f\u5de5\u5177\u611f\u89c9\u8d8a\u6765\u8d8a\u50cf\u6211\u4eec\u81ea\u5df1\u7684\u4e00\u90e8\u5206\u3002\n\u60f3\u8c61\u4e00\u4e0b\u8d70\u5728\u8857\u4e0a\u7684\u60c5\u666f\u3002\u4f60\u73af\u987e\u56db\u5468\uff0c\u89c2\u5bdf\u8857\u4e0a\u7684\u4eba\u4eec\uff0c\u901a\u77e5\u5f00\u59cb\u5728\u4eba\u4eec\u7684\u5934\u90e8\u65c1\u8fb9\u5f39\u51fa\u3002\u5bf9\u4e8e\u4e00\u4e2a\u4eba\uff0c\u8fd9\u6761\u4fe1\u606f\u8bf4\uff1a\u4f60\u672c\u5468\u5df2\u7ecf\u89c1\u8fc7\u8fd9\u4e2a\u4eba\u4e09\u6b21\u4e86\uff1b\u5bf9\u4e8e\u53e6\u4e00\u4e2a\u4eba\uff0c\u5b83\u8bf4\uff1a\u4f60\u4eec\u6709\u4e94\u4e2a\u76f8\u4e92\u8054\u7cfb\u548c\u5171\u540c\u7684\u5174\u8da3\u3002\u6839\u636e\u4e4b\u524d\u5171\u4eab\u7684\u6570\u636e\u6216\u9762\u90e8\u5fae\u8868\u60c5\u5206\u6790\uff0c\u8fd9\u4e9b\u901a\u77e5\u8fd8\u53ef\u4ee5\u544a\u8bc9\u4f60\u8fd9\u4e2a\u4eba\u662f\u5426\u613f\u610f\u5efa\u7acb\u65b0\u7684\u8054\u7cfb\u3002\u4e5f\u8bb8\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u8d70\u5f97\u592a\u8fdc\u4e86\uff0c\u4f46\u4f60\u660e\u767d\u6211\u7684\u610f\u601d\u3002\n\u6885\u91cc\u4e9a\u59c6-\u97e6\u4f2f\u65af\u7279\u516c\u53f8\u5c06\u589e\u5f3a\u73b0\u5b9e\u5b9a\u4e49\u4e3a\u589e\u5f3a\u7248\u7684\u73b0\u5b9e\uff0c\u5373\u5229\u7528\u6280\u672f\u5c06\u6570\u5b57\u4fe1\u606f\u53e0\u52a0\u5728\u901a\u8fc7\u8bbe\u5907(\u5982\u667a\u80fd\u624b\u673a\u6444\u50cf\u5934)\u89c2\u770b\u7684\u67d0\u7269\u7684\u56fe\u50cf\u4e0a\uff0c\u4ece\u800c\u521b\u9020\u51fa\u589e\u5f3a\u7248\u7684\u73b0\u5b9e\u3002\u4e3a\u4e86\u8fd9\u7bc7\u6587\u7ae0\u7684\u76ee\u7684\uff0c\u6211\u5e0c\u671b\u6211\u4eec\u4e0d\u8981\u628a\u73b0\u5b9e\u4ec5\u4ec5\u5c40\u9650\u4e8e\u4eba\u7c7b\u7684\u89c6\u89c9\u3002\n\u6885\u91cc\u4e9a\u59c6-\u97e6\u4f2f\u65af\u7279\u6ca1\u6709\u5bf9\u8de8\u8212\u9a6c\u4e3b\u4e49\u4e0b\u5b9a\u4e49\uff0c\u4f46\u7ef4\u57fa\u767e\u79d1\u5c06\u5176\u5b9a\u4e49\u4e3a\u4e00\u573a\u54f2\u5b66\u8fd0\u52a8\uff0c\u4e3b\u5f20\u901a\u8fc7\u5f00\u53d1\u548c\u5e7f\u6cdb\u4f7f\u7528\u5c16\u7aef\u6280\u672f\u6765\u6781\u5927\u5730\u63d0\u9ad8\u4eba\u7c7b\u7684\u667a\u529b\u548c\u751f\u7406\u80fd\u529b\uff0c\u4ece\u800c\u6539\u53d8\u4eba\u7c7b\u7684\u72b6\u51b5\u3002\n\u968f\u7740\u6280\u672f\u7684\u8fdb\u6b65\uff0c\u8fd9\u4e24\u8005\u6b63\u53d8\u5f97\u8d8a\u6765\u8d8a\u4ea4\u7ec7\u5728\u4e00\u8d77\uff0c\u6240\u4ee5\u6211\u5e0c\u671b\u6211\u4eec\u5c06AR\u91cd\u65b0\u5b9a\u4e49\u4e3a\u4efb\u4f55\u589e\u5f3a\u6216\u6269\u5c55\u4eba\u7c7b\u5bf9\u73b0\u5b9e\u7684\u4f53\u9a8c\u7684\u6280\u672f\uff0c\u751a\u81f3\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u5b9e\u7528\u7684\u8de8\u8212\u9a6c\u4e3b\u4e49\uff0c\u54ea\u6015\u53ea\u662f\u5c31\u8fd9\u7bc7\u6587\u7ae0\u800c\u8a00\u3002\n\u76ee\u524d\uff0c\u81f3\u5c11\u5728\u6211\u4eec\u638c\u63e1\u4e0a\u9762\u63cf\u8ff0\u7684LVL4\u91cc\u7a0b\u7891\u4e4b\u524d\uff0c\u6211\u4eec\u4e0d\u662f\u5728\u521b\u9020\u65b0\u7684\u611f\u89c9\u6216\u9a71\u52a8\u7cfb\u7edf\uff0c\u6211\u4eec\u53ea\u662f\u5728\u52ab\u6301\u73b0\u6709\u7684\u7cfb\u7edf\u3002\u55e8\uff0cNeuralink\uff1b)\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u83b7\u5f97\u7684\u6bcf\u4e00\u70b9\u4fe1\u606f\u90fd\u4f1a\u963b\u585e\u5e26\u5bbd\u548c\u73b0\u6709IO\u673a\u5236\u7684\u4f7f\u7528\u3002\u516c\u5e73\u5730\u8bf4\uff0c\u5728\u4e25\u91cd\u7684\u5934\u90e8\u521b\u4f24\u540e\u6062\u590d\u884c\u52a8\u80fd\u529b\u7684\u4eba\u8bc1\u660e\uff0c\u5982\u679c\u6211\u4eec\u8fde\u63a5\u6b63\u786e\u7684\u70b9\uff0c\u5e76\u7ed9\u4e88\u8db3\u591f\u7684\u65f6\u95f4\u548c\u7ec3\u4e60\uff0c\u5927\u8111\u53ef\u4ee5\u62e5\u6709\u8db3\u591f\u7684\u53ef\u5851\u6027\uff0c\u53ef\u4ee5\u4f7f\u7528\u6211\u4eec\u6254\u7ed9\u5b83\u7684\u4efb\u4f55\u4e1c\u897f\u3002\u542c\u8d77\u6765\u6bd4\u5b9e\u9645\u5bb9\u6613\uff0c\u6211\u77e5\u9053\u3002\u516c\u5e73\u5730\u8bf4\uff0c\u5728\u4e25\u91cd\u7684\u5934\u90e8\u521b\u4f24\u540e\u6062\u590d\u884c\u52a8\u80fd\u529b\u7684\u4eba\u8bc1\u660e\uff0c\u5982\u679c\u6211\u4eec\u8fde\u63a5\u6b63\u786e\u7684\u70b9\uff0c\u6709\u8db3\u591f\u7684\u65f6\u95f4\u548c\u7ec3\u4e60\uff0c\u5927\u8111\u53ef\u4ee5\u62e5\u6709\u8db3\u591f\u7684\u53ef\u5851\u6027\u6765\u4f7f\u7528\u4efb\u4f55\u629b\u5411\u5b83\u7684\u4e1c\u897f\u3002\u7528\u6237\u5e74\u9f84\u4e5f\u53ef\u80fd\u662f\u7b49\u5f0f\u7684\u4e00\u90e8\u5206\u3002\u542c\u8d77\u6765\u6bd4\u5b9e\u9645\u5bb9\u6613\uff0c\u6211\u77e5\u9053\u3002\n\u56e0\u6b64\uff0c\u6211\u4eec\u8d8a\u662f\u589e\u5f3a\u6211\u4eec\u73b0\u6709\u7684\u611f\u5b98\uff0c\u8d8a\u662f\u963b\u788d\u6211\u4eec\u57fa\u672c\u7684\u7269\u7406\u4e16\u754c\u6570\u636e\u6d41\uff0c\u5c31\u8d8a\u9700\u8981\u8bbe\u7f6e\u4e00\u4e9b\u8bbe\u8ba1\u9650\u5236\u51c6\u5219\u3002\u6211\u4eec\u5728\u4f7f\u7528\u624b\u673a\u6216\u8033\u673a\u65f6\u4ecd\u7136\u4f1a\u53d1\u751f\u4e8b\u6545\uff0c\u6240\u4ee5\u95ee\u9898\u5c31\u4ea7\u751f\u4e86\uff1a\u6211\u4eec\u5982\u4f55\u7ba1\u7406\u4e00\u4e2a\u4eba\u53e3\u4f17\u591a\u7684\u793e\u4f1a\uff0c\u8fd9\u4e2a\u793e\u4f1a\u91cd\u53e0\u5e76\u5b8c\u5168\u8986\u76d6\u4e86\u4ed6\u4eec\u7684\u89c6\u89c9\u548c\u542c\u89c9\uff1f\u4e00\u4e9b\u96c6\u6210\u5230\u6280\u672f\u4e2d\u7684\u5b89\u5168\u89c4\u5219\u5c06\u662f\u76f8\u5f53\u65b9\u4fbf\u7684\u3002\u4ee5\u4e0b\u662f\u5b9a\u4e49\u589e\u5f3a\u7a0b\u5ea6\u7684\u793a\u4f8b\uff1a\n\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0cAR\u5e94\u8be5\u80fd\u591f\u8bbf\u95ee\u6765\u81ea\u4e92\u8054\u7f51\u7684\u6570\u636e\uff0c\u6839\u636e\u5468\u56f4\u7684\u60c5\u51b5\u548c\u4e0a\u4e0b\u6587\uff0c\u8fd9\u4e9b\u6570\u636e\u5e94\u8be5\u5728\u4e0d\u9700\u8981\u592a\u591a\u7528\u6237\u52aa\u529b\u7684\u60c5\u51b5\u4e0b\u68c0\u7d22\u548c\u5448\u73b0\u3002\u6b64\u5916\uff0c\u8fd8\u5e94\u5bf9\u6709\u7528\u7684\u6570\u636e\u8fdb\u884c\u5206\u7c7b\u548c\u5b58\u50a8\uff0c\u4ee5\u5907\u4ee5\u540e\u68c0\u7d22\u3002\u8be5\u754c\u9762\u5e94\u8be5\u80fd\u591f\u7ed3\u5408\u76f8\u5173\u6570\u636e\u5e76\u63d0\u4f9b\u89e3\u51b3\u65b9\u6848\u3001\u7edf\u8ba1\u6570\u636e\u548c\u6982\u7387\u3002\n\u8fd9\u8fd8\u53ef\u4ee5\u4fdd\u5b58\u53ef\u9a8c\u8bc1\u7684\u4e8b\u4ef6\u8bb0\u5f55\u3001\u5feb\u7167\u548c\u6587\u5b57\u8bb0\u5f55\u3001\u5b9e\u65f6\u8bed\u8a00\u7ffb\u8bd1\uff0c\u6216\u8005\u5728\u4fee\u590d\u8bbe\u5907\u65f6\u67e5\u770b\u84dd\u56fe\u548c\u8bf4\u660e\u3002\n\u603b\u4f53\u4e0a\uff0c\u968f\u7740\u7269\u8054\u7f51\u548c\u4e92\u8054\u7f51\u7684\u4f7f\u7528\uff0c\u4eba\u7c7b\u7684\u611f\u89c9\u8303\u56f4\u5df2\u7ecf\u5927\u5e45\u6269\u5c55\uff0c\u4f46\u6709\u5982\u6b64\u591a\u7684\u73b0\u6709\u6280\u672f\u9700\u8981\u6574\u5408\u5230AR\u7cfb\u7edf\u4e2d\uff0c\u4ee5\u6269\u5c55\u4eba\u7c7b\u7684\u611f\u89c9\u3002\u7528\u6237\u53ef\u4ee5\u770b\u5230\u5e76\u611f\u89c9\u5230\u4ed6\u4eec\u7684\u5bb6\u6216\u8d22\u4ea7\u662f\u5426\u5b89\u5168\uff0c\u6216\u8005\u66f4\u5e7f\u6cdb\u5730\u8bf4\uff0c\u53ef\u4ee5\u5b9e\u65f6\u611f\u77e5\u7269\u7406\u4e16\u754c\u7684\u4fe1\u606f\u6d41\u3002\u4f8b\u5982\uff0c\u7269\u7406\u4e16\u754c\u7684\u6570\u636e\u53ef\u4ee5\u4e0e\u4f53\u9a8c\u76f4\u63a5\u73af\u5883\u7684\u7528\u6237\u5e76\u884c\u5904\u7406\u3002\u56e0\u6b64\uff0c\u7528\u6237\u5c06\u4f8b\u5982\u8fd4\u56de\u5bb6\u4e2d\u5e76\u68c0\u6d4b\u5230\u67d0\u4e9b\u5bf9\u8c61\u5df2\u88ab\u79fb\u52a8\u7b49\u3002\n\u9664\u4e86\u6211\u4eec\u7684\u8eab\u4f53\u8303\u56f4\u4e4b\u5916\uff0c\u6211\u4eec\u4e2d\u7684\u5927\u591a\u6570\u4eba\u90fd\u5df2\u7ecf\u7ecf\u5386\u8fc7\u8fdc\u8ddd\u79bb\u63a7\u5236\u6216\u5f71\u54cd\u7269\u8d28\u4e16\u754c\u7684\u7ecf\u5386\u3002\u589e\u5f3a\u73b0\u5b9e\u53ef\u4ee5\u8ba9\u6211\u4eec\u5468\u56f4\u7684\u4e16\u754c\u611f\u89c9\u66f4\u50cf\u662f\u6211\u4eec\u8eab\u4f53\u7684\u5ef6\u4f38\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u89c6\u89c9\u89e6\u53d1\u5668\u4e0a\u8fd0\u884c\u81ea\u52a8\u5316\u8fc7\u7a0b\uff0c\u6bd4\u5982\u4e0d\u5047\u601d\u7d22\u5730\u6253\u5f00\u524d\u95e8\uff0c\u6216\u8005\u8f7b\u677e\u5730\u63a7\u5236\u8bbe\u5907\u3001\u65e0\u4eba\u673a\u548c\u673a\u5668\u4eba\u3002\n\u6c9f\u901a\u4e5f\u53ef\u4ee5\u7b80\u5316\u3002\u6211\u4eec\u53ef\u4ee5\u4e0e\u4e16\u754c\u5404\u5730\u7684\u4efb\u4f55\u4eba\u5373\u65f6\u8054\u7cfb\uff0c\u51e0\u4e4e\u5c31\u50cf\u80a9\u5e76\u80a9\u7ad9\u5728\u4e00\u8d77\u4e00\u6837\u3002\u6c9f\u901a\u53ef\u4ee5\u5728\u51e0\u4e2a\u5c42\u9762\u4e0a\u8fdb\u884c\uff0c\u8fd9\u53d6\u51b3\u4e8e\u6280\u672f\u8fdb\u6b65\u7684\u6c34\u5e73\uff0c\u53ef\u80fd\u662f\uff1a\n\u6211\u4eec\u53ef\u4ee5\u4ee5\u524d\u6240\u672a\u6709\u7684\u65b9\u5f0f\u8fdb\u884c\u793e\u4ea4\u3001\u73a9\u6e38\u620f\u6216\u5de5\u4f5c\uff1a\u60f3\u8c61\u4e00\u4e0b\uff0c\u4e00\u8fb9\u7f16\u7801\uff0c\u4e00\u8fb9\u4e0e\u540c\u4e8b\u5206\u4eab\u60a8\u7684\u601d\u7ef4\u8fc7\u7a0b\uff0c\u540c\u65f6\u8fd8\u62e5\u6709\u4e00\u4e2a\u4eba\u5de5\u667a\u80fd\u8f85\u52a9\u7684\u96c6\u6210\u5f00\u53d1\u73af\u5883(IDE)\u3002\n\u8003\u8651\u5230\u62e5\u6709\u4fbf\u643a\u7684AR\u7cfb\u7edf\u548c\u8db3\u591f\u667a\u80fd\u7684\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u6765\u590d\u5236\u6211\u4eec\u7684\u73af\u5883\u5e76\u9884\u6d4b\u6211\u4eec\u7684\u9700\u6c42\uff0c\u6216\u8005\u62e5\u6709\u8db3\u591f\u9ad8\u6548\u7684\u9009\u62e9\u548c\u4f7f\u7528\u8ba1\u7b97\u5de5\u5177\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\uff1a\n\u4eba\u5de5\u667a\u80fd\u6216\u901a\u7528\u4eba\u5de5\u667a\u80fd\uff0c\u5982\u679c\u53ef\u7528\uff0c\u4e5f\u53ef\u4ee5\u7528\u4f5c\u53ef\u7528\u7684\u8ba4\u77e5\u5de5\u5177\u7bb1\u7684\u4e2d\u4ecb\uff0c\u4e3a\u6700\u7ec8\u7528\u6237\u63d0\u4f9b\u5fc5\u8981\u7684\u5de5\u5177\u548c\u7ed3\u679c\u3002\n\u6211\u4e0d\u4f1a\u5728\u8fd9\u91cc\u8be6\u8ff0\uff0cVR\u6e38\u620f\u5df2\u7ecf\u8ba9\u4eba\u8eab\u4e34\u5176\u5883\uff0c\u800c\u4e14\u5f88\u6709\u8da3\uff0c\u4f46\u8bd5\u7740\u60f3\u8c61\u4e00\u4e0b\uff0c\u5982\u679c\u5728\u7ec4\u5408\u4e2d\u589e\u52a0\u4e00\u4e9b\u81ea\u7531\uff0c\u5b83\u4eec\u4f1a\u662f\u4ec0\u4e48\u6837\u5b50\u3002\u7531\u4e8e\u6e38\u620f\u548c\u5a31\u4e50\u60f3\u5fc5\u6700\u6709\u53ef\u80fd\u9700\u8981\u5c3d\u53ef\u80fd\u591a\u7684\u6c89\u6d78\uff0c\u56e0\u6b64\u6709\u5fc5\u8981\u8003\u8651\u6c89\u6d78\u5b89\u5168\u3002\n\u6c7d\u8f66\u3001\u697c\u68af\u3001\u7a81\u7136\u5760\u843d\u548c\u969c\u788d\u7269\u90fd\u4f1a\u7559\u5728\u8fd9\u91cc\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4efb\u4f55\u53ef\u4ee5\u8986\u76d6\u4f60\u7684\u611f\u5b98\u8f93\u5165\u7684\u8bbe\u5907\u6765\u8bf4\uff0c\u5fc5\u987b\u6709\u4e00\u79cd\u964d\u4f4e\u98ce\u9669\u7684\u65b9\u6cd5\u3002\n\u60f3\u8c61\u4e00\u4e0b\uff0c\u4f60\u60f3\u5728\u67d0\u4e2a\u5730\u65b9\u73a9\u4e00\u6b3e\u5168\u529f\u80fd\u7684\u865a\u62df\u73b0\u5b9e\u6e38\u620f\u3002\u4f60\u600e\u4e48\u80fd\u4fdd\u8bc1\u5b89\u5168\u800c\u4e0d\u88ab\u4ec0\u4e48\u4e1c\u897f\u7eca\u5012\u6216\u8005\u4ece\u8def\u8fb9\u8dcc\u5012\u5462\uff1f\u8fd9\u5f88\u7b80\u5355\uff0c\u4f60\u53ea\u9700\u7ed5\u7740\u4f60\u7684\u64cd\u573a\u8d70\u4e00\u5708\uff0c\u5c31\u53ef\u4ee5\u5b9a\u4e49\u5b83\u7684\u8f6e\u5ed3\u548c\u754c\u9650\u3002\u4e00\u5b9a\u7684\u7a7a\u95f4\u751a\u81f3\u53ef\u4ee5\u4ece\u64cd\u573a\u7684\u5916\u90e8\u754c\u9650\u4e2d\u79fb\u51fa\uff0c\u4efb\u4f55\u969c\u788d\u7269\u90fd\u4f1a\u5728\u6e38\u620f\u4e2d\u91cd\u73b0\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u5bfc\u822a\u901a\u8fc7\u5b83\u4eec\u3002\u4f60\u5f00\u59cb\u73a9\u6e38\u620f\uff0c\u5982\u679c\u4f60\u79fb\u52a8\u5230\u5916\u90e8\u6781\u9650\uff0c\u6e38\u620f\u5c31\u4f1a\u5f00\u59cb\u6de1\u51fa\u3002\n\u597d\u7684\uff0c\u4f46\u662f\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\uff0c\u4f60\u8fd8\u80fd\u5728\u54ea\u91cc\u4f7f\u7528100%\u7684\u589e\u5f3a\u4e0d\u900f\u660e\u5ea6\u5462\uff1f\u9996\u5148\u60f3\u5230\u7684\u5b89\u5168\u7684\u4e1c\u897f\u662f\u5899\u3002\u4f60\u53ef\u4ee5\u5c06\u4e1c\u897f\u6295\u5c04\u5230\u51e0\u4e4e\u4efb\u4f55\u4e00\u9762\u5899\u7684\u524d\u9762\uff0c\u5e76\u786e\u4fdd\u6ca1\u6709\u4ec0\u4e48\u4f60\u770b\u4e0d\u5230\u7684\u4e1c\u897f\u4f1a\u4ece\u90a3\u4e2a\u65b9\u5411\u51fb\u4e2d\u4f60\uff0c\u6216\u8005\u81f3\u5c11\u50cf\u4f60\u73b0\u5728\u8fd9\u6837\u786e\u5b9a\u3002\n\u53e6\u4e00\u4e2a\u6709\u7528\u7684\u529f\u80fd\u662f\uff0c\u5f53\u9700\u8981\u5b89\u9759\u65f6\u95f4\u6216\u4f11\u606f\uff0c\u4ee5\u53ca\u538b\u529b\u6c34\u5e73\u975e\u5e38\u4e25\u91cd\u65f6\uff0c\u8ba9\u8eab\u4e34\u5176\u5883\u7684\u5185\u5bb9\u505c\u6b62\u3002\n\u6211\u60f3\u6211\u4eec\u90fd\u5f88\u6e05\u695aAR\u7cfb\u7edf\u76ee\u524d\u7684\u5c40\u9650\u6027\uff0c\u4f46\u56de\u987e\u6211\u4eec\u4eca\u5929\u6240\u62e5\u6709\u7684\u4e0d\u5b58\u5728\u7684\u6216\u6280\u672f\u542b\u91cf\u8f83\u4f4e\u7684\u8f93\u5165\u548c\u8f93\u51fa\u65b9\u5f0f\uff0c\u901a\u8fc7\u6a21\u4eff\u4e0d\u5b58\u5728\u7684\u589e\u5f3a\u8def\u5f84\u548c\u8fc7\u7a0b\uff0c\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u63a8\u65ad\u51fa\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u6539\u8fdb\u7684\u4e8b\u60c5\u4ee5\u53ca\u9700\u8981\u5982\u4f55\u505a\u7684\u4e8b\u60c5\u3002\u4eca\u5929\u7684\u865a\u62df\u73b0\u5b9e\u529f\u80fd\u53ef\u4ee5\u4f5c\u4e3a\u6a21\u62df\u672a\u6765\u589e\u5f3a\u7cfb\u7edf\u7684\u5e73\u53f0\u3002\u5e94\u7528\u7a0b\u5e8f\u548c\u64cd\u4f5c\u7cfb\u7edf\u53ef\u4ee5\u5e76\u4e14\u5df2\u7ecf\u5728\u5236\u9020\u3002VR\u5df2\u7ecf\u5f00\u53d1\u51fa\u8ddf\u8e2a\u7528\u6237\u773c\u7403\u8fd0\u52a8\u548c\u626b\u63cf\u7528\u62373D\u73af\u5883\u7684\u65b9\u6cd5\uff0c\u4ee5\u4fbf\u5c31\u5730\u6a21\u62df\u3002\u4ee5\u4e0b\u662f\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u4f7f\u7528\u7684\u4e00\u4e9b\u7cfb\u7edf\uff1a\n\u6211\u9519\u8fc7\u4e86\u4ec0\u4e48\uff1f\u5982\u679c\u60a8\u60f3\u53d1\u8868\u8bc4\u8bba\u3001\u6279\u8bc4\u6216\u53ea\u662f\u8c08\u8c08\uff0c\u8bf7\u968f\u65f6\u7ed9\u6211\u53d1\u7535\u5b50\u90ae\u4ef6\uff1ablanimir@valenti.email", "note_en": "This post is a bundle of thoughts on the near future of Augmented Reality implementations, ways of integration, and introducing new layers of cognition. We are going to talk about AR as a way of enabling transhumanism by broadening the human cognitive and sensory toolbox. We are not going to be concerned with what is and what is not technologically possible at the moment.\n  Have you ever taken a walk and thought about all the accessible information on animals, plants, objects, or even people? How much information is available on the internet? How many facts have you encountered and already forgotten?\n Ancient Greeks put an active effort into training and maintaining their memorizing capabilities, and already at this stage of progress, human memory is shifting \u2013 or has shifted from remembering facts to remembering how and where to find facts. We are keeping less and less information hardcoded in our permanent memory and are in turn learning how to consume, process, and find useful data in an endless stream of information and misinformation.\n A technologically proficient user has access to a vast volume and spectrum of data at his/her disposal, sitting right in the pocket. The human approach to holding knowledge is evolving as we speak. Heck, it started evolving with the invention of speech. But another significant change is on the cusp of happening. Our mobile phone interfaces, while serving all the information we need, are still detached from us, having considerable latency when we need to find, show, or input data. With the introduction of AR, AI, and human-computer interfaces, everything is about to change. AR or human augmentation in general will make that data more accessible and drastically lessen the latency needed for the interaction, making the tools feel more and more as part of ourselves.\n Imagine walking down the street. You look around to observe people on the street and notifications start popping up alongside people\u2019s heads. For one person the message says: &#34;You have seen this person three times this week already&#34;; for another one it states: &#34;You have five mutual connections and common interests&#34;. Those notifications could also tell you if the person is willing to make new connections, based on previously shared data or facial microexpression analysis. Maybe we have gone too far down the rabbit hole for now, but you get the idea.\n  Merriam-Webster defines Augmented Reality as &#34;an enhanced version of reality created by the use of technology to overlay digital information on an image of something being viewed through a device (such as a smartphone camera)&#34;. For the purposes of this post, I would like us not to limit reality to human vision alone.\n Merriam-Webster has no definition for Transhumanism, but Wikipedia defines it as a philosophical movement that advocates for the transformation of the human condition by developing and making widely available sophisticated technologies to greatly enhance human intellect and physiology.\n The two are getting more and more intertwined as technology advances, so I would like us to redefine AR, if only for this post, as &#34;any technology that enhances or expands the human experience of reality&#34;, or maybe even as &#34;practical transhumanism&#34;.\n     For the time being, and at least until we master the LVL 4 milestone described above, we are not creating new sensory or actuation systems, we are only hijacking the existing ones. Hi, Neuralink ;). This means that with every bit of information we gain, we are blocking the bandwidth and use for our existing IO mechanisms. In all fairness, people recovering their mobility after severe head trauma are evidence that the brain could possess enough plasticity to use whatever we throw at it, given we connect the right dots, and given enough time and practice. Sounds easier than it is, I know. In all fairness, people recovering mobility after a severe head trauma are evidence that the brain could possess enough plasticity to use whatever is thrown at it, given we connect the right dots, have enough time and practice. User age could also be a part of the equation. Sounds easier than it is, I know.\n So, the more we augment our existing senses, the more we obstruct our basic physical-world data flow, the need to set some design restriction guidelines will grow. We still have accidents while using mobile phones or headphones, so the question arises: how could we manage a society full of people that overlap and fully cover their field of vision and hearing? Some safety rules integrated into the tech would be quite handy. Here is an example of defining degrees of augmentation:\n    At some point, AR should enable access to data from the internet, which should be retrieved and presented without too much user effort, based on surrounding situations and context. Also, the useful data should be categorized and stored for retrieval at a later time. The interface should be able to combine relevant data and present solutions, statistics, and probabilities.\n This could also enable saving verifiable event recordings, snapshots, and transcripts, real-time language translation, or seeing blueprints and instructions while fixing devices.\n  The human sensory reach is already drastically extended with the use of IoT and the internet in general, but there is so much more of existing tech to be integrated into an AR system to extend human senses. Users could see and feel if their home or possessions are safe, or more generally, sense physical-world information streams in real-time. For example, physical-world data can be processed in parallel with the user experiencing the immediate surroundings. Thus, the user would, for instance, return home and detect certain objects have been moved, etc.\n  Besides our physical reach, most of us have already experienced controlling or affecting the physical-world at a distance. AR could help make the world around us feel more like an extension of our physical bodies. We could run automated processes upon visual triggers, i.e. unlock the front door without thinking, or control devices, drones, and robotics with ease.\n  Communication could also be streamlined. We could have an instant connection with anyone around the world, almost as if standing side by side. Communication could play out on several levels, depending on the level of technological advancement, and could be:\n  We could socialize, play games, or work like never before: imagine coding while sharing your thought process with a colleague, and also having an &#34;AI&#34; assisted IDE.\n  Given having a portable AR system and a smart enough underlying OS that replicates our surroundings and anticipates our needs OR an efficient enough way of selecting and using computational tools, we could:\n  AI or General AI could, if available, also be used as an intermediary to the available cognition toolbox, to serve the necessary tools and results to the end-user.\n  I won\u2019t go into great detail here, VR games are already immersive and fun, but try to imagine what they would be like if some freedom is added to the mix. As games and entertainment are presumably most likely to require as much immersion as possible, it will be necessary to consider immersion safety.\n  Cars, stairs, sudden drops, and obstacles are here to stay, so for any device that can write over your sensory input, a way to risk mitigation must be in place.\n  Imagine you want to play a full-on VR game somewhere. How could you stay safe and not trip over something or fall over some curb? It is simple, you could just walk around your playground to define its contours and limits. A certain amount of space can even be taken out of the outer limits of the playground, any obstacles are reproduced in-game so you can navigate past them. You start the game and play, and in case you move to the outer limits, the game simply starts to fade away.\n  OK, but where else could you use 100% augmentation opacity in the real world? The first thing that comes to mind as safe would be walls. You can project stuff in front of almost any wall and be sure that nothing you can\u2019t see will hit you from that direction, or at least as sure as you are now.\n  Another useful feature would be to have the immersive content stop when quiet time or rest is needed, as well as if stress levels are critical.\n    I guess we are all well aware of the current limitations of the AR systems, but looking past the non-existing or low tech ways of input and output that we nowadays possess, by emulating non-existing augmentation pathways and processes, we can still extrapolate the things we already can improve and how things need to be done. Today\u2019s VR capabilities can serve as the platform emulating future augmentation systems. Application and Operating Systems can be and are already being made. VR has developed ways of tracking user\u2019s eye-movement and scanning user\u2019s 3D environment to emulate it in place. The following are some of the systems that we can already work on:\n  What did I miss? If you want to comment, criticize, or just talk feel free to drop me an e-mail at branimir@valentic.email", "posttime": "2020-10-29 10:28:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u589e\u5f3a,augmented,\u4eba\u7c7b", "title": "\u8de8\u8212\u66fc\u4e3b\u4e49\u4e0e\u589e\u5f3a\u73b0\u5b9e--\u4e00\u4e2a\u52c7\u6562\u7684\u65b0\u589e\u5f3a\u4e16\u754c", "title_en": "Transhumanism and Augmented Reality \u2013 A brave new augmented world", "transed": 1, "url": "https://qaautomation.dev/a-brave-new-agumented-world/", "via": "", "real_tags": ["\u589e\u5f3a", "augmented", "\u4eba\u7c7b"]}, {"category": "", "categoryclass": "", "imagename": "c72a4bdf84c77ccc3eff0558d5edc17a.jpg", "infoid": 1031873, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f53\u7f16\u7801\u4e0e\u6563\u5217\u3001\u968f\u673a\u6570\u751f\u6210\u751a\u81f3\u5bc6\u7801\u672f\u6709\u5173\u7684\u9ad8\u6548\u7b97\u6cd5\u65f6\uff0c\u5e38\u89c1\u7684\u6784\u9020\u662f\u8868\u8fbe\u5f0f\u201c-n%n\u201d\u3002\u6211\u7684\u7ecf\u9a8c\u662f\u5b83\u8ba9\u8bb8\u591a\u7a0b\u5e8f\u5458\u611f\u5230\u56f0\u60d1\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u8fdb\u4e00\u6b65\u7814\u7a76\u5b83\u3002\n\u6b64\u8868\u8fbe\u5f0f\u4e2d\u7684\u767e\u5206\u53f7(%)\u8868\u793a\u6a21\u8fd0\u7b97\u3002\u5b83\u8fd4\u56de\u6574\u6570\u9664\u6cd5\u7684\u4f59\u6570\u3002\u4e3a\u4e86\u7b80\u5316\u8ba8\u8bba\uff0c\u8ba9\u6211\u4eec\u5047\u8bbe\u8303\u56f40\u4e25\u683c\u4e3a\u6b63\uff0c\u56e0\u4e3a\u9664\u4ee5\u96f6\u4f1a\u4ea7\u751f\u95ee\u9898\u3002\n\u6211\u4eec\u5e94\u8be5\u6ce8\u610f\u524d\u9762\u7684\u51cf\u53f7(-)\u3002\u6c42\u503c\u7684\u662f\u4e00\u5143\u8fd0\u7b97\u7b26\uff0c\u800c\u4e0d\u662f\u51cf\u53f7\u3002\u201c-RANGE%RANGE&34\uff1b\u201d\u548c\u201c0-RANGE%RANGE&34\uff1b\u201d\u4e4b\u95f4\u5b58\u5728\u5dee\u5f02\u3002\u5b83\u4eec\u4e00\u70b9\u4e5f\u4e0d\u7b49\u540c\u3002\u5b83\u4eec\u5b9e\u9645\u4e0a\u4f1a\u7ed9\u60a8\u4e0d\u540c\u7684\u503c\uff1b\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u59cb\u7ec8\u4e3a\u96f6\u3002\u8fd9\u662f\u56e0\u4e3a\u8fd0\u8425\u7684\u4f18\u5148\u6743\u3002\u6c42\u53cd\u8fd0\u7b97\u4f18\u5148\u4e8e\u6a21\u8fd0\u7b97\uff0c\u6a21\u8fd0\u7b97\u4f18\u5148\u4e8e\u51cf\u6cd5\u8fd0\u7b97\u3002\u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u5c06\u201c-range%range&#34\uff1b\u201d\u91cd\u5199\u4e3a\u201c(-range)%range&#34\uff1b\u3002\u60a8\u53ef\u4ee5\u5c06\u201c0-Range%Range&#34\uff1b\u201d\u5199\u4e3a\u201c0-(Range%Range)\u201d\u3002\n\u5f53\u53d8\u91cf\u8303\u56f4\u662f\u5e26\u7b26\u53f7\u6574\u6570\u65f6\uff0c\u8868\u8fbe\u5f0f-range%range\u4e3a\u96f6\u3002\u5728\u53ea\u5305\u542b\u6709\u7b26\u53f7\u6574\u6570\u7684\u7f16\u7a0b\u8bed\u8a00(\u5982Java)\u4e2d\uff0c\u6b64\u8868\u8fbe\u5f0f\u59cb\u7ec8\u4e3a\u96f6\u3002\n\u56e0\u6b64\uff0c\u8ba9\u6211\u4eec\u5047\u8bbe\u53d8\u91cf\u8303\u56f4\u662f\u65e0\u7b26\u53f7\u7c7b\u578b\uff0c\u6b63\u5982\u5b83\u5e94\u8be5\u662f\u7684\u90a3\u6837\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8868\u8fbe\u5f0f\u901a\u5e38\u4e3a\u975e\u96f6\u3002\n\u5f53\u53d8\u91cf\u8303\u56f4\u662f\u65e0\u7b26\u53f7\u7c7b\u578b\u65f6\uff0cVisual Studio\u53ef\u80fd\u4f1a\u5bf9\u8868\u8fbe\u5f0f\u8303\u56f4\u4e0d\u6ee1\u610f\u3002\u6700\u8fd1\u7684Visual Studio\u8fd4\u56de\u4ee5\u4e0b\u8b66\u544a\uff1a\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u76f8\u4fe1\u5b83\u5728C++\u3001Go\u548c\u8bb8\u591a\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90fd\u662f\u5b9a\u4e49\u826f\u597d\u7684\u64cd\u4f5c\u3002Jonathan Adamczewski\u6709\u4e00\u7bc7\u5173\u4e8e\u8fd9\u4e2a\u4e3b\u9898\u7684\u6574\u7bc7\u535a\u5ba2\u6587\u7ae0\uff0c\u5176\u4e2d\u5efa\u8bae\u7528Microsoft Visual Studio\u56e2\u961f\u5bf9C++\u6807\u51c6\u7684\u5386\u53f2\u504f\u5dee\u6765\u6700\u597d\u5730\u89e3\u91caVisual Studio\u8b66\u544a\u3002(\u8bf7\u6ce8\u610f\uff0c\u5f53\u524d\u7684Visual Studio\u56e2\u961f\u4f3c\u4e4e\u81f4\u529b\u4e8e\u672a\u6765\u7684\u6807\u51c6\u3002)\u3002\n\u6211\u6700\u559c\u6b22\u7684\u5b9a\u4e49\u662f-range\u7531range+(-range)=0\u5b9a\u4e49\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u662f\u8fd9\u6837\u7684\u503c\uff0c\u5f53\u60a8\u5c06\u5176\u6dfb\u52a0\u5230Range\u65f6\uff0c\u60a8\u4f1a\u5f97\u5230\u96f6\u3002\u6570\u5b66\u5bb6\u4f1a\u8bf4\u5b83\u662f\u201c\u52a0\u6027\u9006\u201d\u3002\u5728\u7f16\u7a0b\u8bed\u8a00(\u5982GO\u548cC++)\u4e2d\uff0c\u65e0\u7b26\u53f7\u6574\u6570\u4e0d\u80fd\u6ea2\u51fa\uff0c\u90a3\u4e48\u6bcf\u4e2a\u6574\u6570\u503c\u603b\u662f\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u52a0\u6cd5\u5012\u6570\u3002\n\u60a8\u53ef\u4ee5\u5b9a\u4e49\u8fd9\u4e2a\u6ca1\u6709\u4e00\u5143\u5426\u5b9a\u7684\u52a0\u6cd5\u9006\uff1a\u5982\u679cmax\u662f\u60a8\u53ef\u4ee5\u8868\u793a\u7684\u6700\u5927\u503c\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u5c06-range\u66ff\u6362\u4e3amax-range+1\u3002\u6216\u8005\uff0c\u53ef\u80fd\u66f4\u7b80\u5355\u5730\uff0c\u5b9a\u4e49\u4e3a(0-range)\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5728SWIFT\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u8fd9\u4e00\u7279\u5b9a\u884c\u8868\u793a\u5982\u4e0b\uff1a\nSWIFT\u8bed\u8a00\u6709\u4e24\u4e2a\u51cf\u6cd5\u8fd0\u7b97\uff0c\u4e00\u4e2a\u4e0d\u5141\u8bb8\u6ea2\u51fa(\u901a\u5e38\u7684\u2018-\u2019)\uff0c\u53e6\u4e00\u4e2a\u5141\u8bb8\u6ea2\u51fa(\u2018&amp\uff1b-\u2019)\u3002SWIFT\u5f3a\u8feb\u6211\u4eec\u7f16\u5199\u8fd9\u4e48\u591a\u4ee3\u7801\u6709\u70b9\u4e0d\u65b9\u4fbf\uff0c\u4f46\u6211\u4eec\u5fc5\u987b\u627f\u8ba4\uff0c\u7ed3\u679c\u53ef\u80fd\u4e0d\u592a\u53ef\u80fd\u8ba9\u4f18\u79c0\u7684\u7a0b\u5e8f\u5458\u611f\u5230\u56f0\u60d1\u3002\n\u603b\u7ed3\uff1a\u60a8\u53ea\u9700\u68c0\u67e5\u4e00\u884c\u4ee3\u7801\u5c31\u53ef\u4ee5\u5b66\u5230\u5f88\u591a\u4e1c\u897f\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u7f16\u7a0b\u662f\u4e00\u9879\u6bd4\u4e4d\u770b\u8d77\u6765\u66f4\u6df1\u5165\u3001\u66f4\u590d\u6742\u7684\u5b9e\u8df5\u3002\u6b63\u5982\u6211\u6628\u5929\u544a\u8bc9\u6211\u7684\u4e00\u4e2a\u5b66\u751f\u7684\u90a3\u6837\uff1a\u4f60\u4e0d\u5e94\u8be5\u4e00\u76f4\u9605\u8bfb\u5e76\u7406\u89e3\u65b0\u7684\u4ee3\u7801\u3002", "note_en": "When coding  efficient algorithms\u00a0having to do with hashing, random number generations or even cryptography, a common construction is the expression \u201c -n%n\u201c. My experience has been that it confuses many programmers, so let us examine it further.\n   The percent sign (  %) in this expression refers to the modulo operation. It returns the remainder of the integer division. To simplify the discussion, let us assume that  range\u00a0is strictly positive since dividing by zero causes problems.\n We should pay attention to the leading minus sign ( \u2013). It is the unary operator that negates a value, and not the subtraction sign. There is a difference between \u201c -range  % range&#34;\u00a0and \u201c 0 -range  % range&#34;. They are not at all equivalent. They will actually give you different values; the latter expression is always zero. And that is because of the priority of operation. The negation operation has precedence on the modulo operation which has precedence on the subtraction operation. Thus you can rewrite \u201c -range  % range&#34;\u00a0as \u201c( -range)\u00a0 % range&#34;. And you can write \u201c 0 -range  % range&#34;\u00a0as \u201c 0 - (range  % range)\u201c.\n When the variable  range is a signed integer, then the expression   -range  % range is zero. In a programming language with only signed integers, like Java, this expression is always zero.\n So let us assume that\u00a0the variable  range is an unsigned type, as it is meant to be. In such cases, the expression is generally non-zero.\n  When the variable  range is an unsigned type, Visual Studio is likely to be unhappy at the expression  -range. A recent Visual Studio returns the following warning:\n  Nevertheless, I believe that it is  a well defined operation in C++, Go and many other programming languages.  Jonathan Adamczewski has a whole blog post on the topic which suggests that the Visual Studio warning is best explained by a historical deviations from the C++ standard from the Microsoft Visual Studio team. (Note that the current Visual Studio team seems committed to the standards going forward.)\n My favorite definition is that \u2013 range is defined by  range + (- range) = 0. That is, it is the value such that when you add it to  range, you get zero. Mathematicians would say that it is the \u201cadditive inverse\u201d. In programming languages (like Go and C++) where unsigned integers cannot overflow, then there is always one, and only one, additive inverse to every integer value.\n You can define this additive inverse without the unary negation: if  max is the maximum value that you can represent, then you can replace \u2013 range\u00a0by  maximum \u2013  range + 1. Or, maybe more simply, as  (0-range). And indeed,\u00a0 in the Swift programming language, this particular line was represented as follow:\n  The Swift language has two subtraction operations, one that is not allowed to overflow (the usual \u2018 -\u2018), and one that is allowed to overflow (\u2018 &amp;-\u2018). It is somewhat inconvenient that Swift forces us to write so much code, but we must admit that the result is probably less likely to confuse a good programmer.\n To conclude: you can learn a lot just by examining one line of code. To put it another way, programming is a much deeper and complex practice than it seems at first. As I was telling a student of mine yesterday: you are not supposed to read new code and understand it right away all of the time.", "posttime": "2020-10-29 10:27:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f16\u7a0b,programming,\u7f16\u7a0b\u8bed\u8a00,range", "title": "\u201c-n%n\u201d\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5230\u5e95\u6709\u4ec0\u4e48\u4ef7\u503c\uff1f", "title_en": "What the heck is the value of \u201c-n % n\u201d in programming languages?", "transed": 1, "url": "https://lemire.me/blog/2020/10/28/what-the-heck-is-the-value-of-n-n-in-programming-languages/", "via": "", "real_tags": ["\u7f16\u7a0b", "\u7f16\u7a0b\u8bed\u8a00", "range"]}, {"category": "", "categoryclass": "", "imagename": "b8bda162dc23b87fa3a5b1b4ab6f2a80.jpeg", "infoid": 1031871, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u4f60\u89c1\u8fc7\u8fd9\u4e2a\u5b9a\u4e49\uff0c\u90a3\u5c31\u662f\u8fc8\u514b\u5c14\u00b7\u8d39\u745f\u65af\u7684\u4e66\u201c\u6709\u6548\u5730\u4f7f\u7528\u9057\u7559\u4ee3\u7801\u201d(Working Efficient With Legacy Code)\u4e2d\u7684\u5b9a\u4e49\u3002\n\u867d\u7136\u6211\u6709\u4e00\u4e2a\u7a0d\u5fae\u6269\u5c55\u7684\u5b9a\u4e49\uff0c\u4f46\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u6548\u548c\u6709\u7528\u7684\u5b9a\u4e49\uff01\n\u8d39\u745f\u65af\u7684\u4e66\u662f2004\u5e74\u51fa\u7248\u7684\u3002\u7136\u800c\uff0c\u5b83\u7684\u5185\u5bb9\u5e76\u6ca1\u6709\u8fc7\u65f6\u3002\u8fd9\u662f\u6709\u539f\u56e0\u7684\uff0c\u8fd9\u4e2a\u59d4\u5458\u4f1a\u5730\u5e26\u8bf4\u5f97\u6700\u597d\uff1a\n\u5f53\u6709\u5173\u4e8e\u9057\u7559\u4ee3\u7801\u7684\u5e16\u5b50\u65f6\uff0c\u5f88\u5feb\u5c31\u4f1a\u6709\u4eba\u7559\u8a00\u5efa\u8bae\u4f60\u9605\u8bfb\u5b83\u3002\n\u6211\u6ca1\u770b\u8fc7\u3002\u6211\u770b\u8fc7\u63a8\u8350\u7684\u3002\u4f46\u662f\u90a3\u672c\u4e66\u7684\u91cd\u70b9\u662f\u4ec0\u4e48\u5462\uff1f\n\u4e0b\u9762\u662f\u6211\u5bf9\u672c\u4e66\u8981\u70b9\u7684\u603b\u7ed3\uff0c\u4ee5\u53ca\u5b83\u4eec\u5982\u4f55\u5e2e\u52a9\u60a8\u5904\u7406\u73b0\u6709\u7684\u4ee3\u7801\u5e93\u3002\n\u5f53\u4ee3\u7801\u6ca1\u6709\u7ecf\u8fc7\u6d4b\u8bd5\u65f6\uff0c\u60a8\u600e\u4e48\u77e5\u9053\u60a8\u6ca1\u6709\u7834\u574f\u4efb\u4f55\u4e1c\u897f\u5462\uff1f\n\u4f60\u9700\u8981\u53cd\u9988\u3002\u81ea\u52a8\u53cd\u9988\u662f\u6700\u597d\u7684\u3002\u56e0\u6b64\uff0c\u8fd9\u662f\u60a8\u9700\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\uff1a\u7f16\u5199\u6d4b\u8bd5\u3002\n\u4f60\u7684\u76ee\u6807\u662f\u5230\u8fbe\u90a3\u91cc\u3002\u8fd9\u672c\u4e66\u7684\u91cd\u70b9\u662f\u544a\u8bc9\u4f60\uff0c\u5f53\u4f60\u5fc5\u987b\u5904\u7406\u4e00\u4e2a\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u590d\u6742\u7684\u4ee3\u7801\u5e93\u65f6\uff0c\u4f60\u5982\u4f55\u624d\u80fd\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u8fd9\u5c31\u628a\u6211\u4eec\u5e26\u5230\u4e86\u4e0b\u4e00\u4e2a\u70b9\u2026\u3002\n\u5728\u66f4\u6539\u4ee3\u7801\u4e4b\u524d\uff0c\u60a8\u5e94\u8be5\u51c6\u5907\u597d\u6d4b\u8bd5\u3002\u4f46\u662f\u8981\u5c06\u6d4b\u8bd5\u653e\u5728\u9002\u5f53\u7684\u4f4d\u7f6e\uff0c\u60a8\u5fc5\u987b\u66f4\u6539\u4ee3\u7801\u3002\n\u4f60\u4e0d\u4f1a\u7684\u3002\u4f46\u5728\u68c0\u67e5\u5230\u4f4d\u4e4b\u524d\u4f60\u5e94\u8be5\u683c\u5916\u5c0f\u5fc3\u3002\u60a8\u5e94\u8be5\u6267\u884c\u6700\u4f4e\u9650\u5ea6\u7684\u3001\u5b89\u5168\u7684\u91cd\u6784\u3002\n\u4e00\u65e6\u4f60\u5230\u4e86\u6d4b\u8bd5\u9636\u6bb5\uff0c\u4f60\u5c31\u77e5\u9053\u5982\u4f55\u7ee7\u7eed\u4e86\u3002\u524d\u4e24\u70b9\u662f\u96be\u70b9\u3002\n\u8fd9\u662f\u56e0\u4e3a\u4ee3\u7801\u4ece\u4e00\u5f00\u59cb\u5c31\u4e0d\u662f\u4e3a\u4e86\u53ef\u6d4b\u8bd5\u800c\u7f16\u5199\u7684\u300299%\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f\u4e00\u4e2a\u4f9d\u8d56\u95ee\u9898\uff1a\u60a8\u60f3\u8981\u6d4b\u8bd5\u7684\u4ee3\u7801\u65e0\u6cd5\u8fd0\u884c\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u4e00\u4e9b\u96be\u4ee5\u653e\u5165\u6d4b\u8bd5\u4e2d\u7684\u4e1c\u897f\u3002\n\u6709\u65f6\u662f\u6570\u636e\u5e93\u8fde\u63a5\u3002\u6709\u65f6\u662f\u5bf9\u7b2c\u4e09\u65b9\u670d\u52a1\u5668\u7684\u547c\u53eb\u3002\u6709\u65f6\u5b83\u662f\u4e00\u4e2a\u96be\u4ee5\u5b9e\u4f8b\u5316\u7684\u590d\u6742\u53c2\u6570\u3002\u901a\u5e38\uff0c\u8fd9\u662f\u6240\u6709\u8fd9\u4e9b\u7684\u590d\u6742\u7ec4\u5408\u3002\nSeam\u662f\u5728\u4e0d\u66f4\u6539\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u66f4\u6539\u7a0b\u5e8f\u884c\u4e3a\u7684\u5730\u65b9\u3002\n\u6709\u4e0d\u540c\u7c7b\u578b\u7684\u63a5\u7f1d\u3002\u5b83\u7684\u8981\u70b9\u662f\u786e\u5b9a\u5982\u4f55\u5728\u4e0d\u63a5\u89e6\u6e90\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u66f4\u6539\u4ee3\u7801\u884c\u4e3a\u3002\n\u5bfc\u51fa\u7c7bDatabaseConnector{//\u5927\u91cf\u4ee3\u7801\u2026\u3002Connect(){//\u6267\u884c\u4e00\u4e9b\u8c03\u7528\u4ee5\u8fde\u63a5\u5230\u6570\u636e\u5e93\u3002}}\u3002\n\u5047\u8bbe\u5f53\u60a8\u5c1d\u8bd5\u5c06\u4ee3\u7801\u653e\u5165\u6d4b\u8bd5\u4e2d\u65f6\uff0cconnect()\u65b9\u6cd5\u4f1a\u7ed9\u60a8\u5e26\u6765\u95ee\u9898\u3002\u55ef\uff0c\u6574\u4e2a\u73ed\u7ea7\u90fd\u662f\u4f60\u53ef\u4ee5\u6539\u53d8\u7684\u63a5\u7f1d\u3002\n\u60a8\u53ef\u4ee5\u5728\u6d4b\u8bd5\u4e2d\u6269\u5c55\u6b64\u7c7b\uff0c\u4ee5\u9632\u6b62\u5176\u8fde\u63a5\u5230\u5b9e\u9645\u7684\u6570\u636e\u5e93\uff1a\nFakeDatabaseConnector\u7c7b\u6269\u5c55DatabaseConnector{connect(){//\u8986\u76d6\u5bf9DB\u63a7\u5236\u53f0\u7684\u6709\u95ee\u9898\u7684\u8c03\u7528\u3002\u65e5\u5fd7(&#34\uff1b\u8fde\u63a5\u5230\u6570\u636e\u5e93&#34\uff1b)}}\u3002\n\u5982\u679c\u60a8\u7684\u8bed\u8a00\u5141\u8bb8\u60a8\u5728\u4e0d\u66f4\u6539\u6e90\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u66f4\u6539\u4ee3\u7801\u884c\u4e3a\uff0c\u90a3\u4e48\u60a8\u5c31\u6709\u4e86\u7f16\u5199\u6d4b\u8bd5\u7684\u5165\u53e3\u70b9\u3002\n\u5173\u4e8e\u6d4b\u8bd5\u6700\u4f73\u5b9e\u8df5\u7684\u8ba8\u8bba\u901a\u5e38\u4f1a\u53d8\u6210\u6fc0\u70c8\u7684\u8fa9\u8bba\u3002\u60a8\u662f\u5426\u5e94\u8be5\u5e94\u7528\u6d4b\u8bd5\u91d1\u5b57\u5854\u539f\u5219\u5e76\u7f16\u5199\u6700\u591a\u7684\u5355\u5143\u6d4b\u8bd5\uff1f\u6216\u8005\uff0c\u60a8\u662f\u5426\u5e94\u8be5\u8f6c\u800c\u63a5\u53d7\u6d4b\u8bd5\u676f\uff0c\u5e76\u4e14\u4e3b\u8981\u7f16\u5199\u96c6\u6210\u6d4b\u8bd5\uff1f\n\u56e0\u4e3a\u4ed6\u4eec\u5bf9\u201c\u5355\u4f4d\u201d\u7684\u5b9a\u4e49\u4e0d\u4e00\u6837\u3002\u56e0\u6b64\uff0c\u6709\u4e9b\u4eba\u8c08\u8bba\u201c\u96c6\u6210\u6d4b\u8bd5\u201d\uff0c\u800c\u53e6\u4e00\u4e9b\u4eba\u5219\u8c08\u8bba\u201c\u5355\u5143\u6d4b\u8bd5\u201d\u3002\n\u4e3a\u4e86\u907f\u514d\u4efb\u4f55\u6df7\u6dc6\uff0cMichael Feeters\u5bf9\u4ec0\u4e48\u4e0d\u662f\u5355\u5143\u6d4b\u8bd5\u7ed9\u51fa\u4e86\u660e\u786e\u7684\u5b9a\u4e49\u3002\n\u5b83\u4e0e\u57fa\u7840\u67b6\u6784(\u4f8b\u5982\u6570\u636e\u5e93\u3001\u7f51\u7edc\u3001\u6587\u4ef6\u7cfb\u7edf\u3001\u73af\u5883\u53d8\u91cf\u2026)\u901a\u4fe1\u3002\n\u7f16\u5199\u6700\u591a\u5177\u6709\u8fd9\u4e24\u4e2a\u54c1\u8d28\u7684\u6d4b\u8bd5\u3002\u4f60\u600e\u4e48\u79f0\u547c\u4ed6\u4eec\u5e76\u4e0d\u91cd\u8981\u3002\n\u73b0\u5728\uff0c\u6709\u65f6\u7f16\u5199\u8fd9\u6837\u7684\u6d4b\u8bd5\u771f\u7684\u5f88\u96be\uff0c\u56e0\u4e3a\u60a8\u751a\u81f3\u4e0d\u7406\u89e3\u4ee3\u7801\u5e94\u8be5\u505a\u4ec0\u4e48\u3002\u6709\u4e00\u79cd\u6280\u672f\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u2026\u95ee\u9898\u3002\n\u5728\u91cd\u6784\u4ee3\u7801\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u6d4b\u8bd5\u3002\u4f46\u662f\u7f16\u5199\u8fd9\u4e9b\u6d4b\u8bd5\u53ef\u80fd\u5f88\u6709\u6311\u6218\u6027\u3002\u5c24\u5176\u662f\u5f53\u4ee3\u7801\u5f88\u96be\u7406\u89e3\u7684\u65f6\u5019\u3002\n\u201c\u8868\u5f81\u6d4b\u8bd5\u662f\u8868\u5f81\u4e00\u6bb5\u4ee3\u7801\u7684\u5b9e\u9645\u884c\u4e3a\u7684\u6d4b\u8bd5\u3002\u201d\n\u60a8\u53ef\u4ee5\u6355\u83b7\u4ee3\u7801\u7684\u5f53\u524d\u884c\u4e3a\uff0c\u800c\u4e0d\u662f\u7f16\u5199\u5168\u9762\u7684\u5355\u5143\u6d4b\u8bd5\u3002\u60a8\u53ef\u4ee5\u5bf9\u5b83\u7684\u529f\u80fd\u8fdb\u884c\u5feb\u7167\u3002\n\u5bf9\u4e8e\u5927\u591a\u6570\u7cfb\u7edf\uff0c\u4ee3\u7801\u5b9e\u9645\u505a\u4ec0\u4e48\u6bd4\u5b83\u5e94\u8be5\u505a\u4ec0\u4e48\u66f4\u91cd\u8981\u3002\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u6d4b\u8bd5\u5feb\u901f\u8986\u76d6\u9057\u7559\u4ee3\u7801\uff0c\u4e3a\u60a8\u63d0\u4f9b\u91cd\u6784\u7684\u5b89\u5168\u7f51\u3002\n\u8fd9\u9879\u6280\u672f\u5728\u91ce\u5916\u4e5f\u88ab\u79f0\u4e3a\u201c\u6279\u51c6\u6d4b\u8bd5\u201d\u3001\u201c\u5feb\u7167\u6d4b\u8bd5\u201d\u6216\u201c\u9ec4\u91d1\u5927\u5e08\u201d\u3002\u4e00\u6837\u7684\u4e1c\u897f\u3002\n\u671f\u9650\u77ed\u662f\u5f88\u5e38\u89c1\u7684\u60c5\u51b5\u3002\u5f53\u4f60\u5f88\u5306\u5fd9\u7684\u65f6\u5019\uff0c\u5f88\u96be\u62bd\u51fa\u65f6\u95f4\u4e0d\u628a\u4e8b\u60c5\u5f04\u5f97\u66f4\u7cdf\u3002\u5e0c\u671b\u4f60\u80fd\u505a\u70b9\u4ec0\u4e48\uff0c\u2026\u3002\n\u8fd9\u5c31\u662f\u7834\u7a97\u7406\u8bba\uff1a\u5c0f\u5c0f\u7684\u6df7\u4e71\u4f1a\u62db\u81f4\u66f4\u4e25\u91cd\u7684\u72af\u7f6a\u3002\u5982\u679c\u7c7b\u5df2\u7ecf\u67092,000\u884c\u957f\uff0c\u8c01\u4f1a\u5728\u4e4e\u60a8\u518d\u6dfb\u52a03\u6761if\u8bed\u53e5\u5462\uff1f\n\u4f46\u662f\uff0c\u5982\u679c\u60a8\u771f\u7684\u3001\u771f\u7684\u6ca1\u6709\u65f6\u95f4\u4e3a\u90a3\u4e2a\u7c7b\u7f16\u5199\u6d4b\u8bd5\u600e\u4e48\u529e\uff1f\u8fd9\u53ea\u662f3\u4e2aif\u8bed\u53e5\uff0c\u4f60\u53ef\u80fd\u89c9\u5f97\u4f60\u6ca1\u6709\u7406\u7531\u4e3a\u6b64\u82b12\u5929\u7684\u65f6\u95f4--\u5c3d\u7ba1\u4f60\u5e94\u8be5\u8fd9\u6837\u505a\u3002\n\u5728\u8fd9\u6837\u4e00\u4e2a\u68d8\u624b\u7684\u4f4d\u7f6e\uff0c\u4f60\u4ecd\u7136\u53ef\u4ee5\u7528\u8fd9\u4e24\u4e2a\u6280\u5de7\u505a\u51fa\u6b63\u786e\u7684\u51b3\u5b9a\u3002\n\u7c7b\u4e8b\u52a1\u7f51\u5173{//\u2026\u3002\u5f88\u591a\u4ee3\u7801postEntries(\u6761\u76ee){for(Let Entry Of Entry){\u6761\u76ee\u3002PostDate()}//\u2026\u3002\u5f88\u591a\u4ee3\u7801\u4ea4\u6613\u6346\u7ed1\u5305\u3002GetListManager()\u3002\u6dfb\u52a0(\u6761\u76ee)}//\u2026\u3002\u5f88\u591a\u4ee3\u7801}\u3002\n\u5047\u8bbe\u60a8\u9700\u8981\u5bf9\u6761\u76ee\u8fdb\u884c\u91cd\u590d\u6570\u636e\u5220\u9664\uff0c\u4f46\u662fpostEntries()\u5f88\u96be\u6d4b\u8bd5\uff0c\u60a8\u771f\u7684\u6ca1\u6709\u65f6\u95f4\u505a\u8fd9\u4ef6\u4e8b\u3002\n\u7136\u540e\uff0c\u5728\u73b0\u6709\u7684\u672a\u7ecf\u6d4b\u8bd5\u7684\u4ee3\u7801\u4e2d\u63d2\u5165\u5bf9\u8be5\u65b9\u6cd5\u7684\u8c03\u7528\u3002\u6700\u5c0f\u7684\u53d8\u5316\uff0c\u6700\u5c0f\u7684\u98ce\u9669\u3002\n\u7c7b\u4e8b\u52a1\u7f51\u5173{//\u2026\u3002\u5f88\u591a\u4ee3\u7801\u552f\u4e00\u6761\u76ee(Entries){//\u4e00\u4e9b\u5de7\u5999\u7684\u903b\u8f91\u6765\u6d88\u9664\u6761\u76ee\u7684\u91cd\u590d\u6570\u636e\uff0c\u7ecf\u8fc7\u5145\u5206\u6d4b\u8bd5\uff01}postEntries(\u6761\u76ee){const Unique eEntries=this\u3002\u552f\u4e00\u6761\u76ee(\u552f\u4e00\u6761\u76ee\u7684Let Entry){Entry.(Let Entry Of Unique EEntries){Entry.\u3002PostDate()}//\u2026\u3002\u5f88\u591a\u4ee3\u7801\u4ea4\u6613\u6346\u7ed1\u5305\u3002GetListManager()\u3002Add(\u552f\u4e00\u6761\u76ee)}//\u2026\u3002\u5f88\u591a\u4ee3\u7801}\u3002\n\u7c7b\u4e8b\u52a1\u7f51\u5173{//\u2026\u3002\u5f88\u591a\u4ee3\u7801+\u552f\u4e00\u6761\u76ee(\u6761\u76ee){+//\u4e00\u4e9b\u5de7\u5999\u7684\u903b\u8f91\u6765\u6d88\u9664\u6761\u76ee\u7684\u91cd\u590d\u6570\u636e\uff0c\u7ecf\u8fc7\u5145\u5206\u6d4b\u8bd5\uff01+}postEntries(\u6761\u76ee){+Const Unique eEntries=this.Unique eEntries(\u6761\u76ee)++for(\u8ba9\u6761\u76ee\u6761\u76ee){-for(\u8ba9\u6761\u76ee\u6761\u76ee){entry.postDate()}//\u2026\u3002\u5927\u91cf\u4ee3\u7801+transactionBundle.getListManager().add(uniqueEntries)-transactionBundle.getListManager().add(entries)}//\u2026\u3002\u5f88\u591a\u4ee3\u7801}\u3002\n\u60a8\u53ef\u4ee5\u840c\u53d1\u5355\u4e2a\u65b9\u6cd5\u3001\u6574\u4e2a\u7c7b\u6216\u9694\u79bb\u65b0\u4ee3\u7801\u7684\u4efb\u4f55\u4e1c\u897f\u3002\n\u5f53\u60a8\u9700\u8981\u505a\u7684\u66f4\u6539\u5e94\u8be5\u53d1\u751f\u5728\u73b0\u6709\u4ee3\u7801\u4e4b\u524d\u6216\u4e4b\u540e\u65f6\uff0c\u60a8\u4e5f\u53ef\u4ee5\u5305\u88c5\u5b83\u3002\n\u7c7b\u4e8b\u52a1\u7f51\u5173{//\u2026\u3002\u5f88\u591a\u4ee3\u7801postEntries(\u6761\u76ee){for(Let Entry Of Entry){\u6761\u76ee\u3002PostDate()}//\u2026\u3002\u5f88\u591a\u4ee3\u7801\u4ea4\u6613\u6346\u7ed1\u5305\u3002GetListManager()\u3002\u6dfb\u52a0(\u6761\u76ee)}//\u2026\u3002\u5f88\u591a\u4ee3\u7801}\u3002\n\u89e3\u51b3\u8be5\u95ee\u9898\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u5305\u88c5\u5b83\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u5df2\u6d88\u9664\u91cd\u590d\u9879\u7684\u5217\u8868\u4f20\u9012\u7ed9postEntries()\uff1a\n\u7c7b\u4e8b\u52a1\u7f51\u5173{//\u2026\u3002\u5f88\u591a\u4ee3\u7801postEntries(\u6761\u76ee){//\u4e00\u4e9b\u5de7\u5999\u7684\u903b\u8f91\u6765\u68c0\u7d22\u552f\u4e00\u7684\u6761\u76ee\u3002PostEntriesThatAreUnique(Unique EEntries)}postEntriesThatAreUnique(Entries){for(Let Entry Of Entries){Entry.\u3002PostDate()}//\u2026\u3002\u5f88\u591a\u4ee3\u7801\u4ea4\u6613\u6346\u7ed1\u5305\u3002GetListManager()\u3002\u6dfb\u52a0(\u6761\u76ee)}//\u2026\u3002\u5f88\u591a\u4ee3\u7801}\u3002\n\u5728\u6d4b\u8bd5\u4e2d\uff0c\u60a8\u9700\u8981\u66f4\u6539\u6709\u95ee\u9898\u7684postEntriesThatAreUnique()\uff0c\u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u6d4b\u8bd5\u91cd\u590d\u6570\u636e\u5220\u9664\u903b\u8f91\u662f\u5426\u5de5\u4f5c\u3002\n\u7c7b\u4e8b\u52a1\u7f51\u5173{//\u2026\u3002\u5f88\u591a\u4ee3\u7801+postEntries(\u6761\u76ee){+//\u4e00\u4e9b\u7528\u4e8e\u68c0\u7d22\u552f\u4e00\u6761\u76ee\u7684\u5de7\u5999\u903b\u8f91+this.postEntriesThatAreUnique(Unique EEntries)+}+postEntriesThatAreUnique(Entries){-postEntries(Entries){for(Let Entry Of Entries){entry.postDate()}//\u2026\u3002\u5927\u91cf\u4ee3\u7801transactionBundle.getListManager().add(entries)}//\u2026\u3002\u5f88\u591a\u4ee3\u7801}\u3002\n\u8fd9\u4e9b\u6280\u672f\u5e76\u4e0d\u7406\u60f3\uff0c\u800c\u4e14\u5b58\u5728\u7f3a\u9677\u3002\u4f46\u5728\u5904\u7406\u9057\u7559\u4ee3\u7801\u65f6\uff0c\u5b83\u4eec\u662f\u6709\u7528\u7684\u5de5\u5177\u3002\n\u5f53\u60a8\u4e0d\u5f97\u4e0d\u4f7f\u7528\u4e0d\u662f\u60a8\u7f16\u5199\u7684\u3001\u6ca1\u6709\u7ecf\u8fc7\u6d4b\u8bd5\u5e76\u4e14\u6587\u6863\u8bb0\u5f55\u5f88\u5c11\u7684\u4ee3\u7801\u65f6\uff0c\u60a8\u4f1a\u4e0d\u77e5\u6240\u63aa\uff01\n\u56e0\u6b64\uff0c\u9996\u5148\uff0c\u60a8\u9700\u8981\u6253\u7834\u4f9d\u8d56\u5173\u7cfb\u5e76\u7f16\u5199\u6d4b\u8bd5\u3002\u4f46\u662f\uff0c\u5f53\u4ee3\u7801\u786e\u5b9e\u4e0d\u900f\u660e\u65f6\uff0c\u60a8\u4ece\u54ea\u91cc\u5f00\u59cb\u5462\uff1f\n\u60f3\u600e\u4e48\u73a9\u4ee3\u7801\u5c31\u600e\u4e48\u73a9\u5427\u3002\u63d0\u53d6\u51fd\u6570\u3001\u7b80\u5316\u4ee3\u7801\u3001\u91cd\u547d\u540d\u53d8\u91cf\u2026\u3002\u4e86\u89e3\u4e00\u4e0b\u5bc6\u7801\u3002\u4e00\u65e6\u60a8\u8fd9\u6837\u505a\u4e86\uff0c\u6062\u590d\u60a8\u7684\u66f4\u6539\u5e76\u901a\u8fc7\u9002\u5f53\u7684\u6d4b\u8bd5\u91cd\u65b0\u5f00\u59cb\u3002\n\u201c\u907f\u514d\u5728\u4ee3\u7801\u4e2d\u4e71\u653e\u5bf9\u5e93\u7c7b\u7684\u76f4\u63a5\u8c03\u7528\u3002\u4f60\u53ef\u80fd\u8ba4\u4e3a\u4f60\u6c38\u8fdc\u4e0d\u4f1a\u6539\u53d8\u5b83\u4eec\uff0c\u4f46\u8fd9\u53ef\u80fd\u4f1a\u6210\u4e3a\u4e00\u4e2a\u81ea\u6211\u5b9e\u73b0\u7684\u9884\u8a00\u3002\u201c\u3002\n\u6211\u60f3\u5f3a\u8c03\u8fd9\u4e2a\u5efa\u8bae\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5e38\u89c1\u7684\u9519\u8bef\u3002\u6211\u770b\u8fc7\u5f88\u591a\u6b21\u4e86\uff01\n\u6211\u4eec\u4f7f\u7528\u56fe\u4e66\u9986\u6765\u505a\u8fd9\u9879\u5de5\u4f5c\uff0c\u5e76\u4e14\u8282\u7701\u4e86\u6211\u4eec\u7684\u65f6\u95f4\u3002\u5230\u76ee\u524d\u4e00\u5207\u5c1a\u597d\u3002\n\u4f46\u6211\u4eec\u5f88\u5c11\u4f1a\u82b1\u989d\u5916\u7684\u65f6\u95f4\u5c06\u8fd9\u4e9b\u5de5\u5177\u5305\u88c5\u5728\u6211\u4eec\u62e5\u6709\u7684\u81ea\u5b9a\u4e49\u62bd\u8c61\u4e2d\u3002\n\u56e0\u6b64\uff0c\u5b83\u4eec\u7684\u5b9e\u73b0\u4f1a\u5728\u6211\u4eec\u7684\u4ee3\u7801\u5e93\u4e2d\u6cc4\u6f0f\uff01\u6211\u4eec\u7684\u6240\u6709\u4ee3\u7801\u90fd\u5feb\u901f\u4f9d\u8d56\u4e8e\u7279\u5b9a\u7684API\u3002\u5b83\u50cf\u5bc4\u751f\u866b\u4e00\u6837\u4f20\u64ad\u3002\u76f4\u5230\u6709\u4e00\u5929\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6446\u8131\u5b83\uff0c\u6216\u8005\u5bf9\u56fe\u4e66\u9986\u8fdb\u884c\u91cd\u5927\u5347\u7ea7\u3002\n\u8003\u8651\u4e00\u4e0b\u60a8\u4f7f\u7528\u7684\u6240\u6709ORM\u4ee3\u7801\u3001\u76d1\u63a7\u5e93\u548c\u5b9e\u7528\u7a0b\u5e8f\u5305\u3002\u4f60\u80fd\u63a7\u5236\u4ed6\u4eec\u5417\uff1f\u6216\u8005\u4f60\u4f9d\u8d56\u4ed6\u4eec\u5417\uff1f\n\u867d\u7136\u6211\u5df2\u7ecf\u6982\u8ff0\u4e86\u4e66\u4e2d\u7684\u5efa\u8bae\uff0c\u4f46\u4e66\u4e2d\u8fd8\u6709\u66f4\u591a\u7684\u793a\u4f8b\u548c\u65b9\u6cd5\uff01\n\u4f60\u6bcf\u5929\u90fd\u8981\u5904\u7406\u9057\u4ea7\u6cd5\u3002\u8fd9\u662f\u60a8\u53ef\u4ee5\u5728\u8be5\u4e3b\u9898\u4e0a\u627e\u5230\u7684\u6700\u5177\u53ef\u64cd\u4f5c\u6027\u7684\u8d44\u6e90\u4e4b\u4e00\u3002\n\u60a8\u53ef\u80fd\u5df2\u7ecf\u9605\u8bfb(\u6216\u5217\u51fa)\u4e86\u5176\u4ed6\u4e66\u7c4d\uff0c\u5982\u201c\u5e72\u51c0\u4ee3\u7801\u201d\u548c\u201c\u91cd\u6784\u201d\u3002\u8fd9\u4e9b\u4e5f\u662f\u5fc5\u8bfb\u7684\u3002\u4f46\u6211\u5efa\u8bae\u4ece\u6709\u6548\u4f7f\u7528\u9057\u7559\u4ee3\u7801\u5f00\u59cb\u3002\n\u5982\u679c\u60a8\u60f3\u91cd\u6784\u60a8\u7684\u4ee3\u7801\uff0c\u60a8\u9996\u5148\u9700\u8981\u5bf9\u5176\u8fdb\u884c\u6d4b\u8bd5\u3002\u8fc8\u514b\u5c14\u00b7\u8d39\u745f\u65af\u7684\u4e66\u7684\u91cd\u70b9\u662f\u5bf9\u73b0\u6709\u7684\u3001\u9519\u7efc\u590d\u6742\u7684\u4e71\u4e03\u516b\u7cdf\u7684\u4e1c\u897f\u8fdb\u884c\u6d4b\u8bd5\u3002\n\u8bda\u7136\uff0c\u60a8\u53ef\u80fd\u4f1a\u5bf9\u4e66\u4e2d\u7684\u4ee3\u7801\u793a\u4f8b\u4f7f\u7528\u60a8\u4e0d\u61c2\u7684\u8bed\u8a00\u7f16\u5199\u611f\u5230\u4e0d\u8212\u670d\u3002\n\u9057\u7559\u4ee3\u7801\u5e76\u4e0d\u603b\u662f\u6613\u4e8e\u9605\u8bfb\uff0c\u56e0\u6b64\u8fd9\u5b9e\u9645\u4e0a\u662f\u76f8\u5173\u7684\u3002\u8fd9\u662f\u4e00\u9879\u4f60\u9700\u8981\u7ec3\u4e60\u7684\u6280\u80fd\u3002\nJava\u4ee3\u7801\u662f\u9762\u5411\u5bf9\u8c61\u7684\u4ee3\u7801\uff0c\u5373\u4f7f\u60a8\u4e0d\u61c2\u8be5\u8bed\u8a00\uff0c\u4e5f\u5e94\u8be5\u80fd\u591f\u7406\u89e3\u3002\n\u6240\u4ee5\uff0c\u518d\u8bf4\u4e00\u904d\uff1a\u8fd9\u4e2a\u603b\u7ed3\u7ed9\u4e86\u4f60\u4e00\u4e2a\u5f88\u597d\u7684\u6982\u8ff0\uff0c\u544a\u8bc9\u4f60\u4e66\u4e2d\u6709\u54ea\u4e9b\u5efa\u8bae\u3002\u4f46\u662f\u8fd8\u6709\u66f4\u591a\uff01\n\u8fd9\u672c\u4e66\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5982\u4f55\u5728\u4e0d\u540c\u7684\u7528\u4f8b\u4e2d\u5e94\u7528\u8fd9\u4e9b\u5efa\u8bae\u3002\u5982\u679c\u4f60\u559c\u6b22\u8fd9\u7bc7\u6458\u8981\uff0c\u4f60\u5c31\u4f1a\u559c\u6b22\u8fd9\u672c\u4e66\u3002\n\u8ba2\u9605\u6211\u7684\u65f6\u4e8b\u901a\u8baf\uff0c\u6bcf\u5468\u4e09\u76f4\u63a5\u5728\u60a8\u7684\u6536\u4ef6\u7bb1\u4e2d\u63a5\u6536\u6211\u7684\u4f20\u7edf\u4ee3\u7801\u63d0\u793a\u548c\u6280\u5de7\u3002\n\u7531\u5728\u52a0\u62ff\u5927\u8499\u7279\u5229\u5c14\u751f\u6d3b\u548c\u5de5\u4f5c\u7684Nicolas Carlo\u64b0\u5199\uff0c\ud83c\udf41\u4ed6\u521b\u5efa\u4e86\u8f6f\u4ef6\u5de5\u5320\u8499\u7279\u5229\u5c14\u793e\u533a\uff0c\u8be5\u793e\u533a\u5173\u5fc3\u6784\u5efa\u53ef\u7ef4\u62a4\u7684\u8f6f\u4ef6\u3002\n\u2190\u67e5\u627e\u4f7f\u7528\u65e7\u4ee3\u7801\u7684\u66f4\u591a\u63d0\u793a", "note_en": "If you\u2019ve come across that definition, it\u2019s from Michael Feathers\u2019 book:  Working Effectively with Legacy Code.\n While I have  a slightly extended definition, this is a very valid and useful one!\n Feathers\u2019 book is from 2004. Yet, its content doesn\u2019t get outdated. There is a reason for that and  this CommitStrip puts it best:\n   When there\u2019s a thread about Legacy Code, it doesn\u2019t take long for someone to drop a comment suggesting you read it.\n I didn\u2019t read it. I\u2019ve seen it\u2019s recommended. But what are the key points of that book?\n  Here\u2019s my summary of the salient points of the book and how they can help you deal with your existing codebase.\n   When code is not tested, how do you know you didn\u2019t break anything?\n You need  feedback. Automated feedback is the best. Thus, this is the first thing you need to do: write the tests.\n  Your goal is to get there. The point of the book is to show you  how you can get there when you have to deal with an impossibly convoluted codebase. Which leads us to the next point\u2026\n  Before you change code, you should have tests in place. But to put tests in place, you have to change code.\n   You\u2019re not. But you should be extra careful until you got tests in place. You should perform minimal, safe refactorings.\n    Once you get to the tests, you know how to proceed. The first two points are the difficult ones.\n    That\u2019s because the code was not written to be  testable in the first place. 99% of the time, this is a dependency problem: the code you want to test can\u2019t run because it needs  something hard to put in the test.\n Sometimes it\u2019s a database connection. Sometimes it\u2019s a call to a third-party server. Sometimes it\u2019s a parameter that\u2019s complex to instantiate. Usually, it\u2019s a complex mix of all that.\n   \u201cA Seam is a place to alter program behavior, without changing the code.\u201d\n There are different types of Seams. The gist of it is to identify how you can change the code behavior without touching the source code.\n   export   class   DatabaseConnector  {    // A lot of code\u2026     connect () {    // Perform some calls to connect to the DB.   }  }\n Say the  connect() method is causing you problems when you try to put code into tests. Well, the whole class is a Seam you can alter.\n You can extend this class in tests to prevent it from connecting to an actual DB:\n class   FakeDatabaseConnector   extends   DatabaseConnector  {    connect () {    // Override the problematic calls to the DB    console . log ( &#34;Connect to the DB&#34; )   }  }\n  If your language allows you to change code behavior without altering the source code, you have an entry point to writing the tests.\n   Discussions about testing best practices usually turn into heated debates. Should you apply the  Pyramid of Tests principle and write a maximum of unit tests? Or should you embrace  the Testing Trophy instead and write mostly integration tests?\n  Because  they don\u2019t have the same definition of what a \u201cunit\u201d is. Thus, some people talk about \u201cintegration tests\u201d when others talk about \u201cunit tests\u201d.\n To avoid any confusion, Michael Feathers gives a clear definition of  what is NOT a unit test.\n  it talks to the Infrastructure (e.g. a database, the network, the file system, environment variables\u2026)\n Write a maximum of tests that have these 2 qualities. How you call them doesn\u2019t matter.\n Now, sometimes it\u2019s really hard to write such tests because you don\u2019t even  understand what the code is supposed to do. There\u2019s a technique for that\u2026\n  Before you can refactor the code, you need tests. But writing these tests can be challenging. Especially when code is hard to understand.\n \u201cA characterization test is a test that characterizes the actual behavior of a piece of code.\u201d\n Instead of writing comprehensive unit tests, you capture the current behavior of the code. You take a snapshot of what it does.\n   With most systems, what the code  actually does is more important than what it  should do.\n You can quickly cover Legacy Code with these tests, giving you a safety net to refactor.\n This technique is also called \u201d Approval Testing\u201d, \u201d Snapshot Testing\u201d or \u201d Golden Master\u201d in the wild. Same stuff.\n  Having short deadlines is a very common situation. When you are in a hurry, it\u2019s hard to take the time not to make things worse. Hopefully, there\u2019s something you can do\u2026\n   It\u2019s the Broken Window theory: a little disorder calls for more serious crimes. If the class is already 2,000 lines-long, who cares that you add 3 more  if statements?\n  But what if you really,  really don\u2019t have time to write tests for that class? That\u2019s just 3  if statements and you might not feel like you can justify taking 2 days for that \u2014 although you should.\n  In such a tricky position, you can still make the right call with these 2 techniques.\n    class   TransactionGate  {    // \u2026 a lot of code     postEntries ( entries ) {    for  ( let   entry   of   entries ) {    entry . postDate ()   }     // \u2026 a lot of code     transactionBundle . getListManager (). add ( entries )   }     // \u2026 a lot of code  }\n Say you need to deduplicate the  entries, but  postEntries() is hard to test and you really don\u2019t have time for that.\n   Then, insert a call to that method in the existing, non-tested code. Minimal change, minimal risk.\n class   TransactionGate  {    // \u2026 a lot of code     uniqueEntries ( entries ) {    // Some clever logic to dedupe entries, fully tested!   }     postEntries ( entries ) {    const   uniqueEntries  =  this . uniqueEntries ( entries )     for  ( let   entry   of   uniqueEntries ) {    entry . postDate ()   }     // \u2026 a lot of code     transactionBundle . getListManager (). add ( uniqueEntries )   }     // \u2026 a lot of code  }\n  class TransactionGate {   // \u2026 a lot of code   + uniqueEntries(entries) {  + // Some clever logic to dedupe entries, fully tested!  + }    postEntries(entries) {  + const uniqueEntries = this.uniqueEntries(entries)  +  + for (let entry of uniqueEntries) {  - for (let entry of entries) {   entry.postDate()   }    // \u2026 a lot of code   + transactionBundle.getListManager().add(uniqueEntries)  - transactionBundle.getListManager().add(entries)   }    // \u2026 a lot of code  }\n You can Sprout a single method, a whole class or anything that will isolate your new code.\n  When the change you need to do should happen before or after the existing code, you can also  wrap it.\n     class   TransactionGate  {    // \u2026 a lot of code     postEntries ( entries ) {    for  ( let   entry   of   entries ) {    entry . postDate ()   }     // \u2026 a lot of code     transactionBundle . getListManager (). add ( entries )   }     // \u2026 a lot of code  }\n Another way to tackle the problem would be to wrap it, so we pass to  postEntries() the list of deduped entries:\n class   TransactionGate  {    // \u2026 a lot of code     postEntries ( entries ) {    // Some clever logic to retrieve unique entries    this . postEntriesThatAreUnique ( uniqueEntries )   }     postEntriesThatAreUnique ( entries ) {    for  ( let   entry   of   entries ) {    entry . postDate ()   }     // \u2026 a lot of code     transactionBundle . getListManager (). add ( entries )   }     // \u2026 a lot of code  }\n In tests, you\u2019d alter the problematic  postEntriesThatAreUnique(), so you can test the dedupe logic works.\n  class TransactionGate {   // \u2026 a lot of code   + postEntries(entries) {  + // Some clever logic to retrieve unique entries  + this.postEntriesThatAreUnique(uniqueEntries)  + }   + postEntriesThatAreUnique(entries) {  - postEntries(entries) {   for (let entry of entries) {   entry.postDate()   }    // \u2026 a lot of code    transactionBundle.getListManager().add(entries)   }    // \u2026 a lot of code  }\n These techniques are not ideal and they have pitfalls. But they are useful tools to have when addressing Legacy Code.\n   When you\u2019ve to work with a code that you didn\u2019t write, that is not tested and that is poorly documented, it\u2019s overwhelming!\n   So first, you need to break dependencies and write the tests. But where do you even start when code is really opaque?\n     Play with the code as much as you want. Extract functions, simplify code, rename variables\u2026 Get to know the code. Once you do, revert your changes and start over with proper tests.\n   \u201cAvoid littering direct calls to library classes in your code. You might think that you\u2019ll never change them, but that can become a self-fulfilling prophecy.\u201d\n I wanted to highlight this advice because it\u2019s a very common mistake. I\u2019ve seen that a lot!\n We use libraries to do the job and save us time. So far so good.\n But rarely we take the extra time to wrap these tools behind custom abstractions that  we own.\n Therefore, their implementation leaks across our codebase! All of our code quickly depends on a specific API. It spreads like a parasite. Until someday we easily get rid of it or do a major upgrade of that library.\n Think about all the ORM code, monitoring libs, utility packages that you use. Do you control them? Or do you depend on them?\n   While I have given you an overview of the advice in the book, there is many more examples and approaches in the book itself!\n You have to deal with Legacy Code every day. This is one of the most actionable resources you can find on the topic.\n You might have read (or listed) other books such as Clean Code and Refactoring. These are must-reads too. But I\u2019d recommend starting with Working Effectively with Legacy Code.\n If you want to refactor your code, you first need to put tests on it. And putting tests on an existing, tangled mess is the point of Michael Feathers\u2019 book.\n  Granted, you might not feel comfortable with the code examples from the book being written in a language you don\u2019t know.\n  Legacy Code is not always easy to read, so that\u2019s actually relevant. It\u2019s a skill you need to practice.\n Java code is object-oriented code that you should be able to understand, even if you don\u2019t know the language.\n So, again: this summary gives you a good overview of what kind of advice are in the book.  But there are more!\n The book goes in detail into  how you can apply these advice through different use-cases. If you liked this summary, you\u2019ll enjoy  the book.\n  Subscribe to my newsletter to receive my Legacy Code tips &amp; tricks, directly in your inbox, every Wednesday.\n   Written by   Nicolas Carlo who lives and works in Montreal, Canada \ud83c\udf41 He founded the  Software Crafters Montreal community which cares about building maintainable softwares.\n   \u2190 Find more tips to work with Legacy Code", "posttime": "2020-10-29 10:26:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,\u9057\u7559,points", "title": "\u6709\u6548\u4f7f\u7528\u9057\u7559\u4ee3\u7801\u7684\u8981\u70b9", "title_en": "The Key Points of Working Effectively with Legacy Code", "transed": 1, "url": "https://understandlegacycode.com/blog/key-points-of-working-effectively-with-legacy-code/", "via": "", "real_tags": ["\u4ee3\u7801", "\u9057\u7559", "points"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1031870, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4e8e2019\u5e7410\u6708\u6ce8\u518c\u6210\u7acbClevity\u3002\u4ece\u90a3\u65f6\u8d77\uff0c\u6211\u4eec\u5df2\u7ecf\u4ece\u4e00\u526f\u724c\u548c\u4e00\u9879\u4e34\u65f6\u4e13\u5229\u53d1\u5c55\u5230\u4e00\u4e2a12+\u4eba\u7684\u56e2\u961f\uff0c\u4e00\u4e2a\u5148\u5bfc\u836f\u7269\uff0c\u4e00\u4e2a\u5145\u6ee1\u65b0\u77e5\u8bc6\u548c\u7ecf\u9a8c\u7684\u5934\u8111\u3002\u8fd9\u4e9b\u662f\u6211\u5728\u8fc7\u53bb\u4e00\u5e74\u4e2d\u5b66\u5230\u7684\u4e00\u4e9b\u6700\u5927\u7684\u4e1c\u897f\u3002\n\u6211\u4e3a\u6211\u4eec\u7684\u6587\u5316\u505a\u8fc7\u7684\u6700\u91cd\u8981\u7684\u4e8b\u60c5\u4e4b\u4e00\u5c31\u662f\u4e00\u4e2a\u9519\u8bef\u3002\u5728\u4e00\u9879\u5173\u952e\u7684\u6982\u5ff5\u9a8c\u8bc1\u7814\u7a76\u7684\u524d\u4e00\u5468\uff0c\u6211\u51b3\u5b9a\u5f7b\u5e95\u91cd\u65b0\u8bbe\u8ba1\u7814\u7a76\u8bbe\u8ba1\uff0c\u5e76\u91cd\u65b0\u8d28\u7591\u6211\u4eec\u6240\u6709\u7684\u5047\u8bbe\u3002\u8fd9\u63a8\u8fdf\u4e86\u6211\u4eec\u7684\u65f6\u95f4\u8868\uff0c\u5e76\u4f7f\u6211\u4eec\u4ee5\u524d\u7684\u5927\u90e8\u5206\u5de5\u4f5c\u53d8\u5f97\u6beb\u65e0\u610f\u4e49\u3002\u5b83\u8fd8\u633d\u6551\u4e86\u8fd9\u9879\u7814\u7a76\u3002\n\u90a3\u662f\u4e00\u573a\u4e0d\u80fd\u8bf4\u660e\u6211\u4eec\u4ef7\u503c\u89c2\u7684\u8868\u6f14-\u5b83\u5411\u56e2\u961f\u5c55\u793a\u4e86\u8ffd\u6c42\u771f\u7406\u662f\u6700\u91cd\u8981\u7684\uff0c\u5982\u679c\u4ed6\u4eec\u60f3\u5728\u6700\u540e\u4e00\u523b\u6539\u53d8\u4ec0\u4e48\uff0c\u6ca1\u6709\u4eba\u4f1a\u5bb3\u6015\u544a\u8bc9\u6211(\u56e0\u4e3a\u6211\u81ea\u5df1\u505a\u7684\uff01)\u3002\u8fd9\u4e3a\u5176\u4ed6\u8bb8\u591a\u52bf\u5747\u529b\u654c\u7684\u6251\u6551\u94fa\u5e73\u4e86\u9053\u8def\u3002\n\u4ece\u6295\u8d44\u8005\u548c\u987e\u95ee\u5230\u627f\u5305\u5546\u548c\u5458\u5de5\uff0c\u82b1\u65f6\u95f4\u7406\u89e3\u5e76\u5145\u5206\u7406\u89e3\u4ed6\u4eec\u7684\u4f18\u5148\u4e8b\u9879\u548c\u62c5\u5fe7\uff0c\u800c\u4e0d\u662f\u81ea\u52a8\u5047\u8bbe\u4ed6\u4eec\u7684\u52a8\u673a\u4e0e\u4f60\u7684\u52a8\u673a\u76f8\u540c\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u96be\u4f53\u73b0\u7684\u6559\u8bad\u3002\u4f5c\u4e3a\u4e00\u4e2a\u523b\u677f\u7684\u5938\u5938\u5176\u8c08\u7684\u521b\u59cb\u4eba\uff0c\u6211\u5f88\u96be\u7406\u89e3\u6709\u4eba\u6ca1\u6709\u4f7f\u547d\u52a8\u673a\uff0c\u4e5f\u4e0d\u50cf\u6211\u4e00\u6837\u8feb\u5207\u5e0c\u671b\u8fd9\u4e2a\u4e16\u754c\u4e0a\u6709\u8fd9\u6837\u7684\u4e8b\u60c5\u3002\n\u5728\u62db\u8058\u8fc7\u7a0b\u4e2d\uff0c\u6211\u53d1\u73b0\u5373\u4f7f\u662f\u6700\u6709\u624d\u534e\u7684\u4eba\u4e5f\u4e0d\u4f1a\u8868\u73b0\u51fa\u8272\uff0c\u5982\u679c\u4ed6\u4eec\u4e0d\u6df1\u5207\u5730\u3001\u771f\u6b63\u5730\u5173\u5fc3\u4f60\u7684\u4f7f\u547d(\u81f3\u5c11\u5728\u516c\u53f8\u7684\u8fd9\u4e2a\u9636\u6bb5)\u3002\u5728\u804c\u4e1a\u5173\u7cfb\u4e2d\uff0c\u4ed6\u4eec\u7684\u52a8\u673a\u4e0d\u592a\u53ef\u80fd\u548c\u4f60\u7684\u4e00\u6837\uff0c\u4f46\u901a\u5e38\u52a8\u673a\u53ef\u4ee5\u662f\u8d5e\u7f8e\u7684\u3002\u5f53\u4ed6\u4eec\u51c6\u5907\u597d\u7684\u65f6\u5019\uff0c\u4e00\u5207\u90fd\u53d8\u5f97\u5bb9\u6613\u591a\u4e86\u3002\n\u5927\u591a\u6570\u6717\u6717\u4e0a\u53e3\u7684\u521b\u4e1a\u5efa\u8bae\u90fd\u6709\u5c42\u5c42\u7684\u7ec6\u5fae\u5dee\u522b\u548c\u6761\u4ef6\uff0c\u76f4\u5230\u4f60\u8fdb\u5165\u5176\u4e2d\u4f60\u624d\u4f1a\u610f\u8bc6\u5230\u8fd9\u4e00\u70b9\u3002\n\u4eca\u5e74\u6211\u7ecf\u5e38\u70b9\u51fb\u8fd9\u4e2a\uff0c\u8fd9\u53ef\u80fd\u662f\u56e0\u4e3a\u6211\u542c\u4e86\u592a\u591a\u7684\u521b\u4e1a\u64ad\u5ba2\u3002\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u5c31\u662f\u201c\u62db\u5f97\u5feb\uff0c\u7092\u5f97\u5feb\u201d\u3002\u5728\u6211\u770b\u6765\uff0c\u603b\u4f53\u6765\u8bf4\u662f\u4e2a\u4e0d\u9519\u7684\u5efa\u8bae\u3002\u4f46\u6ca1\u6709\u4eba\u4f1a\u544a\u8bc9\u4f60\u6267\u884c\u8fd9\u4e2a\u5efa\u8bae\u6709\u591a\u56f0\u96be\uff0c\u4f60\u5c06\u9762\u4e34\u6765\u81ea\u67d0\u4eba\u6216\u5176\u4ed6\u4eba\u7684\u6307\u63a7\uff0c\u505a\u51fa\u5f71\u54cd\u67d0\u4eba\u798f\u7949\u7684\u51b3\u5b9a\u7684\u60c5\u611f\u4ee3\u4ef7\uff0c\u4ee5\u53ca\u89e3\u96c7(\u5373\u4f7f\u6709\u5fc5\u8981)\u53ef\u80fd\u5bf9\u56e2\u961f\u4ea7\u751f\u7684\u8fde\u9501\u53cd\u5e94\uff0c\u4ee5\u53ca\u5982\u4f55\u5904\u7406\u8fd9\u4e9b\u95ee\u9898\u3002\u6b63\u786e\u7684\u5efa\u8bae\u662f\u4ec0\u4e48\uff1f\u5b8c\u5168\u6ca1\u95ee\u9898\u3002\u4f46\u79bb\u5168\u8c8c\u8fd8\u5f88\u8fdc\u3002\u4eca\u5e74\u6211\u5b66\u5230\u7684\u6700\u5927\u7684\u4e1c\u897f\u4e4b\u4e00\u662f\u5f00\u59cb\u610f\u8bc6\u5230\u5e76\u5f00\u59cb\u5b66\u4e60\u5982\u4f55\u9884\u6d4b\u4ece\u5916\u90e8\u770b\u8d77\u6765\u7b80\u5355\u7684\u4e8b\u60c5\u5468\u56f4\u7684\u7ec6\u5fae\u5dee\u522b\u548c\u6761\u4ef6\u3002\n\u8981\u505a\u65b0\u5947\u800c\u8270\u96be\u7684\u4e8b\u60c5\uff0c\u9700\u8981\u4e50\u89c2\u5730\u8ba4\u4e3a\u4f60\u6709\u4e00\u4e9b\u5173\u952e\u7684\u6d1e\u5bdf\u529b\u6216\u80fd\u529b\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u53d6\u5f97\u522b\u4eba\u6ca1\u6709\u7684\u6210\u5c31\u3002\u4f60\u9700\u8981\u4e50\u89c2\u5730\u5728\u6ce5\u6cde\u4e2d\u8dcb\u6d89\uff0c\u5e76\u5728\u4f60\u75af\u72c2\u7684\u60f3\u6cd5\u88ab\u8bc1\u660e\u4e4b\u524d\u5f88\u4e45\u5c31\u62db\u52df\u5176\u4ed6\u4eba\u52a0\u5165\u4f60\u7684\u60f3\u6cd5\u3002\u5929\u771f\u7684\u4e50\u89c2\u4e3b\u4e49\u5bf9\u4e8e\u5efa\u7acb\u4e00\u5bb6\u516c\u53f8\u548c\u8bb2\u8ff0\u4e00\u4e2a\u6545\u4e8b\u662f\u5982\u6b64\u91cd\u8981\u3002\u4f46\u4f60\u4e5f\u9700\u8981\u7591\u795e\u7591\u9b3c\uff0c\u770b\u770b\u5468\u56f4\u7684\u89d2\u843d\u3002\n\u5e73\u8861\u8fd9\u4e9b\u662f\u5f88\u56f0\u96be\u7684--\u592a\u4e50\u89c2\u4e86\uff0c\u4f60\u4f1a\u6389\u8fdb\u9677\u9631\uff0c\u592a\u504f\u6267\u4e86\uff0c\u4f60\u6c38\u8fdc\u4e0d\u4f1a\u505a\u51fa\u51b3\u5b9a\u3002\u5728\u8fc7\u53bb\u7684\u4e00\u5e74\u91cc\uff0c\u6211\u5bf9\u6211\u4eec\u9762\u524d\u7684\u6311\u6218\u83b7\u5f97\u4e86\u5065\u5eb7\u7684\u5c0a\u91cd\uff0c\u5c06\u6211\u5929\u751f\u7684\u4e50\u89c2\u503e\u5411\u5411\u504f\u6267\u72c2\u9760\u8fd1\u4e86\u51e0\u82f1\u5bf8\u3002\u6211\u8ba4\u4e3a\u8fd9\u5c06\u5f88\u597d\u5730\u670d\u52a1\u4e8e\u6211\u4eec\u4e0b\u4e00\u9636\u6bb5\u7684\u65c5\u7a0b\u3002\n\u5bf9\u6211\u6765\u8bf4\uff0c\u6700\u56f0\u96be\u7684\u90e8\u5206\u662f\u610f\u8bc6\u5230\u4e50\u89c2\u548c\u73b0\u5b9e\u4e4b\u95f4\u7684\u6700\u4f73\u5e73\u8861\u56e0\u60c5\u51b5\u800c\u5f02\uff1b\u9762\u5bf9\u6295\u8d44\u8005\u65f6\u8d77\u4f5c\u7528\u7684\u662f\u62db\u8058\u65f6\u4e0d\u8d77\u4f5c\u7528\uff0c\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0e\u4f60\u5185\u90e8\u9700\u8981\u4fdd\u6301\u7684\u5e73\u8861\u6709\u5f88\u5927\u4e0d\u540c\u3002", "note_en": "I incorporated Celevity in October 2019. Since then, we\u2019ve gone from a deck and a provisional patent to a team of 12+, a lead drug, and a head brimming with new knowledge and experiences. These are some of my biggest learnings in the last year.\n  One of the most important things I ever did for our culture was a mistake. The week before a key proof-of-concept study, I decided to completely rework the study design and re-question all of our assumptions. This delayed our timelines and made most of our previous work moot. It also saved the study.\n That was a show not tell moment with our values - it showed the team that truth seeking is the most important thing, and no one has to be scared to tell me if they want to change up something last minute (because I did it myself!). This paved the way to many other close saves.\n  From investors and advisors to contractors and employees, taking time to understand to fully empathize with their priorities and worries, and not automatically assuming that their motivations are the same as yours, was a hard lesson to embody. As a stereotypical bombastic founder, it was hard for me to comprehend someone  not being mission-motivated and not wanting this in the world as badly as I do.\n In hiring, I\u2019ve found that even the most talented person will not perform well if they don\u2019t deeply and truly care about your mission (at least at this stage of the company). In professional relationships, it\u2019s unlikely their motivation is the same as yours, but often motivations can be complimentary. Everything is so much easier when they are.\n Most catchy startup advice has layers of nuance and conditionals that you wont realize until you\u2019re in the thick of it\n I hit this one a lot this year, a likely consequence from listening to a few too many startup podcasts. A good example is \u2018hire fast, fire fast\u2019. Generally good advice, in my opinion. But no one tells you how difficult it is to execute on that advice, the accusations you\u2019ll face from the person or others, the emotional toll of making a decision that affects someone\u2019s wellbeing, and the ripple effects a firing, even if necessary, can have on the team and how to deal with that. Correct advice? Totally. But far from the full picture. One of my biggest learnings this year was becoming aware of and starting to learn how to predict the nuance and conditionals around things that seem simple from the outside.\n  To do novel hard things requires optimism that you have some key insight or ability that means you can achieve what others haven\u2019t. You need to be optimistic to trudge through the sludge and to recruit others to your crazy idea long before it\u2019s proven. Naive optimism is so important for building a company and telling a story. But you also need to be paranoid and see around corners.\n Balancing these is difficult - too optimistic and you\u2019ll fall into a trap, too paranoid and you\u2019ll never make a decision. Over the last year, I\u2019ve gained a healthy respect for the challenges ahead of us, moving my natural tendency of optimism a few inches closer to paranoia. I think this will serve us well on this next stage of our journey.\n For me, the hardest part of this was realizing that the optimal balance between optimism and realism differs depending on the situation; what works when facing investors doesn\u2019t work when recruiting, and these two situations differ significantly to the balance you need to hold internally.", "posttime": "2020-10-29 10:26:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u521b\u4e1a,\u957f\u5bff,running,\u52a8\u673a", "title": "\u4ece\u7ecf\u8425\u957f\u5bff\u521b\u4e1a\u516c\u53f8\u4e2d\u5b66\u5230\u7684\u4e1c\u897f", "title_en": "Learnings from Running a Longevity Startup", "transed": 1, "url": "https://www.celinehh.com/year-1-learnings", "via": "", "real_tags": ["\u521b\u4e1a", "\u957f\u5bff", "running", "\u52a8\u673a"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1031869, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u201c\u9ed1\u5ba2\u65b0\u95fb\u201d(Hacker News)\u7ecf\u5e38\u91cd\u590d\u51fa\u73b0\u7684\u4e00\u6761\u4e3b\u6253\u65b0\u95fb\u662f\u5173\u4e8e\u4e2a\u4eba\u7535\u8111\u7684\u5486\u54ee\uff1a\u73b0\u4ee3\u7535\u8111\u90fd\u662f\u9ed1\u5323\u5b50\uff0c\u9501\u5f97\u592a\u7d27\u4e86\u30021\u6211\u4eec\u6e34\u671b\u6211\u4eec\u7684\u53f0\u5f0f\u8ba1\u7b97\u673a\uff0c21\u4e16\u7eaa\u521d\u7684\u8ba1\u7b97\u6a21\u5f0f\uff0c\u6211\u4eec\u60f3\u8981\u593a\u56de\u5bf9\u6211\u4eec\u6570\u636e\u7684\u63a7\u5236\u6743\u3002\n\u6211\u975e\u5e38\u8d5e\u540c\u8fd9\u79cd\u89c2\u70b9\u3002\u5728\u8fc7\u53bb\u7684\u4e94\u5e74\u91cc\uff0c\u6211\u4e00\u76f4\u5728\u72ec\u5bb6\u8fd0\u884cArch Linux\u3002\u6211\u559c\u6b2221\u4e16\u7eaa\u521d\u7684\u4e2a\u4eba\u7535\u8111\u98ce\u683c\uff1a\u4ee5\u6587\u672c\u4e3a\u4e3b\u7684\u754c\u9762\uff0c\u6587\u5b57\u800c\u4e0d\u662f\u56fe\u6807\uff0c\u5230\u5904\u90fd\u662f\u7edf\u4e00\u7684\u952e\u76d8\u5feb\u6377\u952e\u3002\u6211\u51e0\u4e4e\u6240\u6709\u7684\u8ba1\u7b97\u90fd\u662f\u5728emacs\u4e2d\u5b8c\u6210\u7684\u3002\u5b83\u529f\u80fd\u4e30\u5bcc\uff0c\u4efb\u4f55\u4ea7\u54c1\u7ecf\u7406\u90fd\u4e0d\u4f1a\u6539\u53d8\u4f53\u9a8c\u3001\u754c\u9762\u6216\u5feb\u6377\u65b9\u5f0f\u3002\u6211\u7684\u5de5\u4f5c\u7a7a\u95f4\u8ba9\u6211\u53d8\u5f97\u5f88\u5feb\u3002\u4e0e\u8bb8\u591a\u73b0\u4ee3\u8f6f\u4ef6\u76f8\u53cd\uff0cemacs\u4f1a\u5373\u65f6\u54cd\u5e94\u6211\u7684\u6309\u952e\u3002\u6bcf\u4e00\u4e2a\u52a8\u4f5c\u90fd\u6709\u7acb\u7aff\u89c1\u5f71\u7684\u6548\u679c\uff0c\u5728\u9875\u9762\u4e0a\u6e05\u6670\uff0c\u6ca1\u6709\u540e\u53f0\u6d41\u7a0b\u7684\u6b67\u4e49\u3002\u8fd9\u662f\u975e\u5e38\u4ee4\u4eba\u6ee1\u610f\u7684\u3002\u6211\u4f1a\u5c06\u8fd9\u79cd\u8ba1\u7b97\u73af\u5883\u63cf\u8ff0\u4e3a\u6253\u5b57\u673a\u7684\u7cbe\u795e\u540e\u88d4\uff1a\u5c31\u5176\u672c\u8eab\u800c\u8a00\uff0c\u5b83\u662f\u4e00\u53f0\u611a\u8822\u7684\u673a\u5668\uff0c\u4f46\u5f53\u4f60\u6307\u6325\u5b83\u65f6\uff0c\u5b83\u5c31\u53d8\u6210\u4e86\u4f60\u7684\u5f3a\u5927\u5ef6\u4f38\u3002\u7528\u6237\u4f53\u9a8c\u4f53\u73b0\u5728\u901f\u5ea6\u3001\u6d41\u7545\u6027\u3001\u53ef\u9760\u6027\u7b49\u65b9\u9762\u3002\n\u53e6\u4e00\u65b9\u9762\uff0c\u4f60\u6709iPhone\u548ciPad\u3002\u8fd9\u4e9b\u4e0d\u662f\u60a8\u6307\u6325\u7684\u673a\u5668-\u76f8\u53cd\uff0c\u60a8\u53ef\u80fd\u4f1a\u4e89\u8fa9\u8bf4\u5b83\u4eec\u7684\u6240\u6709\u901a\u77e5\u90fd\u6307\u6325\u60a8\u3002\u6709\u4e86\u89e6\u6478\u754c\u9762\u3001\u9762\u90e8\u8bc6\u522b\u548c\u8bed\u97f3\u63a7\u5236\uff0c\u8fd9\u4e9b\u673a\u5668\u5c31\u53ef\u4ee5\u4e0e\u4f60\u878d\u5408\u5728\u4e00\u8d77\u3002\u5b83\u4e0d\u662f\u6210\u4e3a\u4f60\u7684\u5ef6\u4f38\uff0c\u800c\u662f\u6210\u4e3a\u4f60\u7684\u4e00\u90e8\u5206\u3002\u5b83\u4e0d\u662f\u7531\u4f60\u6765\u6307\u6325\uff0c\u800c\u662f\u8ba9\u4f60\u6765\u9884\u77e5\u4f60\u7684\u547d\u4ee4\u3002\u6570\u636e\u5728\u54ea\u91cc\uff1f\u5b83\u600e\u9ebd\u5de5\u4f5c?\u3002\u8c01\u77e5\u9053\u5462\u3002\u5b83\u4eec\u5b8c\u5168\u662f\u9ed1\u5323\u5b50\uff0c\u6709\u6548\u5730\u4e0e\u9b54\u672f\u96be\u4ee5\u533a\u5206\uff0c\u800c\u60a8\u7684Linux\u684c\u9762\u662f\u4e00\u53f0\u53efDIYABLE\u7684\u7b80\u5355\u673a\u5668\u30022\u4e2a\u3002\n\u8bb8\u591a\u5f53\u4ee3\u4f5c\u5bb6\u8ba4\u4e3a\u4e2a\u4eba\u8ba1\u7b97\u662f\u4e00\u79cd\u9010\u6e10\u6f14\u53d8\u7684\u8303\u4f8b\u3002\u6211\u4e0d\u540c\u610f\uff1a\u6211\u8ba4\u4e3a\u4e2a\u4eba\u8ba1\u7b97\u673a\u6709\u4e24\u79cd\u622a\u7136\u4e0d\u540c\u7684\u6a21\u5f0f\uff0c\u53cd\u6620\u4e86\u622a\u7136\u4e0d\u540c\u7684\u613f\u671b\u3002\n\u5728\u8fd9\u4e24\u8005\u4e4b\u95f4\u7684\u7a7a\u95f4\u91cc\u5b58\u5728\u7740\u5927\u91cf\u7684\u8bbe\u5907\u3002Android\u624b\u673a\u8bd5\u56fe\u8ba9\u4f60\u91cd\u65b0\u63a7\u5236\u4f60\u7684\u8bbe\u5907\uff0c\u8fd9\u6837\u5b83\u4eec\u5c31\u5fc5\u7136\u4f1a\u963b\u6b62\u81ea\u5df1\u771f\u6b63\u6210\u4e3a\u4f60\u7684\u4e00\u90e8\u5206\u3002\u73b0\u4ee3\u7248\u672c\u7684OS X\uff0c\u5e26\u6709\u89e6\u6478\u680f\u3001Siri\uff0c\u5e76\u96c6\u6210\u5230\u6240\u6709\u5176\u4ed6\u82f9\u679c\u8bbe\u5907\u4e2d\uff0c\u5f00\u59cb\u5b9e\u73b0\u4ece\u81ea\u6211\u5ef6\u4f38\u5230\u6210\u4e3a\u81ea\u6211\u4e00\u90e8\u5206\u7684\u98de\u8dc3\u3002\n\u4f5c\u4e3a\u4e00\u79cd\u6d41\u6d3e\uff0c\u4e2a\u4eba\u8ba1\u7b97\u7684\u5486\u54ee\u6765\u81ea\u4e8e\u6b63\u786e\u7684\u89c2\u70b9\uff0c\u5373\u8fd9\u4e9b\u90fd\u662f\u4e2a\u4eba\u8ba1\u7b97\u7684\u5f62\u5f0f\uff0c\u4f46\u5b83\u6ca1\u6709\u8ba4\u8bc6\u5230\uff0c\u5728\u8fd9\u4e2a\u5e7f\u6cdb\u7684\u4fdd\u62a4\u4f1e\u4e2d\uff0c\u6211\u4eec\u770b\u5230\u51fa\u73b0\u4e86\u5728\u610f\u56fe\u548c\u4eba\u7c7b\u613f\u671b\u65b9\u9762\u90fd\u4e0d\u540c\u7684\u8303\u4f8b\u3002\u8fd9\u5e76\u4e0d\u662f\u8bf4\u4e00\u7c7b\u8bbe\u5907\u6b63\u5728\u53d6\u4ee3\u53e6\u4e00\u7c7b\u8bbe\u5907\u3002\u5b83\u4eec\u4ece\u6839\u672c\u4e0a\u662f\u4e0d\u540c\u7684\uff0c\u5176\u4e2d\u4e00\u79cd\u6a21\u5f0f\u5728\u53e6\u4e00\u79cd\u6a21\u5f0f\u4e0d\u80fd\u6ee1\u8db3\u6d88\u8d39\u8005\u9700\u6c42\u7684\u5730\u65b9\u53d6\u5f97\u4e86\u6210\u529f\u3002\u7ec8\u7aef\u4ece\u672a\u6ee1\u8db3\u90a3\u4e9b\u60f3\u8981\u4e9a\u9a6c\u900aAlexa\u7684\u4eba\u7684\u9700\u6c42\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\n\u6211\u4f4f\u5728\u4e2d\u95f4\u5730\u5e26\u3002\u6211\u6109\u5feb\u5730\u60f3\u8c61\u7740\u8fd9\u6837\u4e00\u4e2a\u4e16\u754c\uff1a\u6211\u7684Apple Watch\u76d1\u6d4b\u6211\u7684\u8840\u7cd6\u548c\u8840\u6c27\uff0c\u6211\u7684\u201c\u516b\u7720\u201d\u91cf\u5316\u6211\u7684\u4f11\u606f\uff0c\u6211\u5728\u5de8\u5927\u7684\u89e6\u6478\u5c4f\u4e0a\u6807\u8bb0\u6587\u6863\uff0c\u4f46\u6211\u5750\u5728\u4e00\u4e2a\u7b28\u91cd\u7684IBM\u952e\u76d8\u4e0a\uff0c\u5728\u4e00\u4e2a20\u5e74\u6765\u6ca1\u6709\u6539\u53d8\u7684\u7ec8\u7aef\u4e0a\u5199\u4ee3\u7801\u548c\u535a\u5ba2\u6587\u7ae0\u3002\u867d\u7136\u4f60\u7684iPhone\u53ef\u80fd\u4f1a\u901a\u8fc7\u91cf\u5316\u548c\u9884\u6d4b\u4f60\u7684\u6bcf\u4e00\u9879\u9700\u6c42\u6765\u4e0e\u4f60\u7684\u5927\u8111\u878d\u5408\uff0c\u800c\u6211\u7684\u7ec8\u7aef\u5219\u901a\u8fc7\u5feb\u901f\u3001\u7a33\u5b9a\u548c\u59cb\u7ec8\u6b63\u786e\u7684\u65b9\u5f0f\u4e0e\u6211\u7684\u601d\u7ef4\u878d\u5408\u5728\u4e00\u8d77\u3002\u6bcf\u4e2a\u4eba\u90fd\u6709\u81ea\u5df1\u7684\u4f4d\u7f6e\uff0c\u6211\u6c38\u8fdc\u4e0d\u4f1a\u7528\u5176\u4e2d\u4e00\u4e2a\u6765\u4ea4\u6362\u53e6\u4e00\u4e2a\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u7684\u7075\u611f\u6765\u81ea\u4e8e\u6700\u8fd1\u5728\u9ed1\u5ba2\u65b0\u95fb\u4e0a\u7684\u4e00\u7bc7\u70ed\u95e8\u6587\u7ae0\uff0c\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u4f5c\u8005\u6b63\u5728\u8ba4\u771f\u8003\u8651\u91cd\u8fd4\u53f0\u5f0f\u7535\u8111\u3002--\u21a9\n\u5bf9\u6211\u6765\u8bf4\uff0cLinux\u684c\u9762\u51e0\u4e4e\u66f4\u50cf\u662f\u4e00\u53f0\u6253\u5b57\u673a\uff0c\u800c\u4e0d\u662fiPhone\u3002\u6211\u53ef\u4ee5\u5077\u770b\u91cc\u9762\uff0c\u4e86\u89e3\u5927\u591a\u6570\u6280\u672f\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u6211\u53ef\u4ee5\u8c03\u8bd5\u5b83\uff0c\u4ea4\u6362\u7ec4\u4ef6\uff0c\u7b49\u7b49\u3002\u8fd9\u5c31\u50cf\u4e00\u4e2a\u6760\u6746\u548c\u9f7f\u8f6e\u7ec4\u6210\u7684\u673a\u5236\uff1a\u590d\u6742\uff0c\u4e5f\u8bb8\uff0c\u4f46\u53ef\u4ee5\u7406\u89e3\uff0c\u6709\u53ef\u80fd\u8fdb\u884c\u6df1\u5165\u7684\u63a8\u7406\u3002IPhone\u5728\u6240\u6709\u8fd9\u4e9b\u65b9\u9762\u90fd\u662f\u4e0d\u53ef\u83b7\u5f97\u7684\uff1b\u5b83\u8fd8\u53ef\u4ee5\u662f\u4e00\u6839\u9b54\u6756\u3002\u8fd9\u4e0d\u4e00\u5b9a\u662f\u574f\u4e8b\uff0c\u53ea\u662f\u8fd9\u4e9b\u5bf9\u8c61\u7684\u7c7b\u522b\u975e\u5e38\u4e0d\u540c\u3002\u201c\u21a9", "note_en": "A frequently recurring staple of Hacker News is the  personal computing rant: modern computers are black boxes, far too locked down.  1 We long for our desktop computers, the early-2000s computing paradigm, and we want to take back control of our data.\n  I sympathize greatly with this view. For the past five years, I have exclusively run Arch Linux. I love the early-2000s style of personal computing: text-heavy interfaces, words rather than icons, uniform keyboard shortcuts everywhere. I do nearly all my computing in emacs. It is feature rich, and no product manager is ever going to change the experience, interface, or shortcuts. My workspace allows me to be  fast. Contrary to much modern software, emacs responds instantaneously to my keystrokes. Every action has an immediate effect, clear on the page, with no background process ambiguity. This is enormously satisfying. I would characterize this computing environment as a spiritual descendant of the typewriter: on its own, it is a dumb machine, but when you command it, it becomes a powerful extension of you. The user experience is given by speed, smoothness, reliability, and nothing else.\n  On the other hand, you\u2019ve got iPhones and iPads. These are not machines that you command \u2013 on the contrary, you might argue that all their notifications command you. With touch interfaces, facial recognition, and voice control, these are machines that are meant to merge with you. Instead of becoming an  extension of you, it becomes  part of you. Instead of you commanding it, it is meant to anticipate your commands. Where is the data? How does it work? Who knows. They\u2019re total black boxes, effectively indistinguishable from magic, whereas your Linux Desktop is a DIYable simple machine.  2\n  Many contemporary writers think of personal computing as one paradigm that is gradually evolving. I disagree: I think there are two, deeply different paradigms of personal computing, reflecting deeply different desires.\n    Plenty of devices exist in the space in-between. Android phones try to give you some control back over your device, by which they necessarily preclude themselves from truly being  part of you. Modern versions of OS X, with the touchbar, Siri, and integrations into all your other Apple devices, are starting to make the leap from extending the self to being part of the self.\n  As a genre, the personal computing rant comes out of the correct view that these are all forms of personal computing, but it fails to recognize that within this broad umbrella, we\u2019ve seen paradigms arise that differ in both intent and the human desire they\u2019re meant to meet. It\u2019s not that one class of devices is replacing the other. They are fundamentally different, and one paradigm succeeds where the other falls short of meeting the consumers\u2019 needs. The terminal never met the needs of those who want Amazon Alexa, and vice-versa.\n  I live in the in-between. I happily imagine a world where my Apple Watch monitors my glucose and blood oxygen, my Eight Sleep quantifies my rest, I mark up documents on giant touchscreens, but I sit on a clacky IBM keyboard to write code and blog posts in a terminal that hasn\u2019t changed in twenty years. While your iPhone might meld with your mind by quantifying and anticipating your every need, my terminal melds with my mind by being fast, constant, and  always correct. Each has its place, and I would never trade one for the other.\n      This essay was inspired by a recent hit on Hacker News, in which the  Author is Seriously Considering Going Back to Desktop Computers.\u00a0 \u21a9\n  To me, a Linux desktop is almost more like a typewriter than it is like an iPhone. I can peek inside and understand how most of the tech works. I can debug it, swap out components, and so on. It\u2019s like a mechanism of levers and cogs: complicated, perhaps, but understandable and possible to reason deeply about. An iPhone is inaccessible in all these respects; it might as well be a magic wand. That\u2019s not necessarily a bad thing, these are just very different classes of object.\u00a0 \u21a9", "posttime": "2020-10-29 10:25:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e2a\u4eba,personal,\u8bbe\u5907", "title": "\u4e2a\u4eba\u8ba1\u7b97\u7684\u4e24\u79cd\u8303\u5f0f", "title_en": "Two Paradigms of Personal Computing", "transed": 1, "url": "https://jayriverlong.github.io/2020/10/27/machines.html", "via": "", "real_tags": ["\u4e2a\u4eba", "personal", "\u8bbe\u5907"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1031868, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u521b\u9020\r\u5e10\u76ee", "note_en": "Create\r\t\t\t\t\t\t\t\t\t\t\tAccount", "posttime": "2020-10-29 10:25:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6c\u5316,ocean,\u521b\u9020", "title": "\u4e16\u754c\u4e0a\u7b2c\u4e00\u4e2a\u6d77\u6d0b\u6df7\u5408\u5e73\u53f0\u5c06\u6f6e\u6c50\u6ce2\u6d6a\u8f6c\u5316\u4e3a\u80fd\u91cf", "title_en": "World\u2019s First Ocean Hybrid Platform Converts Tidal Waves into Energy", "transed": 1, "url": "https://spectrum.ieee.org/news-from-around-ieee/the-institute/ieee-member-news/worlds-first-ocean-hybrid-platform-converts-tidal-waves-into-energy", "via": "", "real_tags": ["\u8f6c\u5316", "ocean", "\u521b\u9020"]}]